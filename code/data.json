[
    {
        "title": "Perf telemetry for completions",
        "description": "Today, completion is computed by asking all providers and then waiting for all before returning a result. This means the slow provider defines the overall completions performance. We should measure if this is a real issue and iff so react",
        "createdAt": "2020-10-22 13:36:35",
        "state": "open",
        "number": 109167
    },
    {
        "title": "Send `vscode.workspace.onDidCreateFiles` events for folders",
        "description": "It does fire for folder on move and delete.  According to @bpasero the reason lies here: https://github.com/microsoft/vscode/blob/60d96d72a560f0f02d67ef9d438a8a7ed534ec4a/src/vs/workbench/contrib/files/browser/fileActions.ts#L897-L897\r\n\r\nThe code goes directly to the file service.\r\n\r\nSince we correctly report move and delete for folders I think we should report create as well.",
        "createdAt": "2020-10-21 13:47:11",
        "state": "open",
        "number": 109088
    },
    {
        "title": "Views with focus should be treated the same as hover",
        "description": "When you hover over a view, its title actions become visible. But when the view is just focused (but the mouse isn't hovering over it), the actions hide. \r\n\r\nI find this especially problematic for views with dropdown (terminal, problems, etc).\r\n\r\n![image](https://user-images.githubusercontent.com/641685/96680905-5d5cd180-1344-11eb-921c-2cf154e4aa08.png)\r\n",
        "createdAt": "2020-10-21 06:23:23",
        "state": "open",
        "number": 109061
    },
    {
        "title": "Allow horizontal scrolling WITH word wrapping enabled!",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nWhen working with files with deep intendations, it's very useful if scope is placed near the left side of viewport, which is kind of standard behaviour without word wrapping. Word wrapping is also very useful feature, but as soon you enable it, you're sticked to the first column and forced to watch all the intendations and actually work in a small portion of viewport. Why it didn't allow to scroll to the real last column or whatever, while still wrapping to viewport? Isn't word wrapping virtual?\r\nI thought editor.wordWrap = bounded with editor.wordWrapColumn = 1000 will enable this kind of behaviour. But they're not! What's the point in \"bounded\" then? Just to fit some guide while outsizing viewport? Bruh. \r\nMaybe I do something wrong or can't find the right extension (and I've searched a lot)?",
        "createdAt": "2020-10-21 01:36:00",
        "state": "open",
        "number": 109051
    },
    {
        "title": "Move tab (left|right)",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIt would be nice if we could right click on a documents tab, and have the option to move it all the way to the left or right, similar to Firefox.\r\n",
        "createdAt": "2020-10-20 15:39:42",
        "state": "open",
        "number": 109027
    },
    {
        "title": "A command to open a workspace and navigate to a file in it",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nIt would be convenient to have a command that opens a workspace and navigates to a specific file in that workspace, all in a new window.\r\n\r\n`vscode.open` only opens a file, but does not change the workspace.\r\n\r\n`vscode.openFolder` opens the workspace, but does not open files in that workspace.\r\n\r\nI cannot just combine them, because `vscode.openFolder` (re)starts the extension host.",
        "createdAt": "2020-10-20 11:39:14",
        "state": "open",
        "number": 109009
    },
    {
        "title": "A keybinding when-clause for if the cursor is on a followable link",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\nI'd like to bind, for example, cmd-enter to go-to-definition, but have it conditional on having the cursor on a link that has a definition to goto.\r\n\r\nI've searched docs and issues and don't see a way to get this (known) context?\r\n",
        "createdAt": "2020-10-19 18:12:27",
        "state": "open",
        "number": 108948
    },
    {
        "title": "Allow file system provider schemes to participate in history even after close",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nI work on a team developing an extension that implements a FileSystemProvider and a DocumentSymbolProvider.\r\n\r\nIf the user opens file1 in preview mode (italic tab label), then used F12 when on a symbol defined in file2, this correctly loads file2 in the same tab. But the 'Back' option on the 'Go' menu doesn't get enabled.\r\n\r\nI think it is caused by this code executing when file2 replaces file1 in the preview tab:\r\n\r\nhttps://github.com/microsoft/vscode/blob/0ea7e1ca9425b3814c9d0a3c0aa719daad92a53a/src/vs/workbench/services/history/browser/history.ts#L508-L512\r\n\r\nin combination with this logic which didn't turn the 'Go to Definition' history entry into one that points to a ResourceEditorInput because it only does that for a limited range of uri schemes:\r\n\r\nhttps://github.com/microsoft/vscode/blob/0ea7e1ca9425b3814c9d0a3c0aa719daad92a53a/src/vs/workbench/services/history/browser/history.ts#L518-L527\r\n\r\n@bpasero is this your area?\r\n\r\nI tried to devise a repro using fsprovider-sample by adding file2.ts to the workspace, exporting a function from it, then referencing it from file.ts. But the 'Initializing JS/TS language features' message never cleared, so I assume JS/TS language support can't handle files provided by the MemFS FileSystemProvider.\r\n\r\nVS Code version: Code 1.50.1 (d2e414d9e4239a252d1ab117bd7067f125afd80a, 2020-10-13T15:06:15.712Z)\r\nOS version: Windows_NT x64 10.0.18363\r\n\r\n\r\n",
        "createdAt": "2020-10-19 12:12:55",
        "state": "open",
        "number": 108935
    },
    {
        "title": "Finalize FoldingRangeProvider.onDidChangeFoldingRanges",
        "description": "For #99914, 'FoldingRangeProvider.onDidChangeFoldingRanges' was proposed as new API.\r\n\r\n```\r\n\texport interface FoldingRangeProvider {\r\n\r\n\t\t/**\r\n\t\t * An optional event to signal that the folding ranges from this provider have changed.\r\n\t\t */\r\n\t\tonDidChangeFoldingRanges?: Event<void>;\r\n\r\n\t\t/**\r\n\t\t * Returns a list of folding ranges or null and undefined if the provider\r\n\t\t * does not want to participate or was cancelled.\r\n\t\t * @param document The document in which the command was invoked.\r\n\t\t * @param context Additional context information (for future use)\r\n\t\t * @param token A cancellation token.\r\n\t\t */\r\n\t\tprovideFoldingRanges(document: TextDocument, context: FoldingContext, token: CancellationToken): ProviderResult<FoldingRange[]>;\r\n\t}\r\n```\r\n\r\nThis issue tracks the finalization of that API.\r\n\r\n\r\n",
        "createdAt": "2020-10-19 11:09:27",
        "state": "open",
        "number": 108929
    },
    {
        "title": "Multi root workspace - Variable for the current file's workspace directory",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIt might be useful to have a **variable** that resolves to the **current file's workspace directory** (in contrast to `${workspaceFolder}`, that resolves to the **launch/task configuration's workspace folder**).\r\n\r\nThis would make it easier to **share launch and task configurations** among all workspaces of a multi root workspace.\r\n\r\nThe variable could for example be called `${workspaceFolder:file}` or `${fileWorkspaceFolder}`.\r\n\r\n### Example:\r\nConsider a multi root workspace for PowerShell development with the following folders/files:\r\n```\r\nCommon \\ .vscode \\ tasks.json\r\nModule_A \\ Source \\ My_Script.ps1\r\nModule_B \\ Source \\ Main \\ Another_Script.ps1\r\n```\r\n\r\nWhen I run a task from the **'Common'** workspace on the `My_Script.ps1` file, `${workspaceFolder}` resolves to `Common\\` and there is no (automatic) way to access the **files's workspace folder** `Module_A\\`.",
        "createdAt": "2020-10-18 22:32:00",
        "state": "open",
        "number": 108907
    },
    {
        "title": "Perf telemetry for completions",
        "description": "Today, completion is computed by asking all providers and then waiting for all before returning a result. This means the slow provider defines the overall completions performance. We should measure if this is a real issue and iff so react",
        "createdAt": "2020-10-22 13:36:35",
        "state": "open",
        "number": 109167
    },
    {
        "title": "Send `vscode.workspace.onDidCreateFiles` events for folders",
        "description": "It does fire for folder on move and delete.  According to @bpasero the reason lies here: https://github.com/microsoft/vscode/blob/60d96d72a560f0f02d67ef9d438a8a7ed534ec4a/src/vs/workbench/contrib/files/browser/fileActions.ts#L897-L897\r\n\r\nThe code goes directly to the file service.\r\n\r\nSince we correctly report move and delete for folders I think we should report create as well.",
        "createdAt": "2020-10-21 13:47:11",
        "state": "open",
        "number": 109088
    },
    {
        "title": "Views with focus should be treated the same as hover",
        "description": "When you hover over a view, its title actions become visible. But when the view is just focused (but the mouse isn't hovering over it), the actions hide. \r\n\r\nI find this especially problematic for views with dropdown (terminal, problems, etc).\r\n\r\n![image](https://user-images.githubusercontent.com/641685/96680905-5d5cd180-1344-11eb-921c-2cf154e4aa08.png)\r\n",
        "createdAt": "2020-10-21 06:23:23",
        "state": "open",
        "number": 109061
    },
    {
        "title": "Allow horizontal scrolling WITH word wrapping enabled!",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nWhen working with files with deep intendations, it's very useful if scope is placed near the left side of viewport, which is kind of standard behaviour without word wrapping. Word wrapping is also very useful feature, but as soon you enable it, you're sticked to the first column and forced to watch all the intendations and actually work in a small portion of viewport. Why it didn't allow to scroll to the real last column or whatever, while still wrapping to viewport? Isn't word wrapping virtual?\r\nI thought editor.wordWrap = bounded with editor.wordWrapColumn = 1000 will enable this kind of behaviour. But they're not! What's the point in \"bounded\" then? Just to fit some guide while outsizing viewport? Bruh. \r\nMaybe I do something wrong or can't find the right extension (and I've searched a lot)?",
        "createdAt": "2020-10-21 01:36:00",
        "state": "open",
        "number": 109051
    },
    {
        "title": "Move tab (left|right)",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIt would be nice if we could right click on a documents tab, and have the option to move it all the way to the left or right, similar to Firefox.\r\n",
        "createdAt": "2020-10-20 15:39:42",
        "state": "open",
        "number": 109027
    },
    {
        "title": "A command to open a workspace and navigate to a file in it",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nIt would be convenient to have a command that opens a workspace and navigates to a specific file in that workspace, all in a new window.\r\n\r\n`vscode.open` only opens a file, but does not change the workspace.\r\n\r\n`vscode.openFolder` opens the workspace, but does not open files in that workspace.\r\n\r\nI cannot just combine them, because `vscode.openFolder` (re)starts the extension host.",
        "createdAt": "2020-10-20 11:39:14",
        "state": "open",
        "number": 109009
    },
    {
        "title": "A keybinding when-clause for if the cursor is on a followable link",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\nI'd like to bind, for example, cmd-enter to go-to-definition, but have it conditional on having the cursor on a link that has a definition to goto.\r\n\r\nI've searched docs and issues and don't see a way to get this (known) context?\r\n",
        "createdAt": "2020-10-19 18:12:27",
        "state": "open",
        "number": 108948
    },
    {
        "title": "Allow file system provider schemes to participate in history even after close",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nI work on a team developing an extension that implements a FileSystemProvider and a DocumentSymbolProvider.\r\n\r\nIf the user opens file1 in preview mode (italic tab label), then used F12 when on a symbol defined in file2, this correctly loads file2 in the same tab. But the 'Back' option on the 'Go' menu doesn't get enabled.\r\n\r\nI think it is caused by this code executing when file2 replaces file1 in the preview tab:\r\n\r\nhttps://github.com/microsoft/vscode/blob/0ea7e1ca9425b3814c9d0a3c0aa719daad92a53a/src/vs/workbench/services/history/browser/history.ts#L508-L512\r\n\r\nin combination with this logic which didn't turn the 'Go to Definition' history entry into one that points to a ResourceEditorInput because it only does that for a limited range of uri schemes:\r\n\r\nhttps://github.com/microsoft/vscode/blob/0ea7e1ca9425b3814c9d0a3c0aa719daad92a53a/src/vs/workbench/services/history/browser/history.ts#L518-L527\r\n\r\n@bpasero is this your area?\r\n\r\nI tried to devise a repro using fsprovider-sample by adding file2.ts to the workspace, exporting a function from it, then referencing it from file.ts. But the 'Initializing JS/TS language features' message never cleared, so I assume JS/TS language support can't handle files provided by the MemFS FileSystemProvider.\r\n\r\nVS Code version: Code 1.50.1 (d2e414d9e4239a252d1ab117bd7067f125afd80a, 2020-10-13T15:06:15.712Z)\r\nOS version: Windows_NT x64 10.0.18363\r\n\r\n\r\n",
        "createdAt": "2020-10-19 12:12:55",
        "state": "open",
        "number": 108935
    },
    {
        "title": "Finalize FoldingRangeProvider.onDidChangeFoldingRanges",
        "description": "For #99914, 'FoldingRangeProvider.onDidChangeFoldingRanges' was proposed as new API.\r\n\r\n```\r\n\texport interface FoldingRangeProvider {\r\n\r\n\t\t/**\r\n\t\t * An optional event to signal that the folding ranges from this provider have changed.\r\n\t\t */\r\n\t\tonDidChangeFoldingRanges?: Event<void>;\r\n\r\n\t\t/**\r\n\t\t * Returns a list of folding ranges or null and undefined if the provider\r\n\t\t * does not want to participate or was cancelled.\r\n\t\t * @param document The document in which the command was invoked.\r\n\t\t * @param context Additional context information (for future use)\r\n\t\t * @param token A cancellation token.\r\n\t\t */\r\n\t\tprovideFoldingRanges(document: TextDocument, context: FoldingContext, token: CancellationToken): ProviderResult<FoldingRange[]>;\r\n\t}\r\n```\r\n\r\nThis issue tracks the finalization of that API.\r\n\r\n\r\n",
        "createdAt": "2020-10-19 11:09:27",
        "state": "open",
        "number": 108929
    },
    {
        "title": "Multi root workspace - Variable for the current file's workspace directory",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIt might be useful to have a **variable** that resolves to the **current file's workspace directory** (in contrast to `${workspaceFolder}`, that resolves to the **launch/task configuration's workspace folder**).\r\n\r\nThis would make it easier to **share launch and task configurations** among all workspaces of a multi root workspace.\r\n\r\nThe variable could for example be called `${workspaceFolder:file}` or `${fileWorkspaceFolder}`.\r\n\r\n### Example:\r\nConsider a multi root workspace for PowerShell development with the following folders/files:\r\n```\r\nCommon \\ .vscode \\ tasks.json\r\nModule_A \\ Source \\ My_Script.ps1\r\nModule_B \\ Source \\ Main \\ Another_Script.ps1\r\n```\r\n\r\nWhen I run a task from the **'Common'** workspace on the `My_Script.ps1` file, `${workspaceFolder}` resolves to `Common\\` and there is no (automatic) way to access the **files's workspace folder** `Module_A\\`.",
        "createdAt": "2020-10-18 22:32:00",
        "state": "open",
        "number": 108907
    },
    {
        "title": "Picking a different typescript.tsdk from a list / use in a multi-root workspace with yarn2 pnp",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\n\r\nHi,\r\n\r\n## Feature Request\r\n\r\nI was wondering if it would be possible to have multiple options under the \"Select Typescript version\" command palette entry.\r\n\r\nLooking here https://github.com/microsoft/vscode/issues/82119\r\nIt's mentioned that\r\n> In a multiroot workspace, we only load a single TS Server instance (not one per folder). That's why the setting is disabled in the per-folder settings.\r\n\r\nHowever what I'm looking for is not running multiple ts server instances at the same time\r\nJust the ability to pick one from a list of multiple entries.\r\nIn my case I'm using a multi-root workspace with 2 directories and want to be able to switch from one to the other.\r\n\r\nThere could be a couple of possible solutions to this\r\n1. in a multi-root vscode workspace, read in each of the workspace's settings.json files\r\nthen list each of the typescript.tsdk options as something that can be picked under the command palette\r\n\r\n2. Allow for a list to be passed to the typescript.tsdk setting, such as:\r\n\r\n```\r\n\"eslint.nodePath\": \".yarn/sdks\",\r\n\"typescript.tsdk\": [\"client/.yarn/sdks/typescript/lib\",\"server/.yarn/sdks/typescript/lib\"],\r\n\"typescript.enablePromptUseWorkspaceTsdk\": true\r\n```\r\n\r\nCurrently it's only possible to list 1 alternative by placing it within the actual code-workspace file\r\n\r\n## Example\r\n\r\nTo give an example where this might be useful\r\nI've recently been using Yarn 2 with PNP\r\nThere's a single code-workspace file with 2 directories sitting underneath, server and client.\r\nIn both directories I'm using typescript code\r\n\r\nSince typescript doesn't support pnp natively yet, one of the way around this is the use of a yarn typescript sdk plugin via\r\n```\r\nyarn dlx @yarnpkg/pnpify --sdk vscode\r\n```\r\nwhich installs\r\n  * https://github.com/yarnpkg/berry/tree/master/.yarn/sdks/typescript\r\n\r\ninto .yarn/sdks/typescript\r\n\r\nThen you point typescript.tsdk to the wrapper with something like\r\n```\r\n  \"search.exclude\": {\r\n    \"**/.yarn\": true,\r\n    \"**/.pnp.*\": true\r\n  },\r\n  \"eslint.nodePath\": \".yarn/sdks\",\r\n  \"typescript.tsdk\": \".yarn/sdks/typescript/lib\",\r\n  \"typescript.enablePromptUseWorkspaceTsdk\": true\r\n```\r\n\r\nThis is basically a small wrapper around tsc and the like so that it can handle yarn's pnp node resolution\r\nThe wrapper references the file generated by yarn: .pnp.js in the project directory.\r\n\r\nHowever where things get complicated is if you have 2 different directories each with they're own .pnp.js file\r\nsince you can only specify one of the typescript wrappers at a time.\r\n\r\nI did experiment with yarn's multi workspace setup which generates a single .pnp.js file at the top level\r\nThis does seem to fix the problem in one way, but fails when running webpack.\r\nwebpack has inbuilt pnp support but it doesn't seem to like yarn's multi workspace setup and pnp in combination at the same time\r\n",
        "createdAt": "2020-10-17 18:10:03",
        "state": "open",
        "number": 108866
    },
    {
        "title": "Customize links discovery/handling in Debug Console",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI see that from 1.49 onwards there's an API which allows for customization of links through `registerTerminalLinkProvider`, yet, using that API doesn't seem to have any effect on the `Debug Console`, so, this is a feature request to add the same support for the `Debug Console`.\r\n\r\nTo give some background on my use case, I'd like users to be able to open in a browser the results of a test-run by `Ctrl+Click` (both in the Debug Console and at the Terminal) -- the terminal seems to be customizable already, but links on the Debug Console seem to always open a new editor (and I couldn't find a way to customize it).\r\n\r\n-- It's printed by the related test framework as the contents below (and all of those should be opened in a browser):\r\n\r\n```\r\nOutput:  X:\\vscode-robot\\local_test\\output.xml\r\nLog:     X:\\vscode-robot\\local_test\\log.html\r\nReport:  X:\\vscode-robot\\local_test\\report.html\r\n```",
        "createdAt": "2020-10-17 11:30:56",
        "state": "open",
        "number": 108853
    },
    {
        "title": "Active indent guide scope improvement",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIn VSCode, as shown in the below screenshot, when placing the cursor on the **Line 87**, the **active indent guide scope** is its own level.\r\n![ActiveIndentGuid1](https://user-images.githubusercontent.com/19678455/96798980-8ffaed00-145e-11eb-92aa-d31549c77892.png)\r\nBut normally in this case,  what I would really be interested in is its **parent**'s scope. To do so in VSCode, I have to temporarily add  a new line in Line 87 \ud83d\ude1e \r\n![ActiveIndentGuid2](https://user-images.githubusercontent.com/19678455/96799009-a1dc9000-145e-11eb-9161-80bd5c489d66.png)\r\nThis is very inconvenient & tedious, particularly for a long document, I've to do it and undo quite a lot.\r\n\r\nBut I notice that **Azure Portal**\u2019s **Cosmos DB Data Explorer** & **OneDrive**'s **file editor** in a browser, both have the more desired behaviour as show below, unlike with VSCode, I don't need to add that new line. I believe both actually share the same engine with VSCode.\r\n* **Azure Portal**\u2019s **Cosmos DB Data Explorer** in a browser\r\n![ActiveIndentGuid3](https://user-images.githubusercontent.com/19678455/96799042-bcaf0480-145e-11eb-95a6-d8fc7fc47150.png)\r\n* **OneDrive**'s **file editor** in a browser\r\n![image](https://user-images.githubusercontent.com/19678455/96330066-e9ee6200-10ae-11eb-8cd0-e282385d9633.png)\r\n",
        "createdAt": "2020-10-17 06:32:59",
        "state": "open",
        "number": 108848
    },
    {
        "title": "Provide dedicated keyboard shortcuts for changing active stack frame",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIt seems the only way today to change the current stack frame using keyboard shortcuts is to bind the `workbench.debug.action.focusCallStackView` command to a key, and then to use the arrow keys/enter to move up and down the stack. Could we get dedicated keyboard shortcuts for moving up and down a frame to use 1 key instead of 3 to change a stack frame?\r\n",
        "createdAt": "2020-10-17 03:10:17",
        "state": "open",
        "number": 108844
    },
    {
        "title": "Custom Editors should have ability to use normal diff view",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nRight now, Custom Editors are used anytime in Code where the file is being referenced. This means that a diff for a file that uses a custom editor looks something like this:\r\n\r\n![image](https://user-images.githubusercontent.com/7715279/96310891-46318300-0fd6-11eb-8ba6-a85f4331890c.png)\r\n\r\nIt would be great if there was a way in the custom editor to be able to toggle between the webview or a standard file view when viewing the diff on a file that uses a custom editor.\r\n",
        "createdAt": "2020-10-16 21:38:10",
        "state": "open",
        "number": 108836
    },
    {
        "title": "Create an IExecutionService which should be the only bottleneck for resolving user shell env",
        "description": "Details: https://github.com/microsoft/vscode/issues/106537#issuecomment-710084252\r\n\r\n**Today:** The workbench depends on user env to be resolved. Resolving user env envolves spawning a shell and executing the user's init scripts. This can take long.\r\n\r\n**Ideally:** The user env is only required for specific features: opening terminals, spawning tasks, spawning extension host. Until it's resolved, many other features should actually work, ie explorer, editor, etc.",
        "createdAt": "2020-10-16 14:33:33",
        "state": "open",
        "number": 108804
    },
    {
        "title": "Re-run last launch command with state",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI would like to have a re-run last launch command like Eclipse's.  Similar to the re-run task command: https://github.com/microsoft/vscode/issues/25310\r\n\r\nWhen I'm running tests, the launch.json entry uses my current context - open file and line.  In the typical flow, I run a test, see that it fails, make a code change, and want to run the test again.  Right now I have to navigate back to the test and run from there.  If there was a re-run task command I could iterate while staying in the code I'm working on.",
        "createdAt": "2020-10-16 13:21:08",
        "state": "open",
        "number": 108799
    },
    {
        "title": "Add support for filtering in the output window",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nThe recent filter support for the debug console is amazing. Could you also make this available in the output as well because having the ability to filter would make it a lot easier to find information amongst walls of text in output.\r\n\r\n@misolori ",
        "createdAt": "2020-10-16 06:57:40",
        "state": "open",
        "number": 108776
    },
    {
        "title": "Tab characters are the wrong width with proportional fonts.",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\nVSCode uses spaces to render tab characters. To make a tab character wide enough to extend to the next tabstop, the width of the tab character is adjusted by changing the number of spaces used.\r\n\r\n![image](https://user-images.githubusercontent.com/4347930/96170246-5b80b180-0ef1-11eb-94c1-3051d29bb08c.png)\r\n\r\nWhen using proportional fonts, VSCode still uses spaces to render tab characters, with the same rules to determine the size of the tabs. The tab characters no longer properly extend to the next tabstop. **It becomes impossible to align text using tabs.**\r\n\r\n![image](https://user-images.githubusercontent.com/4347930/96170295-69cecd80-0ef1-11eb-944d-376217d6b560.png)\r\n\r\nIt's possible that this was an intentional design decision for the sake of efficiency, but I still think it's worth revisiting. I also wonder if a fix for this bug would make it any easier to implement other tricky formatting features such as Elastic Tabstops (#3932).\r\n\r\n---\r\n\r\n_(I'm reporting this here instead of in the Monaco repo, per the bug template there.)_\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.51.0-insider\r\n- OS Version: Test Playground (on Chrome 85 / Windows 10 1903)\r\n\r\nSteps to Reproduce:\r\n\r\n1. Change editor font family to a proportional font. (e.g. Arial)\r\n2. Attempt to align text using tab characters.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-10-15 20:41:32",
        "state": "open",
        "number": 108755
    },
    {
        "title": "\"Close All Editor Groups\" should not close pinned tabs",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nOpen multiple files\r\nPin any one tab \r\nOpen command pallete (Ctrl + Shift + P) \r\nselect Close All Editor Group option\r\n\r\n<b>Expected</b> - All tabs EXCEPT PINNED ones need to be closed.\r\n<b>Actual</b> - All tabs INCLUDING PINNED ones are being closed.\r\n\r\nVS Code version: Code 1.50.1 (d2e414d9e4239a252d1ab117bd7067f125afd80a, 2020-10-13T15:06:15.712Z)\r\nOS version: Windows_NT x64 10.0.19041\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-5600U CPU @ 2.60GHz (4 x 2594)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>opengl: enabled_on<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>vulkan: disabled_off<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|15.88GB (3.83GB free)|\r\n|Process Argv|--crash-reporter-id 35e7a4b8-82fe-400a-a0e4-8055d849ae5e|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (20)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nng-template|Ang|0.1001.0\r\natlascode|atl|2.8.3\r\nxml|Dot|2.5.1\r\ngitlens|eam|10.2.2\r\nprettier-vscode|esb|5.7.1\r\nvscode-firefox-debug|fir|2.9.1\r\nrest-client|hum|0.24.3\r\npowershell|ms-|2020.6.0\r\nvscode-typescript-tslint-plugin|ms-|1.2.3\r\ndebugger-for-chrome|msj|4.12.11\r\nvscode-boot-dev-pack|Piv|0.0.8\r\njava|red|0.68.0\r\nvscode-xml|red|0.13.0\r\nvscode-yaml|red|0.11.1\r\npartial-diff|ryu|1.4.1\r\ntodotasks|san|0.5.0\r\ncode-spell-checker|str|1.9.2\r\nvscodeintellicode|Vis|1.2.10\r\nvscode-java-debug|vsc|0.28.0\r\nvscode-java-pack|vsc|0.10.0\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-10-15 17:24:41",
        "state": "open",
        "number": 108751
    },
    {
        "title": "Quick way to navigate to a folder in the explorer (left side)",
        "description": "Say a key combo:  Cntrl+alt+G (go to folder)\r\nBrings a window start typing the path foo/bar/bar2/...\r\nAs the user types goes to a folder\r\n\r\nThis would allow the user to navigate to a folder quickly especially in large projects",
        "createdAt": "2020-10-15 14:31:38",
        "state": "open",
        "number": 108747
    },
    {
        "title": "Upload file (on save) using diff strategy",
        "description": "<!-- Please search for existing issues to avoid creating duplicates. -->\r\n\r\nFirst of all, thank you for this incredible tool. \r\n\r\nI use remote features every day to edit files on a server located 10000km (6250 miles) from my location and there are some big files (more than 1MB). When I modify them and ask to update their contents on the server, the VSCode takes a long time (>= 15s).\r\n\r\nI was thinking if it is possible to use a diff strategy to update the contents on the server (sending only the parts that have changed). Maybe to do equal to rsync tool.\r\n\r\nThank you.\r\n\r\n<!-- Describe the feature you'd like. -->\r\n",
        "createdAt": "2019-12-09 15:26:48",
        "state": "open",
        "number": 108732
    },
    {
        "title": "Remote-SSH: Support trash",
        "description": "<img width=\"208\" alt=\"Screen Shot 2019-10-31 at 10 15 06 PM\" src=\"https://user-images.githubusercontent.com/20842215/67997768-fd00eb80-fc2b-11e9-9d54-bfcbf705de51.png\">\r\nIssue Type: <b>Feature Request</b>\r\n\r\nOn my vscode remote-ssh (Ubuntu), I can only delete file permanently, which caused many troubles. Could vscode remote-ssh add features to remove file to trash?\r\n\r\nOn my local env, I can delete files to trash.\r\n\r\nVS Code version: Code 1.39.2 (6ab598523be7a800d7f3eb4d92d7ab9a66069390, 2019-10-15T15:33:00.827Z)\r\nOS version: Darwin x64 18.7.0\r\nRemote OS version: Linux x64 4.4.0-165-generic\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-11-01 02:12:47",
        "state": "open",
        "number": 108731
    },
    {
        "title": "Overwrite files after upload completed",
        "description": "When I save a document, it takes a few seconds to update on the remote server. While my file is being updated, on my frontend (`http://myfile.php `) I get different kinds of errors, like 404 or php warnings or errors related to missing file data.\r\n\r\nIs it possible to first update the file on a temp location and then replace the original file once the file has fully uploaded on the server?\r\n\r\nFor example, if I have had a file `/var/www/myfile.php`, and when I click save, it should first create a file `/tmp/myfile.php` and once the upload is complete, it moves from `/tmp/myfile.php` to `/var/www/myfile.php`\r\n\r\n\r\n\r\n",
        "createdAt": "2019-10-16 20:59:44",
        "state": "open",
        "number": 108730
    },
    {
        "title": "Git \"rebase onto selected\" support",
        "description": "Rebase the current branch onto another one selected from the list.",
        "createdAt": "2020-10-15 09:58:02",
        "state": "open",
        "number": 108725
    },
    {
        "title": "API to trigger a refresh of the OUTLINE (DocumentSymbols)",
        "description": "I recreate the issue https://github.com/Microsoft/vscode/issues/71454 because it was closed.\r\n\r\nMy need is that I have a XML Language Server which supports settings for configuring symbols (like show/hide XML attributes, XML text nodes in the outline). When those settings are saved, I would like to refresh the outline.\r\n\r\nIf vscode could provide a command to refresh this outline, it should be great!\r\n\r\nThanks!",
        "createdAt": "2020-10-15 08:59:19",
        "state": "open",
        "number": 108722
    },
    {
        "title": "Pinned tabs: allow for themeable colours for tabs that are pinned",
        "description": "Today there is no theme color to pick for pinned tabs. We could introduce new colors for tabs that are pinned. One challenge is that we have a lot of colors per tab (foreground, background, hover, inactive, focussed), so this would not just be 1-2 new colors but a lot potentially.\r\n\r\n//cc @chrisdias ",
        "createdAt": "2020-10-14 16:08:36",
        "state": "open",
        "number": 108667
    },
    {
        "title": "Extensions: Support extension installation/activation policies",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nAzure Data Studio has an \"Extension Policy\" Setting that allows for the prevention of downloading/installation of non-Microsoft Extensions... would it be possible to copy that feature and implement it in VS Code as well please? We're finding it a useful setting to help implement our internal security policies.",
        "createdAt": "2020-10-14 10:28:49",
        "state": "open",
        "number": 108656
    },
    {
        "title": "Preserve per-window environment variables between workspace changes",
        "description": "- VSCode Version: 1.44.2\r\n- Local OS Version: Ubuntu 18.04.4 LTS\r\n- Remote OS Version: Debian Buster (10.3)\r\n- Remote Extension/Connection Type: Docker\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open a terminal in host machine\r\n2. Start an ssh-agent by `eval $(ssh-agent -s)`\r\n3. Add a key (key1) using `ssh-add ~/.ssh/id_ed25519_key1`\r\n4. Open VS Code from the same terminal `code .`\r\n5. Run `ssh-add -l` in VS Code terminal (shows the identity of key1) (:+1: )\r\n6. Open folder in Remote Container\r\n7. Run `ssh-add -l` in VS Code terminal (shows the identity of key1) (:+1: )\r\n6. Open another terminal in host machine\r\n7. Start a new ssh-agent by `eval $(ssh-agent -s)`\r\n8. Add a key (key2) using `ssh-add ~/.ssh/id_ed25519_key2`\r\n9. Open VS Code from the same terminal `code .`\r\n10. Run `ssh-add -l` in VS Code terminal (shows the identity of key2) (:+1: )\r\n11. Open folder in Remote Container\r\n12. Run `ssh-add -l` in VS Code terminal (shows the identity of key1) (:-1: )\r\n\r\nVS Code somehow only forwards the first ssh-agent to remote container eventhough it has the correct ssh-agent forwarded locally. Am I missing any configuration? Can this be fixed with any settings in devcontainer.json?\r\n\r\nDoes this issue occur when you try this locally?: No\r\nDoes this issue occur when you try this locally and all extensions are disabled?: N/A\r\n",
        "createdAt": "2020-05-06 09:23:14",
        "state": "open",
        "number": 108571
    },
    {
        "title": "Badges for extension activity bar icons",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nAs depicted on the Source Control activity icon, as an extension author I'd like to be able to place a badge on the activity icon for my extension, letting the user know if there are actionable items hidden from view, and if so how many.\r\n\r\n<img width=\"274\" alt=\"badge\" src=\"https://user-images.githubusercontent.com/1483024/95688740-5f06f680-0bda-11eb-987c-9a8c16a92330.png\">\r\n\r\nThere have been issues to track badges within the tree view such as: https://github.com/microsoft/vscode/issues/38426 and https://github.com/microsoft/vscode-extension-samples/issues/41 and https://github.com/microsoft/vscode/issues/54938\r\n\r\nHowever I could not find one that covered the activity icon itself.\r\n\r\nIs this already possible via some API that I haven't yet discovered? Happy to contribute a PR if someone could point us in the right direction.",
        "createdAt": "2020-10-11 20:01:18",
        "state": "open",
        "number": 108496
    },
    {
        "title": "Show Activity Bar on Mouse Hover",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nCurrently we can hide the activity bar and use a key binding to toogle it. But I would like to be able to use the mouse to show the activity bar when I move it to the left or right side of the screen.  The same way we can do with the Taskbar on Windows, or the side and bottom menus on ubuntu and mac os respectivelly.\r\n\r\n",
        "createdAt": "2020-10-11 17:36:55",
        "state": "open",
        "number": 108492
    },
    {
        "title": "Editor Find doesn't support args passed via keybinding",
        "description": "Ref #108383\r\n\r\nFind in files and search editors allow passing args from the keybinding or extension triggering to configure the query, flags, etc. This could be helpful for the in-editor find too.\r\n\r\n",
        "createdAt": "2020-10-10 17:02:28",
        "state": "open",
        "number": 108459
    },
    {
        "title": "Allow for camel case matches in editor history",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.49, 1.50, 1.51 insiders\r\n- OS Version: Windows 10\r\n\r\nStarting in 1.49 recently opened behavior in the quick open panel changed for me. For example, here is a screenshot of me trying to open the `C_Unit.cs` file:\r\n\r\n![screenshot1](https://i.gyazo.com/e829b8fd8ac8cd4e33acf823495662e8.png)\r\n\r\nI never type the underscore. The file is not on top - fair enough (I don't remember if the order was the same before, but that's not the point). So I pick the file I need and go about my day. Some time later I want to open that same file again. I type the first letter, and there it is, recently opened:\r\n\r\n![screenshot2](https://i.gyazo.com/9c2445a8afba0c04f76eb973cb2aa2fd.png)\r\n\r\nThe problem is that I don't normally type one letter, I'm used to typing `cunit` to open this particular file. And as soon as the letter `u` is typed, the `C_Unit.cs` file disappears from top never to be seen again. The panel looks the same as in the first screenshot, and I have to pick the file manually again. Prior to 1.49 update it was always shown as recently opened along with several other files starting with `C_`.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-10-10 11:51:54",
        "state": "open",
        "number": 108446
    },
    {
        "title": "Add option to collapse/hide stdout lines in file w/ language support",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nStdout statements (py: `print`, js: `console.log`, java: `System.out...`, etc.) have a time and place and can be helpful when used with log levels to write clean, self-documenting code. However, when developing they can sometimes lead to unnecessary scrolling or other obfuscation of the code itself.\r\n\r\nA feature where you can collapse/hide these stdout statements in the same way you can collapse code blocks/doc comments would be extremely helpful/useful in certain scenarios, e.g. working without an additional monitor. Don't know how this might look from a UI perspective in the line number UI- but something similar to the code block collapser/debug marker but for stdout. Perhaps even utilizing the file search field (CTRL+F) as a \"Hide lines starting with...\" + existing Case/Regex/MagicMarker controls could be one approach.\r\n\r\nNot sure if this is a usecase for others or I am just working on a particularly verbose file at the moment. ",
        "createdAt": "2020-10-09 17:48:00",
        "state": "open",
        "number": 108416
    },
    {
        "title": "More keybindings for splits in quick open",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIt would be great to have directional split support from the quick open menu. When focusing and element in quick open, we have cmd+enter to split the focused element to the side. We have `workbench.action.splitEditor<direction>` which would work well, but they don\u2019t open the file currently focused on in the quick open panel. \r\n\r\nThe use case would be to open files in any direction when searching for them in the quick open. \r\n",
        "createdAt": "2020-10-09 14:48:02",
        "state": "open",
        "number": 108405
    },
    {
        "title": "Git: Support recursive git clone",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nWhen we open the editor or in general from command pallette, there are 2 options to start: opening a folder and cloning a repository. It would be great to have the option to clone the repository **recursively**.",
        "createdAt": "2020-10-09 11:34:21",
        "state": "open",
        "number": 108381
    },
    {
        "title": "allow codicons to support file icons with $(...) replacement syntax",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nFor vscode extensions, it would be nice to be able to display file icons in various places--especially in QuickPickItems.  Extension developers can currently display the standard vscode product/theme icons in many places by using the '`$(<icon-name>)`' syntax in strings.  In addition, I'd like to be able to use something like '`$(file:ts)`' and have the blue \"TS\" icon appear in its place.  Basically, the syntax would be something like: '`$(file:<ext>)`'.  If the icon associated with `<ext>` could not be found, the generic file icon `$(file)` should be shown.  Thanks!\r\n\r\nVS Code version: Code 1.49.3 (2af051012b66169dde0c4dfae3f5ef48f787ff69, 2020-10-02T17:57:01.595Z)\r\nOS version: Windows_NT x64 10.0.19041\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-10-08 17:58:23",
        "state": "open",
        "number": 108327
    },
    {
        "title": "Diff action buttons are too far from the gutter",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nIf I want to stage or undo a change, I click the gutter and drag my mouse cursor all the way to another side of the window each time, which is not ergonomic:\r\n\r\n![vscode](https://user-images.githubusercontent.com/1799756/95399846-0b0dc080-0901-11eb-85a3-7e9e5860d7aa.gif)\r\n\r\nThere is a way to greatly streamline this experience by brining the git lens action buttons closer to the gutter:\r\n\r\n![intellij](https://user-images.githubusercontent.com/1799756/95399852-106b0b00-0901-11eb-9818-117b2a34f127.gif)\r\n\r\nAlso notice how the diff for the added line is not even shown, because it's pointless. It would show the very same thing I'm looking at anyway.\r\n\r\nIn IntelliJ the diff only shows something I don't already see: changed or deleted lines. For example, this line has been changed, so the diff is shown:\r\n\r\n<img width=\"321\" alt=\"Screen Shot 2020-10-08 at 00 50 59\" src=\"https://user-images.githubusercontent.com/1799756/95400422-7906b780-0902-11eb-94d8-ce7680be981e.png\">\r\n\r\nCan you please consider improving this?\r\n",
        "createdAt": "2020-10-08 00:09:21",
        "state": "open",
        "number": 108278
    },
    {
        "title": "CSS unknown property for \"content-visibility\"",
        "description": "CSS property `content-visibility` was added to Chrome 85 (and thus in Edge as well) <https://www.chromestatus.com/feature/4613920211861504>  \r\nbut is marked in VSCode as:\r\n\r\n`Unknown property: 'content-visibility'`\r\n\r\nEnvironment: VSCode Insiders (Date: 2020-10-07T01:00:44.765Z) on Windows 10 x64 Build 19042\r\n",
        "createdAt": "2020-10-07 20:08:57",
        "state": "open",
        "number": 108272
    },
    {
        "title": "Add an explorer/title menu contribution point",
        "description": "Currently extensions can't contribute to the Explorer's title menu\r\n\r\n![image](https://user-images.githubusercontent.com/641685/95380025-256d7d00-08b4-11eb-9ea0-6b761fc3110b.png)\r\n\r\nIt would be great to allow this. For example it would allow for a better UX in the [Toggle Excluded Files](https://marketplace.visualstudio.com/items?itemName=eamodio.toggle-excluded-files) to add the toggle there rather than omni-present in the statusbar (See #103536 for an ask)",
        "createdAt": "2020-10-07 19:47:39",
        "state": "open",
        "number": 108271
    },
    {
        "title": "\"Protect\" a VS Code window so that files open in a different window",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\nI am proposing a feature to mark a specific VS Code window as \"protected\" in such a way that new files open in another existing or a new window.\r\n\r\n# Use case\r\n\r\nI have a \"main\" VS Code window open most of the time with a specific workspace. Independently of that, I often inspect or edit various unrelated files, opening them via Total Commander or even the command line, e.g.:\r\n\r\n    \"C:\\Program Files\\Microsoft VS Code\\Code.exe\" \"SomeLogfile.txt\"\r\n\r\nI want *all* files opened that way to appear in a second VS Code window that is independent of my main VS Code window. In other words: I want to \"protect\" the main VS Code window from additional files that are not part of the workspace.\r\n\r\n# Research\r\n\r\nPlease note that I am aware of the following:\r\n\r\n- **Open files in new window** (`-new-window`): this opens every file in its own window. I would like windows to be reused, but with the exception of certain \"protected\" windows.\r\n- **Open active file in new window** (`CTRL+K O`): this is useful for cases where a file was accidentally opened in the wrong window. It still requires closing the file in the original window, unfortunately.",
        "createdAt": "2020-10-07 19:45:22",
        "state": "open",
        "number": 108270
    },
    {
        "title": "Add support for vertical tabs",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nAdd a big boost in developer productivity by adding support for vertical tabs for files. This is a basic feature in most browsers and is requested by many users.\r\n\r\nTabs are one of the most used features in VSCode in my opinion and improving them has a direct and strong impact in productivity. It would allow for many more tabs to be opened at the same time, without having to scroll them all the time, and could open up possibilities like grouping or archiving in the future.\r\n\r\nDuplicates of this issue (that were closed for some reason) have 57 upvotes combined:\r\n\r\n25 upvotes: https://github.com/microsoft/vscode/issues/75749\r\n28 upvotes: https://github.com/microsoft/vscode/issues/85527\r\n4 upvotes: https://github.com/microsoft/vscode/issues/65193\r\n\r\nThe following extension has almost 10,000 installs, but it requires a hack to work (I couldn't do it):\r\n\r\nhttps://marketplace.visualstudio.com/items?itemName=pzuraq.vertical-tab-bar",
        "createdAt": "2020-10-07 17:39:09",
        "state": "open",
        "number": 108264
    },
    {
        "title": "Drag Explorer to bottom",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n> I don't know if this request is duplicate, surely it is \r\n\r\n![image](https://user-images.githubusercontent.com/28882108/95339766-0a7e1700-087a-11eb-95bd-c6268b794d9c.png)\r\n\r\nI would like to use explorer from the panel, same as search ( I'm using portrait monitor )\r\n\r\n![image](https://user-images.githubusercontent.com/28882108/95339778-0f42cb00-087a-11eb-9d05-b12b7413fbdc.png)\r\n\r\n> thanks ; )\r\n",
        "createdAt": "2020-10-07 13:52:54",
        "state": "open",
        "number": 108252
    },
    {
        "title": "Allow quick open to open multiple files",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nPossibly by holding shift and using arrows.\r\n\r\nMy use case: I very commonly open both the source and the test file at the same time.  It'd be nice to just hit shift+down, enter\r\n\r\nVS Code version: Code 1.49.3 (2af051012b66169dde0c4dfae3f5ef48f787ff69, 2020-10-02T17:54:06.165Z)\r\nOS version: Darwin x64 19.5.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-10-07 12:08:45",
        "state": "open",
        "number": 108247
    },
    {
        "title": "\"flip the diff\"",
        "description": "hello.\r\na picture is much better than a long text...\r\n\r\n![Screenshot 2020-10-07 at 12 41 05](https://user-images.githubusercontent.com/10899818/95320999-a61f7f80-089a-11eb-9774-5ff301089d1c.png)\r\n\r\non this picture: the current version of my file is the one where there is the line:\r\n`private String hello = \"I WOULD LIKE THIS TO BE ON THE LEFT WHEN A COMPARE IT TO THE PREVISOUS VERSION\";`\r\n\r\nthis is currently on the right and the \"remote\" version is on the left. I would like to be able to \"flip\" this.\r\n\r\neclipse has this button: \"swap left and right view\" and that is exactly what I would like to have in vscode:\r\n\r\n![Screenshot 2020-10-07 at 12 46 49](https://user-images.githubusercontent.com/10899818/95321468-5ee5be80-089b-11eb-8252-e8abcd6f9dd1.png)\r\n![Screenshot 2020-10-07 at 12 47 13](https://user-images.githubusercontent.com/10899818/95321479-61481880-089b-11eb-9a54-6f5d2c470bd4.png)\r\n\r\n\r\n\r\n\r\n",
        "createdAt": "2020-10-07 10:49:13",
        "state": "open",
        "number": 108243
    },
    {
        "title": "Support syntax highlight of typescript expressions in multiline jsdoc comments",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nCurrently jsdoc annotations that include typescript expressions for javascript with `// @ts-check` do not support the right colors when spread out over multiple lines.\r\n\r\n![image](https://user-images.githubusercontent.com/479538/95308928-cb0bf680-088a-11eb-86e2-fa28a880708d.png)\r\n\r\nThe second parameter `buckets` is spread out over multiple lines and has the comment color instead of the type expression color.",
        "createdAt": "2020-10-07 08:50:51",
        "state": "open",
        "number": 108237
    },
    {
        "title": "Support nested .vscode folders",
        "description": "## The problem\r\nI'd like for VS Code to be able to recognize that a folder in my working tree is its own \"root workspace\" without having to actually make it a top-level folder in a multi-root workspace. I'd suggest doing so by checking for the presence of a `.vscode` folders in the working tree, and if found, exposing the respective nested launch tasks up at the workspace level on the debug pane:\r\n![image](https://user-images.githubusercontent.com/77808/95251175-05648d80-07d0-11eb-867d-047455491d5d.png)\r\n\r\n## Background\r\nBackground: it's common for Git repos to contain several projects either of varying types/languages, or multiple of the same language:\r\n\r\nex1, multi-language:\r\n\r\n```\r\nmyproject/\r\n    aspnet-web-server/\r\n       `.vscode/`\r\n        ... dotnet core stuff\r\n\r\n    go-api-microservice/\r\n       `.vscode/`\r\n        ... go stuff\r\n\r\n    react-client/\r\n       `.vscode/`\r\n        nodejs stuff ...\r\n\r\nREADME.md\r\n...\r\n```\r\n\r\nex2, multiple C# projects:\r\n```\r\nmyproject/\r\n    server/\r\n        aspnet-api-server/\r\n           `.vscode/`\r\n            ... functions project\r\n\r\n        azfunc1/\r\n           `.vscode/`\r\n            azfunc1.csproj\r\n            ... azfunctions stuff\r\n\r\n        azfunc2/\r\n           `.vscode/`\r\n            azfunc2.csproj\r\n            ... azfunctions stuff\r\n\r\n    clients/\r\n        console-app/\r\n           `.vscode/`\r\n            console-app.csproj\r\n            ... dotnet core stuff\r\n\r\nmyproject.sln\r\nREADME.md\r\n...\r\n```\r\n\r\nIt makes logical sense to open the top-level `myproject` folder in VS Code as the workspace; I get access to all the docs, readme, and other files that aren't necessarily within one of the individual project folders like `console-app`. But if I do so, **none of the launch settings or debug tasks are discovered correctly**. VS Code will try to create `myproject/.vscode` and might auto-detect one of the projects, but I still have to go add the rest manually.\r\n\r\n## Alternatives\r\n### Multi-root worksapces\r\nYou might say *but that's what **mutli-root** workspaces are for!* But that's the problem - I don't want multiple **root** workspaces, which flattens the directory structure. A multi-root workspace would look like:\r\n```\r\naspnet-api-server/\r\n    ...\r\nazfunc1/\r\n    ...\r\nazfunc2/\r\n    ...\r\nconsole-app/\r\n    ...\r\n```\r\n\r\nI lose access to easily edit other files in the directory tree (and the presentation of projects themselves lose their position in the tree)... Unless I add back the whole repo as one of the multiple roots on top of each project, but that seems like a silly workaround, doesn't really solve the positioning issue and I'd then have multiple files in the workspace tree pointing to the same file on disk.\r\n\r\n### Manually configure launch.json\r\nA user could open each project folder in VS Code as an independent workspace, have it generate the appropriate `.vscode/*` launch and task configurations, then merge them all into `myproject/.vscode` when opening the repo folder as the top-level workspace. This is long, tedious, and error prone and also requires path replacements.\r\n\r\n## In short\r\nI'd be wonderful if VS code would treat any nested folders with a `.vscode` folder present as one of the root workspaces, similar to the multi-root workspaces model. This wouldn't impose restrictions on which folders are opened as top-level/root workspaces, and still permit launching different types of nested projects.",
        "createdAt": "2020-10-06 19:38:59",
        "state": "open",
        "number": 108204
    },
    {
        "title": "Support for Apple Pencil scribble",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI would like to be able to use Apple Pencil's scribble function to type into VSCode while using it in Sidecar. Currently, it only works as a mouse.\r\n\r\nI tried it in http://codesandbox.io and it worked more as expected but there was a very annoying effect when writing sometimes it thinks it should scroll.\r\n\r\n",
        "createdAt": "2020-10-06 13:25:08",
        "state": "open",
        "number": 108182
    },
    {
        "title": "Clicking to activate a window should not move the insertion point",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.49.2\r\n- OS Version: macOS 10.15.7\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open any document\r\n2. Switch to some other window (e.g. a web browser)\r\n3. Click somewhere in the source code on the VS Code document\r\n\r\nThe VS Code window will activate, and the insertion point will move to wherever you clicked.\r\n\r\nAt least on a Mac, this is improper behaviour. The insertion point should not move when activating a window. Moving the insertion point should require a second click. I'm unsure of the correct behaviour on Windows.\r\n\r\nHaving decades of learned habits, I find this extremely disruptive. I often click a window then start typing, only to find I'm editing the wrong line of code.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-10-06 01:19:13",
        "state": "open",
        "number": 108151
    },
    {
        "title": "Expose output from executable debug adapter",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nWhen I return a `DebugAdapterExecutable` from `DebugAdapterDescriptorFactory.createDebugAdapterDescriptor`, the debug adapter that VSCode creates (`ExecutableDebugAdapter`) spawns a child process, but does not expose stderr of that process in any way.\r\n\r\nVSCode should provide a way for extensions to act on stderr of the process spawned by ExecutableDebugAdapter.\r\n\r\nThis is somewhat related to #98976.",
        "createdAt": "2020-10-05 23:27:02",
        "state": "open",
        "number": 108145
    },
    {
        "title": "Option to display colorDecorators at right of CSS colors",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Describe the feature you'd like. -->\r\nPlease give us an option to show `colorDecorators` at right of CSS colors (ex: `editor.colorDecoratorsAtRight`)\r\n\r\nLike here:\r\n![image](https://user-images.githubusercontent.com/6636980/95126523-456a3880-071c-11eb-8145-c7efd42bf138.png)\r\n",
        "createdAt": "2020-10-05 20:07:28",
        "state": "open",
        "number": 108140
    },
    {
        "title": "Undo for selection",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIt would be very helpful to have a text portion selected, then press Ctrl+Z and have the undo work only for that selection while the rest remains as is.\r\n\r\nReason: it happened many times that I do some change, then go on and work, do a lot more other changes in other places of the file. If I undo to the point I want to get, I loose all other work applied over that point. What I do is either rewrite manually if easy, or go for an older version of the file and copy what I need back. Undo for selection would be so helpful. \r\n\r\nI know this requires very complex data for the undo system and is probably hard to do, but I think it would be very cool and helpful.",
        "createdAt": "2020-10-05 08:36:45",
        "state": "open",
        "number": 108098
    },
    {
        "title": "Add a TextEditor focus or state property",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIn the extensions API, I would like a way to detect when the active editor actually has focus. For example, if the user places the text insertion cursor into the command pallet, extension search field, etc., I would like the active editor to have something like a `focus` or `state` property that is set to \"unfocused\" or false. As it is now, there is no way to detect that the text insertion cursor is outside the active editor.\r\n\r\nAlternatively, I would like the `editor.action.clipboardPasteAction` to not fire when pasting outside the text editor (or to have an alternative action for this purpose). For example, pasting into the command pallet fires `editor.action.clipboardPasteAction`, but I would rather it not, or to have an alternative action that does not. Something like `editor.action.clipboardPasteIntoEditorAction`.\r\n\r\nI'm the author of [Indent on Paste extension](https://github.com/gazugafan/vscode-indent-on-paste). One of these features would allow me to solve a bug that prevents pasting into to the command pallet, search field, etc.",
        "createdAt": "2020-10-04 21:53:12",
        "state": "open",
        "number": 108082
    },
    {
        "title": "Don't add files to recent list when using --diff",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nVS Code remembers temporary files opened with `--diff` and pollutes the quick open menu. It's probably better not to remember files opened for diffing in recents lists.\r\n\r\n![image](https://user-images.githubusercontent.com/484784/95008261-1e512100-05cd-11eb-9789-aead612ed40d.png)\r\n",
        "createdAt": "2020-10-04 06:12:06",
        "state": "open",
        "number": 108058
    },
    {
        "title": "Specify one or both files as immutable when using --diff",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nWhen using VS Code as a diff tool sometimes one or both of the files being compared are temporary and should not be modified. It should be possible to specify that one or both files are immutable when invoking vscode with `--diff`.\r\n\r\nCurrently, if the left file is modified it causes another editor to open.\r\n\r\n![image](https://user-images.githubusercontent.com/484784/95007860-49d20c80-05c9-11eb-8bcb-26e390498f30.png)\r\n",
        "createdAt": "2020-10-04 05:41:33",
        "state": "open",
        "number": 108056
    },
    {
        "title": "Allow editor title to be specified when using --diff option",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nWhen using VS Code as a diff tool it displays the full path to each file being compared. When used with something like TortoiseGit, this leads to wildly long editor titles.\r\n\r\n![image](https://user-images.githubusercontent.com/484784/95007752-13e05880-05c8-11eb-846a-626af4618ab1.png)\r\n\r\nOther diff tools allow the user to specify the title of each file to use for display purposes.\r\n\r\nIn this particular case, I'd really like to be able to specify\r\n`ft232h_win32.hpp [d83a3b10<->611bff91]`\r\n",
        "createdAt": "2020-10-04 05:37:10",
        "state": "open",
        "number": 108055
    },
    {
        "title": "Watchlist Of Extensions",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI often notice interesting new Extensions that I'm not ready too, or able to currently install. In this case I would like to be able to add the Extension to a Watch list in VS Code so I can easily find it again and possible be notified of significant changes to its status; i.e. rating, download count, releases, etc.\r\n\r\nOnce an Extension is Installed it is removed from the Watch list as it is now explicitly monitored as an installed extension. It can be unwatched at any time.\r\n\r\nA feature like this will help aspiring extension authors be noticed and their contribution considered for use. Also having Watch counts published and visible to the community would help promote the work of talented teams and individuals.\r\n",
        "createdAt": "2020-10-04 04:50:17",
        "state": "open",
        "number": 108054
    },
    {
        "title": "automatically remember indentation settings",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nI am editing Go source code, however I think this feature is related to vscode itself...\r\n\r\nWhen I choose intentation use tab, size=4, it took effect immediately, but the setting is not remembered. When I open vscode again, it reverts indentation to 8-space.\r\n\r\nI have checked preferece: workspace setting or user setting, didn't find a clue where to set this GLOBALLY.\r\n\r\nVS Code version: Code 1.49.3 (2af051012b66169dde0c4dfae3f5ef48f787ff69, 2020-10-02T17:56:11.027Z)\r\nOS version: Linux x64 5.4.0-47-generic\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-10-03 05:39:15",
        "state": "open",
        "number": 108019
    },
    {
        "title": "Add \"Replace Remote\" to Settings Sync Turn On options",
        "description": "When Turning on Settings Sync for the first time from your main development machine you will most likely want to take your local settings and replace the remote settings.  The current experience forces you to perform a Manual Merge and select local on all of the many settings files, which is a cumbersome process.\r\n\r\nIn my case here was the order I took with enabling Settings Sync:\r\n\r\n1. Turn on Settings Sync on my secondary machine\r\n2. Realize that I had not Synced my settings already from my primary machine and nothing was working as I expected.\r\n3. Turn on Settings Sync on my primary machine\r\n4. Surprised I could not just take the local settings. \r\n\r\n**Current Options**\r\nMerge\r\nReplace Local\r\nMerge Manually\r\n\r\n**Requested Options**\r\nMerge\r\nMerge Manually\r\nReplace Local\r\nReplace Remote\r\n",
        "createdAt": "2020-10-03 02:17:51",
        "state": "open",
        "number": 108014
    },
    {
        "title": "Set breakpoints on all results of a text search",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n**Feature:** Set breakpoints on all results of a text search\r\n\r\n**Sample scenario:** I want to set a breakpoint on all the places that **sourceMap.url** is accessed. I can use the Text Search feature to find all those places. There are a lot of places where that code is used, so it's annoying to have to go through each one to set a breakpoint.\r\nIt'd be great if after searching for **sourceMap.url** I could tell VS Code to put a breakpoint in all the lines or places that the text search feature found.\r\n\r\nThis would allow us to to thing such as:\r\n * Search for all places that call fs.readFile, and set a breakpoint on all of them\r\n * Search for all constructors, and set a breakpoint on all of them\r\n * Assuming I can create a Regexp to find the first line of all methods, I could set a breakpoint that stops in the first line of each method for a particular class\r\n * Search for all places that use process.env and set a breakpoint on all of them\r\netc...",
        "createdAt": "2020-10-02 20:14:22",
        "state": "open",
        "number": 107996
    },
    {
        "title": "Add when clause context for embedded language ID",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI would like a new [when clause context](https://code.visualstudio.com/docs/getstarted/keybindings#_when-clause-contexts) for the language ID at the cursor position within the document. Right now, we have `editorLangId` which only uses the language ID of the editor itself, but documents can have other languages embedded in them defined in the [`contributes.grammars`](https://code.visualstudio.com/api/references/contribution-points#contributes.grammars). I'm not sure the extent of how that's used, but I've seen it used for some built-in features like language snippets and the built-in commands that toggle language comments. I can also see the language present in the inspector for the command `editor.action.inspectTMScopes`. It would be useful to have access to this in the when clause. I think there's already a separate issue about having access to it in an API.",
        "createdAt": "2020-10-02 19:17:21",
        "state": "open",
        "number": 107989
    },
    {
        "title": "Activity bar context menu actions not aligned ",
        "description": "I think the three actions Hide Home Button, Hide Menu, Hide Accounts should follow the pattern of the top actions.\r\nThey shuold just be Home Button, Menu and Accounts and have a checkmark next to them.\r\n\r\nThat way it will be consistent and cleaner.\r\n\r\n![Screenshot 2020-10-02 at 16 35 35](https://user-images.githubusercontent.com/1926584/94936676-db108880-04ce-11eb-91cd-5336875a8054.png)\r\n",
        "createdAt": "2020-10-02 14:47:01",
        "state": "open",
        "number": 107975
    },
    {
        "title": "Hovering over breadcrumbs should jump in the editor similar to arrow keys",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nIf you are in breadcrumb view and then try use arrow keys to jump between things, the editor will switch focus to show the code of that element.\r\n\r\n<img width=\"145\" alt=\"image\" src=\"https://user-images.githubusercontent.com/6391776/94916959-ea340e00-04af-11eb-8341-6e67b54cc703.png\">\r\n\r\nIt would be great if you could also just hover over the element with a mouse in breadcrumb and the editor will switch too. i.e. I am hovering over `renderRow` element now but in order to see it I have to actually click on it but this will dismiss the breadcrumb view all together. So there is no way to nicely see/jump through a list of breadcrumbs without being forced to use arrow keys. \ud83d\ude1e\r\n\r\n<img width=\"153\" alt=\"image\" src=\"https://user-images.githubusercontent.com/6391776/94917060-1d769d00-04b0-11eb-8124-245330ea9064.png\">\r\n\r\n",
        "createdAt": "2020-10-02 11:07:01",
        "state": "open",
        "number": 107963
    },
    {
        "title": "Add ability to go back one level in breadcrumb",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nIf I am in code where the breadcrumb shows this:\r\n\r\n<img width=\"485\" alt=\"image\" src=\"https://user-images.githubusercontent.com/6391776/94900109-b8617e00-0494-11eb-87a6-707d0ec64a79.png\">\r\n\r\nI'd like to have a keybinding that when pressed will go back 1 level so I will be here:\r\n\r\n<img width=\"462\" alt=\"image\" src=\"https://user-images.githubusercontent.com/6391776/94900259-fb235600-0494-11eb-9651-adeed29f7da1.png\">\r\n\r\nPerhaps this is already possible? If not, please add it.",
        "createdAt": "2020-10-02 07:52:33",
        "state": "open",
        "number": 107954
    },
    {
        "title": "Setting to follow to running cells in a notebook",
        "description": "When running all cells in a notebook that has large cells, sometimes it's hard to follow along where the current cell is especially when the execution happens fast. I would love for an option that \"follows\" the actively running cell as it moves through the notebook. Right now I have to manually scroll or use the keyboard to follow.\r\n\r\n![ezgif com-gif-maker (6)](https://user-images.githubusercontent.com/35271042/94852271-7a098780-03de-11eb-9d97-949001dd906a.gif)\r\n",
        "createdAt": "2020-10-01 19:21:24",
        "state": "open",
        "number": 107919
    },
    {
        "title": "Make it possible to expand empty selection into current word when Ctrl+C or Ctrl+X",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nI often have the need to copy a single word into the clipboard, often a variable name. A quick double click on the word, followed by Ctrl+C, does the trick. Except when the double click doesn't take. Then the default behavior is to copy the entire line instead. That feature can be disabled, but that still doesn't solve the problem because I just end up with the old clipboard content still in the clipboard, instead of the word that I intended to copy.\r\n\r\nThis problem is even more likely to happen when color coding of the text makes it more difficult to see quickly if a word is selected or not (for example, when searching for the variable name that you want to select and copy).\r\n\r\nFor me, it would be really useful it if was possible to configure a third behavior for this. And that is, if Ctr+C is pressed with an empty selection, then expand the selection to cover the word at the cursor position, and then let that selection get copied. The logic of deciding where that word starts and ends should be the same that is used for normal start/end of word logic, and the same logic that is applied when double clicking on a part of a text. So if I put the cursor in the middle of the word \"myVariable\", then that whole word should be copied when pressing Ctrl+C.\r\n\r\nAnd, to be consistent, this configuration should also effect Ctrl+X, so that the word in question gets cut out and put into the clipboard.",
        "createdAt": "2020-10-01 12:19:28",
        "state": "open",
        "number": 107881
    },
    {
        "title": "Relative Line Numbers: an option to have 0 as the current line number.",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nA setting that allows for displaying 0 as the current line number when relative numbering is on.",
        "createdAt": "2020-10-01 06:19:15",
        "state": "open",
        "number": 107869
    },
    {
        "title": "Please supply the ability to sort files by modified time asc/desc  in groups in source  control's Changes view when view as list",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\n\ufe40 **Changes**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \u2469\r\n     | \ufe40 **A quarter ago**\r\n     |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file1.html\r\n     | \ufe40 **Half an hour ago**\r\n     |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file2.ts\r\n     |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file3.json\r\n     | \ufe40 **Two hours ago**\r\n     |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file4.xml\r\n     |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file5.md\r\n     |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file6.properties\r\n     |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file7.scss\r\n     | \ufe40 **One day ago**\r\n     |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file8\r\n     |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file9\r\n     |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file10\r\n\r\n- When mouse is over the file, we can get the exactly modified time information from tooltip.\r\n- We can make git operations on group, for example, stage group, stash group, or discard group, and so on.",
        "createdAt": "2020-09-30 01:54:13",
        "state": "open",
        "number": 107767
    },
    {
        "title": "[Request] Warn on rename refactoring conflicts js/ts",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nI'd like to be warned when renaming a variable causes code to change behavior\r\neg. renaming `foo` to `bar`\r\n```ts\r\nlet bar = 0;\r\n{\r\n    let foo = 1;\r\n    console.log(bar);\r\n}\r\n```",
        "createdAt": "2020-09-30 00:36:07",
        "state": "open",
        "number": 107765
    },
    {
        "title": "Show the help text/tip in the bottom of debug hover to switch to normal hover",
        "description": "Testing #107156\r\n\r\nShow the help text/tip in the bottom of debug hover to switch to normal hover\r\n\r\n",
        "createdAt": "2020-09-29 13:14:03",
        "state": "open",
        "number": 107697
    },
    {
        "title": "Add Pin/Unpin to context menu",
        "description": "Testing #107464\r\n\r\nThe open editors view lets you unpin, but not pin. I suggest to add `Pin/Unpin` to the context menu as well\r\n",
        "createdAt": "2020-09-29 11:47:09",
        "state": "open",
        "number": 107685
    },
    {
        "title": "Provide extensions with a persistent logging channel",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nRight now, there's the extension host log, but it can be non-trivial to filter only the records from a specific extension.\r\n\r\nThere are also output channels, but, apparently, these are not guaranteed to persist on disk:\r\nhttps://github.com/microsoft/vscode/issues/107571#issuecomment-700599377\r\n\r\nI would love to have a log channel specific to my extension, that would get persisted into files on disks.",
        "createdAt": "2020-09-29 10:23:08",
        "state": "open",
        "number": 107676
    },
    {
        "title": "Add a command to hide a view",
        "description": "I would be great to have a command that would allow the hiding of a view (there already is a command to focus a view)\r\n\r\nFor example, I would like to add a _Hide_ menu item to the `...` menu of GitLens views to make it easier for user to discover view hiding\r\n\r\n![image](https://user-images.githubusercontent.com/641685/94518374-ce9ede00-01f7-11eb-97e6-2a1336178b06.png)",
        "createdAt": "2020-09-29 06:05:17",
        "state": "open",
        "number": 107644
    },
    {
        "title": "Fallback format on save mode when VCS not activated.",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\nFormat on save + format modifications only is great, but it may be better to make it format the whole file when not in a repository, like C_Cpp.clang_format_fallbackStyle.\r\nThanks!\r\n<!-- Describe the feature you'd like. -->\r\n",
        "createdAt": "2020-09-29 02:55:34",
        "state": "open",
        "number": 107634
    },
    {
        "title": "\"View: Toggle Render Whitespace\" should open a submenu to choose what variant of whitespace to render",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nRecently VSCode adopted various options for showing whitespace like \"trailing\" whitespace for instance. This was a big shift from previous versions where it was an all or nothing.\r\n\r\nThe option `View: Toggle Render Whitespace` has existed for as long as I have used VSCode, but the action no longer fits with the new options of showing whitespace. I typically have only trailing whitespace showing. In order to see all whitespace, I actually have to toggle the action twice. And once I can finally see all the whitespace, I have to open my settings.json manually to change it back to \"trailing\" whitespace only.\r\n\r\nI would like `View: Toggle Render Whitespace` to open a submenu like when you choose a color scheme, where I can select the form of whitespace I want to view.",
        "createdAt": "2020-09-28 21:17:03",
        "state": "open",
        "number": 107618
    },
    {
        "title": "Allow to group editor tabs",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\n# adding group tab\r\nwhy we can't make tabs group with other tab\r\n> for example if we can group opened files(tabs) with custom name\r\n- it can help us to edit file faster and easier\r\n  > because we working with many file and we have many style file and don't want to close them and js/ts file to work with it and don't want to close this also!!!!\r\n\r\n:heart: :heart: :heart: :heart: \r\nthanks for any one to created this ***BEST TEXT EDITOD***\r\n:heart: :heart: :heart: :heart: \r\n:+1: :+1: :+1: :+1: :+1: \r\n",
        "createdAt": "2020-09-28 17:22:51",
        "state": "open",
        "number": 107606
    },
    {
        "title": "Add Uri parameter to moveFileToTrash command",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nRoot Cause:\r\n- Adding 'Delete' feature to context menu in `vscode-java-dependency` plugin, which is similar to file explorer's context menu like below\r\n- Could not find a proper api which can make it have same behavior with file exploer\r\n\r\nAlready-explored Solutions:\r\n- Use `moveFileToTrash` command, but could not pass an Uri to it, and it will automatically delete the file which is focused in file explorer\r\n- Use `workspace.fs.delete` method, but could not show the same dialog like below. If use `showInformationMessage` instead, a lot of cases need to be dealt with, like text localization, warning for delete edited files etc.\r\n\r\nFeature proposed:\r\n- Add an Uri parameter to `moveFileToTrash` command\r\n- Or show a dialog showing when calling `workspace.fs.delete`\r\n- Or expose the dialog service to API level\r\n\r\nEnvironment:\r\n- OS: Windows 10\r\n- VS Code version: 1.49.2\r\n\r\n![image](https://user-images.githubusercontent.com/30518415/94396623-e1cc9200-0194-11eb-95ba-3b79b679e3c0.png)\r\n![image](https://user-images.githubusercontent.com/30518415/94396339-4a673f00-0194-11eb-952c-cbb85b9a4e31.png)",
        "createdAt": "2020-09-28 06:25:49",
        "state": "open",
        "number": 107566
    },
    {
        "title": "introduce source.removeUnusedImport action as an opposite to source.addMissingImports",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nVScode already makes it seamless to work with imports-I almost never have to go and manually import anything. With one exception-removing them.\r\nI would like to have a source action `source.removeUnusedImports` so that I can configure my `settings.json` like this:\r\n```json\r\n{\r\n    \"editor.codeActionsOnSave\": [\r\n        \"source.removeUnusedImports\"\r\n    ]\r\n}\r\n```\r\n\r\nExpected functionality would be that VScode would just run the source code action on save to remove all unused imports in my JS/TS file.\r\n\r\nI know there is `source.organizeImports` already which removes unused imports, but I do not want that. In our codebase we prefer to keep order of imports in the order of addition.",
        "createdAt": "2020-09-27 09:41:01",
        "state": "open",
        "number": 107535
    },
    {
        "title": "Context menu doesn't work with a Touchscreen",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\nRecommended priority: Low to Medium priority. \r\n                                       More and more laptops and computer screens are becoming touchscreens\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.49.2\r\n- OS Version: Windows 10 (19041.508), patch 2004\r\n\r\nSteps to Reproduce:\r\nHardware setup: HP Zbook Studio x360, flipped over like an easel (like an 'A')+ HP Touchscreen Pen. \r\nThis is a Touchscreen laptop. My laptop is not set to Tablet Mode.\r\n\r\n1. Open VS Code\r\n2. Open a folder or workspace (doesn't matter which).\r\n3. Choose a folder. \r\n\r\nCase 1 with pen:\r\n`    `4. You can select a file or hover over the desired file in the Explorer side-window (sub-window?).  Doesn't seem to matter on the user-side.\r\n`    `5. Push and hold pen over desired file.\r\nResult: Nothing happens.\r\n\r\nCase 2, with finger: \r\n`    `Repeat Steps 4 & 5 using a finger instead of the pen on the touchscreen. \r\nResult: Same, nothing happens.\r\n\r\nCase 3, with mouse/touchpad:\r\n`    `Repeat Step 4 & 5 with a mouse or the Touchpad instead of pen.\r\nResult: Both work and bring up the context menu in the Explorer side-menu\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-09-26 20:11:26",
        "state": "open",
        "number": 107516
    },
    {
        "title": "Show all files of all window tabs",
        "description": "I'm working on multiple projects. So I openned each project on 1 tab (Menu > Window > New Tab)\r\nIt's showing perfect on Open Editors Explorer, **but It not good when I use command (Cmd + P)**\r\n\r\nFor Cmd + P shortcut VS Code showing all files of all window tabs\r\n\r\n**Any option for just show files of current active tab?**\r\n\r\nVs Code version: 1.49.2\r\nMac OS 10.15.7",
        "createdAt": "2020-09-26 19:11:39",
        "state": "open",
        "number": 107513
    },
    {
        "title": "Debug Variables View does not show multiple variables from Debug Adapter when names are not unique",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nWhen I provide a DAP Variables response from [my debug adapter extension](https://marketplace.visualstudio.com/items?itemName=justarandomgeek.factoriomod-debug) with the following content, reflecting multiple local vars named `a`, only one of them is shown in the Variables view.\r\n\r\n```json\r\n{\"variablesReference\":1,\"seq\":11,\"vars\":[{\"name\":\"<temporaries>\",\"value\":\"<temporaries>\",\"variablesReference\":4},{\"name\":\"a\",\"value\":\"1\",\"type\":\"number\",\"variablesReference\":0,\"evaluateName\":\"a\"},{\"name\":\"a\",\"value\":\"2\",\"type\":\"number\",\"variablesReference\":0,\"evaluateName\":\"a\"},{\"name\":\"a\",\"value\":\"3\",\"type\":\"number\",\"variablesReference\":0,\"evaluateName\":\"a\"},{\"name\":\"a\",\"value\":\"4\",\"type\":\"number\",\"variablesReference\":0,\"evaluateName\":\"a\"}]}\r\n```\r\n![image](https://user-images.githubusercontent.com/5246445/94344189-8b701f80-ffeb-11ea-8280-4f4c29285f3f.png)\r\n\r\nVS Code version: Code - Insiders 1.50.0-insider (ddc98c3f620ab1d2ecad5942ebf4736060403d67, 2020-09-25T05:35:02.163Z)\r\nOS version: Windows_NT x64 10.0.18363\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-6850K CPU @ 3.60GHz (12 x 3598)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>opengl: enabled_on<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>vulkan: disabled_off<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|63.91GB (27.54GB free)|\r\n|Process Argv|--crash-reporter-id 1d78045f-7d02-46d4-981d-e8dc1b7d9885|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (10)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nbracket-pair-colorizer-2|Coe|0.2.0\r\nvscode-eslint|dba|2.1.8\r\ngitlens|eam|10.2.2\r\nvscode-pull-request-github|Git|0.20.0\r\ngit-graph|mhu|1.26.0\r\nremote-wsl|ms-|0.44.5\r\nindent-rainbow|ode|7.4.0\r\nvscode-zipexplorer|sle|0.3.1\r\nlua|sum|0.20.8\r\nfactorio-lua-api-autocomplete|svi|0.7.0\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-09-26 15:34:21",
        "state": "open",
        "number": 107506
    },
    {
        "title": "ctrl+[ Doesn't exit the command pallet or file search",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.49.1\r\n- OS Version: Darwin x64 19.6.0\r\n\r\nSteps to Reproduce:\r\n\r\n1. Start a file or command search\r\n2. Enter the ^[ character sequence\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-09-26 15:05:18",
        "state": "open",
        "number": 107504
    },
    {
        "title": "Dual screen: relative rather than absolute terminal width",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nWhen using dual screens of differing size / resolution and moving a vscode window from one to the other, the terminal (when using terminal panel on the right) remains the same absolute width. This means resizing the panel every time the window is moved. It would be better if the panel remained the same relative width (e.g. occupying half of the window) instead. I don't know if there's the same issue with terminal height.",
        "createdAt": "2020-09-26 09:39:04",
        "state": "open",
        "number": 107497
    },
    {
        "title": "Add option to only show file name (not full file path) when hovering a file",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI guess the title is pretty concise enough for this feature request.",
        "createdAt": "2020-09-25 17:48:29",
        "state": "open",
        "number": 107469
    },
    {
        "title": "History on Debug Console filter lost",
        "description": "Issue Type: <b>Bug</b>\r\n\r\n1) Open the Debug Console\r\n2) Enter a filter text, press Enter\r\n3) repeat 2) a couple of times\r\n4) Go through the history in the fiter box with <kbd>Cmd</kbd>+<kbd>ArrowUp</kbd> to ensure you have the entries\r\n5) Close the panel\r\n6) Reopen the panel\r\n7) Repeat step 4\r\n-> no history (note: Problems retains the history)\r\n\r\nVS Code version: Code - Insiders 1.50.0-insider (ddc98c3f620ab1d2ecad5942ebf4736060403d67, 2020-09-25T05:30:51.469Z)\r\nOS version: Darwin x64 18.7.0\r\nRemote OS version: Linux x64 5.3.0-1020-azure\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-09-25 16:52:48",
        "state": "open",
        "number": 107461
    },
    {
        "title": "Cheatsheet for chords",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nI believe a lot of people do not use chords because it is confusing to remember exact sequence of keystrokes. However, it could be helpful to show an overlay with possibilities after chord activation (e.g. `ctrl+K`). The overlay should be displayed with delay to avoid distraction when user knows the chord right away. This way multiple chord activation shortcuts would become a viable option. The learning curve for chords would be significantly flattened.",
        "createdAt": "2020-09-25 08:32:24",
        "state": "open",
        "number": 107423
    },
    {
        "title": "Support smart selection for markdown",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\n**Request**\r\nSupport smart selection (expand/shrink selection) in markdown.\r\n\r\nExample use cases:\r\n\r\n1. Selecting inline elements such as inside matching backticks, `*`, or `**`\r\n\r\n1. Selecting list elements.\r\n\r\n1. Select block structures such as paragraphs, fenced code blocks, and block quotes\r\n\r\nVS Code version: Code - Insiders 1.50.0-insider (f943318042a3b9229049aea86cea04d0ff9c8210, 2020-09-23T05:28:07.760Z)\r\nOS version: Darwin x64 19.6.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-09-25 04:54:50",
        "state": "open",
        "number": 107410
    },
    {
        "title": "Convert indentation to spaces for selection",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\nA re-opening of:\r\n- https://github.com/microsoft/vscode/issues/7415\r\n<!-- Describe the feature you'd like. -->\r\nI would like to be able to convert a section of a file from tabs to spaces, versus the whole file. This is particularly because sometimes ex. output tests require specific whitespace, and so I spend a lot of time manually changing the whitespace by hand, when I know the whole text block needs to be converted to spaces ... however, that doesn't need to happen for the whole file.\r\n\r\nThank you!",
        "createdAt": "2020-09-24 21:30:02",
        "state": "open",
        "number": 107382
    },
    {
        "title": "Add configuration to show snippets only after a certain number of characters",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nWhile writing often type numbers will trigger snippets from some extensions that have these digits.\r\n\r\nThis new configuration would enable users to set a initial number until the snippets popup is raised. \r\n\r\nexample:\r\n`\"editor.snippetMinimumCharacters\": 2,`",
        "createdAt": "2020-09-24 15:05:07",
        "state": "open",
        "number": 107364
    },
    {
        "title": "append option for vscode.workspace.fs.writeFile",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nCurrently `vscode.workspace.fs.writeFile` will replace the file contents with the new content. We can do `vscode.workspace.fs.readFile` + _Concat new data with old data_ + `vscode.workspace.fs.writeFile` but it would be convenient if this API provided an option to append to the file instead of overwrite.  ",
        "createdAt": "2020-09-24 14:30:05",
        "state": "open",
        "number": 107360
    },
    {
        "title": "Add explicit theme colors for custom dialogs",
        "description": "Currently we are using the following theme colors for custom dialogs:\r\n\r\n```\r\ndialogBackground: 'editorWidget.background'\r\ndialogBorder: 'contrastBorder'\r\ndialogForeground: 'editorWidget.foreground'\r\n```\r\n\r\nI would like to be able to have explicit colors for each of those, rather than re-using the widget/contrast ones.\r\n",
        "createdAt": "2020-09-24 03:08:05",
        "state": "open",
        "number": 107336
    },
    {
        "title": "Request: Typographer option in Markdown preview",
        "description": "### Summary\r\n\r\nWould it be possible to implement support for Typographer mode in the Markdown preview?\r\n\r\n### Additional Details\r\n\r\n[Markdown-it](https://markdown-it.github.io/markdown-it/#MarkdownIt.new) has support for a typographer option to \"enable some language-neutral replacement + quotes beautification\". A live comparison is available on [markdown-it demo](https://markdown-it.github.io/). I've listed some of the most common examples below:\r\n\r\nName | Markdown | Typographer\r\n-- | -- | --\r\nLeft single quote | `'` | `\u2018` |\r\nLeft double quote | `\"` | `\u201c` |\r\nRight single quote | `'` | `\u2019` |\r\nRight double quote | `\"` | `\u201d` |\r\nEllipsis | `...` | \u2026 |\r\nEn-dash | `--` | \u2013 |\r\nEm-dash | `---` | \u2014 |\r\nCopyright | `(c)` | \u00a9 |\r\nTrademark | `(tm)` | \u2122 |\r\n\r\nIt'd be ideal to add a config setting such that Typographer replacements are done on-the-fly, similarly to the existing implementation of `markdown.preview.linkify`.\r\n\r\nThank you for your time.",
        "createdAt": "2020-09-23 21:21:17",
        "state": "open",
        "number": 107328
    },
    {
        "title": "[html] hover for html entities",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nWhen you hover over an html entity, it would be nice to show a preview of the character or short description of how it would look on the page, etc. Showing Unicode equivalent would be neat as well. E.g. _U+00027_ **`'`** for `&apos;`, _U+000A0_ **`non-breaking space`** for `&nbsp;`.",
        "createdAt": "2020-09-23 21:03:32",
        "state": "open",
        "number": 107326
    },
    {
        "title": "Theme selector should not appear when installing an extension that contains a main",
        "description": "Repro:\r\n\r\n1. Install C# extension\r\n\r\nYou will see this because it contributes themes:\r\n\r\n![image](https://user-images.githubusercontent.com/2193314/94057468-81081880-fd94-11ea-9e9b-9ea09436779d.png)\r\n\r\nI think this is confusing from a user's perspective as the main purpose of the C# extension is not themes. An easy way to separate this category of extensions seems to be whether the extension contains a `main`?",
        "createdAt": "2020-09-23 19:02:15",
        "state": "open",
        "number": 107320
    },
    {
        "title": "Javascript debugger should avoid program end before last step.",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nWhenever you're using the Javascript built-in debugger, which uses Node, running the debugger inside will not cause the program to pause execution before it ends, and the debugger ends up being unable to peek at the variables.\r\n\r\nInstead of having to add spaces at the end of the file just for debugging, there should be an option to set up the debugger to not close the program at the end.",
        "createdAt": "2020-09-23 14:22:09",
        "state": "open",
        "number": 107304
    },
    {
        "title": "Support tab completion / custom key handlers in QuickPick",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nIn https://github.com/jit-y/vscode-advanced-open-file, we create a QuickPick with a full file path that live-updates as you type with files matching the path. I'd like to add tab-completion so that, when you hit tab with the dialog open, it autocompletes the path if there's only one option visible, and if there are multiple matches, autocompletes up to the common prefix between them.\r\n\r\nAPI-wise, it'd be nice to be able to register a keydown event handler or something for when the text input is focused so that we can read whether the user hit Tab and decide how to respond.\r\n\r\nCurrently, tab switches focus to the list of choices, which seems redundant to me since the choice list responds to input even without focus (arrow keys and enter still work). This might be an accessibility thing, though? \r\n\r\nThank you!",
        "createdAt": "2020-09-22 22:27:29",
        "state": "open",
        "number": 107265
    },
    {
        "title": "Layout issue with repl filter in debug pane",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n\r\nSteps to Reproduce:\r\n\r\n1. Repl filter does not properly shrink and grow when resizing VSCode\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\nIt should have similar behavior as the problems filter.\r\n(related to #105866)\r\n",
        "createdAt": "2020-09-22 13:15:25",
        "state": "open",
        "number": 107230
    },
    {
        "title": "Ability to toggle warnings and problems squiggly lines",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nSquiggly lines are severely impeding my ability to read code, they are very distractive. One thing is warnings on code I'm writing or where I at least have a word in styleguides, other thing is reading code of 3rd party library. It looks like the only way to disable them is to actually disable all the linting extensions. There should be something less drastic, \"hide warnings\" or something like that. Setting on project or on individual opened file buffer would work.",
        "createdAt": "2020-09-22 10:43:33",
        "state": "open",
        "number": 107217
    },
    {
        "title": "Editor not scrolling to centre when cursor out of view",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nSteps to reproduce:\r\n1. Open a fairly long file\r\n2. Place the cursor somewhere in the middle\r\n3. Keeping the cursor active on the editor, scroll with mouse wheel up to another part of the code so the cursor is out of sight\r\n4. Press <kbd>\u2192</kbd> to move the cursor\r\n5. Observe that the cursor comes back into view but stays at the very bottom of the editor window\r\n6. Now scroll down so the cursor is out of view again\r\n7. Press <kbd>\u2192</kbd> to move the cursor\r\n8. Observe that the cursor comes back into view but now stays at the very top of the editor window \r\n\r\nExpected behaviour:\r\n\r\nFor the cursor to come back to the middle/centre of the editor, much like when you press <kbd>CMD + G</kbd> (find next) and you browse through the search results, it also centres the search item in the centre of the editor, which is helpful to quickly locate the cursor/active item.\r\n\r\nNow I often find myself losing the cursor and not seeing where it is, because it's all the way at the top or bottom of the screen.\r\n\r\nI believe this used to be centered in the previous version of Code, as I only started noticing this behaviour after I updated to this version.\r\n\r\nVS Code version: Code 1.49.0 (e790b931385d72cf5669fcefc51cdf65990efa5d, 2020-09-10T17:39:53.251Z)\r\nOS version: Darwin x64 18.7.0\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-3770 CPU @ 3.40GHz (8 x 3400)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>metal: disabled_off<br>multiple_raster_threads: enabled_on<br>oop_rasterization: unavailable_off<br>opengl: enabled_on<br>protected_video_decode: unavailable_off<br>rasterization: unavailable_off<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|2, 2, 2|\r\n|Memory (System)|24.00GB (0.97GB free)|\r\n|Process Argv|-psn_0_1749419|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (17)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nproject-manager|ale|11.3.0\r\nvscode-eslint|dba|2.1.8\r\ngitlens|eam|10.2.2\r\nEditorConfig|Edi|0.15.1\r\nfile-icons|fil|1.0.26\r\ngc-excelviewer|Gra|3.0.40\r\nname-that-color|gui|0.1.2\r\njson2csv|kha|0.0.1\r\nl13-diff|L13|0.28.1\r\nprettify-json|moh|0.0.3\r\nvetur|oct|0.27.3\r\nmulti-command|ryu|1.4.0\r\nvscode-fileutils|sle|3.0.1\r\ncontrol-snippets|svi|1.9.1\r\nreopenclosedtab|uyi|1.1.0\r\nhighlight-matching-tag|vin|0.10.0\r\nvscode-todo-highlight|way|1.0.4\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-09-22 09:49:53",
        "state": "open",
        "number": 107214
    },
    {
        "title": "Preview Notebook Editor does not support markdown",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nThe Preview Notebook Editor (VSCode Insiders) does not support markdown cells correctly.\r\n\r\nAs simple markdown cell with 'Hello' display that correctly, but \\<h1>Hello\\</h1> won't work.\r\nThe \\<li>\\<ul>\\<hn> etc basically don't work. Only plain text.\r\n\r\nI am developing via SSH on a linux box.\r\n\r\nTx,\r\nGilles\r\n\r\nVS Code version: Code - Insiders 1.50.0-insider (403a6895f401c397933ec5c4f7d89432a33509b6, 2020-09-18T05:31:09.978Z)\r\nOS version: Windows_NT x64 10.0.18363\r\nRemote OS version: Linux x64 3.10.0-1127.18.2.el7.x86_64\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i5-6200U CPU @ 2.30GHz (4 x 2400)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>opengl: enabled_on<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>vulkan: disabled_off<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|15.86GB (4.90GB free)|\r\n|Process Argv|--crash-reporter-id ac2486d6-f967-48c8-99ef-c51a1f181949|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n|Item|Value|\r\n|---|---|\r\n|Remote|SSH: pxlbig03|\r\n|OS|Linux x64 3.10.0-1127.18.2.el7.x86_64|\r\n|CPUs|Intel(R) Xeon(R) CPU E5-2683 v4 @ 2.10GHz (64 x 2100)|\r\n|Memory (System)|503.60GB (12.29GB free)|\r\n|VM|0%|\r\n</details><details><summary>Extensions (14)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-browser-preview|auc|0.6.7\r\nremote-containers|ms-|0.141.0\r\nremote-ssh|ms-|0.55.0\r\nremote-ssh-edit|ms-|0.55.0\r\nvscode-remote-extensionpack|ms-|0.20.0\r\nfast-open-html-in-browser|D1n|0.0.4\r\nvscode-markdownlint|Dav|0.36.3\r\ngithistory|don|0.6.9\r\nr|Iku|1.4.6\r\nadd-new-line-to-files|jdf|0.1.1\r\npython|ms-|2020.8.109390\r\nvscode-yaml|red|0.11.0\r\nr-lsp|REd|0.1.11\r\nvscodeintellicode|Vis|1.2.10\r\n\r\n(2 theme extensions excluded)\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-09-22 00:04:14",
        "state": "open",
        "number": 107192
    },
    {
        "title": "Allow ${Tokenizing} Capture Group in Search and Replace",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n# Description\r\nCurrently, capture group replacement uses $\\d ($ followed by a number) which creates a limitation when the replacement text immediately following the token is a number.\r\n\r\n# Example (current)\r\n```css\r\nFind: font-size: (\\d)(rem);\r\nReplace: font-size: $100%; // this does not work because the token is interpreted as capture group 100\r\n```\r\n\r\n# Example (improved)\r\n```css\r\nFind: font-size: (\\d)(rem);\r\nReplace: font-size: ${1}00%; // now we will be able to replace font-size: 1rem; with font-size: 100%;\r\n```\r\n\r\n",
        "createdAt": "2020-09-21 20:46:26",
        "state": "open",
        "number": 107189
    },
    {
        "title": "Add a new right-aligned \"description\" property to TreeItems",
        "description": "Similar to the timestamp in the Timeline view, it would be nice to have the ability to have a string that would be rendered right-aligned for each tree item.\r\n\r\nMaybe something like:\r\n\r\n```ts\r\nexport class TreeItem {\r\n    label?: string;\r\n    description?: string | boolean;\r\n    ...\r\n    endDescription?: string; // or endDetails? or even just details, but that feels wrong given the other usages of details\r\n}\r\n```",
        "createdAt": "2020-09-21 19:50:07",
        "state": "open",
        "number": 107183
    },
    {
        "title": "Find/Replace in Selection doesn't obey current selections when not whole lines",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.49.0\r\n- OS Version: Windows NT x64 10.0.19041\r\n\r\nSteps to Reproduce:\r\n\r\n1. Create a box or multiple selection (e.g. CTRL+F2 then expand selection)\r\n2. Find/Replace with search in selection\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\nFind/Replace should obey the exact selection, rather than expanding to whole lines. E.g. I'm trying to select a region and replace a space with a hyphen, but it expands to the whole line, replacing spaces that I want to remain as spaces :-/",
        "createdAt": "2020-09-21 19:49:59",
        "state": "open",
        "number": 107182
    },
    {
        "title": "Simple file dialog: use auto-complete style in the input box",
        "description": "Currently there is no indication in the input box as you are typing that a \"completion\" match has been found. Would be great if there was an auto-complete style, where the rest of the match shows at the end of the typed text, selected.",
        "createdAt": "2020-09-21 16:30:01",
        "state": "open",
        "number": 107171
    },
    {
        "title": "Search view: I ofter hit the dismiss button by accident",
        "description": "I often click on the search result view's dismiss button by accident. That forces me to search again.\r\n- it's hard to see as it is so close to the text \r\n- and only shows up on hover\r\n- it is at a different location every line\r\n- it has the same color as the text\r\n\r\n![image](https://user-images.githubusercontent.com/6461412/93782146-83e6fa00-fc2a-11ea-8a81-31f868fc4f8e.png)\r\n\r\nOther views have it at the end. I suggest to put it there.",
        "createdAt": "2020-09-21 14:51:38",
        "state": "open",
        "number": 107163
    },
    {
        "title": "Settings sync - client side telemetry",
        "description": "When a setting sync failure occurs it would be great if we would validate that the failure occurred against one of the valid settings sync endpoints (insiders/stable). Along with the sync execution failure we should also emit the environment (insiders/stable) against which the failure occurred. \r\n\r\nEdit: Also add the resource uri",
        "createdAt": "2020-09-21 10:56:23",
        "state": "open",
        "number": 107152
    },
    {
        "title": "Different Profiles for different type of Development",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n## Description\r\nIt would be great if the VS code supports different profiles for a different type of development. Like I use VScode for Flutter, React and some backend development. I need a way to disable all my Flutter extensions when doing React and vice versa.\r\n\r\n## Why\r\n- Disable some conflicting snippets, shortcuts etc.\r\n- Speed up loading time with fewer extensions.\r\n- Increase convenience\r\n\r\n## Example.\r\n1. Flutter Mode\r\n  - Flutter, Dart, Flutter Snippets extensions are the only extensions enabled.\r\n  - Maybe a sperate Color Theme and Icon Theme.\r\n2. React Mode\r\n  - Javascript snippets, ESLint are the only extensions enabled\r\n\r\n## Other Details\r\nIf anyone wishes for this feature, please mark your request by liking this issue.",
        "createdAt": "2020-09-21 05:06:45",
        "state": "open",
        "number": 107137
    },
    {
        "title": "Option to combine tabs and title bar",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI generally use VS Code in fullscreen mode to maximize the vertical space available for code. However, I also frequently have to use it as a regular window so I can see something next to it, such as a debugger or other tool. I'd love to be able to reclaim the extra space I get in fullscreen mode even when in a window.\r\n\r\nSpecifically, I'm interested in an option to combine editor tabs and the title bar. Literally just wedge them together. I don't need the buttons on the right side of the tab region, so this actually looks fairly clean, imo.\r\n\r\nCurrent\r\n![image](https://user-images.githubusercontent.com/484784/93721703-b0c1e100-fb46-11ea-8e09-1448f32c65ec.png)\r\n\r\nDesired\r\n![image](https://user-images.githubusercontent.com/484784/93721825-6c831080-fb47-11ea-844b-3a069f7453fb.png)\r\n\r\nHonestly, don't really need the logo either\r\n![image](https://user-images.githubusercontent.com/484784/93721895-cedc1100-fb47-11ea-90cd-bf28313f6086.png)\r\n",
        "createdAt": "2020-09-20 20:48:32",
        "state": "open",
        "number": 107123
    },
    {
        "title": "Open side by side direction to the left",
        "description": "Hi, since the split editor can be opened to the *right* and *down*. Wouldn't it makes sense to also allow set to the *left*?\r\nThen the following option could be set:\r\n```json\r\n  \"workbench.editor.openSideBySideDirection\": \"left\",\r\n```",
        "createdAt": "2020-09-20 19:10:17",
        "state": "open",
        "number": 107121
    },
    {
        "title": "Autohide Minimap",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\n# Motivation\r\n\r\nThere are already a few feature requests to autohide the minimap:\r\n\r\n- #28310 - Option to autohide minimap when in split editor view\r\n- #81550 - Autohide minimap for frames that already show all the code\r\n\r\nThese requests are somewhat awkward, but there is a common sentiment: These users like the minimap in some cases, but it gets in the way in others.\r\n\r\n# Proposal\r\n\r\n***Autohide the minimap. Show on scroll and hover.***\r\n\r\nI think this is better than the previous proposals:\r\n\r\n- Autohide is a familiar UI pattern.\r\n- It should be easier to implement and maintain.\r\n- It mostly solves the use cases described in the previous proposals. \r\n\r\n# Proof of Concept\r\n\r\nFirst define the animation in CSS, and fixup the current-line highlight:\r\n\r\n```css\r\n/* 0.5s fade in/out for the minimap */\r\n.minimap {\r\n    opacity: 0.0;\r\n    transition: opacity 0.5s;\r\n}\r\n.minimap:hover, .minimap:focus, .minimap.scrolling {\r\n    opacity: 1.0;\r\n}\r\n\r\n/* Fix the current-line highlight to be full-width */\r\n.view-overlays {\r\n    width: 100% !important;\r\n}\r\n.current-line {\r\n    width: 100% !important;\r\n}\r\n```\r\n\r\nSince there is no way to detect scrolling in CSS, we also need some custom code:\r\n\r\n```javascript\r\n/** Autohide the Minimap.\r\n * \r\n * @param {Node} editor The DOM node of the Monaco editor.\r\n */\r\nfunction autohideMinimap(editor) {\r\n    let isScrolling = false;\r\n    let timeoutId = null;\r\n\r\n    editor.addEventListener('wheel', (event) => {\r\n        // Throttle to 10Hz.\r\n        if (isScrolling) {\r\n            return;\r\n        } else {\r\n            isScrolling = true;\r\n            setTimeout(() => { isScrolling = false; }, 100);\r\n        }\r\n\r\n        // Add the `.scrolling` class to the minimap.\r\n        // Remove it 2s after scrolling stops.\r\n        let minimap = editor.querySelector('.minimap');\r\n        minimap.classList.add('scrolling');\r\n        clearTimeout(timeoutId);\r\n        timeoutId = setTimeout(() => {\r\n            minimap.classList.remove('scrolling');\r\n        }, 2000);\r\n    })\r\n}\r\n```\r\n\r\nThis function must be called every time a new editor is created, e.g. when switching tabs.\r\n\r\nI am not familiar with the vscode internals. I hacked this up by playing in the dev tools, but I'm sure there's a better way to do it with the Monaco API.",
        "createdAt": "2020-09-20 17:54:17",
        "state": "open",
        "number": 107116
    },
    {
        "title": "Opening projects directories in the same way a file is open",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nHello!\r\n\r\nI'd like to suggest a feature. Often times I find myself having a full path to a file in the system buffer. To open this file in vscode, I press \uff1cCtrl+P\uff1e, \uff1cCtrl+V\uff1e, \uff1cEnter\uff1e. That's very easy and pretty fast. Now I'd like to have a similar functionality but for project directories. Currently one has to press \uff1cCtrl+K\uff1e, \uff1cCtrl+O\uff1e and find a way to paste the path in the system dialog which is often far from perfect. What I see as a way to go is to allow pasting directories in the \uff1cCtrl+R\uff1e dialog, then opening directories will be as easy as opening a file. The \uff1cCtrl+R\uff1e dialog already shows project directories, so pasting directories must be a good fit.",
        "createdAt": "2020-09-20 12:51:24",
        "state": "open",
        "number": 107112
    },
    {
        "title": "`workbench.action.navigateUp`  should navigate to the last focused view, not the rightmost one",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open two split editors\r\n2. Navigate from the left editor to the terminal using `workbench.action.navigateDown`, and then navigate from the terminal using `workbench.action.navigateUp`\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\nRight now, when using `workbench.action.navigateUp`, the rightmost view is focused. This is annoying if you have two split editors and you quickly navigate between the left editor and the terminal, because when using `workbench.action.navigateUp` from the terminal, the right editor is focused, instead of the left one.\r\n\r\nVS Code version: Code 1.49.1 (58bb7b2331731bf72587010e943852e13e6fd3cf, 2020-09-16T23:23:33.049Z)\r\nOS version: Linux x64 5.8.10\r\nRemote OS version: Linux x64 4.15\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-8665U CPU @ 1.90GHz (8 x 3917)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>opengl: enabled_on<br>protected_video_decode: unavailable_off<br>rasterization: disabled_software<br>skia_renderer: enabled_on<br>video_decode: unavailable_off<br>vulkan: disabled_off<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|3, 2, 2|\r\n|Memory (System)|31.03GB (1.45GB free)|\r\n|Process Argv|--no-sandbox --unity-launch --crash-reporter-id 39f0e56d-047c-4994-990f-e6e79755483c|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n|DESKTOP_SESSION|custom|\r\n|XDG_CURRENT_DESKTOP|undefined|\r\n|XDG_SESSION_DESKTOP|custom|\r\n|XDG_SESSION_TYPE|x11|\r\n</details><details><summary>Extensions (10)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-neovim|asv|0.0.62\r\nremote-ssh|ms-|0.55.0\r\nremote-ssh-edit|ms-|0.55.0\r\nvscode-todo-highlight|way|1.0.4\r\ngitlens|eam|10.2.2\r\nerror-gutters|Igo|1.0.1\r\nstatusbarerror|Joe|0.4.0\r\npython|ms-|2020.8.109390\r\nvscode-pylance|ms-|2020.9.5\r\nvscodeintellicode|Vis|1.2.10\r\n\r\n(1 theme extensions excluded)\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-09-20 03:09:38",
        "state": "open",
        "number": 107088
    },
    {
        "title": "Add `workbench.action.navigateLast` command to navigate to the last view",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nI'd like a command for navigating to the last focused view. This is useful when quickly navigating between two views (for example, an editor and the terminal).\r\n\r\nThanks!",
        "createdAt": "2020-09-20 03:03:01",
        "state": "open",
        "number": 107087
    },
    {
        "title": "Keyboard shortcuts for Markdown in Jupyter notebooks",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\nWhen working on a Jupyter notebook with VS Code, it'd be easy and intuitive to disable the `Ctrl+B` shortcut automatically and enable markup shortcuts. That way you can bold/italic/underline-ify text a lot better. (Just like the Markdown support in GitHub and Discord).\r\n\r\nMarkup shortcuts would be the shortcuts we're used to (`Ctrl+B`, `Ctrl+I`, `Ctrl+U`), but I could imagine that people would want to be able to remap it.",
        "createdAt": "2020-09-19 18:56:39",
        "state": "open",
        "number": 107076
    },
    {
        "title": "Add support for new `editor.renderWhitespace` in the View menu",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nCurrently the View menu only supports a boolean `Render Whitespace` menu option. It would be nice if it was improved to support all the new values that the config option `editor.renderWhitespace` supports.\r\n\r\nVS Code version: Code 1.49.1 (58bb7b2331731bf72587010e943852e13e6fd3cf, 2020-09-16T23:21:17.533Z)\r\nOS version: Darwin x64 19.6.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-09-19 15:40:20",
        "state": "open",
        "number": 107068
    },
    {
        "title": "Smart Quoting",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\n## Problems\r\n\r\n### No Escapes for Internal Quotes\r\n\r\nWhenever I copy and paste unquoted text, then surround it with quotes by highlighting the text and pressing a quote key (such that VS Code automatically inserts said quotation character at both ends of the highlighted text), all of the string's internal quotes are not escaped. I have to manually insert escapes so that the outmost quotations correctly enclose the text that was highlighted.\r\n\r\n#### Example in TypeScript\r\n\r\nStarting with this text:\r\n\r\n```typescript\r\n\"hello world\"\r\n```\r\n\r\nHighlighting the above text and pressing the double-quote key results in this invalid TypeScript:\r\n\r\n```typescript\r\n\"\"hello world\"\"\r\n```\r\n\r\n### No Leading Quotes Applied to Multi-line Strings\r\n\r\nIn some programming languages, such as JavaScript and TypeScript, single-quoted and double-quoted strings do not intelligently span multiple lines; in these languages, single-quoted and double-quoted strings that span multiple lines must have each line individually quoted, and concatenated with plus signs (`+`).\r\n\r\nWhenever I copy and paste unquoted text _that spans multiple lines_ in a file corresponding to a language of the aforementioned category, then surround it with quotes by highlighting the text and pressing a quote key (such that VS Code automatically inserts said quotation character at both ends of the highlighted text), the resulting string is invalid, because the leading quote is seen syntactically as unterminated, and the trailing quote that appears at the end of the last line is seen as unexpected, or an initiation of a new string.\r\n\r\n#### Example in TypeScript\r\n\r\nStarting with this text:\r\n\r\n```typescript\r\nThere once was a man from Peru,\r\nWho dreamed he was eating his shoe.\r\n```\r\n\r\nHighlighting the above text and pressing the double-quote key results in this invalid TypeScript:\r\n\r\n```typescript\r\n\"There once was a man from Peru,\r\nWho dreamed he was eating his shoe.\"\r\n```\r\n\r\n## Feature\r\n\r\nI would like to see VS Code implement \"smart quoting,\" which I would define as:\r\n\r\n> The reversible application of escapes and other syntactic markup to a selection of programmatic text such that the resulting quoted string is valid within the syntactic paradigm of the programmatic text, but which encodes within the string the original and identical programmatic text, and whose reversal results in the original selection of text to be quoted.\r\n\r\n### Examples\r\n\r\n#### Single-Line Example\r\n\r\nStarting with this text:\r\n\r\n```typescript\r\n\"hello world\"\r\n```\r\n\r\nHighlighting the above text and pressing the double-quote key results in this _valid_ TypeScript:\r\n\r\n```typescript\r\n\"\\\"hello world\\\"\"\r\n```\r\n\r\n#### Multi-Line Example\r\n\r\nStarting with this text:\r\n\r\n```typescript\r\nThere once was a man from Peru,\r\nWho dreamed he was eating his shoe.\r\n```\r\n\r\nHighlighting the above text and pressing the double-quote key results in this _valid_ TypeScript:\r\n\r\n```typescript\r\n\"There once was a man from Peru, \"\r\n+ \"Who dreamed he was eating his shoe.\"\r\n```\r\n\r\n## Implementation\r\n\r\nI think VS Code should implement the above feature by adding a language-specific \"smart quotation\" API, much like the other APIs described [here](https://code.visualstudio.com/api/language-extensions/overview).",
        "createdAt": "2020-09-19 13:38:56",
        "state": "open",
        "number": 107063
    },
    {
        "title": "New \"colorCustomizations\" options \"editor.findMatchForeground\" & \"editor.findMatchHighlightForeground\"",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI'd really love to see the 2 options `editor.findMatchForeground` & `editor.findMatchHighlightForeground`. Without those I can barely use `editor.findMatchBackground` & `editor.findMatchHighlightBackground` with a \"strong\" accent color since I don't find no background color which won't destroy contrast in some situations if I can't define the accompanying text color:\r\n\r\n![image](https://user-images.githubusercontent.com/30658772/93571964-78c76c00-f995-11ea-9821-22be1503e040.png)\r\n\r\nRight now I'm not using the custom background for my find matches & highlights at all but only use borders, which looks like this:\r\n![image](https://user-images.githubusercontent.com/30658772/93572502-38b4b900-f996-11ea-9fdf-68bcd8da54ef.png)\r\n\r\nThe solution with borders is kind of ok, but really just a workaround. Strong backgrounds would increase the visibility of find matches a lot.",
        "createdAt": "2020-09-18 08:07:13",
        "state": "open",
        "number": 106992
    },
    {
        "title": "quick open should have prefill highlighted text",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nGiven I have some string highlighted in the editor (e.g. `sample.txt`)\r\nWhen I click the keyboard shortcut to open the quick open menu,\r\nI want to have the text `sample.txt` prefilled in the input field.\r\n\r\n![Screen Shot 2020-09-17 at 4 44 01 PM](https://user-images.githubusercontent.com/21690857/93535938-38201200-f905-11ea-805e-9c8f76483322.png)\r\n",
        "createdAt": "2020-09-17 22:45:52",
        "state": "open",
        "number": 106969
    },
    {
        "title": "[UI-Theme] Sidebar color selection/hover/focus should be independent from List",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n## Sidebar Hover\r\na lot of `sidebar` settings as well as `dropdown`, `quickInput`, etc. are all inherited from `list`.  The hover as well as active selection, inactive selection, focus selection are all inherited from `list`.\r\n\r\nInitially, I was going to extra settings for `dropdown` and `quickInput` but then I realized that the odd man out of this is actually the `sidebar`. \r\n\r\nThe hovering background and foreground behavior basically forces you to choose between customizing for the sidebar or for the rest and a lot of times, what works for the sidebar creates a conflict with what works for the rest. \r\n\r\n### Issue\r\nThe main issue is because the explorer already have list indication colors for `warnings` and `errors` plus `gitDecoration` colors too and adding one more color for the text can create an even more crowded color palette and things that are supposed to visually assist the user, can create confusion instead. \r\n\r\nNot only adding a color makes it worse but there are not many colors to pick from, and matching a gitDecoration color shouldn't happen, even if it's just for hovering text.\r\n\r\nSo I wanted the hover foreground for the explorer to be lighter grey/white, a more neutral color, but not for the rest of list hovering settings. Having a color indication for `list` that matches the theme is good for the UI/UX.\r\n\r\nRight now I have to choose to either crowd the explorer with one more color that can conflict with gitDecoration or make all other list hovering neutral.\r\n\r\n*edit: After some more testing, I realized that just hovering settings wouldn't be enough because it would affect other type of selections too. For instance `command palette` selections would not be able to have color if selection for sidebar doesn't have, it would create a mismatch of colors.*\r\n\r\n### Solution\r\nadd to the settings and if not specified, it inherits from `list`:\r\n- `sideBar.hoverForeground` \r\n- `sideBar.activeSelectionForeground`\r\n- `sideBar.inactiveSelectionForeground`\r\n- `sideBar.focusForeground`\r\n\r\nHaving `background` to all these options doesn't seem necessary, but it would give more flexibility for theming.\r\n",
        "createdAt": "2020-09-17 19:22:22",
        "state": "open",
        "number": 106959
    },
    {
        "title": "Enable Pin Icon To Always Remain Visible",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nWith the release of `1.50`, this provided a couple more much-needed configurations to pinned tabs, along with a new pin icon to represent a pinned tab. However, the pin icon itself is only temporarily visible.\r\n\r\nAs i develop away, i lose sight, or find it difficult to read as to which tabs are pinned again.\r\n\r\nAs a feature suggestion, I would like for the pin action icon to **always** remain visible. This way i can easily and quickly visually read from a user experience which tabs are pinned without much thought. \r\n\r\nSee example below (credit to @ChristopherHaws for the [suggestion](https://github.com/microsoft/vscode/issues/98161#issuecomment-693185517) and providing image on issue #98161):\r\n\r\n![image](https://user-images.githubusercontent.com/5934505/93296919-1a3b9b80-f7a5-11ea-8238-d74309eb8177.png)\r\n\r\nAlso, the same could apply on the folder / file explorer sidebar, where the pin icon would always remain visible to the left of the filenames.\r\n\r\nFinally, an approach could be to make this a configurable option. Eg, `workbench.editor.alwaysShowTabPinIcon`.",
        "createdAt": "2020-09-17 18:48:21",
        "state": "open",
        "number": 106956
    },
    {
        "title": "Multi root workspace - task dependency between projects",
        "description": "The use case of compound tasks described [here](https://code.visualstudio.com/docs/editor/tasks#_compound-tasks) can't be applied to multi root workspaces.\r\nThe same use case is used in the docs for multi-root workspaces. And the logic that the different workspaces have dependencies on each other is [already considered in launch configurations](https://code.visualstudio.com/docs/editor/tasks#_compound-tasks) with the compounds attribute.\r\nForm my point of view this logic should also be applied to tasks.\r\nUse cases like asked [here ](https://stackoverflow.com/questions/51600546/how-to-share-tasks-between-vscode-workspace-folders) are very common. And this was already asked by #83887. \r\n\r\nPlease consider to allow dependencies between tasks of workspaces.\r\n\r\nA solution could be to explicitly specify the workspace where the task is located, like it is done with the [variable workspacefolder](https://code.visualstudio.com/docs/editor/variables-reference#_variables-scoped-per-workspace-folder). Like so:\r\n`\"dependsOn\":[\"name of workspace B\":\"other Project task\"]`",
        "createdAt": "2020-09-17 14:21:26",
        "state": "open",
        "number": 106940
    },
    {
        "title": "Show branch name in Welcome screen",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIt would be really helpful to show the current branch name of each folder listed in the \"Recent\" section of the \"Welcome\" screen.\r\n\r\nExample:\r\n\r\n**Recent**\r\nmyCurrentProject1 ~/Development *master*\r\nmyCurrentProject1 (Copy 1) ~/Development *bugfix/typo*\r\nmyCurrentProject1 (Copy 2) ~/Development *feature/add-screen*\r\nmyCurrentProject2 ~/Development *master** *(uncommitted files)*\r\nMore... (^R)",
        "createdAt": "2020-09-17 11:13:06",
        "state": "open",
        "number": 106937
    },
    {
        "title": "Save all in all opened windows",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nCurrent behaviour : ``workbench.action.files.saveAll`` shortcut only saves modifications of the files of the selected window.\r\n\r\nFeature request : a similar shortcut to save all files in all opened windows.",
        "createdAt": "2020-09-17 10:41:09",
        "state": "open",
        "number": 106933
    },
    {
        "title": "Separate Open Editors from Explorer (thus creating a Vertical Tab Bar)",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nRoot cause:\r\n- There are often times when we debug a difficult issue and we have to open a lot of files.\r\n- It often happens that file names are quite long, thus the tab bar space is quickly exhausted.\r\n\r\nAlready-explored solutions:\r\n- Some editors have addressed this concern by enabling a vertical tab bar. \r\n\r\nExisting value:\r\n- VS Code already has such a thing: the Open Editors area :). However, this area is tied into the Explorer, which forces it to be bundled with the project files explorer.\r\n\r\nProposed UI:\r\n![image](https://user-images.githubusercontent.com/60734380/93439196-8cf46600-f8ce-11ea-9cea-8bad2f609316.png)\r\n\r\nPerceived improvements:\r\n- Vertical tab allowing more flexibility in working with large code bases.\r\n- Improving use of horizontal screen space\r\n- No conflict between explorer / open editors.\r\n- Open Editors are closer to the Search / Version Control area, which /may/ create a better user experience when navigating search results / version history.\r\n- Reduces the necessity to keep reorganizing tabs / pin tabs. In editors where vertical tab bars are enabled, I have personally perceived increased productivity due to the fact that I can build STABLE tab editor layout, which helps me a lot when debugging in multiple files (I confidently know where my entry point is and what the affected modules are).\r\n- Vertical tab bar can be reused for other purposes",
        "createdAt": "2020-09-17 08:21:11",
        "state": "open",
        "number": 106927
    },
    {
        "title": "Allow decoding, editing and re-encoding of binary files",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nThis request is well explained [here](https://github.com/microsoft/vscode/issues/2582#issuecomment-623024888) as use case 1 but I'll paraphrase for convenience:\r\nAdd the ability to \"on demand\" allow decoding of binary files to text on open, allow editing of the decoded content, and then re-encode on save. Examples are binary formats like Applescript's (scpt) files, or any compressed or otherwise encoded single-file format\r\n\r\nThe CustomEditor and CustomTextEditor are great for implementing your own viewer/editor, but in this case we want to perform an arbitrary set of actions to decode the content, and then delegate the editing/viewing to the existing Text Editor (or possibly another editor - presumably depending on the decompressed file extension?).\r\n\r\nThis problem is partially solved (for the viewing case rather than the editing case) by https://code.visualstudio.com/api/extension-guides/virtual-documents but unfortunately not via the file->Open FIle entry point.\r\n\r\nThe use case could be generalised in a number of ways e.g rather than being limited to binary files, any file type could go through an arbitrary conversion process before being viewed or edited in an arbitrary viewer/editor.\r\n\r\n",
        "createdAt": "2020-09-17 06:48:44",
        "state": "open",
        "number": 106916
    },
    {
        "title": "Web: cannot drop VSIX into extensions view to install",
        "description": "I see a blue drop target but nothing happens.",
        "createdAt": "2020-09-17 05:50:39",
        "state": "open",
        "number": 106914
    },
    {
        "title": "when stashing, use commit message if populated",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nCurrent Behavior:\r\nI have staged changes and typed a commit message.\r\nI choose Stash > Stash\r\nI am prompted to enter a stash description\r\n\r\nDesired Behavior:\r\nIf commit message is entered, automatically use it as the stash description instead of prompting.\r\n",
        "createdAt": "2020-09-17 02:13:49",
        "state": "open",
        "number": 106907
    },
    {
        "title": "Makefile should auto-indent after first line of a rule",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nAfter starting a Makefile rule with a target and optional prerequisite, the 2nd and subsequent lines must be indented with a hard tab. These lines should be auto-indented in Visual Studio Code. Currently this doesn't happen.\r\n\r\nFor example, when creating the following rule, the second line should indent automatically:\r\n\r\n```Makefile\r\ntarget: prerequisite\r\n    command 1  # <-vscode should auto-indent here \r\n    command 2\r\n```\r\n\r\nVS Code version: Code 1.49.0 (e790b931385d72cf5669fcefc51cdf65990efa5d, 2020-09-10T17:39:53.251Z)\r\nOS version: Darwin x64 19.6.0\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-1068NG7 CPU @ 2.30GHz (8 x 2300)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>metal: disabled_off<br>multiple_raster_threads: enabled_on<br>oop_rasterization: enabled<br>opengl: enabled_on<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|4, 5, 5|\r\n|Memory (System)|16.00GB (0.23GB free)|\r\n|Process Argv|. --crash-reporter-id 37efd521-53fd-40f5-8410-45807a2e904d|\r\n|Screen Reader|no|\r\n|VM|20%|\r\n</details><details><summary>Extensions (22)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\ngithub-markdown-preview|bie|0.0.2\r\nmarkdown-checkbox|bie|0.1.3\r\nmarkdown-emoji|bie|0.0.9\r\nmarkdown-preview-github-styles|bie|0.1.6\r\nmarkdown-yaml-preamble|bie|0.0.4\r\nbetter-toml|bun|0.3.2\r\ngitignore|cod|0.6.0\r\nvscode-markdownlint|Dav|0.36.3\r\ngitlens|eam|10.2.2\r\nEditorConfig|Edi|0.15.1\r\ngc-excelviewer|Gra|3.0.40\r\nvscode-systemd-support|han|0.1.1\r\nsyntax-project-pbxproj|mar|0.1.3\r\npython|ms-|2020.8.109390\r\ncpptools|ms-|1.0.0\r\nautodocstring|njp|0.5.3\r\npreview-vscode|sea|2.1.0\r\nvscode-scheme|sjh|0.4.0\r\nvscodeintellicode|Vis|1.2.10\r\nvscode-icons|vsc|10.2.0\r\nvscode-ansible|vsc|0.5.2\r\npropertylist|zho|0.0.2\r\n\r\n(1 theme extensions excluded)\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-09-16 23:11:57",
        "state": "open",
        "number": 106899
    },
    {
        "title": "Change Language Mode drop-down should allow filtering by file extension",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIn the [Change Language Mode drop-down](https://code.visualstudio.com/docs/languages/overview#_changing-the-language-for-the-selected-file), it would be nice if we could filter by extension. e.g. at the moment for a `.jsx` file, typing `jsx` returns nothing. I have to start typing `javascriptreact`:\r\n\r\n![select-language-type-vscode](https://user-images.githubusercontent.com/2462659/93381755-094c6200-f859-11ea-8f18-730f1c068685.png)\r\n\r\nFor TypeScript, `ts` gives you:\r\n\r\n![select-language-type-vscode-ts](https://user-images.githubusercontent.com/2462659/93381956-503a5780-f859-11ea-90e9-f7a3503c5c44.png)\r\n\r\nWhich doesn't seem intuitive. I'd expected the same results, but taking the extension into account and ordering them:\r\n\r\n```\r\nTypeScript > TypeScript React > JSON with Comments > CSS (Styled Components\r\n```\r\n\r\n\r\n",
        "createdAt": "2020-09-16 19:22:15",
        "state": "open",
        "number": 106886
    },
    {
        "title": "Asterisks not working in console filter",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nI printed two lines to the Debug Console:\r\n\r\nprint(\"****\")\r\nprint(\"@@@@\")\r\n\r\nWhen entering text in the filter, only the at-signs work. There is no change to the console output when entering the asterisks. I thought perhaps this was a regex, but escaping the asterisks doesn't help.\r\n\r\nAdditionally, the first time I tried this, the app immediately beach-balled, but I can't reproduce that behavior.\r\n\r\nMore testing... \"/\\*/\\*/\\*\" matches lines with paths, so \"\\*\" is obviously a wildcard of some sort... perhaps just a glob? But \"\\\\*\" doesn't match it literally, so \u00af\\\\\\_(\u30c4)\\_/\u00af.\r\n\r\nVS Code version: Code 1.49.0 (e790b931385d72cf5669fcefc51cdf65990efa5d, 2020-09-10T17:39:53.251Z)\r\nOS version: Darwin x64 19.6.0\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Xeon(R) W-2191B CPU @ 2.30GHz (36 x 2300)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>metal: disabled_off<br>multiple_raster_threads: enabled_on<br>oop_rasterization: enabled<br>opengl: enabled_on<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|7, 7, 6|\r\n|Memory (System)|128.00GB (67.73GB free)|\r\n|Process Argv|--crash-reporter-id 40358437-6b26-43a0-96dc-9ccf8df23aa0|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-09-16 18:00:24",
        "state": "open",
        "number": 106880
    },
    {
        "title": "Support syntax-highlight CompletionItem.detail when shown above the documentation",
        "description": "`CompletionItem` has a `detail` field that is documented as:\r\n\r\n> A human-readable string with additional information about this item, like type or symbol information.\r\n\r\nIt's a `string` and is rendered above the documentation when the extra popup is open. However it doesn't get any syntax highlighting so it looks kinda bad:\r\n\r\n![Screenshot 2020-09-16 at 14 06 34](https://user-images.githubusercontent.com/1078012/93341333-e2286d00-f825-11ea-9dee-6857ac0bcff6.png)\r\n\r\nWe can do syntax highlighting in the `documentation` field (as it's `string | MarkdownString`):\r\n\r\n![Screenshot 2020-09-16 at 14 07 32](https://user-images.githubusercontent.com/1078012/93341407-fb311e00-f825-11ea-88f6-58e9fa805d14.png)\r\n\r\nHowever if we put the signature there, then it will be duplicated because it's also in the `detail` (and if we remove from `detail` it won't ship in the collapsed completion list).\r\n\r\nIt would be nice to support highlighting this in some way (whether it's by extending the type, just always doing it, or having some way to suppress the `detail` from the extended popup so it can be inserted above the docs manually).",
        "createdAt": "2020-09-16 13:10:01",
        "state": "open",
        "number": 106862
    },
    {
        "title": "Show whitespace in whitespace diff",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nHere's my use case: There are changes indicated in the VCS panel. I open a diff to inspect the changes. The diff view indicates zero changes:\r\n\r\n![image](https://user-images.githubusercontent.com/1658949/93332045-82c85e00-f821-11ea-9395-55d756b6b58a.png)\r\n\r\nI remember that whitespace diff is disabled and enable it.\r\n\r\n![image](https://user-images.githubusercontent.com/1658949/93332109-9b387880-f821-11ea-9994-87dd8b0f91e5.png)\r\n\r\nNow I can see that a lot of lines changed, but I still have no clue what the change was. The only way to actually _see_ it is to change `editor.renderWhitespace`. This is undesirable, because it has effects outside of the diff view. And adjusting the setting breaks the entire workflow, as the change is likely only temporarily relevant.\r\n\r\nWhat I would love:\r\n\r\n- Being able to toggle whitespace visibility in the diff view. Maybe toggle it automatically if whitespace diff indication is desired.\r\n- Being able to set `editor.renderWhitespace` for the diff view separate from the main editor.\r\n\r\nVS Code version: Code 1.49.0 (e790b931385d72cf5669fcefc51cdf65990efa5d, 2020-09-10T13:22:08.892Z)\r\nOS version: Windows_NT x64 10.0.19041\r\nRemote OS version: Linux x64 4.19.104-microsoft-standard\r\nRemote OS version: Linux x64 4.19.104-microsoft-standard\r\nRemote OS version: Linux x64 4.19.104-microsoft-standard\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-09-16 11:41:05",
        "state": "open",
        "number": 106855
    },
    {
        "title": "Dialog Window: Highlights",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nFunctionally extensions work mostly flawlessly, though some of the dialog windows can be confusing and apply dependencies to a codebase eg.) linters. There could be a more effective ranking of impact through extensions with some versioning of rating or symbols.\r\n",
        "createdAt": "2020-09-15 23:27:55",
        "state": "open",
        "number": 106810
    },
    {
        "title": "Enabling using Transform to Lower/Upper/Title Case without changing String Literals",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nHi there,\r\n\r\nI would love to have the 'Transform to Lower/Upper/Title Case' command to be aware of string literals.\r\n\r\nWhat I mean by that is I would love to have the option to enable the following behavior for that commands:\r\n\r\nInput that I'm going to Ctrl + A and then Ctrl + Shift + P -> **Transform to Lowercase**:\r\n```sql\r\nSELECT \r\n  * \r\nFROM TABLE\r\nWHERE USER = 'TESTUSER';\r\n```\r\nShould result in the following expected behaviour:\r\n```sql\r\nselect \r\n  *\r\nfrom table \r\nwhere user = 'TESTUSER';\r\n```\r\nThe same goes for **Transform to Uppercase** and **Transform to Title Case**. \r\n\r\nThis is especially helpful when you have to rewrite/code a lot of inherited code that doesn't comply with your coding style guide for example.",
        "createdAt": "2020-09-15 23:21:41",
        "state": "open",
        "number": 106807
    },
    {
        "title": "Investigate predefined file filters search",
        "description": "In #20530 we've discussed custom file sets for search, and in the process the originally simple ask for a way to search in opened editors evolved into a large scale feature request involving extension contribution APIs, new UX, and updates to the search UI. \r\n\r\nThis issue tracks scaling that back to **just searching in opened editors** in order to more quickly experiment with various ways of implementing the general feature. \r\n\r\nThere are two primary proposals for how this might look: \r\n\r\n1. \"Universe\" Dropdown. This is what products like Dreamweaver use, where a dropdown contains a collection of \"universes\" of files to search: \r\n![XyjNz](https://user-images.githubusercontent.com/507708/91241794-68cdbb00-e74e-11ea-97b2-776ae3f5526a.png)\r\n\r\nIn this case, the dropdown would configure the \"universe\" of files to search, and the include and exclude filters would further narrow down files within that universe. \r\n\r\nIn this model, one could search things like \"all opened editors with .ts extension\", but not things like \"all opened editors and additionally all files in workspace with .ts extension\" or \"all opened editors and all test files\" (assuming in the future extensions can contribute items)\r\n\r\n2. Custom Include/Exclude Globs. This is what products like Sublime use:\r\n![image](https://user-images.githubusercontent.com/153062/68340634-a9fbbe00-009b-11ea-806f-6f432214271d.png)\r\n(Note sublime surfaces these globs via a dropdown, but this is not the \"universe\" UX of above)\r\nAnd would likely be surfaced through `@` blobs similar to the extension search:\r\n![image](https://user-images.githubusercontent.com/8586769/90945226-77c40e80-e3d8-11ea-83e2-ce6f407bf269.png)\r\n\r\n\r\nIn this case, each of these globs are entered directly into the include/exclude inputs, and they expand to some set of files/globs at searchtime.\r\n\r\nIn this model, one could search things like \"all opened editors and additionally all files in workspace with .ts extension\" and \"all opened editors and also all test files\", but not things like \"all opened editors with .ts extension\".\r\n\r\nOne note of consideration with this approach is that we sill would need to support searching in a directory literally named \"`@open`\", so some means of escaping or disabling the expansions is required. This could be done with a \"use `@` expansions\" toggle in the include input, similar to the existing \"use global ignores\" toggle in the exclude input: \r\n![image](https://user-images.githubusercontent.com/8586769/93248322-8a660500-f744-11ea-868a-1d02c08846a6.png)\r\n\r\nOpen questions: \r\n1. Which model is more important to support? \"This universe of files, filtered with these include/excludes\", or \"include/exclude this meta-glob in addition to the rest of my globs\"? IMO the first seems more helpful, but I could be convinced either way.\r\n2. Do these UI's necessarily force the above models?",
        "createdAt": "2020-09-15 18:21:07",
        "state": "open",
        "number": 106790
    },
    {
        "title": "Allow fzf style query in workspaceSymbols",
        "description": "The go language server started to provide the [fzf style search query](https://github.com/junegunn/fzf#search-syntax) support but the results are filtered out by VS Code that performs its own matching/sorting on the results the workspace symbols providers return.\r\n\r\nFor example, for query `^http`, the language server returned \r\n```\r\n\r\n[Trace - 14:04:17.665 PM] Sending request 'workspace/symbol - (171)'.\r\nParams: {\"query\":\"^http\"}\r\n\r\n\r\n[Trace - 14:04:17.706 PM] Received response 'workspace/symbol - (171)' in 40ms.\r\nResult: [\r\n{\"name\":\"httpresponse.Doc\",\"kind\":14,\"location\":{\"uri\":\"file:///Users/hakim/go/src/golang.org/x/tools/go/analysis/passes/httpresponse/httpresponse.go\",\"range\":{\"start\":{\"line\":18,\"character\":6},\"end\":{\"line\":18,\"character\":9}}},\"containerName\":\"golang.org/x/tools/go/analysis/passes/httpresponse\"},\r\n{\"name\":\"httpresponse.Analyzer\",\"kind\":13,\"location\":{\"uri\":\"file:///Users/hakim/go/src/golang.org/x/tools/go/analysis/passes/httpresponse/httpresponse.go\",\"range\":{\"start\":{\"line\":34,\"character\":4},\"end\":{\"line\":34,\"character\":12}}},\"containerName\":\"golang.org/x/tools/go/analysis/passes/httpresponse\"},\r\n...\r\n```\r\n\r\nBut vscode presents no results since none of the entries match `^http`.",
        "createdAt": "2020-09-15 18:07:39",
        "state": "open",
        "number": 106788
    },
    {
        "title": "Rank exact match over history matches",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\nWhen using QuickSearch (CMD+P on Mac), rank exact file matches higher than recent history matches (search.quickOpen.includeHistory). Specifically, imagine if you have a file \"fooBar.js\" and a recently opened file \"fooBarSomeOtherThing.js\". If you QuickSearch with query \"fooBar\", \"fooBarSomeOtherThing.js\" from recently opened files will be ranked higher than fooBar.js. I believe the exact file match should be ranked higher in this case.\r\n\r\n<img width=\"615\" alt=\"Screen Shot 2020-09-25 at 10 27 09 AM\" src=\"https://user-images.githubusercontent.com/146886/94297668-b8540200-ff19-11ea-96ee-518472e85a18.png\">",
        "createdAt": "2020-09-15 17:28:21",
        "state": "open",
        "number": 106786
    },
    {
        "title": "[json] add quick fix for string to number conversion",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\nA feature that would be very helpful to me in the quick drafting and validation of JSON docs to schemas would be the casting of types.\r\n\r\n**What I find annoying:**\r\n\r\n`\"number_id\": \"5\"` (`number_id` should be an `int`)\r\n\r\nSo I have to convert it to int myself.\r\n\r\nWhat would be a huge time-saver is a quick fix that does this automatically.\r\n\r\nEx.\r\n\r\n- (str -> int) `\"5\"` -> `5`\r\n- (number -> int via. rounding) `53.44` -> `53`\r\n- (single-element array -> str|int|number) `[\"44.1\"]` -> `\"44.1\"`\r\n- et cetera\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nMake this a quick fix please, so I can quickly run through the 'Problems' panel and instantly do this for all issues at once.\r\n",
        "createdAt": "2020-09-15 13:16:49",
        "state": "open",
        "number": 106764
    },
    {
        "title": "Investigation: Installing the Remote WSL extension out of the box",
        "description": "TODO",
        "createdAt": "2020-09-15 12:46:12",
        "state": "open",
        "number": 106759
    },
    {
        "title": "Add setting to disable 'retry as sudo'",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nFor a specific workspace I'd like to prevent the 'retry a sudo' feature. Using a code-workspace setting would be good, but actually there seems to be no setting to disable this feature - yet. Please create it.",
        "createdAt": "2020-09-15 12:41:37",
        "state": "open",
        "number": 106758
    },
    {
        "title": "add sign in natively to program",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nplease add sign in function to visual studio code without browser. constantly have to sign back in even with sync on. tends to happen after closing colaboration sessions\r\n\r\nVS Code version: Code 1.49.0 (e790b931385d72cf5669fcefc51cdf65990efa5d, 2020-09-10T13:22:08.892Z)\r\nOS version: Windows_NT x64 10.0.17763\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-09-15 11:33:17",
        "state": "open",
        "number": 106749
    },
    {
        "title": "Show enumDescriptions in settings UI dropdowns",
        "description": "Issue Type: <b>Bug</b>\r\n\r\n![image](https://user-images.githubusercontent.com/9205389/93183965-fa23c200-f73b-11ea-8fe1-45f24f9fc543.png)\r\n\r\n\r\nVS Code version: Code - Insiders 1.50.0-insider (cca20eba8974b1d6b6a9b71bf4e60a29c8f26648, 2020-09-12T00:56:22.923Z)\r\nOS version: Darwin x64 19.4.0\r\nRemote OS version: Linux x64 4.19.76-linuxkit\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i9-9980HK CPU @ 2.40GHz (16 x 2400)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>metal: disabled_off<br>multiple_raster_threads: enabled_on<br>oop_rasterization: enabled<br>opengl: enabled_on<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|2, 2, 2|\r\n|Memory (System)|32.00GB (0.01GB free)|\r\n|Process Argv|-psn_0_31661616 --crash-reporter-id 7aad610c-0e6b-48aa-ba87-b704b1b543cf|\r\n|Screen Reader|no|\r\n|VM|22%|\r\n\r\n|Item|Value|\r\n|---|---|\r\n|Remote|Dev Container: Alpine|\r\n|OS|Linux x64 4.19.76-linuxkit|\r\n|CPUs|Intel(R) Core(TM) i9-9980HK CPU @ 2.40GHz (4 x 2400)|\r\n|Memory (System)|7.78GB (0.86GB free)|\r\n|VM|0%|\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-09-15 08:12:52",
        "state": "open",
        "number": 106737
    },
    {
        "title": "editor.renderWhitespace should have option for selection+trailing",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nRight now you're limited to picking between `selection` (old) or `trailing` (new), but if you want both behaviours you're out of luck.\r\n\r\nThere should be an option allowing both to be true.",
        "createdAt": "2020-09-14 21:53:50",
        "state": "open",
        "number": 106697
    },
    {
        "title": "Explore API implications for allowing multiple notebook extensions to share the same file format",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nCurrently the notebook API consist of three parts: content persistence (content provider), notebook execution (notebook kernels) and output rendering (output renderers). This abstraction can help reduce redundant code, for example, .NET and Python Jupyter notebooks can share the same content provider as the parsing/persisting logic is identical.\r\n\r\nHowever, it's not clear yet how language extensions would opt-in if the content provider is shared. One example is how would a .NET extension decide if it should contribute actions/commands to the editor title bar / context menu in a `ipynb` files.",
        "createdAt": "2020-09-14 20:32:08",
        "state": "open",
        "number": 106694
    },
    {
        "title": "Feature: In Screencast Mode, keep the current line fixed in the center, so it doesn't get obstructed by the Screencast Mode hotkey displays.",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nThis is a feature request.\r\n\r\nWhenever you are editing a line in screencast mode, sometimes, you trigger hotkeys to initiate some action or command in Visual Studio Code. When this happens, the hotkeys are displayed and overlaid on top of the document editing portion of Visual Studio Code.\r\n\r\nIt is fine and dandy, but when you are constantly editing text in the area right behind where the hotkey overlays are usually displayed in, it blocks the view of the text editing part, and some viewers actually couldn't see clearly what was being typed out on the screen.\r\n\r\nI would like to propose two methods, but I prefer the former, and hence this issue is about that.\r\n\r\n1. Have the text editing line always be centered on the screen. That means, when you are scrolling up/down in the document, it's the document that scrolls down/up, while keeping the text cursor and the currently highlighted line fixed in the center of the screen. This mode should only be active when the screencast mode is enabled, and the producer of the livestream wants to have this enabled. But maybe it can be useful as a general feature.\r\n\r\n2. Whenever the text editing line is detected to be near the bottom of the Visual Studio Code viewport and hotkeys are triggered, instead of displaying the hotkeys in the usual areas, display the hotkeys in the upper portion of the viewport, where it won't obstruct the text cursor and the edited text.\r\n\r\nI don't know if No. 2 will work, considering that there are multiple screen resolutions to take into account, and whatnot, but I think that, by keeping the current line centered on the screen at all times when editing the document, it makes the screencast mode more obvious to the livestream viewers and the hotkey displays won't obstruct their viewing experiences.\r\n\r\nWhen I say \"current line\" or \"currently highlighted line\", I am referring to the line where the text cursor is on at that point in time. For me, Visual Studio Code highlights or lightens up the current line where the text cursor is on, so I call it \"currently highlighted line\".\r\n\r\nThoughts?\r\n",
        "createdAt": "2020-09-14 19:45:36",
        "state": "open",
        "number": 106690
    },
    {
        "title": "Editor preview mode for debugging only",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nTo me the general preview mode is quite useless (#105600).\r\nBut when debugging it would actually help a lot since afterwards I wouldn't have to close all those editors with third-party code I stepped through all the time.\r\nThere is precedent with the \"Enable preview from quick open\" setting.",
        "createdAt": "2020-09-14 18:22:37",
        "state": "open",
        "number": 106686
    },
    {
        "title": "Explore notebook \"sub\"-keymap support",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nNotebook actions we ship in the core have VS Code _inspired_ keybindings bound to them, with which existing users can manipulate the notebook content with the keyboard shortcuts they are already with in the text editors.\r\n\r\nHowever Jupyter users may prefer the _Vim-like_ keybindings from traditional Jupyter web apps. Those keybindings may have conflicts with the builtin ones. To avoid conflicts, we can turn them into keymaps (builtin nb keymap and a Jupyter keymap) but they should be only scoped to **Notebook** (meaning you can install a sublime keymap for the whole workbench and also a notebook keymap).",
        "createdAt": "2020-09-14 17:41:04",
        "state": "open",
        "number": 106679
    },
    {
        "title": "MacOS: remember minimized state of windows when restarting the app",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n<img width=\"768\" alt=\"Screenshot 2020-09-14 at 20 32 01\" src=\"https://user-images.githubusercontent.com/1101002/93118715-5c8faa80-f6c9-11ea-90ba-3def21731858.png\">\r\n\r\nOften I'm working on multiple projects, but at any given time I want to only have a couple of windows open that are related to the feature or project I have active at that moment.\r\n\r\nI then have multiple windows open in VS Code, but I minimize the excess windows that are not needed for the exact task that I'm working on. These are still visible in the dock, but don't come in the way when switching windows.\r\n\r\nJust like VS Code remembers the state of open tabs over sessions, I'd like it to minimize the windows that I had minimized in my last session upon restart. Now I basically have to always minimize the extra windows manually, which is especially tiresome since the order they open might be unpredictable. I often just minimize all of them one by one, and then re-expand the ones that I want.\r\n\r\nI would also like it if VS Code then prioritised initializing the expanded windows first upon startup. With half-a-dozen or more projects open, the startup does take a few seconds, but I usually only need a couple of them at first (meaning the ones I had open the last time).\r\n\r\nThe lack of this feature makes me slightly dread closing the app. Keeping the app open leads to decrease in battery life and usable memory, or at least that's the user impression. If closing and opening the app didn't have any UX implications, I would do it more often, as I often run my development servers from VS Code and quitting the app is a convenient way to close all of them at once when I'm done with my work (now I have to go to each window and quit the terminal tasks one by one).",
        "createdAt": "2020-09-14 17:38:07",
        "state": "open",
        "number": 106678
    },
    {
        "title": "Git: Support optional branch picking in the repository picker",
        "description": "",
        "createdAt": "2020-09-14 15:01:09",
        "state": "open",
        "number": 106664
    },
    {
        "title": "Add `selectBrackets:false/true` argument to `editor.action.smartSelect.expand` (keybinding)",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nIt would be very useful if you could add an argument like `selectBrackets` (true/false) to `editor.action.smartSelect.expand`.\r\nI know about `editor.action.selectToBracket` existing but **it can't grow with selection.**\r\n\r\nOr maybe can we change something with `editor.action.selectToBracket` ?\r\n",
        "createdAt": "2020-09-14 11:33:46",
        "state": "open",
        "number": 106649
    },
    {
        "title": "Provide API for extensions to move cursor without affecting history",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nHello!\r\nI would like to be able to write an extension, that can move the cursor without affecting cursor history. To the best of my knowledge the only way to move the cursor from within extension is:\r\n```\r\neditor.selection = new vscode.Selection(...);\r\n```\r\nHowever, this affects the history of cursor navigation, as it would add an entry to cursor history list, which will affect where Alt+Left command will take you. Here is hwy I need it: I am a blind VSCode user; in order to navigate around source code files more effectively, I wrote IndentNav extension (https://github.com/mltony/vscode-indent-nav/). Alt+Up/Down takes you to next/previous line with the same indentation level. However, this also pollutes cursor navigation history, so that while I'm using IndentNav, Alt+Left arrow never takes you to the previous file, but rather, to the previous location within the same file where I have happened to be using IndentNav. Thus, I can either use IndentNav, or be able to navigate back and forth using Alt+Left/Right, but not both at the same time. IndentNav commands should be treated more like cursor navigation commands, e.g. next/previous line, but I found no way of achieving this from within extension.\r\n\r\nI looked at the source code of move by word commands of VSCode, and I saw that they update the cursor via:\r\n```\r\neditor._getCursors().setStates('moveByWordCommand', CursorChangeReason.NotSet, result.map(r => CursorState.fromModelSelection(r))); \r\n```\r\nHowever this way doesn't seem to work from within extension, as this API is not exposed.\r\nI also feel that this issue is accessibility-related, since I have an NVDA add-on IndentNav, but it doesn't work with VSCode, since VSCode only provides a few lines of text at a time in accessibility mode, so cc @isidorn. If this accessibility restriction could be fixed - I won't have a need for a separate extension and this feature request would no longer be relevant.",
        "createdAt": "2020-09-13 21:55:37",
        "state": "open",
        "number": 106603
    },
    {
        "title": "New file and folder support ../ syntax to create in parent",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nWhen a file is open in vs code the folder in which the file is available has been selected in File Explorer tab.\r\nAnd from here if we want to create a file in the above directory by using `../` it's says invalid file name.\r\n",
        "createdAt": "2020-09-13 15:31:48",
        "state": "open",
        "number": 106593
    },
    {
        "title": "Get File Name from user via Explorer (sideclick -> new file) method instead of InputBox in Extension",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nWhile Creating a file via extension we will get name via \"InputBox\" or \"Dialog\".\r\nInstead, need an API for Letting a user enter the file name from the explorer.\r\n\r\n",
        "createdAt": "2020-09-13 09:59:26",
        "state": "open",
        "number": 106582
    },
    {
        "title": "The breakpoints UI is really confusing",
        "description": "(i'm using vscode-cpptools over ssh to a linux box debugging with gdb)\r\n\r\nFor example:\r\n\r\n- there's right-click menu items for \"Enable/Disable All Breakpoints\", but that seems to be different from whatever this button does:\r\n![image](https://user-images.githubusercontent.com/1088194/93006326-a6349580-f50f-11ea-98a8-3c3debf4ccac.png) what's the difference between 'active' and 'enabled' ?\r\n- there seem to be 3 different 'enable' / 'active' states:\r\n  - the red circle, which can also be grey, or hollow. what do those even mean? it can also be white, for some reason.\r\n  - the checkbox\r\n  - the whole line can be greyed out, does this mean the code isn't loaded or the breakpoint is disabled, de-activated?\r\n- shouldn't there be a right-click menu item in the breakpoint list to enable/disable a breakpoint. How about 'Activate All Breakpoints' ?\r\n- if you click the 'Deactivate Breakpoints' button, then toggle the checkbox on one breakpoint (or add another breakpoint in the code), the whole lot seem to be re-activated, is this intentional? seems weird.\r\n\r\n- if you click on a breakpoint in the breakpoints list) then the line is highlighted (and the circle turns white always, even if it was grey or hollow before, hiding the current state, why?). then if you use the cursor keys to move the selection to a different breakpoint, the original one stays selected (with its white circle), but hitting space toggles the checkbox of the other breakpoint. which one is supposed to be selected here? how many highlights do you need?\r\n- there's a checkbox that can be toggled with the space bar, why no multi-select?",
        "createdAt": "2020-09-12 23:03:23",
        "state": "open",
        "number": 106559
    },
    {
        "title": "Custom label tags in resent list ",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nProposal:\r\n- The list of resent project could be better if there was for each line a place for label text.\r\n- In the label one can make a note about the project let's say \"worked on this but XmlDecoder did not work\" or \"This is the same as Foo project but with Linting\"\r\n- When open VSCode a small icon can be placed to the left on each reson project and when hover over it, it display the text.\r\n\r\nFor me that learn React I read lots of code and load up many forks and take notes and my reson list is so useful and would love to comment on the reson list like this.\r\n![image](https://user-images.githubusercontent.com/3285249/92950988-ed624e00-f45d-11ea-9637-80287d5b1eaa.png)\r\n",
        "createdAt": "2020-09-11 16:46:58",
        "state": "open",
        "number": 106506
    },
    {
        "title": "Multiple Cursors - Preserve Case",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n**Use Case**\r\nTake the following:\r\n`const [value, setValue] = useState();`\r\n\r\nI want to change it to:\r\n`const [array, setArray] = useState();`\r\n\r\n**Feature Ask**\r\nIt would be great to:\r\n1. Select `value`.\r\n2. Press `Ctrl+D`.\r\n3. Type `array`.\r\n4. See that both symbols have changed, while preserving their proper casing.\r\n\r\nRight now, I need to conduct two edit operations to do this.  Alternatively, I can use a single Find & Replace operation, but that would be disproportionately time-consuming for this task, as well as less precise.",
        "createdAt": "2020-09-11 16:33:12",
        "state": "open",
        "number": 106502
    },
    {
        "title": "Publish Linux ARM deb, rpm and snap to repositories",
        "description": "- [ ] Deb\r\n- [ ] RPM\r\n- [ ] Snap",
        "createdAt": "2020-09-11 10:59:47",
        "state": "open",
        "number": 106473
    },
    {
        "title": "Allow createWebviewPanel in row above active column",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nI have an extension that I'm writing which uses a webview, and the most suitable format for this extension is a banner at the top of the editor. It would be great if we could specify to place the view above the current active column (basically do a \"Split Up\"). I see that it's possible to place the new view beside the active view, then the user can manually switch the orientation to stack vertically, but it'd be nice if this could be automated. ",
        "createdAt": "2020-09-11 04:29:37",
        "state": "open",
        "number": 106451
    },
    {
        "title": "Views contribution point should support codicons",
        "description": "For example, I'd like to use a codicon for the icon here:\r\n\r\nhttps://github.com/microsoft/vscode-pull-request-github/blob/ab61f7f2446995c21db6087cb41b0395795b1bc5/package.json#L361-L368",
        "createdAt": "2020-09-09 12:48:26",
        "state": "open",
        "number": 106348
    },
    {
        "title": "Clear recent files without clearing recent projects",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nA big project I am working on recently renamed some directories, so many \"recently opened\" files now do not exist any more. Vscode does not seem to realize this until I actually try to open each individual one of them, which means that the first attempt to open any file will now fail for a few weeks or so, until they are all gone. (So maybe it would be good if it could just prune non-existing files but that's not what this issue is about.)\r\n\r\nI'd love to just \"clear recently opened files\", but when I do this, it also deletes all my recently opened project folders, so Ctrl-R becomes useless. That's even more annoying than having to open every file twice. It would be great if vsocde wouldn't let me choose between a rock and a hard place here, and just delete the recently opened files of the current project without affecting the global list of projects that I have opened recently.",
        "createdAt": "2020-09-09 08:07:43",
        "state": "open",
        "number": 106328
    },
    {
        "title": "Provide option to default to github provider git.api.getRemoteSources and potentially list org repos.",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nThe repository picker feature https://github.com/microsoft/vscode/issues/102394 allows to pick github repos after selecting the GitHub provider. \r\nAsking for \r\n1. An option to default the provider to GitHub so that user can have one less click when creating a codespace. \r\n2. Currently it lists all repos where you are owner, is it possible to list repos of organizations you are in as well?\r\n\r\n\r\nA side question is how does the api authenticate, is it with the stored git credentials in git extension? \r\n\r\n```\r\nawait commands.executeCommand('git.api.getRemoteSources', {\r\n\tproviderLabel: (provider: RemoteSourceProvider) => `Test this for ${provider.name}`,\r\n\turlLabel: `Test this for URL`,\r\n        defaultProvider: 'Github'\r\n});\r\n```\r\n\r\n@joaomoreno\r\n\r\nThanks,\r\nJason ",
        "createdAt": "2020-09-08 21:45:34",
        "state": "open",
        "number": 106316
    },
    {
        "title": "Markdown: Different Slugify Function Implementations for Header Anchors",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nIt is clear that there is no consensus on some things in the Markdown spec. One of them is the header anchors \u2014 specifically how to generate them. VS Code seems to encode them like in a URL while GitHub removes some special characters (such as quotation marks like `\u201e`, `\u201d`, `\u00ab` and other).\r\n\r\nSo, I think it would be appropriate to at least give the user the option to choose which slugify function to pick when viewing (both in editor and preview tabs) Markdown documents.\\\r\nThe [\u201cMarkdown All in One\u201d](https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one) extension actually gives the user a list of four different slugify functions (the `markdown.extension.toc.slugifyMode` setting) \u2014 maybe it could be something similiar (and after implementing that in VS Code, this extension could adapt this new feature to avoid setting duplication).\r\n\r\nThe user could still be using VS Code\u2013styled slugs for header anchors or switch e.g. to GitHub-styled slugs to create Markdown documents fully-compatible with GitHub Markdown viewer.\r\n\r\n*(The second thing kind of related to this is to establish how does the slugify function looks like, at least, for GitHub-styled Markdown, because [I have discovered there are some discrepancies in generating GitHub-styled slugs](https://github.com/yzhang-gh/vscode-markdown/issues/807#issuecomment-688955890).)*\r\n",
        "createdAt": "2020-09-08 15:52:51",
        "state": "open",
        "number": 106296
    },
    {
        "title": "Adding the shadow to the right-border of the line-numbering",
        "description": "Issue Type: <b>Feature Request or Style Modification</b>\r\n\r\nmany times the mouse selection causes un-desired actions like collapsing a class-block, thats is in a speed coding and selecting activities, in order to solve this issue we'll need a diffrence in the background color or a shadow in the right-border of the line numbering, this will solve other issue(horizontal scrol-bar) as well. as all of the backgrounds got same color and there is no such thing to distinguish them from each others.\r\n\r\nVS Code version: Code 1.48.2 (a0479759d6e9ea56afa657e454193f72aef85bd0, 2020-08-25T10:56:10.074Z)\r\nOS version: Linux x64 5.4.0-45-generic snap\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-09-08 15:10:34",
        "state": "open",
        "number": 106294
    },
    {
        "title": "Retry as Admin/Sudo to create a new file",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n'Retry as Admin/Sudo' works well when saving an existing file. However, when attempting to e.g. re-create a deleted (yet still open in code) file or just running 'code nonexistent_file' in a dir where admin permissions are needed, 'Retry as Admin/Sudo' is not offered. It would be nice for the functionality to be offered in this case as well, right now it is necessary to first create the file(s).",
        "createdAt": "2020-09-07 15:36:17",
        "state": "open",
        "number": 106244
    },
    {
        "title": "restart task with keyboard only",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nWhen a task is running and I run it again it currently opens a notification in the bottom right asking whether to kill or restart the currently running task.\r\n\r\nIt would be awesome if this could be either configured to always restart or at least the choice should be easily selectable by keyboard.",
        "createdAt": "2020-09-07 09:42:32",
        "state": "open",
        "number": 106226
    },
    {
        "title": "Report progress in taskbar",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\nOn supported platforms:\r\nhttps://www.electronjs.org/docs/tutorial/progress-bar",
        "createdAt": "2020-09-07 09:23:29",
        "state": "open",
        "number": 106224
    },
    {
        "title": "[json] JSON language server not localized",
        "description": "VSCode Version: VSCode 1.48.2\r\n\r\nSteps to Reproduce:\r\n1.Install VSCode\r\n2.Install Language Extension Chinese(Simplified) and C++ extension\r\n3.Open file \u201cc_cpp_properties.json\u201d\r\n4. Delete the value or update value to an invalid one for property \"cStandard\"\r\n5. Check the warning info in tooltip window\r\n\r\nExpected:\r\nWarning info in tooltip window\r\n\r\nActual:\r\nWarning string \u201cValue expected\u201d and \u201cValue is not accepted. Valid values\" in file \u201cc_cpp_properties.json\u201d is not localized in tooltip window\r\n(Repro on Windows, Linux and Mac)\r\n![image](https://user-images.githubusercontent.com/37648162/92364022-01881180-f125-11ea-9a35-da919bd2ff57.png)\r\n\r\n![image](https://user-images.githubusercontent.com/37648162/92364053-0e0c6a00-f125-11ea-8af6-588a20ad4e3f.png)\r\n\r\n",
        "createdAt": "2020-09-07 08:13:46",
        "state": "open",
        "number": 106220
    },
    {
        "title": "Rate limit Global storage updates during Settings Sync",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\n```\r\n[2020-09-07 13:07:44.893] [userDataSync] [info] Auto Sync: Triggered by Activity\r\n[2020-09-07 13:07:44.894] [userDataSync] [info] Too many requests https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState https://vscode-sync.trafficmanager.net/v1/manifest https://vscode-sync.trafficmanager.net/v1/resource/globalState\r\n[2020-09-07 13:07:44.899] [userDataSync] [info] Request failed https://vscode-sync.trafficmanager.net/v1/manifest\r\n[2020-09-07 13:07:44.918] [userDataSync] [error] LocalTooManyRequests (UserDataSyncError) syncResource:unknown operationId:unknown: Too many requests. Allowed only 100 requests in 5 minutes.\r\n    at D.request (file:///C:/Users/paulh/AppData/Local/Programs/Microsoft VS Code/resources/app/out/vs/code/electron-browser/sharedProcess/sharedProcessMain.js:553:512)\r\n    at b.request (file:///C:/Users/paulh/AppData/Local/Programs/Microsoft VS Code/resources/app/out/vs/code/electron-browser/sharedProcess/sharedProcessMain.js:549:713)\r\n    at async b.manifest (file:///C:/Users/paulh/AppData/Local/Programs/Microsoft VS Code/resources/app/out/vs/code/electron-browser/sharedProcess/sharedProcessMain.js:547:974)\r\n    at async C.createSyncTask (file:///C:/Users/paulh/AppData/Local/Programs/Microsoft VS Code/resources/app/out/vs/code/electron-browser/sharedProcess/sharedProcessMain.js:528:398)\r\n    at async E.doSync (file:///C:/Users/paulh/AppData/Local/Programs/Microsoft VS Code/resources/app/out/vs/code/electron-browser/sharedProcess/sharedProcessMain.js:522:639)\r\n[2020-09-07 13:07:44.919] [userDataSync] [info] Auto Sync: Disabled.\r\n[2020-09-07 13:07:44.920] [userDataSync] [info] Auto sync: Cancelled sync that is in progress\r\n[2020-09-07 13:07:44.920] [userDataSync] [info] Auto Sync: Stopped\r\n[2020-09-07 13:07:44.933] [userDataSync] [info] Did reset the local sync state.\r\n[2020-09-07 13:07:44.934] [userDataSync] [info] Auto Sync: Turned off sync because of making too many requests to server\r\n```\r\n\r\nI was in a tight loop of \"Replace all\", \"Save\", \"Close Window\". Perhaps one of those actions is generating a settings change? I also had a large series of \"Perforce - Edit\" from the Perforce extension, using \"F1, Enter\".\r\n\r\nA quick look at the sync activity shows it hammering on UI state globalState.json, in the commandPalette.mru storage field. I suspect it's because each call to `perforce.edit` is replacing itself in the MRU, but with a higher counter?\r\n\r\nIt seems like MRU updates should perhaps be rate-limited if that it the only change to sync.\r\n\r\nVS Code version: Code 1.48.2 (a0479759d6e9ea56afa657e454193f72aef85bd0, 2020-08-25T10:13:11.295Z)\r\nOS version: Windows_NT x64 10.0.18363\r\nRemote OS version: Linux x64 3.10.0-1062.12.1.el7.x86_64\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i5-6300U CPU @ 2.40GHz (4 x 2496)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off_ok<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|7.92GB (0.96GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n|Item|Value|\r\n|---|---|\r\n|Remote|SSH: au1-c7cmp-01.corp.wargaming.local|\r\n|OS|Linux x64 3.10.0-1062.12.1.el7.x86_64|\r\n|CPUs|Intel(R) Xeon(R) CPU E5-2667 v2 @ 3.30GHz (32 x 3685)|\r\n|Memory (System)|31.21GB (1.77GB free)|\r\n|VM|0%|\r\n</details><details><summary>Extensions (17)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-icontheme-nomo-dark|be5|1.3.6\r\nvscode-styled-jsx|bla|2.0.0\r\nmustache|daw|1.1.1\r\nvscode-great-icons|emm|2.1.52\r\nfile-icons|fil|1.0.25\r\nvscode-simple-icons|Lau|1.13.5\r\nvscode-docker|ms-|1.5.0\r\nremote-containers|ms-|0.134.1\r\nremote-ssh|ms-|0.51.0\r\nremote-ssh-edit|ms-|0.51.0\r\nremote-wsl|ms-|0.44.5\r\nvscode-remote-extensionpack|ms-|0.20.0\r\ndebugger-for-chrome|msj|4.12.10\r\nmaterial-icon-theme|PKi|4.2.0\r\nuncrustify|Lau|2.20.6\r\nperforce|mjc|4.12.0\r\ncpptools|ms-|0.30.0-insiders4\r\n\r\n(3 theme extensions excluded)\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-09-07 03:14:28",
        "state": "open",
        "number": 106206
    },
    {
        "title": "Allow seperate tooltip on webview title",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nThe vscode itself show only file name part in tab title.\r\nAnd show full path in the tooltip\r\n![\u5716\u7247](https://user-images.githubusercontent.com/2993977/92320130-c5d04780-f051-11ea-83c2-87bbdca11aa8.png)\r\n\r\n\r\nHowever, in terms of the webview.\r\nThe title and tooltip are always the same.\r\n![\u5716\u7247](https://user-images.githubusercontent.com/2993977/92320146-ee584180-f051-11ea-921d-ecba80db764b.png)\r\n\r\nAnd you can't set them separately.\r\n\r\nIt would be useful to set them separately.\r\nSo we can place texts that are too long to fit into the title on it.\r\n",
        "createdAt": "2020-09-06 07:05:15",
        "state": "open",
        "number": 106185
    },
    {
        "title": "Nested snippets",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nThe ability to add nested snippets would be extremely useful for creating very complex and useful language snippets. Reference\r\n\r\n- https://github.com/microsoft/vscode/issues/101526\r\n- https://github.com/microsoft/vscode/issues/83690",
        "createdAt": "2020-09-04 16:08:55",
        "state": "open",
        "number": 106132
    },
    {
        "title": "Publisher name in package.json",
        "description": "**Use Case**\r\nAn extension needs to be shared without publishing on VS Code marketplace and there should be a publisher name. **publisher** field is not very useful here because it contributes to extension ID.\r\n\r\n**Problem**\r\nNot able to show publisher name in vscode installed extension, publisher shown instead. \r\nTried with author field as well, Seems it has nothing to do with publisher name.\r\n\r\n**Required** \r\nPlease provide a way to add publisher name in package.json\r\n\r\n<img width=\"734\" alt=\"Screenshot 2020-09-04 at 5 52 41 PM\" src=\"https://user-images.githubusercontent.com/25132374/92240638-8d5a2d80-eeda-11ea-8a4b-cea8b8e5b010.png\">\r\n<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n",
        "createdAt": "2020-09-04 13:16:06",
        "state": "open",
        "number": 106120
    },
    {
        "title": "Find and Replace - REGEX named capture group support",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\nHello,\r\nThere was a similar feature request - [#88793](https://github.com/microsoft/vscode/issues/88793).\r\n\r\nFeature request is simple, to have named group capture in the find and replace for regex. Basically same as [Visual Studio](https://docs.microsoft.com/en-us/visualstudio/ide/using-regular-expressions-in-visual-studio?view=vs-2019#capture-groups-and-replacement-patterns)\r\n\r\nHope this time it will be approved.",
        "createdAt": "2020-09-04 02:12:01",
        "state": "open",
        "number": 106080
    },
    {
        "title": "Problem editor overlay should auto dismiss after problem is rectified.",
        "description": "VSCode: 1.48.2\r\n\r\nObserved Behaviour:\r\nWhen I rectify a problem in code, the overlay that was present at the line does not auto dismiss when the problem is resolved and the file is saved. I subsequently have to press esc key to dismiss the overlay.\r\n\r\nDesired Behaviour:\r\nOnce the problem is resolved, and the file is saved, the overlay should immediately dismiss.\r\n\r\n\r\n",
        "createdAt": "2020-09-03 20:06:23",
        "state": "open",
        "number": 106066
    },
    {
        "title": "Notebook: support line numbers and actions to toggle it",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nWe may want to support users to customize their line numbers and allow them to toggle line numbers with shortcuts.",
        "createdAt": "2020-09-03 16:38:25",
        "state": "open",
        "number": 106054
    },
    {
        "title": "setting UI: support color settings",
        "description": "#105811 added the `screencastMode.mouseIndicatorColor` setting representing a color\r\n\r\n- open the JSON settings (JSON), add \"screencastMode.mouseIndicatorColor\": \"#ff00ff\"\r\n- see that there's a color decorator and that there's validation if you change the value to an invalid color\r\n\r\nNow open the same setting in the settings UI:\r\n- enter an invalid value `#foo`. No error\r\n- a color decorator would also be nice\r\n\r\nThe color support in JSON comes from annotating the configuration schema with `\"format\": \"color-hex\"`",
        "createdAt": "2020-09-03 13:18:13",
        "state": "open",
        "number": 106041
    },
    {
        "title": "No overflow action when notebook cell status bar items are wrapped",
        "description": "Testing #105768\r\n\r\n- Create multiple status bar items\r\n- When wrapped there is no overflow action to see wrapped items\r\n\r\n<img width=\"369\" alt=\"image\" src=\"https://user-images.githubusercontent.com/10746682/92107397-fdd35280-ede5-11ea-89c7-31c59358f771.png\">\r\n",
        "createdAt": "2020-09-03 11:05:04",
        "state": "open",
        "number": 106032
    },
    {
        "title": "Show editors stacked",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\n### What\r\n\r\nA new way to open editors in a stacked column, as an alternative to tabs and split panes. The difference is that stacked editors would share a scrollbar and scroll as a single long page, rather than having fixed heights and independent scrolling for each one.\r\n\r\n### Why?\r\n\r\nFor many types of code, you have several related files that support and reference each other. For example, HTML/CSS/JS files often evolve together.\r\n\r\nThe popularity of frameworks that use \"single-file components\" supports the idea that editing some types of files in separate code frames is less productive than a unified view.\r\n\r\n### Additional Ideas\r\n\r\nAn option to open & create files below the current file (\"open in stacked editor\") would be good for certain edit modes, like when browsing and editing markdown notes, or directories with images. Multi-selecting in the sidebar file tree could also expose this option.\r\n\r\nAn editor setting could offer a way to always open files that have the same name but different extensions in a stacked editor.\r\n\r\n### Visualization\r\n\r\n```ascii\r\n--------------------------------------------------------------------\r\n| FILES        | search.html [x]         \u25b2 A.png [x]               \u25b2   \r\n| dir          | ......                  |                         |\r\n|  search.html | ...                     |                         |\r\n|  search.css  |  ... ...                |                         |\r\n|  search.js   |                         |                         |\r\n|              | search.js [x]           |                         |\r\n|              | ......                  |                         |\r\n|              | ......                  |                         \u25bc\r\n|              |    ......               | B.png [x]               \u25b2\r\n|              |                         |                         |\r\n|              | search.css [x]          |                         |\r\n|              | .....                   |                         |\r\n|              | .....                   |                         |\r\n|              |     \u25b2\u25b2\u25b2\u25b2\u25b2\u25b2\u25b2\u25b2\u25b2\u25b2\u25b2         |                         |\r\n|              |     <SCROLL UP>         \u25bc                         \u25bc\r\n--------------------------------------------------------------------\r\n\r\n--------------------------------------------------------------------\r\n| FILES        | ... ...                 \u25b2 A.png [x]               \u25b2\r\n| dir          |                         |                         |\r\n|  search.html | search.js [x]           |                         |\r\n|  search.css  | .....                   |                         |\r\n|  search.js   | ......                  |                         |\r\n|              |    ......               |                         |\r\n|              |                         |                         |\r\n|              | search.css [x]          |                         \u25bc\r\n|              | .....                   | B.png [x]               \u25b2\r\n|              | .....                   |                         |\r\n|              |                         |                         |\r\n|              |                         |                         |\r\n|              |                         |                         |\r\n|              |                         |                         |\r\n|              |                         \u25bc                         \u25bc\r\n--------------------------------------------------------------------\r\n```",
        "createdAt": "2020-09-03 07:04:14",
        "state": "open",
        "number": 106009
    },
    {
        "title": "Better informational message when trying to format large files, or allow formatting anyway.",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nWhen opening a large XML file (say 90MB) and attempting to format that document, the error message says \"There is no formatter for xml-files installed.\" This is **very misleading** - I **do** have a formatter for XML files installed, it's just that VS Code doesn't allow it to work because the file is deemed \"too large\". I spent a very long time trying to figure this out, until I finally realised that the formatter does work on smaller files, but is disabled for large ones.\r\n\r\nPlease either \r\na) Change the message so that it says \"The file is too large to be formatted\" or words to that effect, or\r\nb) Allow it to be formatted anyway with warning that it may take a while. I'm happy to wait so that I don't have to use another program just for working with large files. \r\n\r\n![image](https://user-images.githubusercontent.com/18208603/92053128-db830a00-edd0-11ea-86d4-28deedfbdae7.png)\r\n",
        "createdAt": "2020-09-03 00:45:52",
        "state": "open",
        "number": 105986
    },
    {
        "title": "Support filtering on input only",
        "description": "Testing #105185\r\n\r\nI find myself looking for the output of a command I issued in the debug console. I.e. I'd like to use the filter to only show commands that match the filter, however, the commands should keep their output.",
        "createdAt": "2020-09-02 21:08:44",
        "state": "open",
        "number": 105976
    },
    {
        "title": "Notebooks: notebookProvider config to support untitled files better",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\nIn the PowerShell extension I had to create two viewTypes to handle the following scenario:\r\n\r\n* For `*.Notebook.ps1` files, open with `priority: default`\r\n* For `*.ps1` files, open with `priority: option`\r\n\r\nThe best way to do this now is with the following configuration:\r\n\r\n```json\r\n\"notebookProvider\": [\r\n      {\r\n        \"viewType\": \"PowerShellNotebookMode\",\r\n        \"viewType\": \"PowerShellNotebookModeDefault\",\r\n        \"displayName\": \"Powershell Notebook\",\r\n        \"selector\": [\r\n          {\r\n            \"filenamePattern\": \"*.Notebook.ps1\"\r\n          }\r\n        ],\r\n        \"priority\": \"default\"\r\n      },\r\n      {\r\n        \"viewType\": \"PowerShellNotebookModeOption\",\r\n        \"displayName\": \"Powershell Notebook\",\r\n        \"selector\": [\r\n          {\r\n            \"excludeFileNamePattern\": \"*.Notebook.ps1\",\r\n            \"filenamePattern\": \"*.ps1\"\r\n          }\r\n        ],\r\n        \"priority\": \"option\"\r\n      }\r\n],\r\n```\r\n\r\nwhich defines two viewType's with different `priority` and uses `exclude` in the second one to ignore those `*.Notebook.ps1` files\r\n\r\nThe problem here, is with Untitled files... if I do File->New here's what I see:\r\n\r\n![image](https://user-images.githubusercontent.com/2644648/92020328-cd6bb580-ed0c-11ea-9781-3b1afdd2f768.png)\r\n\r\n2 \"PowerShell Notebook\"s. Granted, clicking either works, but we shouldn't see that.\r\n\r\n### Proposal\r\n\r\n1. If I could specify in the `selector` or somewhere in the config that my viewType supports Untitled files that works I can just choose one of them\r\n2. If I could set the priority based on the selector then I could have only 1 viewType (this doesn't really solve the greater issue, but would solve my issue)",
        "createdAt": "2020-09-02 18:12:07",
        "state": "open",
        "number": 105962
    },
    {
        "title": "Make language tokens and scopes part of command list",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n_Nothing remotely similar has been found, when searching for similar feature requests._\r\n\r\n<!-- Describe the feature you'd like. -->\r\nWhy?\r\n----\r\nFeature would enable developers and even users with macros to have better code control.\r\n\r\nHow does it work?\r\n----\r\nNormally, language analyzer identifies tokens and scopes from the typed text. From there the analyzer still understands and expects certain tokens in the future. For example, statement would expect to see terminal `punctuation.terminator.statement`\r\nExample terminal for TS\r\n![image](https://user-images.githubusercontent.com/52426335/91825692-801c1500-ec34-11ea-9f75-41ee37e7096f.png)\r\nExample terminal for C\r\n![image](https://user-images.githubusercontent.com/52426335/91827327-94f9a800-ec36-11ea-87a5-ee96bdf8426b.png)\r\nExample terminal in Java\r\n![image](https://user-images.githubusercontent.com/52426335/91827408-b65a9400-ec36-11ea-9855-ff11024674aa.png)\r\nYou get the picture - it's pretty much identical across languages.\r\nAdding language token as commands that can be executed would be amazing.\r\nBelow are examples of use, that would be really helpful.\r\n\r\nExamples\r\n----\r\nExcuseuar my partially poor recordings\r\nBefore:\r\n![Before_1](https://user-images.githubusercontent.com/52426335/92154570-e6b05700-ee1d-11ea-9464-356c86820714.gif)\r\n\r\nAfter:\r\n![After_1](https://user-images.githubusercontent.com/52426335/92154650-09427000-ee1e-11ea-963e-041608b68008.gif)\r\n\r\n\r\nThis is just a mockup of example use.",
        "createdAt": "2020-09-02 14:23:36",
        "state": "open",
        "number": 105949
    },
    {
        "title": "Breakpoint group.",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Describe the feature you'd like. -->\r\n\r\nUser could split breakpoints to some groups, so user could enable/disable them quickly. \r\nThere should have a default group so the breakpoints not belong to any group find their positions.(You can think current vscode \r\n only have the default group.)\r\n\r\nThis would be very helpful when debug a complex feature.",
        "createdAt": "2020-09-02 09:13:54",
        "state": "open",
        "number": 105927
    },
    {
        "title": "Add streaming support in vscode",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nthis is a conceptually dup of https://github.com/microsoft/vscode/issues/20010. creating a new issue since the previous one is closed and that one is using custom streaming support rather than official streaming (partial results) support added to LSP.\r\n\r\nLanguage Server Protocol has added partial results (streaming) supports (https://microsoft.github.io/language-server-protocol/specifications/specification-current/#partialResults) and VS has already added support for it.\r\n\r\nAs long as I know, the support is added to LSP since it was one of the top complaints from VS users, especially from people who have large codebases. \r\n\r\nFor example, Finding Symbols from the workspace (WorkspaceSymbol) can easily take several seconds for big codebase and return a lot of results, Streaming takes the same amount of time to get full results, but most of the time, users get what they want before getting full results. so rather than users get the worst-case scenario all the time, streaming reduces the time users have to wait. \r\n\r\nVS has FULL SUPPORT for streaming. \r\n(Find all references, Document symbols, document highlights, Pull model diagnostics, workspace symbols and completion)\r\n\r\nSo they even support partial results (streaming) for document-level features such as \"Document Symbol\", \"Document Highlights\" and etc.\r\n\r\nbut, we (Python LS for vscode - Pylance) are not asking that much, but at least support for workspace-wide features such as \"Workspace Symbol\", \"Find all references\", \"Call Hierarchy\" and etc.\r\n\r\nWe do understand streaming (partial results) requires an incremental update of UI and that is not easy (flickering, ordering, sizing, grouping, etc issues). I believe VS had that issue as well when they started adding streaming supports (even before LSP), but once it is done, I believe they got a lot better at supporting large codebase.\r\n\r\n\r\n\r\n",
        "createdAt": "2020-09-01 18:47:40",
        "state": "open",
        "number": 105870
    },
    {
        "title": "Go to next error/warning/info",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI'd love a feature where I could go to the next error in the file I'm in, or in the entire project, _but not_ the next warning/info marker. Currently I have these shortcuts available: \r\n\r\n* `editor.action.marker.next`\r\n* `editor.action.marker.nextInFiles`\r\n* `editor.action.marker.prev`\r\n* `editor.action.marker.prevInFiles`\r\n\r\nI think it'd make a lot of sense to expose similar shortcuts for going to the next error, or the next warning, or the next info, but as *separate groups*. \r\n\r\nExample use case: I have a spell checker and a linter enabled for my project. The linter produces both warnings and errors, and the spell checker produces info markers. I care mostly about linter errors and compiler errors, and when those are fixed I care about spelling errors. ",
        "createdAt": "2020-09-01 07:57:21",
        "state": "open",
        "number": 105795
    },
    {
        "title": "Cannot copy/paste or drap/drop cells across notebook",
        "description": "* open two GH issue notebook side by side\r\n* in the left copy a cell\r\n* in the right paste\r\n* \ud83d\ude22 nothing happens.",
        "createdAt": "2020-09-01 07:51:38",
        "state": "open",
        "number": 105794
    },
    {
        "title": "Add event listeners to vscode.Tunnel",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nNot sure if this is feasible, but it would sometimes be very helpful if there can be such listeners. One example is, when using gdb protocol, [server sends ACK upon connection and expect an ACK back] (https://sourceware.org/gdb/onlinedocs/gdb/Packet-Acknowledgment.html#Packet-Acknowledgment). Currently we need to write an intermediate server to do this. It would be a lot easier if there can be an onConnectToRemoteEnd listener.",
        "createdAt": "2020-08-31 17:59:22",
        "state": "open",
        "number": 105754
    },
    {
        "title": "Quick pick: Support the recognization of an existing file when its path is begining with \"./\"",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nHi all,\r\n  Thanks for your hard work! Now `vscode` is so powerful and become my best development tool. I work on Ubuntu 18.04 with `vscode 1.47.2`\r\n\r\n  This feature request is about the `searching functionality` opened in the `palette`. \r\n\r\n# Describe the feature concisely \r\n1. Let's assume I have a file called `log` in the root directory of the project which is opened & managed by `vscode`: I try to search it and **vscode works well**\r\n![image](https://user-images.githubusercontent.com/16875930/91712629-b7e67680-ebba-11ea-8793-938cdeaef131.png)\r\n2. But sometimes when I type in a equaivalent path beginning with `./` and it doesn't work anymore. **But it should be IMHO**\r\n![image](https://user-images.githubusercontent.com/16875930/91712740-f4b26d80-ebba-11ea-91f9-8ef66f516a12.png)\r\n\r\nI hope it can be supported! ;-) Would you be happy to consider that?\r\n\r\nThanks for you time in this issue!\r\n\r\n",
        "createdAt": "2020-08-31 10:53:33",
        "state": "open",
        "number": 105724
    },
    {
        "title": "Syntax highlighting for backup/sample files",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nSometimes I need to edit some configuration files referring to another, but the other files are not using normal file extensions.\r\n\r\nSo I want VSCode to treat some suffixed file types (like `foo.ini.bak`), get syntax highlighted just like their un-suffixed files (like `foo.ini`) get.\r\n\r\nThose suffixed file types included are:\r\n\r\n+ backup files (e.g. .bak,.old,.original)\r\n+ sample files (e.g. .sample)\r\n+ template files (e.g. .tempalte)\r\n\r\nSee [bak file](https://en.wikipedia.org/wiki/Bak_file)\r\n\r\nAnd it may be configured with something like this:  \r\n\r\n```json\r\n{\r\n  \"files.optionalSuffixes\": [\"~\", \".bak\", \".sample\"]\r\n}\r\n```\r\n\r\n\r\nVS Code version: Code 1.48.2 (a0479759d6e9ea56afa657e454193f72aef85bd0, 2020-08-25T10:13:11.295Z)\r\nOS version: Windows_NT x64 10.0.19041\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-08-31 08:32:52",
        "state": "open",
        "number": 105714
    },
    {
        "title": "Run NPM Scripts in the currently open terminal",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nIs it possible to run scripts in current terminal, not to open new one?\r\n\r\nVS Code version: Code 1.48.2 (a0479759d6e9ea56afa657e454193f72aef85bd0, 2020-08-25T10:56:10.074Z)\r\nOS version: Linux x64 4.15.0-112-generic\r\n\r\n\r\n<!-- generated by issue reporter -->[\r\n![image](https://user-images.githubusercontent.com/12570915/91690935-71b7f580-eb6f-11ea-8563-884ffec6c204.png)\r\n](url)",
        "createdAt": "2020-08-31 06:51:10",
        "state": "open",
        "number": 105704
    },
    {
        "title": "can not select the whole number by double clicking",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.46.0\r\n- OS Version: macOS Catalina 10.15.5\r\n\r\n`.` and `'` are words separators in VSCode, it causes a weird behavior when selecting numbers, just like:\r\n\r\n1. double click the `1` at `0.12f`, `12f` instead of `0.12f` is selected.\r\n2. double click the `1` at `0x1234'5678`, `0x1234` instead of `0x1234'5678` is selected.\r\n\r\nbut it's **unacceptable** to remove `.` and `'` from words separators, which will produce more problems.\r\n\r\nsome extensions of quick selecting are also **unexpected**. they can not change the behavior of double clicking and _**clicking and pressing a key combo**_ is exhausting to just select a number.\r\n\r\npotential solutions:\r\n1. treat `.` and `'` different if they're after a digit.\r\n2. get some informations from syntax highlights.\r\n3. allow extensions to change the behavior of double clicking.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-08-31 03:22:57",
        "state": "open",
        "number": 105701
    },
    {
        "title": "Allow adding folder to workspace with 'name'",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nIn the workspace json def, we are able to name folders in the workspace.  It would be helpful if we could do that upon adding folders to the workspace, since often folder names themselves are not uniquely descriptive enough for effective navigation.",
        "createdAt": "2020-08-31 01:01:38",
        "state": "open",
        "number": 105693
    },
    {
        "title": "Don't delete files when replacing dir",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nSuppose you have two dirs.\r\n\r\n<project>/server/http/middleware\r\n\r\nhas file test.go\r\n\r\nNow you have the 2nd dir.\r\n\r\n<project_second>/server/http/middleware\r\n\r\nhas file test2.go\r\n\r\nIf you drag the dir /server/http/middleware from <project_second> into <project>, test.go will be deleted.\r\n\r\nThis is not what I would expect after 15 years of using Windows and Linux. I know the message is clear on it, but UI should be better than that.\r\n\r\nPlease don't delete the already existing file OR if you do, please make the file recoverable. Just had this issue and had some progress wiped.",
        "createdAt": "2020-08-30 21:24:20",
        "state": "open",
        "number": 105691
    },
    {
        "title": "Select and Delete one or more cells in IPython Workspace(VS Code)",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nGoogle Colab has a nice feature of selecting many cells at a time. This helps a lot while deleting instead of choosing each cell at a time. Please add this feature ASAP",
        "createdAt": "2020-08-30 06:16:40",
        "state": "open",
        "number": 105669
    },
    {
        "title": "Multi line \"Copy Message\" from problems panel.",
        "description": "Version: 1.48.2\r\nUbuntu 20.04 deb package\r\n\r\nCurrently when observing the problems view, I can use shift to click to select multiple problems (lines). When I subsequently right click and select \"Copy Message\", it only copies one of the selected lines. It would be nice if I was able to copy the entire contents (or any subset) of the problems view, exactly how it is displayed.\r\n",
        "createdAt": "2020-08-29 21:11:31",
        "state": "open",
        "number": 105657
    },
    {
        "title": "Workbench hovers don't support equivalent of \"editor.hover.sticky\" setting",
        "description": "The workbench hovers (custom views, terminal) don't support the \"editor.hover.sticky\" setting, which is IMO desired, but there is no equivalent setting\r\n\r\nThere is also the \"editor.hover.delay\", but not sure if it matters as much to support this or not (again with its own version IMO)\r\n\r\n/cc @alexr00 ",
        "createdAt": "2020-08-29 17:35:22",
        "state": "open",
        "number": 105648
    },
    {
        "title": "Better alignment of Sidebar components when Activity Bar is hidden",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.48.2\r\n- OS Version: macOS Catalina 10.15.6\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\n### Steps to reproduce.\r\n\r\n1. Hide Activity Bar.\r\n\r\n### The issue.\r\n\r\nThere is barely any space between the caret symbols inside Explorer and the window border.\r\n\r\n![CleanShot 2020-08-29 at 18 48 04@2x](https://user-images.githubusercontent.com/13354491/91640730-60b09c80-ea28-11ea-8ba3-639767d42722.png)\r\n\r\nHere is how elements are aligned inside the sidebar currently (they are not):\r\n\r\n![CleanShot 2020-08-29 at 18 29 13@2x](https://user-images.githubusercontent.com/13354491/91640469-791fb780-ea26-11ea-976d-20b704f4d8b9.png)\r\n\r\n### Proposed solution.\r\n\r\nTweak alignment so the carets are inline with a status bar Git symbol and Explorer top-level icons are inline with EXPLORER title text.\r\n\r\n![CleanShot 2020-08-29 at 18 31 46@2x](https://user-images.githubusercontent.com/13354491/91640528-e4698980-ea26-11ea-8aae-fc2b00d26fa5.png)\r\n\r\nThis is a simple CSS tweak:\r\n\r\n```css\r\n#workbench\\.view\\.explorer > div > div > div.split-view-container {\r\n  left: 9px;\r\n  width: calc(100% - 9px);\r\n}\r\n```\r\n\r\nIn my opinion, it looks much cleaner.",
        "createdAt": "2020-08-29 15:55:54",
        "state": "open",
        "number": 105643
    },
    {
        "title": "Multitasking (switch recent editor tabs in Alt+Tab)",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nNot sure whether it is possible, but it would be great if we can use <kbd>Alt</kbd> + <kbd>Tab</kbd> to switch between recent editor tabs.\r\n\r\nThe is described [here](https://blogs.windows.com/msedgedev/2020/07/22/multitasking-improvements-windows-10-microsoft-edge/) (for the new Microsoft Edge)\r\n\r\n![image](https://user-images.githubusercontent.com/7588612/91633714-2beb1800-ea1d-11ea-8dc7-f7c12121c448.png)",
        "createdAt": "2020-08-29 09:30:05",
        "state": "open",
        "number": 105636
    },
    {
        "title": "API for horizontal scroll position in TextEditor",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\nI would pleased to have an API on `TextEditor` allowing to get and set the horizontal scroll position, as well as an event to react to changes.\r\n\r\nI am developing an extension which compares files in multiple text editors and having synchronized scrolling would be great for UX.\r\n\r\nCurrently, we have this API for *vertical* scrolling:\r\n\r\n```typescript\r\nreadonly TextEditor.visibleRanges: Range[];\r\nTextEditor.revealRange(range: Range, revealType?: TextEditorRevealType): void;\r\nwindow.onDidChangeTextEditorVisibleRanges: Event<TextEditorVisibleRangesChangeEvent>;\r\n```\r\n\r\nFor my purposes, it would be more suitable to have an API not tied to text `Range`s, otherwise one would first need to find a visible line in the editor long enough to scroll to a certain positon within it. Maybe something like:\r\n\r\n```typescript\r\nreadonly TextEditor.horizontalStart: number;\r\nreadonly TextEditor.horizontalEnd: number;\r\nTextEditor.setHorizontalStart(start: number, cause: unknown);\r\nTextEditor.onDidHorizontalVisibleRangeChange: Event<{editor: TextEditor, cause: unknown}>;\r\n```\r\n\r\n\u2026where `horizontalStart`, `horizontalEnd` and `start` should be floating point numbers. `cause` is meant for preventing cycles of events when synchronizing scroll positions.",
        "createdAt": "2020-08-28 22:03:55",
        "state": "open",
        "number": 105625
    },
    {
        "title": "Change default setting: \"Preview Mode\" from enabled to disabled",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\n[Preview Mode](https://code.visualstudio.com/docs/getstarted/userinterface#_preview-mode) is enabled by default. The documentation says that its usecase is for \"quickly browsing files\". But it's something I do rarely. \r\n\r\nHow about disabling it by default?\r\n\r\nIt seems lots of [people on stackoverflow](https://stackoverflow.com/questions/38713405/open-files-always-in-a-new-tab) are surprised that the current tab gets replaced when single clicking another file. Myself inclusive. I have learned that double click does it, but it surprised me too.\r\n\r\nVS Code version: Code 1.48.2 (a0479759d6e9ea56afa657e454193f72aef85bd0, 2020-08-25T10:09:08.021Z)\r\nOS version: Darwin x64 19.6.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-08-28 16:33:32",
        "state": "open",
        "number": 105600
    },
    {
        "title": "Exceptions for filenames in contributes.languages",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\nToday the `contributes.languages` feature allows for matching on filenames, extensions, MIME types, and first lines. In the Docker extension we recently decided to treat `Dockerfile.*` as a Dockerfile. We saw a very long tail of users with different extensions--e.g. `Dockerfile.develop`, `Dockerfile.amd64`, `Dockerfile.myapp`, etc.--too many to practically list out individually in our package manifest. So we changed it to `Dockerfile.*` so we could cover all of those users.\r\n\r\nThis approach made it so our extension had the right file association in about 80% of cases, whereas before we covered more like 20%. However, there are some [relatively common examples](https://github.com/microsoft/vscode-docker/issues/2128)--e.g. `Dockerfile.go`--that are not Dockerfiles. In these situations we're incorrect. Since the number of common filenames that _aren't_ Dockerfiles seems to be relatively small, we thought it would be nice to be able to add exceptions to the `Dockerfile.*` rule.",
        "createdAt": "2020-08-28 13:44:06",
        "state": "open",
        "number": 105590
    },
    {
        "title": "Support to run web playground in remote env",
        "description": "I'm playing with it on remote host under https and there are different issues like:\r\n- `ws` protocol is hardcoded, although it should be wss if the page is served under `https`\r\n- source maps are not working in Chrome, since they expect `file` scheme. I can work around it by checking out locally the same version, but it is not very convenient.",
        "createdAt": "2020-08-28 08:21:58",
        "state": "open",
        "number": 105566
    },
    {
        "title": "please allow a filter on not installed extensions too",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nnow you can only filter on the installed ones , but the inverse woul be much more interesting , especially in combo with publisher \r\n\r\nVS Code version: Code 1.48.2 (a0479759d6e9ea56afa657e454193f72aef85bd0, 2020-08-25T10:13:11.295Z)\r\nOS version: Windows_NT x64 10.0.20197\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-08-28 08:13:54",
        "state": "open",
        "number": 105564
    },
    {
        "title": "When switch config, it would great switch target device automaticly",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\n### Background:\r\n\r\nI have a flutter project, which include `multi-flavor` if it run on Android.\r\n\r\nSo the `.vscode/launch.json` looks like bellow:\r\n\r\n```json\r\n{\r\n    \"version\": \"0.2.0\",\r\n    \"configurations\": [\r\n        {\r\n            \"name\": \"Flutter android\",\r\n            \"request\": \"launch\",\r\n            \"type\": \"dart\"\r\n            ,\r\n            \"args\": [\r\n                \"--flavor\",\r\n                \"someFlavor\"\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"Flutter iOS\",\r\n            \"request\": \"launch\",\r\n            \"type\": \"dart\"\r\n        },\r\n    ]\r\n}\r\n```\r\n\r\nIt's works when I run on iOS with `Flutter iOS` and run Android with `Flutter android`.\r\n\r\n### My feature request:\r\n\r\nWhen I `switch the config` to debug, it would be great the `selected device` can switch between android and iOS(The first image) `auto`, no need to switch it by hand(The second image)\r\n\r\n\r\n<img width=\"352\" alt=\"\u622a\u5c4f2020-08-28 \u4e0b\u53481 58 08\" src=\"https://user-images.githubusercontent.com/6405390/91526896-3e8b2180-e937-11ea-9675-cbb5b1748cd3.png\">\r\n\r\n<img width=\"284\" alt=\"\u622a\u5c4f2020-08-28 \u4e0b\u53481 58 22\" src=\"https://user-images.githubusercontent.com/6405390/91526905-464ac600-e937-11ea-91c6-b9d50b735237.png\">\r\n\r\n\r\n",
        "createdAt": "2020-08-28 06:04:47",
        "state": "open",
        "number": 105556
    },
    {
        "title": "Support enable/disable on SelectActionViewItem",
        "description": "Right now `SelectActionViewItem.updateEnabled` is not implemented which means disabling the associated action does not disable the select box.",
        "createdAt": "2020-08-27 22:37:43",
        "state": "open",
        "number": 105543
    },
    {
        "title": "Global context key for viewType",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIn my package.json I would like to do something like this:\r\n\r\n```\r\n\"when\": \"resourceLangId == powershell && (ONLY PowerShellNotebookMode view type)\",\r\n```",
        "createdAt": "2020-08-27 22:37:14",
        "state": "open",
        "number": 105542
    },
    {
        "title": "Add toml front matter support for Markdown",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n\r\nAs done in [Add yaml front matter support for Markdown](https://github.com/microsoft/vscode/pull/15218) I would request the same feature but for TOML formatted front matter (as used at least in [hugo](https://gohugo.io/content-management/front-matter/#front-matter-formats).\r\n\r\nWhile YAML front matter is printed nicely in the markdown preview, TOML front matter looks - well - unstructured to say at least. \r\n\r\nEverything is better (in my opinion) than to print this unstructured data. Even just hiding the TOML front matter at all from the markdown preview in a first iteration would be much appreciated.\r\n\r\nNot quite sure if this belongs to vscode or better should be done in an extension like [Better TOML](https://github.com/bungcip/better-toml)",
        "createdAt": "2020-08-27 17:38:45",
        "state": "open",
        "number": 105517
    },
    {
        "title": "SCM: Have repository switcher in status bar",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nfor multi-workspace or one workspace having multi-git-repos, that is very confuse each time when want to qucikly switch branch.\r\n1. there is no info show which repo I am operating.\r\n2. can\u2018t not select specific repo.\r\n![image](https://user-images.githubusercontent.com/1876302/91407949-a24d1600-e875-11ea-9ba6-ac7d4cbde1d1.png)\r\n\r\nat least, please show me the repo name of the repo which I am operating, PLEASE\r\nsecondly, provide selection for user to select a repo,not the default or activited file.\r\n",
        "createdAt": "2020-08-27 07:03:04",
        "state": "open",
        "number": 105476
    },
    {
        "title": "Multiple cursors on the same line",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nSometimes I want to select multiple words and then copy them and paste in the single line.\r\nFor example:\r\n```\r\n$foo = 'foo';\r\n$bar = 'bar';\r\nprint_r(\r\n```\r\nSo I have two selections of `foo` and `bar` variables and I want to make two cursors after `print_r(` and paste my two variables here. So I want to use hotkey that creates additional cursors separated by comma and space. Then I type `$`, the result is:\r\n```\r\n$foo = 'foo';\r\n$bar = 'bar';\r\nprint_r($, $\r\n```\r\nHere I have two cursors and now I just `Ctrl+V` my two variables:\r\n```\r\n$foo = 'foo';\r\n$bar = 'bar';\r\nprint_r($foo, $bar\r\n```\r\n",
        "createdAt": "2020-08-27 06:03:21",
        "state": "open",
        "number": 105473
    },
    {
        "title": "File is a directory",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.48.2\r\n- OS Version: windows_NT x64 10.0.1864\r\n\r\nSteps to Reproduce:\r\n\r\n1.  create two files: \"c:/a.py\" & \"c:/b.py\"\r\n2. create hyperlink in file a pointing to file b \"# file://c:/b.py\"\r\n3. ctrl+click on link\r\n\r\nWhat i expected: opens file b in vscode.\r\nWhat i get:\r\n![error](https://user-images.githubusercontent.com/9743844/91388681-2385b800-e838-11ea-94c4-9e78891a7a7a.PNG)\r\n\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\nfound this closed issue that is related\r\nhttps://github.com/microsoft/vscode/issues/62251\r\n",
        "createdAt": "2020-08-27 05:40:20",
        "state": "open",
        "number": 105472
    },
    {
        "title": "Expose noResolveAliases property in showOpenDialog",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nThe [Python extension](https://github.com/microsoft/vscode-python) offers the ability to select a Python interpreter via a dialog (added in https://github.com/microsoft/vscode-python/pull/11227). \r\n\r\nWhen using virtual environments the interpreter is just a symlink to a global install of Python, and selecting it in the dialog resolves the symlink instead of returning the selected interpreter:\r\n\r\n![select_interpreter](https://user-images.githubusercontent.com/51720070/91364477-aa448180-e7b3-11ea-8e21-18b3722e753f.gif)\r\n\r\nAs pointed out in the original report at https://github.com/microsoft/vscode-python/issues/13603 by @matangover, Electron has a `noResolveAliases` option for `showOpenDialog` which would solve this problem, however it isn't exposed in the API.\r\n",
        "createdAt": "2020-08-26 22:51:54",
        "state": "open",
        "number": 105455
    },
    {
        "title": "Keyboard Shortcut: Command for workbench.action.debug.selectandrun",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI would like to select and run the configuration in `launch.json`. This is similar to `workbench.action.debug.selectandstart` but for running the program without debugging. vscode already supports `workbench.action.debug.run` but it runs last  launched debug configuration by default and doesn't provide mechanism to choose",
        "createdAt": "2020-08-26 14:45:06",
        "state": "open",
        "number": 105429
    },
    {
        "title": "Better \"when clause\" with full path support",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\n#### This proposal is a slightly improved version of an [already existing suggestion](https://github.com/Microsoft/vscode/issues/64451) which was rejected.\r\n\r\nI would like to have more flexibility using **when clause contexts**. It would be nice if I could specify some directory or certain files of a directory with no nesting restrictions. \r\n\r\n### Let's take a look at 2 cases of this concept:\r\n- I want to capture the path relative to the root of the project:\r\n```\r\n{\r\n  \"menus\": {\r\n    \"explorer/context\": [\r\n      {\r\n        \"command\": \"ext.executeConfigFile\",\r\n        \"when\": \"resourceFilePath == /^\\/$/\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n> Here I expect that the option in the context menu will only appear when the root (/) directory is selected.\r\n- I want to capture the path relative to a directory or even a file:\r\n```\r\n{\r\n  \"menus\": {\r\n    \"explorer/context\": [\r\n      {\r\n        \"command\": \"ext.executeConfigFile\",\r\n        \"when\": \"resourceFilePath == /^\\/Components\\/User\\/(?:[a-zA-Z0-9_]+).js$/\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n> Here I expect that the option in the context menu will appear only when a file is selected by a specified regular expression in the directory /Components/User/.\r\n\r\n### How are things now?\r\nI do not know how to solve this problem related to such a situation using **when clause contexts**. So I reckon this is a powerful and necessary feature that needs to be implemented.",
        "createdAt": "2020-08-26 06:45:17",
        "state": "open",
        "number": 105390
    },
    {
        "title": "Use the git submodule's name in source control view",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nCurrently, git submodules are listed as individual repositories in the source control view. This makes it hard to identify the submodules. Using https://github.com/tlemo/darwin for example, the list of submodules is not very helpful:\r\n\r\n![image](https://user-images.githubusercontent.com/13824553/91254062-2b4d3b80-e716-11ea-9ec7-5ec2e0a1ff19.png)\r\n\r\nSince git submodules can be explicitly assigned descriptive names, it would be nice if VS Code would have the option to use the submodule's name.\r\n\r\nVS Code version: Code 1.48.0 (db40434f562994116e5b21c24015a2e40b2504e6, 2020-08-13T07:40:55.768Z)\r\nOS version: Linux x64 4.15.0-112-generic\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-08-26 04:04:44",
        "state": "open",
        "number": 105382
    },
    {
        "title": "Allow snippets to target standard token types",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ --> yes\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version:Version: 1.48.2\r\n- OS Version: Windows_NT x64 10.0.19041\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open settings.json file and set \t\"editor.quickSuggestions\": { \"comments\": false }\r\n2. Open any javascript file and start typing a comment with \"//\"\r\n3. When you press the period key, the snippet window pops up.\r\n![Annotation 2020-08-26 062626](https://user-images.githubusercontent.com/68050282/91231980-35e4f080-e769-11ea-9c83-851cf206480f.jpg)\r\n![Annotation 2020-08-26 062704](https://user-images.githubusercontent.com/68050282/91231983-367d8700-e769-11ea-9be8-45f00b9acf80.jpg)\r\n\r\nI've tested this with commenting out all of my custom snippets and this problem is fixed.\r\nI'm not sure if this feature was intended but more I think of it, I doubt that it was intended so I'm posting it here as a bug.\r\n\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-08-25 21:56:44",
        "state": "open",
        "number": 105373
    },
    {
        "title": "Allow search to operate on directory/file names in addition to their contents",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI'd like VS Code's search feature to include a toggle that would let it operate on directory and file names as well as their contents. \r\n\r\nFor example, if I have a file named `/models/configuration/product_configuration.ts` I'd like to be able to do a find/replace on more than just the content of the file but also the file/directory names. So, I could search for `configuration` and I would get the following results: \r\n- `models/configuration` directory\r\n- `/models/configuration/product_configuration.ts` file \r\n- presumably a result for each of the instances of the word in that file \r\n\r\nThis would allow me to do a find/replace and change the directory name, the file name, and the instances of the word in the file. \r\n\r\n",
        "createdAt": "2020-08-25 17:52:45",
        "state": "open",
        "number": 105365
    },
    {
        "title": "Go to list separator",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nThere is a Go to Bracket feature that is very useful for jumping to a pairing bracket, brace, or parenthesis when one of those is next to the cursor.  Since many of these brackets enclose lists of items that are comma-separated or semicolon separated, it would be handy to have a command that would work when you place your cursor next to one of these brackets, where running the command would jump to the first comma or semicolon that was a separator at the same level as the bracket (ignoring separators inside of nested lists or string definitions).  Repeated runs of the command would jump to the next comma or semicolon at that same level.\r\n\r\nThis feature would greatly improve the ability to navigate through heavily nested lists of items, such as complex SQL or LISP statements.  \r\n\r\n\r\n\r\nVS Code version: Code 1.48.1 (3dd905126b34dcd4de81fa624eb3a8cbe7485f13, 2020-08-19T17:12:13.244Z)\r\nOS version: Windows_NT x64 10.0.18362\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-08-25 16:16:02",
        "state": "open",
        "number": 105362
    },
    {
        "title": "Allow to Close/Open project in workspace",
        "description": "I would be great if there is feature of open/close project from workspace instead adding/removing project from workspace. This feature is available in Eclipse Editor.\r\n",
        "createdAt": "2020-08-25 09:34:51",
        "state": "open",
        "number": 105348
    },
    {
        "title": "Support fish shell for tasks",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\nVersion: 1.48.1 (user setup)\r\nOS: Windows_NT x64 6.3.9600\r\n\r\n\r\nSteps to Reproduce:\r\n\r\n1. Set fish executable in the settings(json) like below - \r\n![](https://i.imgur.com/rZMDENV.png)\r\n2. Set some scripts like this -\r\n![](https://i.imgur.com/iyomrOr.png)\r\n2. Clicking on any script start or build, will give output as - \r\n![](https://i.imgur.com/0da6L4t.png)\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-08-25 09:08:26",
        "state": "open",
        "number": 105344
    },
    {
        "title": "Allow grouping extension on user side. ",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nWhy :\r\n1. Extension packs are available but one need to create extension pack and publish it in order to create their own prefered grouping in order to use it (i assume)\r\n2. enable extension for workspace is a good option, however if a new workspace is created then you need to enable disable all required extensions each time.\r\n\r\nrequest: allow user to group extensions together on user side. group can be enabled/disabled. \r\n-user can add/remove extension from the group.\r\n-a single extension can be part of few different groups\r\n\r\n\r\nVS Code version: Code - Insiders 1.49.0-insider (8ba70d8bdc3a10e3143cc4a131f333263bc48eef, 2020-08-25T05:33:08.027Z)\r\nOS version: Windows_NT x64 10.0.18363\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-08-25 09:05:53",
        "state": "open",
        "number": 105342
    },
    {
        "title": "File Explorer as Ctrl-P popup",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nVSCode dose a very good job to allow fast navigation when it comes to files, no mouse needed but ..not when it comes to adding files or folders. \r\n\r\n### **The request:** allow the current ctrl-p files filter to also \r\n\r\n1. **_show the tree structure of the files (including folders) filtered_** and with:\r\n- shift-enter on any entry folder or file show an input to enter name for a **_new folder_** relative to the path of the item that was active\r\n- alt-enter show an input to enter name for a **_new file_** relative to the path of the item that was active\r\n\r\n2. **_select multiple files_** (with insert key) then: \r\n- at enter **_open files_**, \r\n- at F5 **_copy_**, F6 **_move_** the selection to a chosen folder, \r\n- at Del **_delete_** the selection with confirmation\r\n3. star key **_marks as current selection expanding_** in the current branch of the active item\r\n4. ctrl-star **_clears all selected files_**\r\n\r\n_Note: selected files remain marked on new filter expression_\r\n\r\n**Reason:**\r\nFast coding is the first feature of vscode also doing fast fs operations helps with fast coding flow.\r\n",
        "createdAt": "2020-08-25 07:52:28",
        "state": "open",
        "number": 105337
    },
    {
        "title": "Press <F3> to search for a string",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nCurrently, after highlighting a word, pressing `Ctrl+F`, triggers a search and then repetitively pressing `<F3>` will sequentially show you all the matches.\r\n\r\nHowever, pressing `<F3>` after highlighting a word, will bring up the last searched item (if it isn't the first word you're searching for; if it is, it will search for the word).\r\n\r\n## Feature Request\r\nPressing `<F3>` after highlighting a word triggers the find menu with the highlighted word",
        "createdAt": "2020-08-25 04:44:46",
        "state": "open",
        "number": 105327
    },
    {
        "title": "Open Images from Markdown Preview",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nClicking on a link to an image (local) while in markdown preview mode does not do anything.\r\n\r\nVS Code version: Code 1.48.1 (3dd905126b34dcd4de81fa624eb3a8cbe7485f13, 2020-08-19T17:12:13.244Z)\r\nOS version: Windows_NT x64 10.0.18363\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-8705G CPU @ 3.10GHz (8 x 3096)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: enabled<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off_ok<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|15.82GB (8.24GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details>Extensions: none\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-08-25 00:31:13",
        "state": "open",
        "number": 105319
    },
    {
        "title": "Add ability to change Custom Editor title",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nThe webview API allows setting a title programmatically, this is also desirable for custom editors that need to use a friendlier name for the resource being edited.\r\n\r\nThe webview API doesn't cover our use case since it doesn't provide the correct save/close behavior that an editor does.\r\n",
        "createdAt": "2020-08-24 16:02:40",
        "state": "open",
        "number": 105299
    },
    {
        "title": "[html] Add value proposals for rel attribute ",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nVSCode doesn't provide any support for autocompleting rel attribute in HTML.\r\n\r\n\r\n![demo-2020-08-24_18 46 07](https://user-images.githubusercontent.com/65836795/91066871-e1dbee00-e63a-11ea-9e7c-d37393b83cfe.gif)\r\n\r\n\r\nIf added, autocompletion for rel attribute in HTML will make the editing experience more consistent.\r\n",
        "createdAt": "2020-08-24 15:52:52",
        "state": "open",
        "number": 105298
    },
    {
        "title": "Allow platform specific workspace folders (multi-folder workspace)",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nThe `folders` entry currently takes an array of entries containing a `path` with an optional `name`.\r\nSimilar to the tasks I'd like to have some entries be system specific. Following the `tasks` layout this would mean that either:\r\n* `folders` may additionally include `linux`, `windows`, `osx`, each with a `path` and optional `name` entry.\r\n* or: entries in `folders` may additionally include `linux`, `windows`, `osx`, each with a `path` entry\r\n\r\nThe current layout for my setup is:\r\n\r\n```json\r\n{\r\n\t\"folders\": [\r\n\t\t{\r\n\t\t\t\"path\": \"src\",\r\n\t\t\t\"name\": \"src root directory\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"path\": \"src/subProject1\",\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"path\": \"src/subProject2\",\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"path\": \"src/subProject3\",\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"path\": \"/home/all/common\",  // only valid on GNU/Linux\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"path\": \"X:/common\",         // only valid on Win32\r\n\t\t}\r\n\t],\r\n\t// more options\r\n}\r\n```\r\n\r\nwhich brings different error and warning messages in vscode and used extensions, applying the suggestion above would mean no warning and error messages and a workspace definition similar to:\r\n\r\n\r\n```json\r\n{\r\n\t\"folders\": [\r\n\t\t{\r\n\t\t\t\"path\": \"src\",\r\n\t\t\t\"name\": \"src root directory\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"path\": \"src/subProject1\",\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"path\": \"src/subProject2\",\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"path\": \"src/subProject3\",\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"linux\": {\r\n\t\t\t\t\"path\": \"/home/all/common\"\r\n\t\t\t},\r\n\t\t\t\"windows\": {\r\n\t\t\t\t\"path\": \"X:/common\"\r\n\t\t\t}\r\n\t\t}\r\n\t],\r\n\t// more options\r\n}\r\n```",
        "createdAt": "2020-08-24 13:44:29",
        "state": "open",
        "number": 105290
    },
    {
        "title": "Running multiple configurations with same name is not working",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.48\r\n- OS Version: macOS Catalina 10.15.6 / Windows 10 / Linux\r\n\r\nSteps to Reproduce:\r\n\r\n1. Tying to launch two nodes in one vscode window not working. Last version of vscode in which this worked is: 1.45 . Can you investigate this and fix it please. Thanks in advance.\r\n2. The button for running a second project is not working.\r\n3. I am attaching a screenshot with the issue button.\r\n\r\n![Screenshot 2020-08-24 at 10 35 20](https://user-images.githubusercontent.com/7550128/91016585-a5d26a00-e5f5-11ea-89a9-31bf6ed5f4dd.png)\r\n\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-08-24 07:40:27",
        "state": "open",
        "number": 105272
    },
    {
        "title": "[theme] allow variables in the color theme definition file",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nSupport of using already defined colors in a theme's theming rule will make themes a much more pleasant and easier experience in my opinion, instead of having a bunch of hexes all over the place or having to change all the occurrences when changing a widely used color.\r\n\r\nExample:\r\n```\r\n{\r\n\t\"$schema\": \"vscode://schemas/color-theme\",\r\n\t\"colors\": {\r\n\t\t\"editor.foreground\": \"#FFFFFF\"\r\n\t},\r\n\t\"tokenColors\": [\t\r\n\t\t{\r\n\t\t\t\"name\": \"Variable\",\r\n\t\t\t\"scope\": [\r\n\t\t\t\t\"variable\",\r\n\t\t\t\t\"meta.definition.variable.name\",\r\n\t\t\t\t\"support.variable\"\r\n\t\t\t],\r\n\t\t\t\"settings\": {\r\n\t\t\t\t\"foreground\": \"#FFFFFF\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}\r\n```\r\n\r\nCan be achieved using:\r\n```\r\n{\r\n\t\"$schema\": \"vscode://schemas/color-theme\",\r\n\t\"colors\": {\r\n\t\t\"editor.foreground\": \"#FFFFFF\"\r\n\t},\r\n\t\"tokenColors\": [\t\r\n\t\t{\r\n\t\t\t\"name\": \"Variable\",\r\n\t\t\t\"scope\": [\r\n\t\t\t\t\"variable\",\r\n\t\t\t\t\"meta.definition.variable.name\",\r\n\t\t\t\t\"support.variable\"\r\n\t\t\t],\r\n\t\t\t\"settings\": {\r\n\t\t\t\t\"foreground\": {\r\n\t\t\t\t\t\"$color\": \"editor.foreground\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}\r\n```\r\n\r\nSyntax for this feature is up for discussion,\r\nCan work on a PR for this if its relevant.",
        "createdAt": "2020-08-23 11:55:40",
        "state": "open",
        "number": 105247
    },
    {
        "title": "Vertical Split Panel Views",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nCurrently (Aug 2020), we can decide if we want the panel view (containing the tabs for terminal, debug console, output, etc.)\r\non the left/right side but we cannot split this view into two or more columns like we can with the editor view.\r\n\r\nThis is a standard capability in many IDEs and more than a few developers could benefit from this kind of layout \r\nwhen working on languages such as Julia and Matlab.\r\n",
        "createdAt": "2020-08-23 09:02:56",
        "state": "open",
        "number": 105245
    },
    {
        "title": "Split \"search.exclude\" setting into two settings: one for search in files, and one for quick open",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nI would like the \"quick open\" feature (Cmd+P) to include ALL files in the projects, even the ones that I want to exclude from the \"search in files\" feature. Unfortunately, it looks like both features use the same list of excluded files and folders (`search.exclude`). Would it be possible to add more specific settings, e.g. `search.quickOpen.exclude` and `search.fullText.exclude`, that would either override or extend the files and folders listed in `search.exclude`?",
        "createdAt": "2020-08-22 23:06:40",
        "state": "open",
        "number": 105232
    },
    {
        "title": "Julia extension in the core VS Code product",
        "description": "It seems like the grammar of a number of popular languages are shipped out-of-the box with VS Code because they have an extension in https://github.com/microsoft/vscode/tree/master/extensions.\r\n\r\nWhat are the criteria for being included there? Would Julia be a potential candidate to also ship like this? Would be great if you could share a bit about the pros and cons of that, I think I don't fully understand the implications at the moment of being included there.\r\n\r\nWe (the Julia extension team) could probably prepare a PR that would add this and would also be happy to maintain this.\r\n\r\nAre there any guidelines about splitting a given language support up into one extension that ships with the core product and then a second extension that ships on the marketplace?",
        "createdAt": "2020-08-22 20:51:43",
        "state": "open",
        "number": 105229
    },
    {
        "title": "Screencast Mode only settings",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIt would be amazing to be able to set \"screencast mode\"-only settings.\r\n\r\nFor example, my `editor.fontSize` is set to 16, but when I'm presenting (in person or over video), I'd like the font size to be 20.\r\n\r\nSince the config supposes `[language]` support, would it be possible to do something like the following?\r\n\r\n```json\r\n{\r\n\r\n  \"editor.fontSize\": 16,\r\n  \"terminal.integrated.fontSize\": 16,\r\n\r\n  \"[screencast]\": {\r\n    \"terminal.integrated.fontSize\": 20,\r\n    \"editor.fontSize\": 20\r\n  }\r\n \r\n}\r\n```\r\n\r\nThis would open up to more configuration options such as setting the theme, font family, etc.",
        "createdAt": "2020-08-22 19:39:17",
        "state": "open",
        "number": 105226
    },
    {
        "title": "[Insiders] Custom task provider cannot use windows definition",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 11.49.0-insider (system setup)\r\n-  OS Version:  Windows_NT x64 10.0.18363\r\n- Commit: 44ad54d9faa4604ab17628e8396e072258187737\r\n- Date: 2020-08-21T06:26:21.718Z\r\n- Electron: 9.2.0\r\n- Chrome: 83.0.4103.122\r\n- Node.js: 12.14.1\r\n- V8: 8.3.110.13-electron.0\r\n\r\nWhen I add the `windows` specific command configuration, it will report that the command is not found, but it is normal when using `linux` and `osx`. I debugged my extension and made it clear that the problem should come from vscode\r\n\r\nSteps to Reproduce:\r\n\r\n1. download extension source code and example  code:\r\n\r\n```shell\r\ngit clone https://github.com/kaysonwu/cpptask.git\r\n\r\ngit clone https://github.com/kaysonwu/cpp-examples.git\r\n\r\ncd cpptask\r\n\r\nyarn install\r\n```\r\n\r\n2. use `vscode-insiders`  open `cpptask` project.\r\n3. Start debugging extension.\r\n4. Open `cpp-examples` project  and debug `hello-world` example\r\n5. Everything is normal.\r\n6. Add windows platform configuration to `tasks.json` \r\n\r\n```json\r\n{\r\n  \"version\": \"2.0.0\",\r\n  \"tasks\": [\r\n    {\r\n      \"label\": \"Build C/C++ Project\",\r\n      \"type\": \"cpp\",\r\n      \"sources\": [\r\n        \"${fileDirname}/**/*.cc\"\r\n      ],\r\n      \"output\": \"${workspaceFolder}/debug/${fileBasenameNoExtension}.exe\",\r\n      \"options\": {\r\n        \"cwd\": \"${fileDirname}\"\r\n      },\r\n      \"includePath\": [\r\n        \"${workspaceFolder}/vendor/**/include\"\r\n      ],\r\n      \"libraryPath\": [\r\n        \"${workspaceFolder}/vendor/**/lib/*\"\r\n      ],\r\n      \"compilerPath\": \"g++\", \r\n      \"compilerArgs\": [\r\n        \"-g\"\r\n      ],\r\n      \"problemMatcher\": [\r\n        \"$gcc\"\r\n      ],\r\n+      \"windows\": {\r\n+       \"options\": {\r\n+          \"cwd\": \"${workspaceFolder}\"\r\n+       }\r\n+     },\r\n      \"group\": \"build\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n7. Re-debug the `hello-world` example\r\n8. You will see the task cannot be found\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-08-22 11:44:29",
        "state": "open",
        "number": 105215
    },
    {
        "title": "Shortcut to add multiple cursors to selection while in find input",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI expected that while finding for text `cmd+d` would add cursors to next occurrence in the editor. The keybinding didn't work.\r\n```json\r\n{\r\n  \"key\": \"cmd+d\",\r\n  \"command\": \"editor.action.addSelectionToNextFindMatch\",\r\n  \"when\": \"findInputFocussed\"\r\n}\r\n\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/820623/90942263-69332280-e3eb-11ea-85ef-730632746bde.png)\r\n\r\n\r\n\r\n```\r\nVersion: 1.48.1\r\nCommit: 3dd905126b34dcd4de81fa624eb3a8cbe7485f13\r\nDate: 2020-08-19T17:09:41.484Z\r\nElectron: 7.3.2\r\nChrome: 78.0.3904.130\r\nNode.js: 12.8.1\r\nV8: 7.8.279.23-electron.0\r\nOS: Darwin x64 19.5.0\r\n```\r\n",
        "createdAt": "2020-08-21 23:52:54",
        "state": "open",
        "number": 105199
    },
    {
        "title": "Multiple Explorers",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\nI know this might be a far-fetched idea, but for me personally it would be very useful to have multiple project explorers side-by-side. I.e. use case: I have a subdirectory in my project root dir that contains results (logs) of each run of  my program. A new log file is generated at each run, so this folder quickly gets populated with 100+ files and it becomes difficult to scroll up and down. Another use case is when node_modules folder is open with its 1000+ packages. It'd be practical to have one explorer open for the project as now, and another on its right side to browse other folders.",
        "createdAt": "2020-08-21 21:29:57",
        "state": "open",
        "number": 105194
    },
    {
        "title": "[Request] Support for formatting when close bracket is injected by editor.autoClosingBrackets",
        "description": "\r\nIn the C/C++ extension, we now support formatting of a block when a user types `}`.  However, we do not receive a request to our `OnTypeFormattingEditProvider` when a `}` is inserted due to `editor.autoClosingBrackets`.\r\n\r\nPerhaps there is a way to provide us with a formatting request in this scenario?\r\n\r\nAlthough the block would be empty, we would use this trigger to format any `for` or `while` statement associated with the block.",
        "createdAt": "2020-08-21 21:20:02",
        "state": "open",
        "number": 105193
    },
    {
        "title": "Have separate key shortcuts for \"Replace\" and \"Find Next\" in find/replace dialog.",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nCurrently, the shortcut for both is \"Enter\", going to whichever button was pressed last.\r\n\r\nIt is a frequent workflow that you may want to decide for each occurrence to replace or skip, which currently can't be done by efficiently by keyboard as far as I can tell.",
        "createdAt": "2020-08-21 20:50:39",
        "state": "open",
        "number": 105188
    },
    {
        "title": "Default replace string to selection",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nPressing CTRL+H on a selection defaults to giving me whatever I used last time as the replace string, which is often an unrelated string. 9 times out of 10 this means I have to copy the find field into the replace field manually, before editing the the replace field, which is tiresome.\r\n\r\nBetter would be if both the find and replace strings would default to the selection. If this can't be changed because there are users who find having the previous value, make it an option, or better yet, add a little widget that cycles thru past values, like some editors have (e.g. Visual Studio :).\r\n\r\nThen, you can further improve things by placing the cursor in the replace field, not in the find field like currently. If I pressed CTRL+H on a selection, I probably don't want to edit the find field, I want to edit the replace field.\r\n",
        "createdAt": "2020-08-21 20:47:19",
        "state": "open",
        "number": 105187
    },
    {
        "title": "Improve keyboard shortcut sync failure flow",
        "description": "I've got the `Unable to sync keyboard shortcuts because the content in the file is not valid. Please open the file and correct it.` error and was surprised by the zero guidance provided in the following steps.\r\n\r\n![image](https://user-images.githubusercontent.com/35271042/90919813-fc446c00-e39b-11ea-874a-b817c73b754d.png)\r\n\r\nThen when you open your keyboard shortcuts:\r\n![image](https://user-images.githubusercontent.com/35271042/90919788-f0f14080-e39b-11ea-936a-4efb3ba1f281.png)\r\n\r\nIt's not immediately obvious what to do next. If you look really closely you can see in the scrollbar that there are errors, but this is not immediately obvious. Suggestion would be to provide more guidance, like open the peek error view when you open this file:\r\n\r\n![image](https://user-images.githubusercontent.com/35271042/90919881-18e0a400-e39c-11ea-8ee1-2f4867bc2bcb.png)\r\n",
        "createdAt": "2020-08-21 17:53:21",
        "state": "open",
        "number": 105176
    },
    {
        "title": "Progress bars should have a way to report what they are about",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nThis is a rather general issue on vscode UX choice for it's busy indicator (aka throbber, or \"that flying dash under assorted elements throughout the interface\").\r\n\r\nWhenever my vscode is busy for a long time, I'm always curious about \"what is going on\". Nowhere is this information available, and it should be.\r\n\r\nI have simply many issues with git and typescript in vscode, but I can't even start writing the issues, because you will \"need more information\".\r\n\r\nThat's it: to start, I think there should be a clear indication about tasks that were started but not completed... something that tells us why is there a \"flying dash\" under open file tabs, or under \"explorer view title\", or elsewhere.\r\n\r\nVS Code version: Code - Insiders 1.48.0-insider (2277c8e2a3e1cc630a6397301ba54a1dccd8a60d, 2020-08-07T11:32:09.993Z)\r\nOS version: Windows_NT x64 6.1.7601\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i5-3340 CPU @ 3.10GHz (4 x 3093)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off_ok<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|15.44GB (3.88GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (19)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nbracket-pair-colorizer|Coe|1.0.61\r\nvscode-eslint|dba|2.1.5\r\nxml|Dot|2.5.0\r\ngitlens|eam|10.2.1\r\nvscode-lombok|Gab|1.0.1\r\njava-properties|ith|0.0.2\r\ngit-graph|mhu|1.23.0\r\nvscode-typescript-tslint-plugin|ms-|1.2.3\r\njava-ide-pack|pve|1.2.1\r\njava|red|0.59.1\r\nvscode-xml|red|0.11.0\r\nvscode-yaml|red|0.8.0\r\nvscodeintellicode|Vis|1.2.7\r\nvscode-java-debug|vsc|0.27.1\r\nvscode-java-dependency|vsc|0.9.0\r\nvscode-java-pack|vsc|0.9.1\r\nvscode-java-test|vsc|0.22.3\r\nvscode-icons|vsc|10.1.1\r\nvscode-java-saber|You|0.1.1\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-08-21 15:40:30",
        "state": "open",
        "number": 105162
    },
    {
        "title": "Support predefined variables in find/replace",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nSometimes i would like to replace an occurrence with the fileName of that file, or do something a little more dynamic.\r\nI don't know how feasible this is, but it would be really useful if you could use these variables inside the replace box.\r\n\r\n**Example:**\r\nI have many files that export default, i need to individually change them one by one to match up with the fileName.\r\nIf i could use the variable i could do this action in one go. \r\n![image](https://user-images.githubusercontent.com/936006/90883806-695cff00-e3a6-11ea-8681-8d3e27bbf4c6.png)\r\n\r\nI understand some of these variables are not applicable, like `execPath` and `selectedText`.\r\nbut things like the filename and directory would be great to use.\r\n\r\n## Variables Reference\r\nhttps://code.visualstudio.com/docs/editor/variables-reference#_predefined-variables\r\n",
        "createdAt": "2020-08-21 11:06:16",
        "state": "open",
        "number": 105144
    },
    {
        "title": "Can you please add run single cell on top tool bar ",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nIf i want to enter large number of lines of code snippet in a single cell and if i want to execute it , I have scroll up to the starting of cell to run it . Instead i feel the UX will be better if that feature is included in tool bar itself , so that i don't have to scroll up every time",
        "createdAt": "2020-08-21 04:47:36",
        "state": "open",
        "number": 105124
    },
    {
        "title": "Launch VS Code from command line in background",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nAt the moment when launching vscode from command line, the VS Code window opens in foreground and takes focus.\r\nThis is probably as expected when launched from the Desktop, but when launched from command line it would be good to have some flexibility.\r\n\r\nI would like the ability to pass a param that will launch vscode in the **background** such that my **terminal is still in focus**.\r\n\r\nMy suggestion:\r\n\r\n* Launch Windows terminal (WSL)\r\n    `cd /my/workspace`\r\n    `code --background -n .`\r\n* Terminal remains in focus\r\n* VS Code launches in background\r\n* Continue working in terminal\r\n\r\nWould this be possible? And would it be a worthwhile change?\r\n\r\n==========\r\n**Environment**\r\nOS: Windows 10\r\nVSCode: 1.48.1\r\nWSL: v1",
        "createdAt": "2020-08-21 00:36:14",
        "state": "open",
        "number": 105116
    },
    {
        "title": "Watch name and column should be spaced evenly",
        "description": "When a watch name is too long then its value is obscured\r\nBoth the name and the value should be evenly spaced out, like in 'real' IDE's\r\n![image](https://user-images.githubusercontent.com/1481807/90752083-a3af9900-e2df-11ea-896f-c49afff3967a.png)\r\n![image](https://user-images.githubusercontent.com/1481807/90752299-e1142680-e2df-11ea-8e55-3af51b602ce3.png)\r\n",
        "createdAt": "2020-08-20 09:22:59",
        "state": "open",
        "number": 105065
    },
    {
        "title": "Multi-Line Edit is Wrongly Deleting Text from Wrapped Lines",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.48.0\r\n- OS Version: Microsoft Windows 10 Pro 10.0.18363 N/A Build 18363\r\n\r\n![multiline_bug](https://user-images.githubusercontent.com/4195793/90702710-53462600-e262-11ea-87b7-f5eb6d8b8d1c.gif)\r\n\r\nSteps to Reproduce:\r\n\r\n1. The setting \"Word Wrap\" is on.\r\n2. Create a line with enough text to be wrapped.\r\n3. Select the begging of multiple lines to edit by pressing SHIT + ALT + Mouse Left Click \r\n4. Notice that the wrapped text that belongs to the previous line is also selected.\r\n5. Start to press the \"Delete\" key. Pay attention to the end of the lines. \r\n6. **The wrapped text at the end of the line is also deleted (the part \"same line shouldn't be deleted\").**\r\n7. For reference, Notepad++ handles this correctly by not deleting the part of the text that is wrapped.\r\n\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-08-20 00:30:47",
        "state": "open",
        "number": 105038
    },
    {
        "title": "Add ability to apply custom icon to Custom Editors",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nWith webviews, we can add icons we like to the webview with webviewPanel.iconPath but when this is applied to the Custom Text Editor's webview panel, nothing is displayed.\r\n\r\nCreate a method to apply a custom icon to Custom Text Editors without having to provide an entire Icon Theme. Ideally this would override ONLY the Custom Editor associated to that viewType, which would allow us to differentiate open text editors vs Custom Editors viewing the same file by icon.\r\n",
        "createdAt": "2020-08-19 20:43:23",
        "state": "open",
        "number": 105028
    },
    {
        "title": "Git: Support spawning git on a shell script",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.48.0\r\n- OS Version: CentOS Linux release 7.7.1908\r\n\r\nDescription: \r\nI sometimes use machines where its not easy to install a newer version of git. For instance, CentOS 7.7.1908 ships with git 1.8. As a workaround, I use a docker container to quickly pull a newer version and use it instead of the os provided version. I'm trying to make vscode points to a wrapper script to use this git instance version and it doesn't work.\r\n\r\nExample of what is happening through the OUTPUT->git console:\r\n```\r\nLooking for git in: /home/username/git.sh\r\nLooking for git in: git\r\nUsing git 1.8.3.1 from git\r\n...\r\n```\r\n\r\nExpected result would be something like:\r\n```\r\nLooking for git in: /home/username/git.sh\r\nUsing git 2.26.2 from /home/username/git.sh\r\n...\r\n```\r\n\r\nShould I expect this to work ? Is this behavior by design ?\r\n\r\nNote: I'm actually experiencing this through remote ssh. Can't really test this directly on my local machine (windows). So in practice, I am experiencing this issue when adding the git.path setting to the \"Remote [SSH: host]\" section of vscode settings. \r\n\r\n\r\nSteps to Reproduce:\r\n\r\n1. Create a bash script /home/username/git.sh\r\n```bash\r\n#/bin/bash\r\n(docker run -ti --rm -v ${HOME}:/root -v $(pwd):/git alpine/git \"$@\")\r\n```\r\n2. add this to the git.path setting through json\r\n`\"git.path\": \"/home/username/git.sh\"`\r\n\r\n3.  Reload vscode window\r\n\r\n4. Check OUTPUT->Git console\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes/No\r\n",
        "createdAt": "2020-08-19 16:36:28",
        "state": "open",
        "number": 105011
    },
    {
        "title": "[Feature request] Background image for Center Layout",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\nWhen having Center Layout enabled on a large screen, it would be nice to have a custom background image spanning the margins of the Center Layout. Something like that (achieved by manually editing `workstation.desktop.main.css` and thus breaking the VS Code installation):\r\n\r\n![Screenshot](https://user-images.githubusercontent.com/66925589/90652265-6559a180-e22d-11ea-9bd3-5253957a8b12.jpg)\r\n\r\nWhy not choose such a wallpaper for the desktop and resize the whole window?\r\n\r\n- Resizing the window when toggling sidebars becomes tedious.\r\n- The desktop itself may be cluttered which may obstruct the Zen mode experience.",
        "createdAt": "2020-08-19 15:14:50",
        "state": "open",
        "number": 105001
    },
    {
        "title": "please always show english tip in git menu even user chosing cjk display language",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI'm glad vscode localization, but I'd like to propose:\r\nplease always show english tip in git menu even user chosing cjk display language, because after switching to a different language, it's hard to guess what the git menu item really means.\r\nFor Latin users, it may be easy to understand the localization of git menus. but it will be hard for cjk users to understand.\r\n![image](https://user-images.githubusercontent.com/1876302/90649677-8e9a2200-e26d-11ea-981a-1be9a2ab5de5.png)\r\n\r\nlike :\r\n![image](https://user-images.githubusercontent.com/1876302/90652301-82639400-e270-11ea-82f2-d31f92455b3c.png)\r\n\r\nTHANKS and Please\r\n\r\n",
        "createdAt": "2020-08-19 15:08:02",
        "state": "open",
        "number": 104999
    },
    {
        "title": "Notebook changes on disk while opened",
        "description": "Repro:\r\n\r\n1. Open Notebook that is checked into git\r\n2. git pull to update the notebook on disk\r\n\r\n:bug: => opened notebook is out of date and nothing is mentioned to the user",
        "createdAt": "2020-06-02 17:10:50",
        "state": "open",
        "number": 104982
    },
    {
        "title": "Need way to hide cursor when text is selected",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nOn macOS, it's standard that a cursor (really, an insertion point marker) in an editable text field disappear when one or more characters is selected. In VS Code, the cursor continues to blink at the end of a text selection. I can't find a setting to control this. I'd like it to hide the cursor (insertion point) while text is selected.\r\n\r\nThanks.",
        "createdAt": "2020-08-19 07:54:25",
        "state": "open",
        "number": 104976
    },
    {
        "title": "Left side of gutter SCM diff decorations",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nI can't really see the diff decoration in VSCode since it's on the right side of the gutter:\r\n\r\n<img width=\"180\" alt=\"image\" src=\"https://user-images.githubusercontent.com/14007/90589847-49f28600-e19c-11ea-8739-f24512750fa7.png\">\r\n\r\nCompare this with atom:\r\n\r\n<img width=\"152\" alt=\"image\" src=\"https://user-images.githubusercontent.com/14007/90589877-6262a080-e19c-11ea-9a70-e37834eb8a9b.png\">\r\n\r\nIt just makes a lot more sense for it to be on the left side (further away from the code).",
        "createdAt": "2020-08-19 03:48:34",
        "state": "open",
        "number": 104969
    },
    {
        "title": "Can't input backslash.",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: \r\nTested with the latest insiders edition  --> Yes.\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version:Version: 1.49.0-insider \r\n- OS Version: Windows_NT x64 10.0.19041\r\nTested with the latest insiders edition  --> Yes.\r\n\r\nSteps to Reproduce:\r\n\r\nNot sure what caused this to happen but I used to be able to type the backslash but all of sudden it stopped working.\r\nBackslash works on any other input areas such as Chrome, windows search or wherever but it doesn't work in VSCode ONLY.\r\nTried reinstalling VSCode and also the insiders edition. I now have to copy and paste the backslash OR type it by pressing the Alt key + 92 from the num keypad. The pipe sign works without a problem in VSCode. This started with the stable version of VSCode first and when I was about to report this bug I noticed from the report template that I should check with the latest insider's edition and when I first installed the insiders edition it worked but it stopped working again after initial setup (plugins). So as described in the template I tried running with all plugins disabled but problem still exists. \r\nI'm using an American layout keyboard from Corsair K70 MK.2.\r\nPlease let me know if I need to provide more information. Thank you.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-08-19 03:17:51",
        "state": "open",
        "number": 104966
    },
    {
        "title": "Snippets + Auto-closing pairs don't compliment each other",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\nVersion: 1.49.0-insider\r\nCommit: 11dc5a81ba248cc2678888391f1b24dccabddaf8\r\nDate: 2020-08-17T17:11:16.078Z (1 day ago)\r\nElectron: 9.2.0\r\nChrome: 83.0.4103.122\r\nNode.js: 12.14.1\r\nV8: 8.3.110.13-electron.0\r\nOS: Darwin x64 19.6.0\r\n\r\nSteps to Reproduce:\r\n\r\nAdd the following python snippet:\r\n```json\r\n\"listcompPy\": {\r\n\t\t\"prefix\":\"[x for x in\",\r\n\t\t\"body\":[\r\n\t\t\t\"[x for x in range(1,20) if x%2==0 ]\"\r\n\t\t]\r\n\t}\r\n```\r\nor PowerShell snippet:\r\n```json\r\n\"PSCustomObject\": {\r\n        \"prefix\":\"[PSCustomObject\",\r\n        \"body\":[\r\n            \"[PSCustomObject] @{ Key = Value }\"\r\n        ]\r\n    }\r\n```\r\n\r\n1. type: `[` which will cause auto-closing pair... (at this point you have `[|]` where `|` is the cursor)\r\n2. then add a `x` or `psc` and hit TAB or ENTER on the intellisense item\r\n\r\n### Expected\r\n\r\n#### Python\r\n\r\n```\r\n[x for x in range(1,20) if x%2==0 ]\r\n```\r\n\r\n#### PowerShell\r\n\r\n```\r\n[PSCustomObject]@{\r\n    Name = Value\r\n}\r\n```\r\n\r\n### Actual\r\n\r\n#### Python\r\n\r\n```\r\n[x for x in range(1,20) if x%2==0 ]]\r\n```\r\n\r\n#### PowerShell\r\n\r\n```\r\n[PSCustomObject]@{\r\n    Name = Value\r\n}]\r\n```\r\n\r\nNOTE THE TRAILING `]`. Snippets and auto-closing pairs should play nice together so that the whole experience generates valid code.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-08-18 21:02:52",
        "state": "open",
        "number": 104952
    },
    {
        "title": "Option to always expand open editors section by default",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI have tabs disabled, and it's a hassle to me that I can't find a way to make the open editors section expanded by default.",
        "createdAt": "2020-08-18 15:45:02",
        "state": "open",
        "number": 104940
    },
    {
        "title": "Pycharm like jupyter control ",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nInstead of having a plus button to add a new cell, can we make a new cell using the '#%%' and '#%% md' statements. Also, instead of having the output viewed directly under the cell, can we have an option move outputs to the side. \r\n![23ae1b95-4dad-466f-ae97-41d0b18725ee](https://user-images.githubusercontent.com/49263742/90475876-5d4b1600-e0f6-11ea-8e96-9f0ae73063f3.gif)\r\n",
        "createdAt": "2020-08-18 05:59:05",
        "state": "open",
        "number": 104893
    },
    {
        "title": "Horizontal pane in diff comparison",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nAdding horizontal view in diff-editor would  be a better feature than just rotating vertical split( #26856). Like the way Winmerge do it. \r\nSide buttons to collapse either vertical/horizontal panes would be a plus.\r\n\r\n![WinMerge-interface](https://user-images.githubusercontent.com/820623/90428856-fe0be800-e09a-11ea-84e2-67a2261ed821.png)\r\n",
        "createdAt": "2020-08-17 18:20:03",
        "state": "open",
        "number": 104855
    },
    {
        "title": "Git: Add support to delete remote git tags using command palette",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nBe able to delete remote git tags using  this command using command palette\r\n\r\n`git push --delete origin tagname`\r\n\r\ncurrently only deletes local tags",
        "createdAt": "2020-08-17 16:43:44",
        "state": "open",
        "number": 104845
    },
    {
        "title": "Git: Clone to an alternate directory name",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nWhen performing a `git clone` I'd like the option to specify an alternate target directory, just as I can with `git clone` on the command line. \r\n\r\nFor example, this can be useful when cloning a template repository, making a few edits, then pushing back to a new origin.\r\n\r\nThe problem as it stands is that the location chosen within VSCode is only for the repository's _parent_ directory. There does not appear to be a way to specify the destination proper.\r\n\r\nTo illustrate further, VSCode appears to do the equivalent of:\r\n```\r\n$ mkdir -p /home/jdandrea/git/my-repo && cd $_\r\n$ git clone https://url/to/repo.git\r\nCloning into 'repo'...\r\n. . .\r\n```\r\n\r\nWhereas what I want to do instead is:\r\n```\r\n$ git clone https://url/to/repo.git /home/jdandrea/git/my-repo\r\nCloning into '/home/jdandrea/git/my-repo'...\r\n. . .\r\n```\r\n\r\nNote the different clone target of `my-repo` vs `repo`.\r\n\r\nI tried renaming the directory just after cloning, expecting VSCode to follow the name change, however this does not work as expected and is out-of-scope per #20071.\r\n\r\n_Originally posted by @jdandrea in https://github.com/microsoft/vscode/issues/103987#issuecomment-674966458_",
        "createdAt": "2020-08-17 16:04:50",
        "state": "open",
        "number": 104838
    },
    {
        "title": "Add \"editor.gotoLocation.multipleDeclarations\": \"gotoAndFind\"",
        "description": "It would go to a single result immediately and open the references view for multiple results.\r\n\r\nWhy:\r\n- \"peek\" is like a keyhole, too small to work with. Same with \"gotoAndPeek\" for multiple results.\r\n-  \"goto\"'s statusbar indicator is too subtle.\r\n- Find All References is great, but what about declarations vs. implementations vs. type definitions ... ?\r\n\r\nSame for \"editor.gotoLocation.multipleDefinitions\", \"editor.gotoLocation.multipleImplementations\", \"editor.gotoLocation.multipleReferences\" and \"editor.gotoLocation.multipleTypeDefinitions\".",
        "createdAt": "2020-08-17 14:14:34",
        "state": "open",
        "number": 104824
    },
    {
        "title": "Trusted notebook outputs",
        "description": "There are notebooks that allow to run arbitrary code (JS, SVG) as their output and we should let users know about that.  Currently such a notification/prompt is implemented by the python extension but it should be part of the core. Maybe something similar as [`MarkdownString#isTrusted?: boolean;`](https://github.com/microsoft/vscode/blob/6445a9633d428e0879d172d4f392c542ba887768/src/vs/vscode.d.ts#L2465) would be enough. E.g the `NotebookData`-type could have a similar flag saying that this notebook does/will contain arbitrary code (that's code written by users, not extension authors)",
        "createdAt": "2020-08-17 08:10:11",
        "state": "open",
        "number": 104787
    },
    {
        "title": "Call natiive logging APIs when debugging in the extension host",
        "description": "Currently in extension host debugging, logged messages are placed directly in the Debug Console and bypass js-debug.\r\n\r\nHowever, now (as of https://github.com/microsoft/vscode-js-debug/issues/412) js-debug has the capability to replace paths stacktraces thrown from compiled code with their respective source locations, so there's a compelling benefit to change this behavior. Either to actually call the native APIs (which would be the easiest for me \ud83d\ude04) or implement some custom DAP message to pass the log through the debugger here\r\n\r\nhttps://github.com/microsoft/vscode/blob/cc29a814476d9d9366e7687a16cff1af0641fbdf/src/vs/workbench/contrib/debug/browser/debugService.ts#L144",
        "createdAt": "2020-08-14 20:57:44",
        "state": "open",
        "number": 104686
    },
    {
        "title": "Support opening files in external application",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n- Be able to right click on a file in the file explorer and click \"Open in external application\", this would invoke `xdg-open` or Windows equivalent on the file.\r\n- Be able to configure certain file types (for example PDFs) to always open in external application.",
        "createdAt": "2020-08-14 18:02:55",
        "state": "open",
        "number": 104678
    },
    {
        "title": "[Settings Sync] Can't see \"accept remote\" button in in-line diffs",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\nVersion: 1.48.0-insider\r\nCommit: 4c23fc22ced6d0c1f58215ce91ccd08d0c8a0006\r\nDate: 2020-08-11T10:13:04.551Z\r\nElectron: 7.3.2\r\nChrome: 78.0.3904.130\r\nNode.js: 12.8.1\r\nV8: 7.8.279.23-electron.0\r\nOS: Darwin x64 18.7.0\r\nSteps to Reproduce:\r\n\r\nDoing a manual merge and the Settings Sync viewlet blocks the \"accept remote\" merge buttons when viewing diffs in the in-line editor. Also, the location of that button seems out of place. Should it be near the red highlighted lines or closer to the \"accept local\" button?\r\n\r\n![recording (4)](https://user-images.githubusercontent.com/9721254/90275937-f12b9200-de17-11ea-81bf-36b86a04a4e1.gif)\r\n\r\n\r\n\r\n",
        "createdAt": "2020-08-14 17:23:04",
        "state": "open",
        "number": 104672
    },
    {
        "title": "[folding] Folding via regex",
        "description": "@dwall60 Thanks for the feedback. Would you mind filing a separate issue that also shows a bit how this works in SlickEdit. I'm curious to know how users provide the regexes and how the regexes look like (one regex for the whole region, or separate start end regexes)\r\n\r\n_Originally posted by @aeschli in https://github.com/microsoft/vscode/issues/18805#issuecomment-673949486_\r\n\r\nA single regex is applied to the currently open file and you can choose to only view lines that match the regex or hide lines that match it.\r\n\r\nExample file contents:\r\nline 1\r\nrandom text\r\nline 2\r\nsomething else\r\n\r\nregex: line.+\\d+\r\n\r\nI've chosen to show all lines that match the regex:\r\nline 1\r\nline 2\r\n\r\nIf I choose to hide all lines that match:\r\nrandom text\r\nsomething else\r\n\r\nYou can also choose to copy only the visible lines to paste somewhere, which is how I was able to paste the lines above.\r\n\r\nYou can try SlickEdit as a trial to see what it does if you want. The feature is called \"Selective Display\".",
        "createdAt": "2020-08-14 16:30:43",
        "state": "open",
        "number": 104667
    },
    {
        "title": "Highlight a word for multiple panels",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nHi, would great to vscode highlights a word between Editors Group like this sample:\r\n![HightLights](https://user-images.githubusercontent.com/30563443/90256911-06022880-de0c-11ea-8121-3bb249c1f82d.gif)\r\n",
        "createdAt": "2020-08-14 13:58:33",
        "state": "open",
        "number": 104659
    },
    {
        "title": "Allow settings sync history to be exported",
        "description": "Currently history can be accessed by viewing synced data:\r\n\r\n![image](https://user-images.githubusercontent.com/2193314/90254508-b74a9380-ddf7-11ea-86e3-cb7993851156.png)\r\n\r\nHowever @borekb calls out in https://github.com/microsoft/vscode/issues/92357#issuecomment-673952213 that there is no way to export this history. How about we add a new export action to the sync activity views which exports all these files to a folder? Eg. a flat folder with files of the form:\r\n\r\n```\r\n<epoch>-settings.json\r\n<epoch>-globalState.json\r\n<epoch>-globalState.json\r\netc.\r\n```",
        "createdAt": "2020-08-14 13:35:48",
        "state": "open",
        "number": 104657
    },
    {
        "title": "Unable to switch github account in settings sync",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.48.0\r\n- OS Version: Darwin x64 19.5.0\r\n\r\nSteps to Reproduce:\r\n\r\n1. Turn settings sync on using a github account\r\n2. Turn settings sync off\r\n3. Attempt to turn settings sync on again to use a different github account, however the only option for github is to use the \"Last Used with Sync\" account\r\n\r\nIf I was wanting to switch to a different Microsoft account I would be able to using the menu item \"Sign in with Microsoft\" but there is no similar item for github after the first time it is used.\r\n\r\n![image](https://user-images.githubusercontent.com/34219518/90191036-3bab0f80-de14-11ea-9ca3-6d21b67331bc.png)\r\n\r\nThe docs say it should be possible https://code.visualstudio.com/docs/editor/settings-sync#_switching-accounts\r\n\r\n![image](https://user-images.githubusercontent.com/34219518/90191129-6d23db00-de14-11ea-9be9-c2c872680244.png)\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-08-13 21:58:16",
        "state": "open",
        "number": 104595
    },
    {
        "title": "Debug views icons",
        "description": "As pointed out in https://github.com/microsoft/vscode/issues/103414\r\n\r\nWe might need new icons for each debug view since they can be taken out of debug view containers and have a view container of their own.\r\n",
        "createdAt": "2020-08-13 16:19:34",
        "state": "open",
        "number": 104573
    },
    {
        "title": "Add Education extension category",
        "description": "- [ ] Add category to marketplace @fiveisprime @prashantvc\r\n- [ ] Update completions for package.json @sandy081\r\n- [ ] Update completions for extensions view @sandy081\r\n- [ ] Update completions for cli @sandy081\r\n- [ ] Update documentation @fiveisprime",
        "createdAt": "2020-08-13 15:31:34",
        "state": "open",
        "number": 104568
    },
    {
        "title": "Add Count of Open Editors",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nAdd an optional (with possibility to hide) counter of open editors to see how many files you have open.",
        "createdAt": "2020-08-13 14:32:02",
        "state": "open",
        "number": 104564
    },
    {
        "title": "New condition for breakpoints: enable after another breakpoint was hit",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIntelliJ's IDEs have this and I just had a debugging session where it would be very useful:\r\n\r\n> When a breakpoint is selected in the Disable until hitting the following breakpoint box, it acts as a trigger for the current breakpoint. This disables the current breakpoint until the specified breakpoint has been hit.\r\n\r\n> You can also choose whether to disable it again after this has happened or leave it enabled.\r\n\r\n> This option is useful when you only need to suspend the program under certain conditions or after certain actions. In this case, the trigger breakpoint usually isn't required to stop the program execution and is made non-suspending.\r\n",
        "createdAt": "2020-08-13 13:52:16",
        "state": "open",
        "number": 104563
    },
    {
        "title": "file are not sorted in ascending order for numeric file name",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.47.3\r\n- OS Version: Windows 10 v2004 \r\n\r\nOn VS Explorer, the file is not sorted in ascending order as shown below, (compared with Window Explorer)\r\n![image](https://user-images.githubusercontent.com/6995156/90131510-e2969980-dd89-11ea-975c-066d77bc7de7.png)\r\n\r\n\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-08-13 11:56:51",
        "state": "open",
        "number": 104555
    },
    {
        "title": "Break on conditional exceptions in node debugger",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n[ref 1](https://github.com/microsoft/vscode/issues/53795)\r\n<!-- Describe the feature you'd like. -->\r\n\r\n# Problem\r\n\r\nIt is often challenging to narrow the emitter of an exception using node + vscode tooling. For example, many node internals throw exceptions often, as do userland libraries. `skipFiles` is a noble attempt that helps to aide with this problem, but requires that the user collect possibly large domains of possible paths up front, where often it is unknown _whom_ is responsible for emitting an exception. As suggested in similar threads, I cannot reasonably _use_ `<node_internals>` in my skipFiles, as code that is-on-the-fly compiled is put into VM scripts, and is thus ignored. Further, in some cases, i'm OK breaking inside of internals. During _daily_ debugging, I have knowledge about an exception (perhaps stderr output from a prior run), that I really want to hone in on--and thus want a conditional breakpoint to rapidly narrow my search.\r\n\r\n**This feature would add a mechanism like conditional breakpoints**, but just to exceptions. Perhaps it would be as follows:\r\n\r\n- select `[x] All exceptions` in the debugger\r\n- right click => add condition\r\n- observe placeholder prompt \"`err => `\r\n- user fills in function\r\n- user hits enter to save the function\r\n\r\n```\r\nerr => err && err.message.match(/react/)\r\n```\r\n\r\nthe need for a lamba here is because the exception of course isn't otherwise in scope--providing a function lets us introspect the error.\r\n",
        "createdAt": "2020-08-11 21:46:42",
        "state": "open",
        "number": 104453
    },
    {
        "title": "Support touch scrolling",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nOn Linux+Wayland at least, touch can only be used to place the cursor somewhere, but you can't scroll the pane, and you can't even select (which is what I would expect if scroll wasn't working)\r\n\r\nOn top of that, if you touch an identifier, it will sometimes jump to the definition of that identifier, which is never what I want.\r\n\r\nI like using touch to scroll, and VS Code is the only Electron app I use that has problems with this. For example, the Microsoft Teams desktop app supports touch just fine.\r\n\r\nVS Code version: Code 1.47.3 (91899dcef7b8110878ea59626991a18c8a6a1b3e, 2020-07-23T15:51:39.791Z)\r\nOS version: Linux x64 5.7.14\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-1065G7 CPU @ 1.30GHz (8 x 2958)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: disabled_software<br>skia_renderer: disabled_off_ok<br>video_decode: unavailable_off<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off_ok<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|1, 1, 1|\r\n|Memory (System)|15.21GB (2.92GB free)|\r\n|Process Argv|--no-sandbox|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n|DESKTOP_SESSION|gnome|\r\n|XDG_CURRENT_DESKTOP|GNOME|\r\n|XDG_SESSION_DESKTOP|gnome|\r\n|XDG_SESSION_TYPE|wayland|\r\n</details><details><summary>Extensions (64)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\ntypingspeed|alb|0.0.2\r\nvscode-sqlite|ale|0.8.2\r\nNix|bbe|1.0.1\r\nnixfmt-vscode|bre|0.0.1\r\nnpm-intellisense|chr|1.3.0\r\nvscode-css-modules|cli|0.2.3\r\ngitignore|cod|0.6.0\r\nsystemd-unit-file|coo|1.0.6\r\nvscode-markdownlint|Dav|0.36.2\r\nvscode-eslint|dba|2.1.8\r\nvscode-quick-select|dba|0.2.8\r\nvscode-npm-source|dku|1.0.0\r\nxml|Dot|2.5.1\r\ngitlens|eam|10.2.2\r\nEditorConfig|Edi|0.15.1\r\nvscode-npm-script|eg2|0.3.13\r\nprettier-vscode|esb|5.1.3\r\nvscode-highlight|fab|1.4.1\r\nvscode-todo-plus|fab|4.17.1\r\nflow-for-vscode|flo|1.5.0\r\nbackticks|fra|1.6.0\r\nvscode-php-cs-fixer|fte|0.3.0\r\nvscode-pull-request-github|Git|0.18.0\r\nvscode-test-explorer|hbe|2.19.1\r\nsvgeditor|hen|2.9.0\r\nvscode-ungit|Hir|2.2.3\r\nvscode-power-mode|hoo|2.2.0\r\nvscode-graphviz|joa|0.0.6\r\nsvg|joc|1.3.8\r\ndocthis|joe|0.7.1\r\nvscode-peacock|joh|3.8.0\r\nvscode-styled-components|jpo|0.0.29\r\nchat|kar|0.35.0\r\nvscode-jest-test-adapter|kav|0.6.2\r\nrainbow-csv|mec|1.7.1\r\ngit-graph|mhu|1.25.0\r\nvscode-apache|mrm|1.2.0\r\nvscode-docker|ms-|1.4.1\r\npython|ms-|2020.7.96456\r\nremote-containers|ms-|0.128.0\r\nremote-ssh|ms-|0.51.0\r\nremote-ssh-edit|ms-|0.51.0\r\nremote-wsl|ms-|0.44.4\r\nvscode-remote-extensionpack|ms-|0.20.0\r\nhexeditor|ms-|1.2.1\r\njs-debug-companion|ms-|1.0.2\r\njs-debug-nightly|ms-|2020.8.1017\r\nvsliveshare|ms-|1.0.2478\r\nvsliveshare-audio|ms-|0.1.85\r\nvsliveshare-pack|ms-|0.4.0\r\ncolor-highlight|nau|2.3.0\r\nvscode-jest|Ort|3.2.0\r\ncode-settings-sync|Sha|3.4.3\r\nmarkdown-preview-enhanced|shd|0.5.12\r\nindenticator|Sir|0.6.0\r\nvscode-fileutils|sle|3.0.1\r\nvscode-hexdump|sle|1.7.2\r\naddDocComments|ste|0.0.8\r\njson2yaml|tux|0.2.0\r\nes-quotes|vil|0.2.6\r\nbabelrc|wad|1.0.0\r\nchange-case|wma|1.0.0\r\nJavaScriptSnippets|xab|1.8.0\r\nReactSnippets|xab|2.4.0\r\n\r\n(18 theme extensions excluded)\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-08-11 11:32:40",
        "state": "open",
        "number": 104428
    },
    {
        "title": "Prompt if new shortcut is conflict another after an update",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nIf a default or user mapped shortcut keybinding conflicted with new shortcut after any vscode or extension update, please inform and prompt the user to review these shortcuts. Collecting statistics about shortcut hit count may be very useful to give advice to keep old shortcut or adding a when statement to new shortcut :rocket:.\r\n \r\nAn example, `git.commitAll` default keybinding <kbd>Command+K</kbd> is conflicted with `workbench.action.toggleZenMode` and `editor.action.formatSelection` shortcuts, so my frequent shortcuts stopped working.\r\nIn integrated terminal, <kbd>Ctrl+R</kbd> is my another frequent shortcut, it started conflicting with `workbench.action.tasks.reRunTask` (which I never used before)",
        "createdAt": "2020-08-10 21:07:11",
        "state": "open",
        "number": 104398
    },
    {
        "title": "Open with encoding keyboard shortcut.",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI'm working with large codebase which has multiple different encodings for files. Problem occurs, when single file extension can be saved with Windows 1250, UTF-8 or ISO 8859-2 encoding. Is there possibility to add option inside settings to create shortcut for **Reopen with Encoding** to open encoding selection, or even have possibility to create shortcut for every encoding?\r\n\r\n![Adnotacja 2020-08-10 082827](https://user-images.githubusercontent.com/32583062/89756660-7f83d900-dae3-11ea-977f-29cd6b88c89f.png)\r\n",
        "createdAt": "2020-08-10 06:28:50",
        "state": "open",
        "number": 104346
    },
    {
        "title": "Consider having a setting to allow tasks and debug to format files when running/debugging",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nSteps to Reproduce:\r\n\r\n1. Enable `editor.formatOnSave`, and set `task.saveBeforeRun` to \"always\".\r\n2. Hit F5 to start debugging -> dirty files are auto-saved and formatted. Also, code actions are run. (This is expected.)\r\n3. Hit Command-Shift-B to build without running -> dirty files are auto-saved, but _not_ formatted, and no code actions are run. This is not expected.\r\n\r\nThis is inconsistent; there's no reason why save-before-run and save-before-build should behave differently.\r\n\r\nIn the code, the reason for this discrepancy is that files are saved with `SaveReason.EXPLICIT` when debugging, but with `SaveReason.AUTO` when building. The latter seems wrong to me: the way I understand it, `SaveReason.AUTO` is for the case that files are auto-saved after a delay, i.e. not in direct response to a user action. In this case it would be confusing when files are modified at arbitrary times, so it makes sense not to run code actions or formatters in that case. However, both running and building are explicit user actions, so it's ok (and desirable) to auto-format code in response.\r\n\r\nTo sum it up, my proposed fix is to use `SaveReason.EXPLICIT` when saving files before executing a build task.\r\n\r\nVS Code version: Code 1.47.3 (91899dcef7b8110878ea59626991a18c8a6a1b3e, 2020-07-23T13:08:29.692Z)\r\nOS version: Darwin x64 19.6.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-08-08 13:49:06",
        "state": "open",
        "number": 104296
    },
    {
        "title": "Select text with touch / stylus / pencil over Remote Desktop",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nI know that request was already posted and closed by some bots but it was BEFORE CORONAVIRUS! \r\n\r\nDue to covid, we have to work home ... some companies even impose it! So i have an all new surface pro X to connect to my desktop computer and azure windows! Due to the size of the screen on pro tablets that are big but not such big (ipad pro, surface pro...) , pen/stylus is one of the best way to select things with hi-precision!  And it does not impose to have the keyboard with trackpad every where with you every time!\r\n\r\nSo what was my stupefaction seeing that Notepad supports touch selection very naturally. But nor Visual Studio 2017 professional, nor Visual Studio Code !! \r\n\r\nYes,Windows Notepad!! The most basic text editor of windows!\r\n\r\nCan you link touch events to text selection In your products for programmers on tablets?  Thanks a lot!  ",
        "createdAt": "2020-08-08 09:01:26",
        "state": "open",
        "number": 104292
    },
    {
        "title": "Split launch.json in multiple files to allow local/shared configurations",
        "description": "When developing a project, I often need to play with launch configurations on my local machine with various environment variables, local files, etc for debugging.\r\n\r\nGenerally, I store shared launch configurations in `launch.json`, meaning they get checked in with the project into the source control. When I play locally, I need a separate set of launch configurations. E.g. `launch.local.json`, which would be picked up by VS Code, and won't affect checked-in `launch.json`.",
        "createdAt": "2020-08-07 23:54:27",
        "state": "open",
        "number": 104278
    },
    {
        "title": "Allow file explorer to have sticky parent directory",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\nIn the explorer view (and possibly other tree views), when dealing with directories having thousands of children items (eg. node_modules), there is no quick way to collapse such a directory and go one level up. I propose making the immediate parent directory element sticky at the top as shown in the image below.\r\n\r\n![image](https://user-images.githubusercontent.com/9781909/89685680-75fb4500-d91a-11ea-94a5-175e7b9d395c.png)\r\n",
        "createdAt": "2020-08-07 20:38:03",
        "state": "open",
        "number": 104271
    },
    {
        "title": "Debug hover should respect editor font size",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- OS and Version: Windows 10\r\n- VS Code Version: 1.47.3\r\n- C/C++ Extension Version: 0.29.0\r\n- Other extensions you installed (and if the issue persists after disabling them): none\r\n\r\nTry to hover over a C `char[]` array, like:\r\n\r\n`char name[] = \"Connie\";`\r\n\r\nThe visualizer displays its content using a font that is too small, as shown in the attached screenshot.\r\n\r\nThis is annoying, for example when recording for screen casts or presentations that require larger font for easier readability.\r\n\r\nThe best option would be to **allow the user to easily customize the font used by the visualizer** (just like we can customize fonts in other parts of VS Code, like in the text editor).\r\n\r\nOr, at least, the font size of the visualizer should be similar to the font size used to display the code in the editor.\r\n\r\n![VS_Code_Bug_Visualizer_Font_Small](https://user-images.githubusercontent.com/4692631/89450388-bca24100-d75a-11ea-8683-e3b220fd455c.png)\r\n\r\n--------------\r\n\r\nBy @GiovanniDicanio\r\nFrom https://github.com/microsoft/vscode-cpptools/issues/5905",
        "createdAt": "2020-08-07 00:25:47",
        "state": "open",
        "number": 104214
    },
    {
        "title": "Middle mouse button scrolling not working",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.47.3\r\n- OS Version: Windows 10\r\n\r\nSteps to Reproduce:\r\n\r\n1. Click with the scroll wheel in the code editor\r\n2. Drag the mouse\r\n\r\nExpected outcome: window scrolls\r\nWhat happens instead: some kind of unnecessary highlighting\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\nIf you notice some familiarity with this issue, is because there is a neglected issue opened 4(FOUR) years ago without any attempt at fixing. And before stamping feature request on this, it is a BUG.\r\n",
        "createdAt": "2020-08-06 16:09:18",
        "state": "open",
        "number": 104183
    },
    {
        "title": "Emmet: Remove Tag - also unindent the tag content",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.46\r\n- OS Version: Win 8.1\r\n\r\nSteps to Reproduce:\r\n\r\n1. Create a HTML file with the following content\r\n```\r\n<pre><code>class ClassName {\r\n  constructor({ thisName:  thisName, another: another}) {\r\n    this.thisName = thisName\r\n    this.another = another // this is create\r\n  }\r\n}\r\n</code></pre>\r\n```\r\n1. Place the cursor after `<code>`\r\n1. Execute the command `Emmet: Remove Tag`\r\n1. The `code` tag is removed but also everything is unindented 1 step\r\n```\r\n<pre>class ClassName {\r\nconstructor({ thisName:  thisName, another: another}) {\r\n  this.thisName = thisName\r\n  this.another = another // this is create\r\n}\r\n}\r\n</pre>\r\n```\r\n\r\nIf you do the process by hand:\r\n1. `Emmet: Balance (outward)`\r\n1. <kbd>Ctrl</kbd>+<kbd>X</kbd>\r\n1. `Emmet: Balance (outward)`\r\n1. <kbd>Ctrl</kbd>+<kbd>V</kbd>\r\n1. The result is correct\r\n```\r\n<pre>class ClassName {\r\n  constructor({ thisName:  thisName, another: another}) {\r\n    this.thisName = thisName\r\n    this.another = another // this is create\r\n  }\r\n}\r\n</pre>\r\n```\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-08-06 12:44:15",
        "state": "open",
        "number": 104173
    },
    {
        "title": "Collapse identical lines in the debug console",
        "description": "In the Chrome dev tools, duplicate lines are collapsed together:\r\n\r\n![Screenshot 2020-08-06 at 10 12 30](https://user-images.githubusercontent.com/1078012/89514184-6d492880-d7cd-11ea-8ce6-da2c90092fd7.png)\r\n\r\nHere, the `console.log` has run 19 times but because the output was the same, it just shows a \"19\" alongside the first print.\r\n\r\nI think this would work great in the Debug Console here too as it's not uncommon to have the same thing being printed a lot.",
        "createdAt": "2020-08-06 09:14:03",
        "state": "open",
        "number": 104162
    },
    {
        "title": "Align conflicts handling with manual merge behaviour",
        "description": "Currently following prompt is shown when there are conflicts notification while sync is on.\r\n\r\n<img width=\"470\" alt=\"image\" src=\"https://user-images.githubusercontent.com/10746682/89476827-fc355100-d78b-11ea-845a-aa1c4c3bda90.png\">\r\n\r\nClicking on `Show Conflicts` action opens the diff editor directly. Instead align this with manual merge behaviour by opening the conflicts view and allowing the user to merge manually.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "createdAt": "2020-08-06 00:28:44",
        "state": "open",
        "number": 104136
    },
    {
        "title": "Don't prompt to enable language packs when they are installed through setting sync",
        "description": "Testing #103604\r\n\r\n**Repo**\r\n1. Enable setting sync and install some language packs. However do not switch to using those language packs\r\n1. Now, on a different machine, enable setting sync and enable extensions\r\n\r\n**Bug**\r\nOnce extensions are synced, get prompted to enable each of the installed languages:\r\n\r\n<img width=\"574\" alt=\"Screen Shot 2020-08-05 at 3 10 22 PM\" src=\"https://user-images.githubusercontent.com/12821956/89469289-fa3ca500-d72d-11ea-9ca4-b206d7ecf95b.png\">\r\n\r\nSince the language itself has not been changed on the original machine, I don't think we should show this prompt.",
        "createdAt": "2020-08-05 22:12:33",
        "state": "open",
        "number": 104124
    },
    {
        "title": "Disabling/Enabling extension that requires reload does not full sync automatically",
        "description": "Testing #103613\r\n\r\n- enable settings sync (including extension sync)\r\n- enable/disable an extension that requires a reload\r\n- reload\r\n- go to other VS Code instance and force settings sync manually\r\n\r\nObserve:\r\nextension is not yet in the same state as on the first VS Code instance because a reload is required.\r\n\r\nIt would be be nice if a notification would pop up in this case. \r\n",
        "createdAt": "2020-08-05 14:41:01",
        "state": "open",
        "number": 104079
    },
    {
        "title": "Add the ability to hide Action icons at the top of File Explorer",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nThe action icons at the top of the Explorer view are not useful to me, and take up a lot of space, especially when all other views are disabled. There are icons for:\r\n* New File\r\n* New Folder\r\n* Refresh Explorer\r\n* Collapse Folders in Explorer\r\n\r\n<img width=\"171\" alt=\"Screen Shot 2020-08-04 at 4 05 56 PM\" src=\"https://user-images.githubusercontent.com/157270/89353963-740c5a00-d66c-11ea-8bf0-2eb821449da5.png\">\r\n\r\n\r\nI would like to remove this entire bar with these action icons so that my entire sidebar is the folder tree.",
        "createdAt": "2020-08-04 23:06:43",
        "state": "open",
        "number": 104009
    },
    {
        "title": "Stop Kernel in Notebook Toolbar - Native Notebook Editor",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\nUsers during Python Extension Native Notebook QP (8/8) requested stop kernel as option in notebook toolbar\r\n\r\n",
        "createdAt": "2020-08-04 20:23:44",
        "state": "open",
        "number": 103991
    },
    {
        "title": "Automatically update Sync Activity when there are changes",
        "description": "Testing #103613\r\n\r\n- `Settings Sync: Show Synced Data`\r\n- Make some edits to something that's being synced\r\n\r\nIt would be nice if the view automatically updated with the newest sync activity.",
        "createdAt": "2020-08-04 18:47:02",
        "state": "open",
        "number": 103982
    },
    {
        "title": "Make problems ranges in problems view in sync with editor squiggles",
        "description": "Currently VS Code does not update diagnostics during edits and rely on extensions owning those diagnostics to update them. \r\n\r\nFrom @pkruk2\r\n\r\n**In case extension can't simply re-generate diagnostics** (for example due to side-effects or long generation time):\r\n\r\n* right now diagnostics are not very usable, they point to wrong location\r\n* if updated based on file edits, they could point to correct location\r\n\r\nMy argument is that in this case not updating diagnostics is worse than updating them.\r\n\r\nRelated: #102724 #90890",
        "createdAt": "2020-08-04 13:25:53",
        "state": "open",
        "number": 103953
    },
    {
        "title": "Add indicator for the selected sort option",
        "description": "Testing #103615\r\n\r\nAdd a \"tick mark\" to indicate the selected sort option:\r\n\r\n![image](https://user-images.githubusercontent.com/3372902/89290099-9e541c80-d658-11ea-9dc7-4be78f997fde.png)\r\n\r\n",
        "createdAt": "2020-08-04 11:45:51",
        "state": "open",
        "number": 103941
    },
    {
        "title": "Add a setting to disable notifications",
        "description": "Could you please add a new setting to disable notifications? They are killing me. Every extension wants me to take a survey, showing updates are available, I should configure my XY env, how satisfied am I, should it report bugs, etc.. Hard to focus on development if VS code acts like Facebook and there are 5-6 notifications at a time on top of each other. And include a \"don't show again\" button when a VS code update is available or a \"remind me later tomorrow\"? whenever an update comes out, and I restart VS code, or just reload the window, the notification pops up. I have 4-6 instances of VS code running at once, and at each reload I have to dismiss them all if I want to install the update at a later time.",
        "createdAt": "2020-08-04 06:12:14",
        "state": "open",
        "number": 103907
    },
    {
        "title": "Allow selection of a file without opening it",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI accidentally permanently deleted a file that I spent many hours working on. I'm hoping that this feature request would prevent this from happening to someone in the future.\r\n\r\nA project that I'm working on requires a large amount of data to be written to files. One of these files had data that I no longer needed and I wanted to free up the disk space. I clicked on it in the explorer window and pressed the delete key and confirmed the deletion. I then noticed that a crucial file that I had been working on had disappeared.\r\n\r\nUnfortunately, the file I wanted to delete was too large to be open in the editor so a warning appeared in the bottom right corner asking me to restart VSCode with more memory allocated to it. My selection instantly switched back to the most recent file I had open in the editor, which was my important file that of course had not been committed yet. I hadn't noticed the warning in the bottom right or that my selection was no longer the file I clicked on until it was too late.\r\n\r\nI think it would be a worthwhile feature to have the selection stay on the clicked file, even if the file is too large to be loaded into memory. ",
        "createdAt": "2020-08-04 05:17:35",
        "state": "open",
        "number": 103902
    },
    {
        "title": "Include file metadata in simple file picker",
        "description": "It would be useful if the simple picker included some metadata like file modified date and size. It could just be added to the \"detail\" of the row (gray text on the right). Also would be useful to sort by these fields.",
        "createdAt": "2020-08-03 22:45:03",
        "state": "open",
        "number": 103880
    },
    {
        "title": "Supporting a way to log variables' values from non-debugger extensions",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nThe use case has been explained in https://github.com/microsoft/vscode/issues/103610#issuecomment-666922085. To summary, I want to log variable's value so users can view and inspect it, from a **non-debugger** extension. I've tried the debug console and OutputChannel.\r\n\r\n## Debug console\r\nThe debug console does not meet the needs, for several reasons:\r\n\r\n- It only receives logging from debugger extensions.\r\n- It cannot show large data structures, like an array with 100000 elements\r\n![image](https://user-images.githubusercontent.com/2592205/89231982-4e635000-d59b-11ea-8691-8b01d68c36c4.png).\r\n- Even for smaller data structures, the output is truncated. For example, only the first 1000 elements of an array is shown in the debug console, no matter how long it is.\r\n- It does not support user interactions, like inspecting the elements in an array.\r\n\r\nCompared to the Devtools window which is able to show large data structures and allows user interactions.\r\n![image](https://user-images.githubusercontent.com/2592205/89232278-f7aa4600-d59b-11ea-98f4-f7aad9d52de5.png)\r\n\r\n## OutputChannel\r\n[`OutputChannel`](https://code.visualstudio.com/api/references/vscode-api#OutputChannel) only supports string logging.\r\n",
        "createdAt": "2020-08-03 22:18:14",
        "state": "open",
        "number": 103874
    },
    {
        "title": "Don't include modified settings with default values in settings.json",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nFor instance, starting with an empty settings.json, toggle \"View > Appearance > Show Status Bar\" off and on. settings.json now includes \"workbench.statusBar.visible\": true\". It should not include this. This is its default value. Only settings that have been changed from their default should appear in settings.json.\r\n\r\nVS Code version: Code 1.47.3 (91899dcef7b8110878ea59626991a18c8a6a1b3e, 2020-07-23T13:12:49.994Z)\r\nOS version: Windows_NT x64 10.0.18363\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-08-03 21:51:07",
        "state": "open",
        "number": 103869
    },
    {
        "title": "Markdown dropdowns automatically collapse in preview when being edited",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: v1.47.3\r\n- OS Version: Windows 10 2004 64 Bit\r\n\r\nSteps to Reproduce:\r\n1. open up a markdown file and create a dropdown menu like this:\r\n```\r\n<details>\r\n    <summary>\r\n        Testing Purpose\r\n    </summary>\r\n\r\n*Details*:\r\n- test\r\n\r\n*Info*:\r\n- more test\r\n</details>\r\n```\r\n2. open up the markdown preview and expand the dropdown menu\r\n3. edit anything within the markdown file\r\n4. the menu automatically collapses and you need to reopen it\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\nI was mentioning this issue in an extension I thought was related to this but it seems like this is an internal bug because it has the same behaviour without the extension. You can find the submission here: https://github.com/yzhang-gh/vscode-markdown/issues/772",
        "createdAt": "2020-08-03 00:30:46",
        "state": "open",
        "number": 103804
    },
    {
        "title": "Way to block ```runOn: folderOpen``` at workspace level",
        "description": "I have a workspace containing all my (many) repos for repo admin purposes (sync'ing, committing, clean-up etc) and I'd really rather auto-run tasks didn't run there irrespective of ```runOn: folderOpen``` setting.\r\n\r\nTo work on a particular repo or project I usually open the relevant folder/workspace in a new VS Code window and there I definitely do want ```runOn: folderOpen``` to work. For example, all of my TypeScript repos are configured to auto-run watch/build. But having these tasks start in the repo management workspace is pretty annoying.\r\n\r\nCan we have a way to block ```runOn: folderOpen``` at workspace level? So automatic tasks are blocked when the folder is opened as part of the workspace? Maybe this is an extension of existing automatic task management options? Or maybe an update to the ```.code-workspace``` file JSON?\r\n\r\nBR,\r\nMark",
        "createdAt": "2020-08-02 15:10:30",
        "state": "open",
        "number": 103787
    },
    {
        "title": "allow to compare context keys in when expressions",
        "description": "i.e.:  `viewItem == resourceFilename`\r\n\r\n",
        "createdAt": "2020-08-02 12:28:47",
        "state": "open",
        "number": 103783
    },
    {
        "title": "[themes] settings: support for multiple theme names in VSCode colorCustomization",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nReading the documentation on [theme customisation](https://code.visualstudio.com/docs/getstarted/themes#_customizing-a-color-theme), the syntax only allows an override for one theme.\r\n\r\nSometimes overrides may need to apply to different themes (e.g. all dark, light or material themes), for reasons mainly about accessibility and comfort. This has actually been asked about on [StackOverflow](https://stackoverflow.com/questions/55054156/how-to-customise-the-textmaterules-for-multiple-themes-in-vs-code).\r\n\r\nPatterns might be useful, i.e. (`[...Material Theme...]`, `[...Material Theme Lighter]`).\r\nAlso arrays with any syntax you recommend: `[Atom One Dark] [Default Dark+]`.\r\n\r\n[12/08/2020] Editing this to add a gist for code bloat: [`settings.json`](https://gist.github.com/nedevel/3c44ea606e0ab19765b527e4a642eee1#file-settings-json). While extracting those settings into an MVCE, I saw 3 JSON errors.",
        "createdAt": "2020-07-31 12:19:14",
        "state": "open",
        "number": 103694
    },
    {
        "title": "occurrencesHighlight not working after lots of input",
        "description": "Issue Type: <b>Bug</b>\r\n\r\n`occurencesHighlight` (highlighting all occurrences of the word under the cursor) does not highlight some occurrences after a certain amount of text. I haven't replicated this with other kinds of data, but I'm sharing a snippet of my test cases where I want to highlight all the 0s but it doesn't work after a certain length. The file was initally Python but changing the extension or the language mode does not seem to have any effect.\r\n\r\n[Untitled-1.txt](https://github.com/microsoft/vscode/files/5000324/Untitled-1.txt)\r\n\r\nI've also added a few screenshots. I set `editor.selectionHighlightBorder` to red to show how it is not working as expected.\r\n\r\n![Annotation 2020-07-30 150811](https://user-images.githubusercontent.com/5149105/88907718-979f6100-d276-11ea-8843-7319cd5b93f9.png)\r\n![Annotation 2020-07-30 150844](https://user-images.githubusercontent.com/5149105/88907713-95d59d80-d276-11ea-85e0-e2c7728a5aad.png)\r\n\r\nVS Code version: Code 1.47.3 (91899dcef7b8110878ea59626991a18c8a6a1b3e, 2020-07-23T13:12:49.994Z)\r\nOS version: Windows_NT x64 10.0.19041\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|AMD Ryzen 7 3700X 8-Core Processor              (16 x 3600)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off_ok<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|15.95GB (10.01GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (1)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\npython|ms-|2020.7.96456\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-07-30 09:40:24",
        "state": "open",
        "number": 103618
    },
    {
        "title": "Git: Support Windows repositories from Remote WSL",
        "description": "",
        "createdAt": "2020-07-30 08:35:22",
        "state": "open",
        "number": 103617
    },
    {
        "title": "Move panel to statusbar - as icon who show popup panel",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nRecently introduced VSCode to move between the sidebar panel and the bottom panel.\r\nThe roadmap includes plans to move the panel to a separate window and various other panel layouts, e.g. side by side.\r\n\r\nI would like to add to this, the proposal to move the panel to the statusbar - as icon who show a popup panel:\r\n![movepaneltostatusbar](https://user-images.githubusercontent.com/16800535/88749143-fa97d780-d152-11ea-8b75-3a14f797c79d.png)\r\n\r\n**Reason:**\r\nSuch a popup panel gives a greater sense of lightness compared to a collapsible / expandable sidebar panel whose bar always takes up space, even when the panel is collapsed - This fits in with the roadmap foundations for VSCode.\r\n\r\nAdditionally: It enables faster access to a specific, currently deeper hidden panels.\r\n",
        "createdAt": "2020-07-29 02:26:05",
        "state": "open",
        "number": 103527
    },
    {
        "title": "Support internal links to other cells",
        "description": "Jupyter supports links to other cells in the same notebook using markdown syntax\r\n\r\n```\r\n[click to go to header](#header)\r\n```\r\n\r\nnavigates to another cell\r\n\r\n```\r\n# header\r\n```\r\n\r\nWe will have to search all cells for a matching header",
        "createdAt": "2020-07-28 22:11:27",
        "state": "open",
        "number": 103519
    },
    {
        "title": "Markdown cells don't support html in the same way as other notebooks",
        "description": "I'm sure this is an issue with marked.js but it might be an issue if you open a jupyter notebook and expect it to look the same in vscode. eg from a notebook from the OReilly book  \r\n\r\n\r\n```html\r\n<table align=\"left\">\r\n  <td>\r\n    <a target=\"_blank\" href=\"https://colab.research.google.com/github/ageron/handson-ml2/blob/master/03_classification.ipynb\"><img src=\"https://www.tensorflow.org/images/colab_logo_32px.png\" />Run in Google Colab</a>\r\n  </td>\r\n</table>\r\n```\r\n\r\nrenders text but no link",
        "createdAt": "2020-07-28 16:23:36",
        "state": "open",
        "number": 103502
    },
    {
        "title": "Add score sorting to text search so that search results can be provided by relevance",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nHello,\r\n\r\nOrdering by path in a big repository is rarely the good option, it buries the interesting results deep.\r\n\r\nI would like to keep the relevance of search results from the search service I am using (similar to the service backing http://source.chromium.org), the cleanest way I found was to extend the sorting ability by adding `scoreAscending` and `scoreDescending` sorting options and a `score` parameter to the `IFileMatch` interface.\r\n\r\nI am willing to contribute directly to whichever solution seems adequate but I thought it would be better to open a discussion first, especially since I found the following related issues:\r\n\r\n* #103052, #83462: issues for file search, related, happy to try to solve it together with this one as this is also a problem for us.\r\n* #84926: incremental search should be fixed with that ordering, as the default score would be the insertion order.\r\n* #63797: allow text search provider to return relevance order is exactly the same proposal but the conversion got locked down.\r\n\r\nThanks for this awesome IDE!",
        "createdAt": "2020-07-28 08:18:46",
        "state": "open",
        "number": 103465
    },
    {
        "title": "Support metered connections",
        "description": "VS Code, as any Windows application, should respect system-wide settings of metered connections.\r\nIt's bad experience for people who are on the go and connected via mobile internet.\r\n\r\nProposed behavior:\r\n1. VS Code doesn't attempt to update itself or extensions when on metered connection.\r\n2. When user manually clicks to update, it should display popup dialog with confirmation to start update.\r\n3. (optionally) Expose API to extensions.\r\n\r\nRelated:\r\nhttps://github.com/microsoft/vscode/issues/75195\r\nhttps://github.com/microsoft/vscode/issues/8540",
        "createdAt": "2020-07-28 02:43:12",
        "state": "open",
        "number": 103451
    },
    {
        "title": "[python] Add #region and #endregion to python autocomplete",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nThe autocomplete feature does not have #region or #endregion in list \r\n\r\nVS Code version: Code 1.47.2 (17299e413d5590b14ab0340ea477cdd86ff13daf, 2020-07-15T18:22:06.216Z)\r\nOS version: Windows_NT x64 10.0.17763\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-07-28 00:44:43",
        "state": "open",
        "number": 103445
    },
    {
        "title": "List View viewzone API",
        "description": "While building side by side diff view for notebook (https://github.com/microsoft/vscode/issues/94810), I ran into another challenge with dynamic cell heights.\r\n\r\nAt the beginning, List View supports dynamic items at creation/rendering time but it doesn't support item height change once it's rendered. Then we introduced `updateElementHeight` API to allow notebook cells grow its height (when there are outputs). Rendering notebooks side by side has more requirements: if a cell is modified/changed (for example, outputs are different), its scroll top in two editors should be the same, and its accumulated total height should be the same as well.\r\n\r\nTo solve this problem, we can either leverage `updateElementHeight` to update cell heights based on diff information (then `cellHeight = inputHeight + outputsHeight + additionalHeight`), or introduce a view zone API which is identical to Monaco's view zone. The API would allow you to preserve a whitespace area after an index:\r\n\r\n```ts\r\ninterface IViewZone {\r\n  afterIndex: number;\r\n  heightInPx: number;\r\n}\r\n\r\naddZone(zone: IViewZone): string;\r\nremoveZone(id: string): void;\r\nlayoutZone(id: string): void;\r\n```\r\n\r\nThe diff component can then use this API to adjust the scroll tops of cells without messing up with the layout info of cells. Diff information would be transparent to `NotebookEditor` or `ListView`.",
        "createdAt": "2020-07-27 21:22:41",
        "state": "open",
        "number": 103437
    },
    {
        "title": "Allow font setting overrides per theme",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nI find that when using  a light theme, I need a heavier weight of my coding font.\r\n\r\nI switch between light and dark often, if I am coding outdoors or in a bright room I prefer a light theme.\r\n\r\nI was suprised I could not do something like\r\n```\r\n    \"[Ayu Light]\": {\r\n      \"editor.fontFamily\": \"JetBrainsMono-Medium\",\r\n    }\r\n```\r\nSomething like this would be ideal.\r\n\r\nVS Code version: Code - Insiders 1.48.0-insider (731f9c25632dbbf01ee3a7892ad9d2791fe0260c, 2020-07-24T05:51:27.957Z)\r\nOS version: Darwin x64 19.6.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-07-27 17:01:28",
        "state": "open",
        "number": 103422
    },
    {
        "title": "setting to hide explorer views per workspace",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n_I know that you can do this globally via a context menu, but I'd like to be able to do it differently for different workspaces._\r\n\r\n## Suggestion\r\nExpose a setting with which users can disable and enable explorer views. The setting could be a single array or a setting for each built-in view. If it was an array, the setting could control views added by extensions.\r\n\r\n## Use-case\r\nWhen writing documentation in its own workspace, the timeline view may be useless.\r\n\r\n## Environment\r\n- **VS Code**: 1.48.0-insider\r\n- **OS**: Xubuntu 20.04\r\n---\r\nRelated to #73694",
        "createdAt": "2020-07-27 00:54:15",
        "state": "open",
        "number": 103383
    },
    {
        "title": "Extension API: QuickPick fuzzy search not finding results",
        "description": "Hi,\r\n\r\nI use QuickPick component for opening daily notes in [my extension](https://github.com/svsool/vscode-memo/).\r\n\r\nExample:\r\n![image](https://user-images.githubusercontent.com/1452141/88474541-3141d800-cf30-11ea-9371-7f7937dfe3d0.png)\r\n\r\nWhen I type `-2d` or `-2 d` I expect `-2 days | Friday, July 24, 2020 Exists` (see screenshot above) to appear in the results, but  I see this instead:\r\n\r\n![image](https://user-images.githubusercontent.com/1452141/88474560-5fbfb300-cf30-11ea-95b7-fc9c28d86e94.png)\r\n\r\nSorting is also wrong as `-25 days` item comes last in the results. In the order I provide it to QuickPick `-25` comes before `-172`, `-235`, `-263`. Is it configurable?\r\n\r\nAnother example:\r\n\r\n![image](https://user-images.githubusercontent.com/1452141/88474771-7e26ae00-cf32-11ea-8ec8-aab0f562dfb0.png)\r\n\r\nWhen I type `+m` I expect all Mondays with leading `+n days` to appear from previous screenshot, but I see this instead:\r\n\r\n![image](https://user-images.githubusercontent.com/1452141/88474781-90a0e780-cf32-11ea-8b5c-29dfa5dc42d4.png)\r\n\r\nWhat could be the problem with it or am I missing something?\r\n\r\nThanks!\r\n\r\n\r\n",
        "createdAt": "2020-07-26 08:16:32",
        "state": "open",
        "number": 103354
    },
    {
        "title": "Separate shorcuts for go to error / warning",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nGo to next error and Go to next warning should be separate actions with separate shortcuts. It is not a good experience to go through warnings when you are trying to just compile the program.",
        "createdAt": "2020-07-25 14:58:02",
        "state": "open",
        "number": 103314
    },
    {
        "title": "Synchronize Changes doesn't push git tags",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n(I apologize in advance if this is considered a feature request or if this functionality was intended)\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.47.2\r\n- OS Version: macOS Catalina\r\n\r\nSteps to Reproduce:\r\n\r\n1. Add a git tag using `yarn version` or the like.\r\n2. Press \"Synchronize Changes \"\r\n3. Navigate to GitHub and see that the tag was not pushed.\r\n4. In the directory, run `$ git push --tags` and the tags will be synced.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: **Yes**/No\r\n",
        "createdAt": "2020-07-24 21:16:00",
        "state": "open",
        "number": 103281
    },
    {
        "title": "[emmet] don't provide a proposal on 'dot' only",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.47.2\r\n- OS Version: debian unstable\r\n\r\nSteps to Reproduce:\r\n\r\n1. Define a global snippet with prefix \".\"\r\n2. In an html file, press the period key, then tab\r\n\r\nExpected behavior: get the snippet body you defined.\r\n\r\nActual result: ``<div class=\"\"></div>``\r\n\r\nI believe this is triggering emmet by accident. It appears that the intended use of this emmet snippet is for typing something like \".foo\" and pressing tab. Without the \"foo\" part (the class name) the snippet is net useful.\r\n\r\nPlease fix this emmet snippet so it doesn't match a period by itself.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-07-24 15:13:50",
        "state": "open",
        "number": 103253
    },
    {
        "title": "Native support for Deno",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nCurrently there is a 3rd party VSCode extension and a Typescript plugin to have at least some support for Deno. \r\n\r\nBut the VSCode experience for Deno is horrible.  And I am not even talking about debugging (which the insiders version works OK), but just regular Intellisense. There are big delays (> 10s), errors when there shouldn't be (have to restart VSCode, etc.) and several other issues.\r\n\r\nI want native support for Deno in Typescript (file name with extension, which IS the browser standard) and built-in support in VSCode for Deno (import map, url based imports, etc.). It should work out of the box without 3rd party extension.\r\n\r\nThe momentum for Deno is growing and it is a very important Typescript platform going forward. Please help it by providing native support for it. ",
        "createdAt": "2020-07-24 13:45:03",
        "state": "open",
        "number": 103250
    },
    {
        "title": "Open Zen Mode thorough command line arguments",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI've been using VSCode as an alternative to notepad because I like that I can do (pretty much) everything I need - even in zen mode! To be more precise, I'm taking advantage of using a separate profile and extension folder and the setting `\"zenMode.restore\": true` but it's sometimes unreliable (I think its because I close all tabs and VSCode can't open zen mode with no open editor - but that's a different issue).\r\n\r\nI have an alias registered which opens VSCode with the extension folder and profile, so opening the editor is no issue, but because of the strange (undefined?) functionality of when it can and can't restore to Zen Mode, I find myself having to toggle zen mode often (often enough to create a GH Issue...).\r\n\r\nThe feature that I'm suggesting/requesting is a command-line argument to open the VSCode instance in zen mode forcibly - despite the `\"zenMode.restore\"` setting. This could allow the us to override notepad.exe (or OS default text editor) with our own alias of `code --zen`, unlocking the ability to edit files with code more easily.\r\n\r\nThoughts?",
        "createdAt": "2020-07-24 04:14:30",
        "state": "open",
        "number": 103223
    },
    {
        "title": "The Run window's panels on the Side Bar are not horizontal scrollable",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: **1.47.2 zip 64 bit**\r\n- OS Version: **Windows 10 Enterprise 64 bit**\r\n\r\nSteps to Reproduce:\r\n\r\n1. Start a debugging session.\r\n2. Check the Run windows on the Side bar. Observe that all panels cannot be scrolling. See the below screenshot, when the lines are very long, some info cannot be viewed conveniently. For example, the first variable in the `VARIABLES` panel. Particularly in this case, some calls shown in the `CALL STACK` panel, cannot be fully displayed even I made the width of the `Side Bar` to the max.\r\n![image](https://user-images.githubusercontent.com/19678455/88348714-4426a200-cda2-11ea-98f5-e8bec24b1cff.png)\r\n",
        "createdAt": "2020-07-23 23:46:52",
        "state": "open",
        "number": 103215
    },
    {
        "title": "Preserve open documents word wrap settings on restart",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nCurrently, when VS Code is restarted (e.g. for extension update, or version update), open documents would lose their word wrap settings after restart. It would be very helpful, if word wrap state for an open documents is preserved.",
        "createdAt": "2020-07-23 20:16:06",
        "state": "open",
        "number": 103199
    },
    {
        "title": "Support editor extension commands in Git commit message input box",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI wanted to be able to use the Rewrap extension in the VS Code Git commit message input box to automatically rewrap the commit message instead of having to do so manually (https://github.com/stkb/Rewrap/issues/224), but such commands don't work in that location and there is no way for the extension to make them work with the current API. I wish for VS Code to support some way for such commands to work there.",
        "createdAt": "2020-07-22 23:17:18",
        "state": "open",
        "number": 103128
    },
    {
        "title": "Notebooks: explore dragging text outside of cell to create new cell",
        "description": "Similar to #103119, this one also came out of the study discussion. It would be interesting to see if we you could select text and dragging outside of the cell to create a new cell. Rough mockup:\r\n\r\n![image](https://user-images.githubusercontent.com/35271042/88227862-2252e100-cc23-11ea-8f92-d2323c9ad079.png)\r\n",
        "createdAt": "2020-07-22 20:57:47",
        "state": "open",
        "number": 103123
    },
    {
        "title": "Notebooks: explore dragging and holding a cell to join cells",
        "description": "We saw this come up on a user study and thought it was an interesting interaction we could explore. We sort of do this in the editor by selecting text and dragging the text (see line 43):\r\n\r\n![image](https://user-images.githubusercontent.com/35271042/88224629-216b8080-cc1e-11ea-9a43-e5d775f0c1bc.png)\r\n\r\nHere's a very rough mockup:\r\n\r\n![image](https://user-images.githubusercontent.com/35271042/88227013-ce93c800-cc21-11ea-8826-e8f244d9b23e.png)\r\n\r\n\r\nWe would have to watch out for how this works with regular drag and drop and make sure it doesn't get accidentally triggered.\r\n\r\ncc @rebornix ",
        "createdAt": "2020-07-22 20:47:09",
        "state": "open",
        "number": 103119
    },
    {
        "title": "[theming] token type hierarchy to the 'Developer: Inspect Editor Tokens and Scopes' command",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nThis would be really useful for theme authors who want to find out the available supertypes of a token, without looking in the `semanticTokenTypes` contribution point. It could just be another line between `semantic token type` and `modifiers`:\r\n![inspectTokens](https://user-images.githubusercontent.com/52179873/88200196-20e6e000-cc46-11ea-8d02-6c103165a121.png)\r\n\r\nThe right side of the line could say `token type hierarchy`, and the left side could say something like `member function`, to describe that `member` is the declared supertype of `function`. It is important to show **a hierarchy**, not just the immediate supertype of the token. For example, a token with a more complex type hierarchy could say something like:\r\n`token type hierarchy <-- space in-between, like in the picture --> member property enumMember`",
        "createdAt": "2020-07-22 16:07:46",
        "state": "open",
        "number": 103109
    },
    {
        "title": "Sorting Processes",
        "description": "Having a way you can sort the processes by the amount of ram they use or network would really help know what process to handle\r\n<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search for existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n",
        "createdAt": "2020-07-20 16:10:30",
        "state": "open",
        "number": 102962
    },
    {
        "title": "Extensions: Offer the user the ability to disable all dependencies when disabling an extension with dependents",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nCannot activate the 'GitHub' extension because it depends on the 'Git' extension, which is disabled. Would you like to enable the extension and reload the window?\r\n\r\nVS Code version: Code 1.47.2 (17299e413d5590b14ab0340ea477cdd86ff13daf, 2020-07-15T18:22:06.216Z)\r\nOS version: Windows_NT x64 10.0.18363\r\nRemote OS version: Linux x64 4.4.0-18362-Microsoft\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i5-7200U CPU @ 2.50GHz (4 x 2712)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: enabled<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off_ok<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|3.90GB (0.42GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n|Item|Value|\r\n|---|---|\r\n|Remote|WSL: Ubuntu|\r\n|OS|Linux x64 4.4.0-18362-Microsoft|\r\n|CPUs|Intel(R) Core(TM) i5-7200U CPU @ 2.50GHz (4 x 2701)|\r\n|Memory (System)|3.90GB (0.42GB free)|\r\n|VM|0%|\r\n</details><details><summary>Extensions (20)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-languagetool|ada|3.8.0\r\nvscode-languagetool-en|ada|3.8.0\r\nproject-manager|ale|11.1.0\r\ncode-gnu-global|aus|0.2.2\r\ngitignore|cod|0.6.0\r\ngit-extension-pack|don|0.1.3\r\ngithistory|don|0.6.8\r\ngitlens|eam|10.2.2\r\ncode-runner|for|0.11.0\r\nterminal|for|0.0.10\r\nanaconda-extension-pack|ms-|1.0.1\r\npython|ms-|2020.7.94776\r\ncpptools|ms-|0.29.0\r\nvscode-yaml|red|0.9.1\r\nvscode-open-in-github|ziy|1.3.6\r\nproject-manager|ale|11.1.0\r\ntheme-monokai-pro-vscode|mon|1.1.17\r\nremote-wsl|ms-|0.44.4\r\nvscode-icons|vsc|10.2.0\r\nmaterial-theme|zhu|3.8.4\r\n\r\n(9 theme extensions excluded)\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-07-19 20:53:46",
        "state": "open",
        "number": 102906
    },
    {
        "title": "CodeLens messes up page scrolling via cursorPageUp / cursorPageDown",
        "description": "IMHO, normally page scrolling should act like this:\r\nWhen you press PageDown and it actually scrolls the window, the new top line of the window is the old bottom line and vice versa for PageUp.\r\n\r\nThis works great when CodeLens is disabled. But when CodeLens is enabled, it seems to be miscalculating what the \"old bottom line\" is (like it's pretending CodeLens isn't there) and scrolls several lines too far on PageDown, and not far enough on PageUp.\r\n\r\nRepro (with all extensions disabled):\r\n1. Ensure line numbers are on for easy verification.\r\n2. Ensure PageUp keybinding is to \"cursorPageUp\" and PageDown is to \"cursorPageDown\".\r\n3. Enable CodeLens.\r\n4. Open a large Typescript file full of CodeLens references. Scroll to a place where inline references are visible.\r\n5. Observe bottom visible line number.\r\n6. Press PageDown. Observe top line many lines after previous bottom line.\r\n7. Press PageUp. Observe bottom line many lines after previous top line. \r\n\r\nIf this repro doesn't work, I am happy to share my settings file. I'm open to the idea that there is another factor, because the behavior seems so bizarre to me that I can't believe nobody else has reported it (or that my searches were faulty!).\r\n\r\nAdditional data:\r\n1. Curiously, this does NOT seem to happen with scrollPageDown/scrollPageUp actions.",
        "createdAt": "2020-07-18 14:23:27",
        "state": "open",
        "number": 102867
    },
    {
        "title": "Bulk merge conflict resolving issue on large files",
        "description": "\r\nIssue Type: <b>Performance Issue</b>\r\n\r\nWe need to include production build files of react in git as per our server configuration. Often the build files face merge conflict and we need to simply accept all incoming/current. But as the build files are too large, vscode can not resolve the conflict when I click accept all incoming/current. Where as, phpstorm can easily handle the action. I use vscode as my daily driver but when I need to resolve bulk merge conflict, I have to rely on phpstorm. This is getting annoying. This is the issue i am referring. \r\n\r\n![Record](https://user-images.githubusercontent.com/45073703/87848234-f9b7a800-c8ff-11ea-9e22-68935353706e.gif)\r\n\r\n\r\nVS Code version: Code 1.47.2 (17299e413d5590b14ab0340ea477cdd86ff13daf, 2020-07-15T18:22:06.216Z)\r\nOS version: Windows_NT x64 10.0.18363\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-5500U CPU @ 2.40GHz (4 x 2394)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off_ok<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|11.93GB (3.70GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details>\r\n<summary>Process Info</summary>\r\n\r\n```\r\nCPU %\tMem MB\t   PID\tProcess\r\n    1\t    78\t  8744\tcode main\r\n   11\t    65\t  4668\t   shared-process\r\n    0\t    12\t  5308\t   electron-crash-reporter\r\n    2\t    71\t  9424\t   window (Issue Reporter)\r\n    0\t   234\t  9896\t   window (Untitled-1 - pypepro - Visual Studio Code)\r\n    0\t    23\t  2936\t     searchService\r\n    0\t   156\t  4036\t     extensionHost\r\n    0\t    29\t  1504\t       \"C:\\Users\\swaza\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\" \"c:\\Users\\swaza\\AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\extensions\\json-language-features\\server\\dist\\node\\jsonServerMain\" --node-ipc --clientProcessId=4036\r\n    0\t    63\t  1892\t       electron_node intelephense.js \r\n    0\t    62\t  2888\t       \"C:\\Users\\swaza\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\" \"c:\\Users\\swaza\\AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\extensions\\html-language-features\\server\\dist\\node\\htmlServerMain\" --node-ipc --clientProcessId=4036\r\n    0\t    34\t  7352\t       \"C:\\Users\\swaza\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\" \"c:\\Users\\swaza\\AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\extensions\\css-language-features\\server\\dist\\node\\cssServerMain\" --node-ipc --clientProcessId=4036\r\n    0\t   681\t  8436\t       electron_node tsserver.js \r\n   25\t   187\t  9848\t       electron_node server.js \r\n    0\t    38\t 14104\t       electron_node tsserver.js \r\n    0\t    60\t  9256\t     \"C:\\Program Files\\PowerShell\\7\\pwsh.exe\"\r\n    0\t    14\t 12264\t     watcherService \r\n    0\t     6\t  3720\t       console-window-host (Windows internal process)\r\n    0\t     6\t 12864\t     console-window-host (Windows internal process)\r\n    0\t   208\t 10212\t   gpu-process\r\n    0\t    24\t 11196\t   utility\r\n```\r\n\r\n</details>\r\n<details>\r\n<summary>Workspace Info</summary>\r\n\r\n```\r\n|  Window (Untitled-1 - pypepro - Visual Studio Code)\r\n|    Folder (pypepro): more than 29483 files\r\n|      File types: php(7664) js(3397) png(1270) jpg(952) html(754) css(751)\r\n|                  svg(639) md(222) gif(172) json(120)\r\n|      Conf files: package.json(8) gulp.js(3) launch.json(1) grunt.js(1)\r\n|      Launch Configs: pwa-chrome;\r\n```\r\n\r\n</details>\r\n<details><summary>Extensions (14)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nBookmarks|ale|11.3.1\r\nvscode-intelephense-client|bme|1.5.2\r\nhtmltagwrap|bra|0.0.7\r\nlaravel-goto-view|cod|1.3.3\r\nbracket-pair-colorizer-2|Coe|0.2.0\r\ngitlens|eam|10.2.2\r\nvsc-material-theme|Equ|32.8.0\r\nvsc-material-theme-icons|equ|1.1.4\r\nauto-close-tag|for|0.5.8\r\nremote-wsl|ms-|0.44.4\r\nlaravel-blade|one|1.22.1\r\ncode-spell-checker|str|1.9.0\r\nhighlight-matching-tag|vin|0.9.9\r\nbetter-align|wwm|1.1.6\r\n\r\n(1 theme extensions excluded)\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-07-18 08:09:17",
        "state": "open",
        "number": 102857
    },
    {
        "title": "Allow extensions to contribute to peek widget title navigation action item",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nIn my extension, I'm creating peek view widgets through `editor.action.peekLocations` and `editor.action.showReferences` commands. But I would like to give the user ways to interact with the content shown. \r\n\r\nIt would be great if extensions can contribute add commands to the peek widgets, like the ones in `Peek Call Hierarchy` or `Peek Diff`.\r\n![image](https://user-images.githubusercontent.com/3770270/87836809-2effbf80-c846-11ea-8b11-58cd01a17df5.png)\r\n\r\nI see in the documentation that it is possible to contribute to the editor title navigation, but it doesn't seem to be possible to contribute to the peek widget title navigation yet.\r\n```\r\n\"menus\": {\r\n      \"editor/title\": [\r\n        {\r\n          \"when\": \"resourceLangId == markdown\",\r\n          \"command\": \"markdown.showPreview\",\r\n          \"alt\": \"markdown.showPreviewToSide\",\r\n          \"group\": \"navigation\"\r\n        }\r\n      ]\r\n    }\r\n```",
        "createdAt": "2020-07-17 23:05:24",
        "state": "open",
        "number": 102837
    },
    {
        "title": "SCM: Preserve view collapse state",
        "description": "- Collapse a git repo\r\n- Reload the window\r\n- It's expanded\r\n\r\nTrying to focus on the one repo I care about and ignore the others that tend to have random changes",
        "createdAt": "2020-07-17 21:46:14",
        "state": "open",
        "number": 102831
    },
    {
        "title": "VSCode Extension: Disable tree items when enablement clause on linked command is false",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n## Goal/requirement\r\nI am building a VSCode extension and currently creating a new custom view that will have tree items linked to commands.\r\n\r\nThe goal is to greyout/disable certain tree items when the enablement property on a command evaluates to true false.\r\n\r\nThis works fine when the commands that are added as menu items to the view and will grey out the icon & will not be able to be clicked, however, I would have expected the same result to happen with the items in the tree.\r\n\r\n## Screenshot\r\n![image](https://user-images.githubusercontent.com/1389894/87801095-2065d800-c847-11ea-94a4-2feb5e478fe4.png)\r\n\r\n\r\n## Example code\r\nPackage.json\r\n```json\r\n{\r\n    \"contributes\": {        \r\n        \"commands\": [\r\n            {\r\n                \"command\": \"extension.iis-express.start\",\r\n                \"title\": \"Start Website\",\r\n                \"category\": \"IIS Express\",\r\n                \"enablement\": \"iisexpress:siterunning != true && isWindows\",\r\n                \"icon\": \"$(play)\"\r\n            },\r\n            {\r\n                \"command\": \"extension.iis-express.stop\",\r\n                \"title\": \"Stop Website\",\r\n                \"category\": \"IIS Express\",\r\n                \"enablement\": \"iisexpress:siterunning && isWindows\",\r\n                \"icon\": \"$(debug-stop)\"\r\n            },\r\n            {\r\n                \"command\": \"extension.iis-express.restart\",\r\n                \"title\": \"Restart Website\",\r\n                \"category\": \"IIS Express\",\r\n                \"enablement\": \"iisexpress:siterunning && isWindows\",\r\n                \"icon\": \"$(refresh)\"\r\n            }\r\n        ],\r\n        \"menus\": {\r\n            \"commandPalette\": [\r\n                {\r\n                    \"command\": \"extension.iis-express.start\",\r\n                    \"when\": \"iisexpress:siterunning != true && isWindows\"\r\n                },\r\n                {\r\n                    \"command\": \"extension.iis-express.stop\",\r\n                    \"when\": \"iisexpress:siterunning && isWindows\"\r\n                },\r\n                {\r\n                    \"command\": \"extension.iis-express.restart\",\r\n                    \"when\": \"iisexpress:siterunning && isWindows\"\r\n                }\r\n            ],\r\n            \"view/title\": [\r\n                {\r\n                    \"command\": \"extension.iis-express.start\",\r\n                    \"group\": \"navigation@10\"\r\n                },\r\n                {\r\n                    \"command\": \"extension.iis-express.restart\",\r\n                    \"group\": \"navigation@11\"\r\n                },\r\n                {\r\n                    \"command\": \"extension.iis-express.stop\",\r\n                    \"group\": \"navigation@12\"\r\n                }\r\n            ]\r\n        },\r\n        \"views\": {\r\n            \"explorer\": [\r\n                {\r\n                    \"id\": \"iisexpress.controls\",\r\n                    \"contextualTitle\": \"IIS Express\",\r\n                    \"name\": \"IIS Express\",\r\n                    \"when\": \"isWindows\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nMy tree menu items are added to the view in the following way\r\n```typescript\r\nimport * as vscode from 'vscode';\r\n\r\nexport class ControlsTreeProvider implements vscode.TreeDataProvider<ControlsTreeItem> {\r\n\r\n\r\n    onDidChangeTreeData?: vscode.Event<void | ControlsTreeItem | null | undefined> | undefined;\r\n\r\n    getTreeItem(element: ControlsTreeItem): vscode.TreeItem | Thenable<vscode.TreeItem> {\r\n        return element;\r\n    }\r\n\r\n    getChildren(element?: ControlsTreeItem | undefined): vscode.ProviderResult<ControlsTreeItem[]> {\r\n        if(element === undefined){\r\n            const items = new Array<ControlsTreeItem>();\r\n            items.push(\r\n                {\r\n                    label: 'Start Website',\r\n                    iconPath: new vscode.ThemeIcon(\"play\"),\r\n                    collapsibleState: vscode.TreeItemCollapsibleState.None,\r\n                    command: {\r\n                        title: 'Start Website',\r\n                        command: \"extension.iis-express.start\"\r\n                    }\r\n                },\r\n                {\r\n                    label: 'Restart Website',\r\n                    iconPath: new vscode.ThemeIcon(\"refresh\"),\r\n                    collapsibleState: vscode.TreeItemCollapsibleState.None,\r\n                    command: {\r\n                        title: 'Restart Website',\r\n                        command: \"extension.iis-express.restart\"\r\n                    }\r\n                },\r\n                {\r\n                    label: 'Stop Website',\r\n                    iconPath: new vscode.ThemeIcon(\"debug-stop\"),\r\n                    collapsibleState: vscode.TreeItemCollapsibleState.None,\r\n                    command: {\r\n                        title: 'Stop Website',\r\n                        command: \"extension.iis-express.stop\"\r\n                    }\r\n                });\r\n\r\n            return items;\r\n        }\r\n\r\n        return Promise.resolve([]);\r\n    }\r\n}\r\n\r\nexport class ControlsTreeItem extends vscode.TreeItem {}\r\n```\r\n\r\nAnd in the main extension entry point\r\n```typescript\r\n// Register tree provider to put our custom commands into the tree\r\n// Start, Stop, Restart, Support etc...\r\nconst controlsTreeProvider = new ControlsTreeProvider();\r\nvscode.window.registerTreeDataProvider('iisexpress.controls', controlsTreeProvider);\r\n```",
        "createdAt": "2020-07-17 15:04:10",
        "state": "open",
        "number": 102794
    },
    {
        "title": "Exclude symlinks from files explorer",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nI don't want to see symlinks in files explorer, how can I disable showing them?\r\n\r\nThere was a closed issue-duplicate of current: https://github.com/microsoft/vscode/issues/74335\r\nBut it's closed :(",
        "createdAt": "2020-07-17 13:07:30",
        "state": "open",
        "number": 102783
    },
    {
        "title": "Allow hiding the \"Reply...\" box for a comment thread",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nBetween the [CodeTour](https://aka.ms/codetour) and [GistPad](https://aka.ms/gistpad) extensions, I'm making extensive use of the comments API in order to display \"metadata over code\" (e.g. guided descriptions of the code, a list of \"back links\" for the opened file). The comments UX works really well for this, but I continue to find end-users are confused by the `Reply...` text box, since the comments aren't intended to be replied to. If possible, it would be great if the comments API allowed defining that a comment thread was read-only somehow and/or be able to control the visibility of the `Reply...` text box. ",
        "createdAt": "2020-07-16 05:19:17",
        "state": "open",
        "number": 102665
    },
    {
        "title": "Allow tooltips/hovering on symbols in outline view and breadcrumbs",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nCurrently, the information which breadcrumbs and the outline view can provide is limited to two strings: the title and the \"detail\" (breadcrumbs are not even able to display the detail string). For the underlying complexity of the information being presented, this seems quite limiting.\r\n\r\nIn order to optionally provide more information about a symbol (and without cluttering the UI), it would be really nice if if symbols could at least provide a tooltip, through an extremely simple `DocumentSymbol.tooltip: string` property (basically identical to the underlying tooltip property of `TreeItem`).\r\n\r\nIf this feature were to be taken all the way, hovering over symbols in the breadcrumbs or outline view could display information about the symbol from the document's registered HoverProvider for the symbol's selectionRange. This could be enabled/disabled on a symbol-by-symbol basis (something along the lines of `DocumentSymbol.triggerhoverprovider: boolean`). This would make the breadcrumbs and outline view significantly more useful for understanding the structure of a document without fully diving into the code. \r\n\r\n### Bad behaviour\r\n\r\n![image](https://user-images.githubusercontent.com/42496508/87610503-cd383c00-c705-11ea-9706-1509849d2ca7.png)\r\n\r\n*unhelpful, repetitive, ugly: i already know the name of the symbol, it's just there*\r\n\r\n### Good behaviour\r\n\r\n![betterhover](https://user-images.githubusercontent.com/42496508/87610792-9d3d6880-c706-11ea-97f8-a708f3793195.png)\r\n\r\n*helpful, useful, and pretty: the only way I could know what this part of the document does is by clicking the symbol and hovering over it in the editor*\r\n\r\n\r\n\r\nDocumentSymbols help explain the structure of the code - why limit this explanation to the name, especially when there's more information about them so readily available?",
        "createdAt": "2020-07-15 23:52:23",
        "state": "open",
        "number": 102650
    },
    {
        "title": "Allow switching Terminals without opening panel",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nSimilar to the existing `Terminal.show` method it would be great to have a `Terminal.setActive` method. `Terminal.show` does two things, it sets the terminal to active and opens the terminal panel. I need a way to set a terminal to active but leave the panel as it is. In general, I think a method that does one thing is much more flexible to use but I also have a specific use case:\r\n\r\nI wrote an extension to maintain terminals in multi-root workspaces. Based on the file that is currently in focus, it switches to the terminal that belongs to the workspace folder of this file. At the moment this is causing problems for users that hide their terminal while working because everytime they switch the workspace folder the panel pops up. Currently there is no way to avoid this. There are two issues regarding this problem: [Issue 1](https://github.com/jscheffner/vscode-workspace-terminals/issues/3) and [Issue 2](https://github.com/jscheffner/vscode-workspace-terminals/issues/4)\r\n\r\nAnother solution would be to pass a parameter to `Terminal.show` to suppress opening the panel but I think that would clash with the `preserveFocus` parameter which only makes sense if you open the panel.",
        "createdAt": "2020-07-15 22:01:07",
        "state": "open",
        "number": 102639
    },
    {
        "title": "Enable paths in terminal window to be clickable as 'reveal in explorer'",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\nIf I'm using powershell and/or pester in a vscode terminal pane, often the results will result in files and folder paths being displayed.  It is usually possible to navigate to file and folder paths that are logged there with control click, which opens the file/folder in vscode. This request is to make it also possible to reveal the folder or file in File Explorer.  \r\n\r\nCurrent result of hovering over a folder like \"C:\\repos\" is to show a tooltip:\r\n\r\n![image](https://user-images.githubusercontent.com/22213780/87596091-62a2e400-c6a4-11ea-99c6-80dd4046bd17.png)\r\n\r\n\r\n\r\n",
        "createdAt": "2020-07-15 21:07:32",
        "state": "open",
        "number": 102638
    },
    {
        "title": "SCM: Allow different providers sort order",
        "description": "Especially for folks with dozens of source code providers, it would be helpful to have options to sort the providers parametrically, rather than load order.\r\n\r\nIn the source control providers currently get:\r\ndevelopment-tools\r\ncommon\r\nimage_processing\r\n\r\nI would like the option to get:\r\ncommon\r\ndevelopment-tools\r\nimage_processing\r\n\r\n-Or-\r\n\r\nimage_processing\r\ndevelopment-tools\r\ncommon\r\n\r\n\r\n\r\n",
        "createdAt": "2020-07-15 15:24:54",
        "state": "open",
        "number": 102606
    },
    {
        "title": "Exploration: Improve setup experience on Windows (Inno Setup)",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n* Review setup related open issues\r\n* Come up with a plan to address the issues",
        "createdAt": "2020-07-15 12:51:27",
        "state": "open",
        "number": 102594
    },
    {
        "title": "Disable plugin update notification",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nI'd like to be able to temporarily disable plugin update notification, this one here:\r\n![image](https://user-images.githubusercontent.com/2797779/87449115-0c2e9a80-c5fd-11ea-942b-347a0f80000d.png)\r\n\r\nThe use-case is that I'm managing someone else's VS Code instance, and there is some compatibility problem between our code and newest version of ms-python. I don't want them to be prompted to update against my recommendation.",
        "createdAt": "2020-07-14 16:08:50",
        "state": "open",
        "number": 102509
    },
    {
        "title": "API gaps to support Liveshare in Notebook",
        "description": "Currently the editing API for Notebook is slim and may not support all features of Live Share.",
        "createdAt": "2020-07-14 15:28:25",
        "state": "open",
        "number": 102503
    },
    {
        "title": "Ability to turn off the auto expansion of \"go to problem\" description",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nWhen I use the family of \"go to problem\" actions, the error message is automatically displayed beneath the line. I would like to be able to change this behavior, I just want my cursor to go to the error without displaying anything.\r\n\r\n![image](https://user-images.githubusercontent.com/4283979/87399394-01094980-c5c0-11ea-950a-5aaf698a8298.png)\r\n\r\nI would like to disable this all together (don't even know what this UI element is called). \"Show Hover\" actions work much better for me.",
        "createdAt": "2020-07-14 07:51:57",
        "state": "open",
        "number": 102469
    },
    {
        "title": "No way for an extension to tell have vscode suggest .JSON when user saves file if it is not the main extension for json files",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nSee https://github.com/microsoft/vscode-azurearmtools/issues/809 (Save dialog for arm-template files should suggest saving with JSON extension like json files do)\r\n\r\n1. Install https://marketplace.visualstudio.com/items?itemName=msazurermtools.azurerm-vscode-tools\r\n2. Create a new file (don't save)\r\n3. Change the language to \"ARM Resource Manager Template\"\r\n4. CTRL+S\r\n!) the dialog doesn't give a suggestion for extension\r\nEXPECTED: vscode should suggest .JSON for the extension, but there appears to be no way to get that to happen.\r\n\r\nMORE INFO:\r\nOur package.json info looks like this for the arm-template language id:\r\n```\r\n        \"languages\": [\r\n            {\r\n                \"id\": \"arm-template\",\r\n                \"aliases\": [\r\n                    \"Azure Resource Manager Template\"\r\n                ],\r\n                \"configuration\": \"dist/grammars/jsonc.arm.language-configuration.json\"\r\n            }\r\n        ],\r\n```\r\nI can't put .json as our extension, because if I do, then *all* json files opened will use the arm-template language.  Rather, we manually switch to arm-template when we detect a specific schema in a json file (`https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#`).  This is the mechanism that we were told to use because vscode doesn't provide a way to detect language ID based on any content past the first line (see https://github.com/microsoft/vscode/issues/69868#issuecomment-490084449).  Unfortunately, that means vscode doesn't know we're associated with json files.\r\n\r\nVS Code version: Code - Insiders 1.48.0-insider (e7920dce7bfd0b707ebfc0a5379c6edd2233e475, 2020-07-10T11:55:11.286Z)\r\nOS version: Darwin x64 19.5.0\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz (12 x 2600)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>metal: disabled_off<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>opengl: enabled_on<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|3, 3, 3|\r\n|Memory (System)|16.00GB (0.80GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (5)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\ngitlens|eam|10.2.2\r\ntodo-tree|Gru|0.0.178\r\nvscode-dotnet-runtime|ms-|0.1.2\r\nvscode-typescript-tslint-plugin|ms-|1.2.3\r\nvscode-todo-highlight|way|1.0.4\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-07-13 22:38:27",
        "state": "open",
        "number": 102438
    },
    {
        "title": "Respect error formatting in problems panel",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nThe problems panel seems to be discarding some of the formatting that would normally exist. In the included screenshot you can see that the problems panel has removed some of the spacing in the panel itself, but the hover menu has the correct formatting.\r\n\r\n![Screenshot from 2020-07-13 13-52-34](https://user-images.githubusercontent.com/15251412/87342599-2428f000-c511-11ea-89e0-a458b7635016.png)\r\n\r\nthis makes it nearly impossible to use the problems panel to debug when there are types that are heavily nested.",
        "createdAt": "2020-07-13 19:00:13",
        "state": "open",
        "number": 102417
    },
    {
        "title": "Find shortcut does not edit search term after losing focus",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nAfter searching a term if a click back in the code and hit the find shortcut again it continues searching but it edits the code, not the search term.\r\n\r\nWhat I would expect is to be able to edit the search term. However, it that's the intended behavior, I would expect to be able to edit the search term after a hit the shortcut twice rapidly.\r\n\r\nIn other words, if I search a term and got back to the file I cannot restart the search mechanism, I have to click Escape. This causes a lot of unwanted text editions.\r\n\r\nVS Code version: Code 1.46.1 (cd9ea6488829f560dc949a8b2fb789f3cdc05f5d, 2020-06-17T21:13:08.304Z)\r\nOS version: Linux x64 5.3.0-62-generic snap\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-10510U CPU @ 1.80GHz (8 x 2464)|\r\n|GPU Status|2d_canvas: unavailable_software<br>flash_3d: disabled_software<br>flash_stage3d: disabled_software<br>flash_stage3d_baseline: disabled_software<br>gpu_compositing: disabled_software<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: disabled_off<br>rasterization: disabled_software<br>skia_renderer: disabled_off_ok<br>video_decode: disabled_software<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off_ok<br>webgl: unavailable_software<br>webgl2: unavailable_software|\r\n|Load (avg)|1, 1, 1|\r\n|Memory (System)|15.48GB (0.85GB free)|\r\n|Process Argv|. --no-sandbox|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n|DESKTOP_SESSION|ubuntu|\r\n|XDG_CURRENT_DESKTOP|Unity|\r\n|XDG_SESSION_DESKTOP|ubuntu|\r\n|XDG_SESSION_TYPE|x11|\r\n</details><details><summary>Extensions (25)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nbetter-comments|aar|2.0.5\r\nvscode-languagetool|ada|3.8.0\r\nasciidoctor-vscode|asc|2.8.1\r\nspellright|ban|3.0.50\r\nvscode-markdownlint|Dav|0.36.1\r\ngithistory|don|0.6.5\r\ngitlens|eam|10.2.2\r\ngit-project-manager|fel|1.7.1\r\nactivitusbar|Gru|0.0.35\r\nvscode-emacs|hir|0.1.1\r\nplantuml|jeb|2.13.12\r\nasciidoctor-vscode|joa|2.8.0\r\nvscode-peacock|joh|3.7.2\r\nchat|kar|0.35.0\r\nvsc-python-indent|Kev|1.10.1\r\nkite|kit|0.119.0\r\nvscode-docker|ms-|1.3.1\r\npython|ms-|2020.6.91350\r\nvscode-pylance|ms-|2020.7.0\r\nautodocstring|njp|0.5.3\r\nmaterial-icon-theme|PKi|4.2.0\r\nuser-extensions|srf|1.0.3\r\ncode-spell-checker|str|1.9.0\r\nvscode-todo-highlight|way|1.0.4\r\nmarkdown-all-in-one|yzh|3.1.0\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-07-13 10:09:29",
        "state": "open",
        "number": 102372
    },
    {
        "title": "Have mnemonic as command model property",
        "description": "Today, commands that use a mnemonic require a special menu registration, e.g. this https://github.com/microsoft/vscode/blob/783970456be0c7634348e01ee61b2abb9a6ef3b1/src/vs/editor/contrib/smartSelect/smartSelect.ts#L173 defines a special title because mnemonic are used for the global menu. This has obvious drawback, like duplication and adding mnemonics to another menu, like the context menu, would be a bigger effort. Instead, mnemonics should be a \"model property\" like category, icons etc and the menu should know what model property to use when rendering a command. ",
        "createdAt": "2020-07-13 08:18:29",
        "state": "open",
        "number": 102361
    },
    {
        "title": " Cannot read property 'call' of undefined",
        "description": "Issue Id: <b>b33cb556-8398-a092-0e47-b8fcd0e7fb8a</b><br /><br />*Versions* <br />- 1.47.0<br />*Stack* <br />TypeError: Cannot read property 'call' of undefined<br />[/vs/base/common/event.ts#589:18 (fire)](https://github.com/microsoft/vscode/blob/d5e9aa0227e057a60c82568bf31c04730dc15dcd/src/vs/base/common/event.ts#L589:18 (fire))<br />[/vs/workbench/api/common/extHostTextEditors.ts#131:40 (apply)](https://github.com/microsoft/vscode/blob/d5e9aa0227e057a60c82568bf31c04730dc15dcd/src/vs/workbench/api/common/extHostTextEditors.ts#L131:40 (apply))<br />[/vs/workbench/services/extensions/common/rpcProtocol.ts#402:16 (_doInvokeHandler)](https://github.com/microsoft/vscode/blob/d5e9aa0227e057a60c82568bf31c04730dc15dcd/src/vs/workbench/services/extensions/common/rpcProtocol.ts#L402:16 (_doInvokeHandler))<br />[/vs/workbench/services/extensions/common/rpcProtocol.ts#387:31 (_invokeHandler)](https://github.com/microsoft/vscode/blob/d5e9aa0227e057a60c82568bf31c04730dc15dcd/src/vs/workbench/services/extensions/common/rpcProtocol.ts#L387:31 (_invokeHandler))<br />[/vs/workbench/services/extensions/common/rpcProtocol.ts#303:18 (_receiveRequest)](https://github.com/microsoft/vscode/blob/d5e9aa0227e057a60c82568bf31c04730dc15dcd/src/vs/workbench/services/extensions/common/rpcProtocol.ts#L303:18 (_receiveRequest))<br />[/vs/workbench/services/extensions/common/rpcProtocol.ts#230:9 (call)](https://github.com/microsoft/vscode/blob/d5e9aa0227e057a60c82568bf31c04730dc15dcd/src/vs/workbench/services/extensions/common/rpcProtocol.ts#L230:9 (call))<br />\tat \\out\\vs\\workbench\\services\\extensions\\node\\extensionHostProcess.js:797:34<br />[/vs/base/common/event.ts#587:15 (fire)](https://github.com/microsoft/vscode/blob/d5e9aa0227e057a60c82568bf31c04730dc15dcd/src/vs/base/common/event.ts#L587:15 (fire))<br />[/vs/base/parts/ipc/common/ipc.net.ts#453:18](https://github.com/microsoft/vscode/blob/d5e9aa0227e057a60c82568bf31c04730dc15dcd/src/vs/base/parts/ipc/common/ipc.net.ts#L453:18)<br />\tat \\out\\vs\\workbench\\services\\extensions\\node\\extensionHostProcess.js:975:744<br />\tat l.fire (\\out\\vs\\workb<br />",
        "createdAt": "2020-07-13 05:54:53",
        "state": "open",
        "number": 102343
    },
    {
        "title": "Allow vscode.env.clipboard.readText to retain the original format",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nthe current clipboard contents can only get string without original format\uff0ci want to achieve a extension which can  generate the code by copying  the table of contents \u3002However I just get a string like \r\n`\u5e8f\u53f7\r\n\r\n\u5b57\u6bb5\u63cf\u8ff0\r\n\r\n\u503c\u5217\u8868\r\n\r\n\u8f93\u5165\u7c7b\u578b\r\n\r\n\u5907\u6ce8\r\n\r\n\u8bf7\u8f93\u5165\u5b8c\u6574\u5355\u636e\u53f7\r\n\r\n-\r\n\r\n\u641c\u7d22\u6846\r\n\r\n\u7cbe\u51c6\u5339\u914d\r\n\r\n\u4e1a\u52a1\u6240\u5c5eBGBU\r\n\r\n-\r\n\u4e0b\u62c9\u6846\r\n...`\r\nI hope the string is :\r\n```\r\n\r\n\u5e8f\u53f7 \\t\u5b57\u6bb5\u63cf\u8ff0 \\t \u503c\u5217\u8868 \\t\u8f93\u5165\u7c7b\u578b \\t \u5907\u6ce8\\n\u8bf7\u8f93\u5165\u5b8c\u6574\u5355\u636e\u53f7\\t  - \\t \u641c\u7d22\u6846 \\t \u7cbe\u51c6\u5339\u914d\\n....\r\n\r\n```\r\n![image](https://user-images.githubusercontent.com/19370542/87247587-44ac6800-c487-11ea-9def-e1b0471f93fd.png)\r\n",
        "createdAt": "2020-07-12 13:39:18",
        "state": "open",
        "number": 102295
    },
    {
        "title": "List: Provide `list.mouseWheelScrollSensitivity` setting",
        "description": "Mouse Wheel Scroll Sensitivity setting does not uniformly apply to all list elements\r\n\r\n- VSCode Version: 1.47.0\r\n- OS Version: Windows 10.0.19041\r\n\r\nSteps to Reproduce:\r\n\r\n1. Increase mouse wheel scroll sensitivity (set it to something large so you can see the difference) `editor.mouseWheelScrollSensitivity`\r\n2. Scroll in the editor windows and compare the scroll sensitivity to other list items, where the scroll sensitivity will be much slower.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes \r\n",
        "createdAt": "2020-07-12 03:10:34",
        "state": "open",
        "number": 102261
    },
    {
        "title": "Add support for SteppingGranularity in the UI",
        "description": "Having https://github.com/microsoft/vscode/issues/90793 is fantastic (and we just shipped a version of the Julia extension that supports [this feature](https://www.julia-vscode.org/docs/v0.17/release-notes/v0_17/#Support-for-step-in-targets-in-the-debugger-1)).\r\n\r\nSo now I'm of course wondering whether we could also have built-in support for `SteppingGranularity` from the DAP in the UI? :)",
        "createdAt": "2020-07-11 18:04:13",
        "state": "open",
        "number": 102236
    },
    {
        "title": "Slower zoom in editor",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nThe editor font zoom is great with a mouse wheel but far too fast on my laptop trackpad. The font changes from unreadably small to hilariously huge with the tiniest movement, and the only way I can get the size I want is to zoom in and out repeatedly until it happens to stop on the desired setting.\r\n\r\nWould it be possible to slow it down please (or add a speed setting)?\r\n\r\nVS Code version: Code 1.47.0 (d5e9aa0227e057a60c82568bf31c04730dc15dcd, 2020-07-09T08:02:06.629Z)\r\nOS version: Windows_NT x64 10.0.18362\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-07-11 15:50:22",
        "state": "open",
        "number": 102227
    },
    {
        "title": "Consider adding a mechanism akin to .NET's 'DebuggerTypeProxyAttribute' for JS/TS debugging",
        "description": "When debugging a program written for .NET in Visual Studio, there are certain attributes that can be used to control how the debugger interacts with various objects. The `DebuggerTypeProxyAttribute` provides a way to inform the debugger how to represent a value in the \"Watch\" view. \r\n\r\nJS does not have a way to define such metadata for its types, and while the Decorators proposal is still under active development it would still likely only serve as half the story.\r\n\r\nAn alternative solution I am proposing is roughly this:\r\n1. A developer define a well-known `Symbol` to add as a key to a class (i.e.,  `const debuggerProxySym = Symbol.for(\"vscode:debugger-type-proxy\")`.\r\n2. A developer can add that symbol as a method of the class (i.e., `class C { [debuggerProxySym]() { ... } }`.\r\n3. In the _launch.config_, the well-known symbol identity could be added as a configuration option.\r\n4. When a value with the configured symbol is shown in the \"Watch\" or \"Locals\" window, that method is called and its result is used in place of the original value.\r\n\r\nIn this way, configuration is flexible and up to the end user and it doesn't depend on proposing new syntax to ECMAScript. In addition, should the Decorators proposal land as a feature in the future this could also leverage decorators (i.e., `@DebuggerTypeProxy(() => { ... }) class C {}`, where `DebuggerTypeProxy` merely sets the same kind of symbol, above). \r\n\r\nAlso, the default configuration could conceivably also include the existing `inspect.custom` symbol in NodeJS's `\"util\"` module.\r\n\r\nA similar design could theoretically be employed to allow for behaviors similar to .NET's other `DebuggerXAttribute` controls, such as:\r\n- A `debugger-display` symbol to provide a simplified text view for a value in the \"Locals\" or \"Watch\" window, similar to .NET's `DebuggerDisplayAttribute`.\r\n- A `debugger-visualizer` symbol to further control how a value in \"Locals\" or \"Watch\" is rendered (though this is obviously more complex).\r\n- A `debugger-hidden` symbol to force the debugger to step over code _inside_ of a function/method with this property (but still step into methods invoked by the function), similar to .NET's `DebuggerHiddenAttribute`.\r\n- As well as symbols for other, related attributes such as `DebuggerNonUserCodeAttribute`, `DebuggerStepThroughAttribute`, etc.\r\n\r\nAn example of how this would help can be seen in the TypeScript compiler itself. Since TypeScript enums are compiled down to number values, its often complex to correlate a flag value back to the enum value. When debugging, we explicitly add additional properties to internal classes like `Node`, `Symbol`, and `Type` to make our lives easier, but first-class support for this behavior would be much more appealing:\r\n\r\n**What we do today:**\r\n![image](https://user-images.githubusercontent.com/3902892/87212985-65818b80-c2d6-11ea-96f3-e36da898861e.png)\r\n\r\n**What would be nice to have in the future:**\r\n```ts\r\n// debug.ts\r\nnamespace ts.Debug {\r\n  export const debuggerDisplay = Symbol.for(\"vscode:debugger-display\");\r\n  export const debuggerTypeProxy = Symbol.for(\"vscode:debugger-type-proxy\");\r\n  export const debuggerHidden = Symbol.for(\"vscode:debugger-hidden\");\r\n  export const debuggerBrowsable = Symbol.for(\"vscode:debugger-browsable\");\r\n}\r\n// core.ts\r\nexport function map<T, U>(array: T[] | undefined, cb: (v: T) => U): U[] | undefined { ... }\r\n// F11 steps over calls to `map`, but still steps into `cb`...\r\nmap[Debug.debuggerHidden] = true;\r\n\r\n// utilities.ts\r\nfunction Symbol() { ... }\r\nSymbol.prototype[Debug.debuggerDisplay] = \"{escapedName}\";\r\n\r\nfunction Type() { ... }\r\nType.prototype[Debug.debuggerTypeProxy] = function() { \r\n  return { \r\n    ...this,\r\n    [Debug.debuggerDisplay]: \"{name} {flagsString}\",\r\n    [Debug.debuggerBrowsable]: { name: false, flagsString: false },\r\n    name: this.symbol?.escapedName,\r\n    flagsString: Debug.formatTypeFlags(this.flags)\r\n  }\r\n};\r\n```\r\n```jsonc\r\n// launch.json\r\n{\r\n  // ...\r\n  \"configurations\": [\r\n    {\r\n      // ...\r\n      \"debugSymbols\": {\r\n        \"display\": [\"vscode:debugger-display\", \"nodejs.util.inspect.custom\"], // the key for `require(\"util\").inspect.custom` in NodeJS\r\n        \"typeProxy\": [\"vscode:debugger-type-proxy\"],\r\n        \"hidden\": [\"vscode:debugger-hidden\"],\r\n        \"browsable\": [\"vscode:debugger-browsable\"]\r\n      }\r\n    }\r\n  ]\r\n}\r\n```",
        "createdAt": "2020-07-11 01:15:01",
        "state": "open",
        "number": 102181
    },
    {
        "title": "Open remote settings GUI when extension executes workbench.action.openSettings with query in remote session",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.47.0\r\n- OS Version: Windows_NT x64 10.0.18363\r\n\r\nSteps to Reproduce:\r\n\r\nI work on the Python extension. Currently, in a remote session, the 'Preferences: Open Settings (UI)' command correctly opens the settings GUI with the Remote setting tab selected.\r\n\r\nHowever, in a remote session (WSL and Remote-SSH), `vscode.commands.executeCommand('workbench.action.openSettings', 'query string')` opens the GUI with the User tab, instead of the Remote setting tab, selected. This behavior is unexpected for the user, as described here: https://github.com/microsoft/vscode-python/issues/12862.\r\n\r\nOur use case is that we'd like to direct the user to a filtered view of the settings GUI, as described in #84355, which happens when a query string is provided with `workbench.action.openSettings`. It would be great if `workbench.action.openSettings` could detect that it's being executed in a remote environment and open the GUI with the Remote settings tab selected as well.\r\n",
        "createdAt": "2020-07-10 18:01:07",
        "state": "open",
        "number": 102146
    },
    {
        "title": "What's new icon/UI for extensions (and future API)",
        "description": "In the extension authors call today, it was confirmed that extension authors want to share the following items when extensions are updated. We also know that customers don't want to be bombarded by welcome/update pages opening when extensions are updated.\r\n\r\n* New features\r\n* Fixed issues\r\n* Features/UI that moved\r\n* Images or gifs showing how new features work\r\n* Guided tours of new/updated features\r\n\r\nWith that in mind, it's possible to alert customers that extensions have been updated and allow them to go as deep as they want, whenever they want, to learn about new features and fixes. \r\n\r\nProvide a new UI element in the activity bar of a \"gift\" or something similar to indicate extensions have been updated. \r\n![image](https://user-images.githubusercontent.com/1186948/87178603-406b2980-c292-11ea-86e4-2d30f375a6ef.png) \r\n\r\nThe badge count would indicate how many extensions have been updated and clicking the \"gift\" icon would show an overlay with a short blurb taken from the extension changelog (automatically taken from the .md).\r\n\r\nFirefox does something like this:\r\n![image](https://user-images.githubusercontent.com/1186948/87179021-ed45a680-c292-11ea-9700-dab33faad6fd.png)\r\n\r\nThis allows customers to mark items as \"read\" to remove the badge count; out out of future update notifications; and click into the \"learn more\" link to go into the extension's changelog in the extension view. \r\n\r\nShowing the changelog could be automatic, but in future iterations we could create richer experiences such as overlays or guided tours. This would require an API that extensions would expose to launch into the update experience.",
        "createdAt": "2020-07-10 17:02:12",
        "state": "open",
        "number": 102139
    },
    {
        "title": "\"Reopen Editor with\" should respect Cmd+Enter",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nWhen choosing `View: Reopen Editor with...` and then <kbd>Cmd</kbd>+<kbd>Enter</kbd> on my choice, the new editor should open in a next editor group.\r\n\r\nVS Code version: Code - Insiders 1.47.0-insider (d5e9aa0227e057a60c82568bf31c04730dc15dcd, 2020-07-08T11:58:31.614Z)\r\nOS version: Darwin x64 18.7.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-07-10 13:48:35",
        "state": "open",
        "number": 102124
    },
    {
        "title": "Transform to snake_case",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nVSCode already has the following very useful commands:\r\n\r\n* Transform to Uppercase\r\n* Transform to Lowercase\r\n* Transform to Title Case\r\n\r\nIt would be very useful to also add a similar command to **\"Transform to snake_case\"** that transforms the selected text to lowercase after adding underscore characters between each lowercase / uppercase character pair.\r\n\r\nFor example it should transform the text `ExampleOne and Also ExampleTwo` to `example_one and also example_two`.\r\n\r\nMaybe consider also adding other variations like \"Transform to kebap-case\" to adds dash characters instead of underscore characters. There are [many (currently 71 results for \"snake case\")  extensions](https://marketplace.visualstudio.com/search?term=snake%20case&target=VSCode&category=All%20categories&sortBy=Relevance)  providing this or similar functionality and other variations thereof.",
        "createdAt": "2020-07-10 07:41:16",
        "state": "open",
        "number": 102074
    },
    {
        "title": "ISO-2022-JP (Japanese) support",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nThis is similar about the following issue:\r\nhttps://github.com/microsoft/vscode/issues/94518\r\n\r\nISO-2022-JP is ancient encoding using 7-bit only, but some applications still support it (including google chrome and chromium).\r\nI hope to support the encoding for Japanese users.",
        "createdAt": "2020-07-10 06:25:37",
        "state": "open",
        "number": 102071
    },
    {
        "title": "[Request] Provide file-specific onDidChangeSemanticTokens event",
        "description": "In C/C++, when a modification is made to a header file, semantic tokens in files that include it could change.  (i.e.  when renaming a function).  Because those other files are not themselves changing, VS Code does not re-request tokens for them (if also open).\r\n\r\nThere is an `onDidChangeSemanticTokens` event we can use to indicate that tokens have changed.  However, this event is not specific to a file, so may cause token requests for files that don't require an update.\r\n\r\nCould an additional event be added that allows us to indicate the specific file that needs tokens re-requested?  i.e.\r\n\r\n```\r\nonDidChangeSemanticTokensForFile?: Event<Uri>;\r\n```\r\n",
        "createdAt": "2020-07-09 23:45:37",
        "state": "open",
        "number": 102043
    },
    {
        "title": "Increase discoverability of Alt-commands on menu buttons",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nWhen [contributing to menus](https://code.visualstudio.com/api/references/contribution-points#contributes.menus) we can use the `alt` property to specify an alternative command that gets run if the Alt key is pressed.\r\n\r\nFor example the Split Editor button does this, but the feature is not easily discoverable.\r\n\r\nI suggest adding a second line to the button tip (title attribute) that displays the text of the alt-command. For example:\r\n\r\n![image](https://user-images.githubusercontent.com/6726799/87044184-195b1c00-c1ee-11ea-876b-1fe48d0fdfc3.png)\r\n\r\n\r\nVS Code version: Code - Insiders 1.47.0-insider (d5e9aa0227e057a60c82568bf31c04730dc15dcd, 2020-07-08T10:52:52.439Z)\r\nOS version: Windows_NT x64 10.0.18363\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-07-09 13:13:19",
        "state": "open",
        "number": 101995
    },
    {
        "title": "Explore showing indent guide in notebooks as a visual indicator that cells are \"under\" the markdown headers",
        "description": "Now:\r\n\r\n![image](https://user-images.githubusercontent.com/2193314/86940086-38c34d80-c0f7-11ea-8dce-343ef23652d1.png)\r\n\r\nExample:\r\n\r\n![image](https://user-images.githubusercontent.com/2193314/86940133-4a0c5a00-c0f7-11ea-8310-20855fbcf42c.png)\r\n\r\nMaybe this could only show when hovering the twisty or header? This is similar to the list widget.",
        "createdAt": "2020-07-08 15:45:23",
        "state": "open",
        "number": 101934
    },
    {
        "title": "Zooming with Ctrl+MouseWheel doesn't update configuration",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nZooming with Ctrl+MouseWheel doesn't update the configuration `window.zoomLevel`, `editor.fontSize` or `editor.lineHeight` and there is no `editor.fontZoomLevel` configuration so if there is anything on an extension that depends on it, it won't work properly.\r\n\r\nFrom what I've seen in the code the Ctrl+MouseWheel zoom applies a multiplier to fontSize and lineHeight directly on the browser but doesn't update the configuration after making that change.\r\n\r\nFrom what I've checked there is also no way for an extension to subscribe to this zoom change event.\r\n\r\n**My use case and problem with this is:** I have a TextEditorDecoration that depends on the fontSize and lineHeight (I'm trying to mimic an half block cursor), it works fine if you zoom with Ctrl++, Ctrl+- or Ctrl+=, but it won't behave correctly if you zoom with Ctrl+MouseWheel because none of this options will be updated.\r\n\r\nVS Code version: Code 1.46.1 (cd9ea6488829f560dc949a8b2fb789f3cdc05f5d, 2020-06-17T21:13:20.174Z)\r\nOS version: Windows_NT x64 10.0.18363\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz (8 x 2592)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off_ok<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|15.90GB (2.73GB free)|\r\n|Process Argv|.|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-07-08 12:32:23",
        "state": "open",
        "number": 101925
    },
    {
        "title": "Investigate use of ts external project for notebooks",
        "description": "There is https://github.com/Microsoft/TypeScript/wiki/Standalone-Server-%28tsserver%29#external-project which seems to allow us to support JS and TS in notebooks - in the sense of a notebook is a project (see https://github.com/microsoft/notebook-extension-samples/blob/master/notebook-language-guide/notebook-language-guide.md)\r\n\r\nWe should explore how well this works for notebooks and if it would be a good case of language service being notebooks-friendly. ",
        "createdAt": "2020-07-08 12:27:15",
        "state": "open",
        "number": 101923
    },
    {
        "title": "Support the new search options in vscode.workspace.findFiles",
        "description": "Working on merging in https://github.com/microsoft/vscode-js-debug/pull/377. Since that PR was submitted, we added Vue handling which involves enumerating all .vue files in the workspace.\r\n\r\n`vscode.workspace.findTextInFiles` has lots of nice new options for configuring what files are excluded. It doesn't look like these have been ported back to `vscode.workspace.findFiles`.",
        "createdAt": "2020-07-07 23:41:16",
        "state": "open",
        "number": 101889
    },
    {
        "title": "Debugger: debug.inlineValues support for case insensitive variable names ",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nHey, I am working on a debugger for a case insensitive language. When looking into the source I didn't see any way to define the expressions as case insensitive.  https://github.com/microsoft/vscode/blob/193483676699fcbde88f7a7748b189cb2bda7efe/src/vs/workbench/contrib/debug/browser/debugEditorContribution.ts#L79\r\n\r\nWith `debug.inlineValues` set to `true` I can\u2019t get camel case vars to work. In the below example you can see we have the value for `postdata` but it won\u2019t match `postData` in the code even though they are the same reference.\r\n\r\n![image](https://user-images.githubusercontent.com/9591618/86607665-ef042700-bf7f-11ea-8032-cab6e900ff57.png)\r\n\r\nAs an extension maintainer and/or author we would like to be able to define ether the language as a whole as case insensitive or the scope/variables themselves. ",
        "createdAt": "2020-07-06 15:18:38",
        "state": "open",
        "number": 101797
    },
    {
        "title": "Allow DAP progress notifications to be shown more prominently than the status bar",
        "description": "Extracting this from https://github.com/microsoft/vscode/issues/101405#issuecomment-652358374 since it's not really the same issue:\r\n\r\nI changed Dart/Flutter over to using DAP progress notifications (from previous custom messages that showed full notifications for progress). I've had a few comments suggesting the status bar notifications may not be obvious enough requesting the full notifications are brought back.\r\n\r\nI think progress messages tend to fall into two fairly distinct categories:\r\n\r\n- things like \"Analyzing...\", where we want to show something is happening, but it's not directly related to what the user is doing\r\n- things like hot reload/launching/building - something specifically started by the user and that they are waiting for to complete before doing anything else\r\n\r\nThe second type I think could be better shown as more obvious notifications (it's something I'd like myself - sometimes when I press F5 to launch my VS Code extension code I wonder why nothing is happening - the only indication is \"Building...\" in the status bar - I'd rather have an expanded notification).\r\n\r\nRequests for this:\r\n\r\n- https://github.com/Dart-Code/Dart-Code/issues/2597#issuecomment-652204865\r\n- https://github.com/Dart-Code/Dart-Code/issues/2601#issuecomment-653356813\r\n- https://github.com/flutter/flutter/issues/60439 / https://github.com/Dart-Code/Dart-Code/issues/2628",
        "createdAt": "2020-07-06 13:04:09",
        "state": "open",
        "number": 101791
    },
    {
        "title": "Autocomplete doesn't work when adding recommended extensions to .code-workspace file, but works when adding to .vscode/extensions.json",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.46.1\r\n- OS Version: Ubuntu 20.04\r\n\r\nSteps to Reproduce:\r\n\r\n1. Start typing an extension name in `\"recommended\":`\r\n2. Works in `extensions.json`, doesn't work in `*.code-workspace`\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-07-06 10:12:14",
        "state": "open",
        "number": 101785
    },
    {
        "title": "Custom grouping for plugins",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n![image](https://user-images.githubusercontent.com/42160297/86574596-a6ad2f00-bfa8-11ea-9939-f4ec7b0eb687.png)\r\n\r\nCustom grouping, easy to manage a large number of  extensions",
        "createdAt": "2020-07-06 08:51:07",
        "state": "open",
        "number": 101781
    },
    {
        "title": "Support \"go back\" and \"go forward\" in notebooks",
        "description": "The workbench commands for going back and forward don't seem to work for notebook but they should. Simple steps: \r\n\r\n* open a notebook\r\n* edit cell 1, edit cell 2\r\n* trigger \"Go Back\"\r\n* nothing happens...\r\n\r\n",
        "createdAt": "2020-07-06 07:11:44",
        "state": "open",
        "number": 101779
    },
    {
        "title": "\"Add Selection To Previous Find Match\" interferes with \"Add Selection To Next Find Match\"",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version:1.46.1\r\n- OS Version:2004 Build 19041.329\r\n\r\nSteps to Reproduce:\r\n\r\n1. Add Selection To Next Find Match [Ctrl+D]\r\n2. Now say you also want to expand the selection upwards --> Add Selection To Previous Find Match\r\n3. Nothing happens. \r\n\r\nExpected Behavior:\r\n\r\nThe two commands should complement each other, so for example when you start in the middle of a function and quickly want to edit a specific word you can quickly expand the selection towards both the top and the bottom. Currently the two commands in conjunction are absolutely useless, and instead will only be useful if you solely want to expand the selection upwards OR downwards. Fixing this issue would make these commands in either case useful.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-07-04 16:09:26",
        "state": "open",
        "number": 101718
    },
    {
        "title": "Newline in showInformationMessage",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nI would like to be able to use newlines in the notifications.\r\n\r\nI know it has already been rejected [here](https://github.com/Microsoft/vscode/issues/48900), but the VSCode native alerts are able to have multi-line comments, so why isn't this an option for the extensions? If `\"Notifications are imho not the right place to show structured text with formatting\"`, then where else are we supposed to show complex notifications? Is there any other available location in VSCode?\r\n\r\nAlso I would argue that multi-line notifications are a pretty basic thing. I am not asking for the ability to add sixteen colors and a cursive font, I just need to be able to, say, make a confirmation message which shows the contents of an object in a structured way, for example.\r\n\r\nAnd I am [not the only one who still wants this](https://stackoverflow.com/questions/54300025/how-to-newline-in-vscode-window-showinformationmessage).\r\n\r\nTherefore opening this as a feature request again.",
        "createdAt": "2020-07-02 10:53:24",
        "state": "open",
        "number": 101589
    },
    {
        "title": "'Generate Color Theme From Current Settings' omits semantic token settings",
        "description": "Issue Type: <b>Bug</b>\r\n\r\n1. Launch the semantic-tokens-sample extension.\r\n2. Follow the README.md instructions to add `editor.semanticTokenColorCustomizations` to your settings.\r\n3. Run the `Developer: Generate Color Theme From Current Settings` command.\r\n4. Review the generated color theme document but find no sign of your semantic token color customizations.\r\n\r\nVS Code version: Code - Insiders 1.47.0-insider (b16b467d3e03e1a1ae05b5836e4e5a5af504e86d, 2020-07-01T05:32:07.483Z)\r\nOS version: Windows_NT x64 10.0.18363\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-07-02 02:02:38",
        "state": "open",
        "number": 101556
    },
    {
        "title": "Need option to minimize Exception (including shortcut)",
        "description": "After Exception we have something like this:\r\n![VSC_debuger_](https://user-images.githubusercontent.com/25403861/86278911-6ed56e80-bbd9-11ea-8339-a8537f364456.png)\r\n\r\nBut when we trying repair code, modify, then this layer doing problems if some part of code is upper, and other in down. \r\nMy idea is to made \"indention\" for exception and offer some icon to control layer to minimize/maximize (eq. yellowe arror)\r\n![VSC_debuger_1](https://user-images.githubusercontent.com/25403861/86278974-890f4c80-bbd9-11ea-9e6b-d48ea4f50e6b.png)\r\nThis same by some shortcut (on/off layer) and the result what I'm expecting\r\n![VSC_debuger_2](https://user-images.githubusercontent.com/25403861/86279020-a3492a80-bbd9-11ea-95e4-886c7786b989.png)\r\n\r\nOther ideas\r\n![VSC_debuger_2a](https://user-images.githubusercontent.com/25403861/86279791-ddff9280-bbda-11ea-9977-f5dc7681317d.png)\r\n![VSC_debuger_2b](https://user-images.githubusercontent.com/25403861/86279795-e061ec80-bbda-11ea-8837-20ad969a40ce.png)\r\n![VSC_debuger_2c](https://user-images.githubusercontent.com/25403861/86279802-e2c44680-bbda-11ea-9663-3e5a876250b1.png)\r\n",
        "createdAt": "2020-07-01 18:32:39",
        "state": "open",
        "number": 101532
    },
    {
        "title": "References: focus editor on double click",
        "description": "I am not sure we have API in custom tree land for this, but e.g. the explorer focuses the editor when you double-click a file.",
        "createdAt": "2020-07-01 16:11:04",
        "state": "open",
        "number": 101522
    },
    {
        "title": "Git: File watcher events should respect `.gitignore`",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\nVersion: 1.46.1\r\nCommit: cd9ea6488829f560dc949a8b2fb789f3cdc05f5d\r\nDate: 2020-06-17T21:17:14.222Z\r\nElectron: 7.3.1\r\nChrome: 78.0.3904.130\r\nNode.js: 12.8.1\r\nV8: 7.8.279.23-electron.0\r\nOS: Darwin x64 19.5.0\r\nSteps to Reproduce:\r\n\r\n1.  This is an exact regression of https://github.com/Microsoft/vscode/issues/33309. All of the details filed there are found the bug I just experienced. I'm unable to reopen that bug, so filing a new one here.\r\n2. The only way I've found to stop the repeated polling of git is to remove the additional workspace root(s) and only have one.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-07-01 16:07:05",
        "state": "open",
        "number": 101519
    },
    {
        "title": "Tweak peek inside notebooks",
        "description": "@isidorn had shared this with me a while back\r\n\r\n* have a notebook\r\n* run reference search or F8 for errors\r\n<img width=\"913\" alt=\"Screenshot 2020-07-01 at 17 04 56\" src=\"https://user-images.githubusercontent.com/1794099/86259989-ffea1c80-bbbc-11ea-8357-81be4fbd07c9.png\">\r\n\r\nIssues/suggestion: \r\n\r\n* there are many lines for peek and for the focus border\r\n* the peek editor has some whitespace at its left and right side\r\n* instead of lines we should experiment with more background color, e,g drop the outline and only use background\r\n",
        "createdAt": "2020-07-01 15:07:09",
        "state": "open",
        "number": 101513
    },
    {
        "title": "Simplified Text Editor Mode",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nSometimes all you need is a simple text editor to edit a shell script or config file or something of that nature,\r\nand not a full fledged development IDE.\r\n\r\nFor this reason I'd like to see a mode, in that I can start vscode, that doesn't open a whole workspace\r\nand by default shows a new empty file. All the more advanced IDE bits and pieces of the UI should be\r\nhidden by default in this mode, for example there's no need for a debugger when editing simple text files.\r\n\r\nA classic toolbar for opening and saving files should be visible by default in this mode, because one of the goals here would be to reduce the need for having more than one editor installed on a system, and to do that you want to make the transition from classic simple editors like notepad, kwrite or gedit as smooth as possible.\r\n\r\nThis also sums up why I want this feature: On my system there are vscodium, kwrite, kate, gedit and even more GUI text editors installed. But why is that considered acceptable?\r\n\r\nI know having to keep dozens of different editors around is considered normal for developers, but it means you have to configure and learn the quirks and features of each one. Also they'll differ in their looks, and you'll not be able to use the same shortcuts across all of them (unless with a lot of configuration work applied).\r\n\r\nBasically I want to: simplify life.",
        "createdAt": "2020-07-01 14:11:12",
        "state": "open",
        "number": 101508
    },
    {
        "title": "Quick open: Include symbols should not block the search based on filename",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\nVersion: 1.47.0-insider (user setup)\r\nCommit: b9d7ec9ff367a8e59fe4cc2abee605a55be180e8\r\nDate: 2020-06-20T00:08:33.687Z\r\nElectron: 7.3.1\r\nChrome: 78.0.3904.130\r\nNode.js: 12.8.1\r\nV8: 7.8.279.23-electron.0\r\nOS: Windows_NT x64 10.0.18363\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open \"search.quickOpen.includeSymbols\"\r\n2. Search(Ctrl+P) in a big project (for example, typescript) by filename\r\n3. Expected: filename comes first, then the slow symbol search joins the result later.\r\n4. Actual: The symbol search blocks the filename search and no results appear in a long time.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-07-01 08:28:51",
        "state": "open",
        "number": 101487
    },
    {
        "title": "Terminal errors: include settings ID in the error message",
        "description": "Testing https://github.com/microsoft/vscode/issues/101299\r\n\r\nI suggest to fully spell out the setting that is causing the error (in all error messages). For example:\r\n\r\n<img width=\"548\" alt=\"image\" src=\"https://user-images.githubusercontent.com/172399/86213071-6a796900-bb79-11ea-99dc-0cbb0de2ce10.png\">\r\n\r\nStarting directory '/foo' defined in setting 'terminal.integrated.cwd' does not exist.\r\n\r\n<img width=\"556\" alt=\"image\" src=\"https://user-images.githubusercontent.com/172399/86213766-7ca7d700-bb7a-11ea-90e5-c9194f609eaa.png\">\r\n\r\nThe terminal process \"/bin/zsh -wrong\" failed launch (exit code:1), pls check the setting terminal.integrated.shellArgs.osx.",
        "createdAt": "2020-07-01 07:03:54",
        "state": "open",
        "number": 101480
    },
    {
        "title": "Allow <key> + <key> chords",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nSince I use Vim extension, would like to use the `<j> + <k>` chord as an alias for Esc, (as I did with with the help of the vimscript extension Arpeggio).\r\n\r\nCurrently, chords have to be in the form of: `<modifier> + <key>`",
        "createdAt": "2020-06-30 21:32:01",
        "state": "open",
        "number": 101453
    },
    {
        "title": "Reload notification appears when extensions are already installed",
        "description": "Testing #101117\r\n\r\n* Download extensions from marketplace ex: ESLint, C/C++\r\n* DnD into the extension viewlet\r\n* Both extensions are successfully installed and requests reload\r\n* Confirm reload window\r\n* Again DnD the extensions into the viewlet\r\n* nothing should happen instead notification pops up with `Please reload Visual Studio Code to complete installing the extension ....`\r\n\r\n",
        "createdAt": "2020-06-30 18:10:20",
        "state": "open",
        "number": 101441
    },
    {
        "title": "Support color theme customizations specific to ColorThemeKind",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nUsers can already set `workbench.colorCustomizations` and `editor.tokenColorCustomizations` and `editor.semanticTokenColorCustomizations` at two levels, either globally or for named themes.\r\n\r\nI would also like to be able to set customizations based on the kind of color theme.\r\n\r\nPossible syntax, using double square-brackets in place of the singles that denote a named theme:\r\n\r\n```\r\n\"workbench.colorCustomizations\": {\r\n\t\"[[Dark]]\": {\r\n\t\t\"activityBar.activeBackground\": \"#222222\"\r\n\t},\r\n\t\"[[Light]]\": {\r\n\t\t\"activityBar.activeBackground\": \"#dddddd\"\r\n\t},\r\n\t\"[[HighContrast]]\": {\r\n\t\t\"activityBar.activeBackground\": \"#ffff00\"\r\n\t}\r\n}\r\n```\r\n\r\nOne specific use case is for a semantic highlight provider extension that defines custom token types and would like to provide sensible default styling for these tokens in dark, light and high contrast themes.\r\n\r\nVS Code version: Code - Insiders 1.47.0-insider (04203498480e48be84d86f5763e126c7c5bf22e0, 2020-06-30T09:00:22.588Z)\r\nOS version: Windows_NT x64 10.0.18363\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-06-30 15:15:58",
        "state": "open",
        "number": 101418
    },
    {
        "title": "No view menu for panels",
        "description": "Testing #100848\r\n\r\n* move a view into a panel, e.g timeline into terminal container\r\n* \ud83d\ude15 there is no view menu only the context menu...",
        "createdAt": "2020-06-30 10:05:22",
        "state": "open",
        "number": 101382
    },
    {
        "title": "[css] allow to supress linting warning with ignore comment",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nSome linting libraries like [CSSLint](https://github.com/CSSLint/csslint) allow you to [Ignoring parts of CSS during linting](https://github.com/CSSLint/csslint/wiki/Ignoring-parts-of-CSS-during-linting)\r\n\r\nLike this:\r\n\r\n```css\r\n/* csslint ignore:start */\r\n@import('normalize.css');\r\n/* csslint ignore:end */\r\n```\r\n\r\nOr like this:\r\n\r\n```css\r\n.foo.bar { /* csslint allow: adjoining-classes */\r\n    margin: 0;\r\n}\r\n```\r\n\r\nI believe this was also implemented for [microsoft  / vscode-eslint](https://github.com/microsoft/vscode-eslint/issues/245)\r\n\r\nCan this be added for the default linting features in VS Code?\r\n\r\nPossible workarounds are to turn off CSS linting altogether:\r\n\r\n```json\r\n{\r\n    \"css.validate\": false,\r\n}\r\n```\r\n\r\nOr disable just the rule everywhere:\r\n\r\n```json\r\n{\r\n    \"css.lint.vendorPrefix\": \"ignore\"\r\n}\r\n```\r\nBut sometimes the rule fits 95% of cases and it's nice to be able to toggle it off individually when neccessary",
        "createdAt": "2020-06-28 22:21:42",
        "state": "open",
        "number": 101249
    },
    {
        "title": "Allow setting key binding for clearing filter in explorer view",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nThe only key I can use is Esc to clear the filter.\r\nIt doesn\u2019t seem possible to map his to any other key.\r\n\r\nCan this be added to the key binding list?\r\n\r\n![](https://code.visualstudio.com/assets/docs/getstarted/userinterface/file-explorer-filter.png)\r\n",
        "createdAt": "2020-06-28 13:22:22",
        "state": "open",
        "number": 101230
    },
    {
        "title": "Accessibility Discussion: Focus Exact Item In Status Bar",
        "description": "Hi,\r\nIs it possible to count on the positions of items in the status line? Failing that, is it possible to query information that VS Code knows about even if it's not in a fixed position on the status line? I'm asking this because I noticed that in my setup, line and column number information is the next to last item. I have VS Code Extensions that show other information, such as word count and reading level. I would like to set up key strokes that get the individual pieces of information I'm interested in and avoid reading through all the information on the status line to find what I want to know. I'd like to be able to count on always finding line and column number, for instance, or how many spelling errors are in my Markdown file. Now that I think of it, it makes sense to be able to find these things out independent of the status line. I'd like to do it quickly through key strokes, because a quick key stroke allows me to keep the flow of my work going better than stopping, finding something on the status line after F6ing and then finding my way back and reorienting myself to what I was doing.",
        "createdAt": "2020-06-27 23:27:00",
        "state": "open",
        "number": 101205
    },
    {
        "title": "Allow disabling all of the popups/tooltips that were added recently ",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nPut your cursor anywhere on VS code and there's a 95% chance you'll get these \"helper\" popups (e.g. go to definition, ctrl+click in terminal, etc.) which are very annoying and stop you from doing your work when you are only trying to read the code and/or copy/paste. \r\n\r\nIn my opinion, these should **only** be enabled when the user holds a specific key such as Alt, not Ctrl, which is often held for Ctrl+c, Ctrl+v, etc. For me, having it on Ctrl turn copy/pasting into a nightmare! \r\n\r\nAnd it gets even worse when you can't get rid of all those popups because anywhere you put your mouse, you get some popup blocking you from reading whatever you're trying to read! (even without holding any key). Luckily I have found how to disable the hover popups but it seems that the Ctrl/Cmd+click feature cannot be disabled.\r\n\r\nWeb browsers block popups for a very good reason, they are generally unwanted. And having tons of random features popup/appear when I don't need them is making me hate using VSCode when I used to really love it. \r\n\r\nPlease fix this or at least allow disabling all popups/tooltips (including the Ctrl+click in the terminal), or even better, allow changing the key to Alt instead of Ctrl, that would make it perfect because those feature **can** be very useful when you do intend to use them.\r\n\r\nVS Code version: Code 1.46.1 (cd9ea6488829f560dc949a8b2fb789f3cdc05f5d, 2020-06-17T21:17:14.222Z)\r\nOS version: Darwin x64 19.5.0\r\nRemote OS version: Linux x64 5.3.0-61-generic\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-06-27 12:02:58",
        "state": "open",
        "number": 101184
    },
    {
        "title": "Automatic github auth doesn't work with gist repositories",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.47.0-insider\r\n- OS Version: MacOS 10.15.5\r\n\r\nSteps to Reproduce:\r\n\r\n1. Clone a gist from your own GitHub account (https://help.github.com/en/github/writing-on-github/forking-and-cloning-gists)\r\n\r\n2. In VSCode, attempt to push a new commit to it. VSCode will complete its authentication via its GitHub integration, but then displays a message \"Git: remote: Repository not found.\"\r\n\r\nExpected result: Commit is pushed, as is done in GitHub Desktop, etc.\r\n\r\nI'm guessing the error is because VSCode is hardcoded to a fixed repository URL format, instead of just attempting to do a normal push using the actual repository URL that it already sees.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes/No\r\nYes",
        "createdAt": "2020-06-27 04:53:07",
        "state": "open",
        "number": 101174
    },
    {
        "title": "Add several basic predefined variables for use in launch.json - e.g.  ${uid}, ${gid}, ${user}, ${home}",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n\r\nPlease expose several basic predefined variables for use in `launch.json` like `${uid}`, `${gid}`, `${user}`, `${home}` (and potentially in `settings.json` too, as per https://github.com/microsoft/vscode/issues/2809).\r\n\r\nExample use cases:\r\n\r\n1. Extremely useful for multi-user environments to avoid port or path conflicts. (See YAML below)\r\n2. Generally similar use cases to https://github.com/microsoft/vscode/issues/2809 where one needs to specify paths to SDKs, GOPATHs and alike. \r\n\r\n```json-with-comments\r\n{\r\n  \"version\": \"0.2.0\",\r\n  \"configurations\": [\r\n    {\r\n      \"type\": \"perl\",\r\n      \"request\": \"launch\",\r\n      \"name\": \"Perl-Debug\",\r\n      \"console\": \"remote\",\r\n      \"port\": \"${uid}\",  // <---- HERE!\r\n      \"root\": \"${workspaceFolder}/.vscode/root\",\r\n      \"program\": \"${workspaceFolder}/${relativeFile}\",\r\n      \"stopOnEntry\": false,\r\n      \"reloadModules\": false,\r\n      \"sessions\": \"watch\",\r\n    }\r\n  ]\r\n}\r\n```",
        "createdAt": "2020-06-27 00:10:28",
        "state": "open",
        "number": 101172
    },
    {
        "title": "Support FilesDirectories for file systems",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nApplications like [Notion](https://notion.so) support \"files as directories\" - this is to say, you can create a file that has content but also has children. I'm currently working on an extension for VSCode with \"files as directories\" functionality but I'm not able to integrate this natively with the `FileSystemProvider` because `Directory` and `File` are distinct and non-overlapping types. This means that neither the `file explorer` or the `breadcrumb` are able to support my usecase. \r\n\r\nA possible implementation:\r\n\r\n- introduce a new `FileType`: `FileDirectory`\r\n- support a new method `FileSystemProvider.readFileDirectory`\r\n- when navigating via file explorer, default is to expand `FileDirectory` as `Directory` with right click option to open contents\r\n- similar behavior for breadcrumb",
        "createdAt": "2020-06-26 13:58:55",
        "state": "open",
        "number": 101135
    },
    {
        "title": "Independent Decoration render  support",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nThe current decoration must be attached to a renderable token, \r\nwe use `rust-analyzer` as a example,\r\n\r\n![image](https://user-images.githubusercontent.com/17974631/85822033-7b5a6100-b7ac-11ea-81e4-a2fe05b9befb.png)\r\n\r\n it's inline hint or inline parameter, as you can see, when you move your cursor to the `)`,\r\nyou actually select the `:Error )`, though the `:Error ` is a decoration. \r\nusing this hack method to implement the `inline hint` like `intellij` has some drawback\r\n1. When you move your cursor next to a token with an inline hint, your cursor gets very thick including the decorator, which is very inconvenient when you edit your code!\r\n![image](https://user-images.githubusercontent.com/17974631/85822765-3f280000-b7ae-11ea-8981-e81f8d5243f6.png)\r\nserver has a type: `TcpListener`, if i want to change the variable name , you will see the width of your cursor changes from 12px to 100px.\uff08we assume the width). it's really weird.\r\n2. As a `inline hint` common implemation method, it's not so pretty.\r\n\r\n## Feature Request\r\nIs it possible to add an option to have the decoration rendered separately from the original token, whether or not the rendering still relies on certain conditions of the original token.\r\nIf this new feature is available, plugin developers can implement the same `inline hint`  as intellij\u3002\r\n",
        "createdAt": "2020-06-26 05:24:15",
        "state": "open",
        "number": 101085
    },
    {
        "title": "Allow us to change the font type and size of find-replace widget",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nHi, and please! It's unreadable for my limited eyes:\r\n![image](https://user-images.githubusercontent.com/51187764/85794127-7940c580-b70c-11ea-9ade-6a1f91a41625.png)\r\n\r\nI know we are now able to resize the widget horizontally (like pointed out at issues #2657, #20447 and #2220), but that doesn't change the legibility of the inserted characters.\r\n\r\nLook how easier it is on Sublime Text to read:\r\n![image](https://user-images.githubusercontent.com/51187764/85794095-6e863080-b70c-11ea-981b-0d1446787eae.png)\r\n\r\nThere should be a pair of settings like `\"editor.FindReplaceWidgetFontFace\": \"Consolas\",` and `\"editor.FindReplaceWidgetFontSize\": \"16\",` (the names are just examples).",
        "createdAt": "2020-06-25 20:55:16",
        "state": "open",
        "number": 101064
    },
    {
        "title": "Inconsistent auto-indent in code blocks inside TSX tags",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.46.1\r\n- OS Version: Windows 10 x64 10.0.19041\r\n\r\nSteps to Reproduce:\r\n\r\nThe issue is self-explanatory in the following code block.\r\nIt can be reproduced either by hitting enter to break a line (e.g. hitting <kbd>Enter</kbd> to break `1 + 2` at `+`), or pressing <kbd>Shift</kbd>+<kbd>Alt</kbd>+<kbd>F</kbd> to format the whole file.\r\n```typescript\r\nfunction Foo(): JSX.Element {\r\n    const i = 1\r\n        + 2; // Proper indent\r\n    const c = i\r\n        && <div></div>; // Proper indent\r\n\r\n    return (\r\n        <div>\r\n        {\r\n            i\r\n            && c; // No indent\r\n        }\r\n        </div>\r\n    );\r\n}\r\n```\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-06-25 18:02:35",
        "state": "open",
        "number": 101051
    },
    {
        "title": "[json] when downloading JSON Schema files, do Conditional GETs",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nThe requests coming in for JSON Schema files to SchemaStore.org don't check if the remote files have changed before downloading them. This puts unneeded pressure on the SchemaStore.org servers and it downloads more data than needed which will cost money for users that pay bandwidth by the megabyte. \r\n\r\nBy supporting Conditional GETs (HTTP 304) using either _If-Modified-Since_ or _If-None-Match_ request header, these issues are fixed.",
        "createdAt": "2020-06-25 17:36:33",
        "state": "open",
        "number": 101050
    },
    {
        "title": "Incorrect Indentation on newline",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nUsing the following code hit enter after the last line. The new line will be indented to match the closing bracket, which is incorrect. It should be matched up with the indentation of the C in const\r\n\r\n```\r\nconst res = await fetch(`${URL}`,\r\n    {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        createCdJson,\r\n      }),\r\n    });\r\n```\r\n![Screen Shot 2020-06-25 at 8 40 10 AM](https://user-images.githubusercontent.com/59625617/85741288-86839300-b6bf-11ea-9610-33669a75c0ac.png)\r\n\r\nI also ran the same steps with code --disable-extensions and the same thing happened.\r\n\r\nVS Code version: Code 1.46.1 (cd9ea6488829f560dc949a8b2fb789f3cdc05f5d, 2020-06-17T21:17:14.222Z)\r\nOS version: Darwin x64 19.5.0\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz (8 x 2600)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>metal: disabled_off<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off_ok<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|2, 2, 2|\r\n|Memory (System)|16.00GB (0.06GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (8)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nswagger-viewer|Arj|3.0.1\r\nvscode-eslint|dba|2.1.5\r\ngitlens|eam|10.2.2\r\nEditorConfig|Edi|0.15.1\r\nterraform|has|2.0.2\r\nvscode-xml|red|0.12.0\r\nvscode-yaml|red|0.8.0\r\nlocal-history|xyz|1.8.1\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-06-25 14:35:45",
        "state": "open",
        "number": 101032
    },
    {
        "title": "Show message when trying to assign an existing key chord as keybinding",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\nVersion: 1.46.1\r\nCommit: cd9ea6488829f560dc949a8b2fb789f3cdc05f5d\r\nDate: 2020-06-17T21:13:08.304Z\r\nElectron: 7.3.1\r\nChrome: 78.0.3904.130\r\nNode.js: 12.8.1\r\nV8: 7.8.279.23-electron.0\r\nOS: Linux x64 5.3.0-59-generic\r\n\r\n\r\nSteps to Reproduce:\r\n\r\n1.set \"ctrl + k\" for \"column selection mode\";\r\n2.close keyboard shortcuts window;\r\n3.cannot using \"ctrl + k ctrl + s\" to invoke keyboard shortcuts window and there was no warning to inform possible shortcuts mask;\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes",
        "createdAt": "2020-06-24 02:52:27",
        "state": "open",
        "number": 100899
    },
    {
        "title": "Debug console: introduce ctrl + up / down to focus output",
        "description": "To be consistent with the terminal the debug console could also navigte to output using ctrl + up / down.\r\nThe current functionality of Shit + Tab, and up / down would still work as it is today, and ctrl + up / down would behave like an alias of sort.",
        "createdAt": "2020-06-23 16:43:18",
        "state": "open",
        "number": 100868
    },
    {
        "title": "Breakpoints not remembered on git branch change",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nWhen switching from one git branch and back, breakpoints and their line numbers are not remembered. Sometimes breakpoints disappear entirely and other times they are found to have moved magically from their original line to some other completely different line some hundred or so lines down the file. This makes it tedious to debug files in multiple branches when you're trying to control breakpoints all the time.\r\n\r\nVS Code version: Code 1.46.1 (cd9ea6488829f560dc949a8b2fb789f3cdc05f5d, 2020-06-17T21:13:20.174Z)\r\nOS version: Windows_NT x64 10.0.18363\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-8700 CPU @ 3.20GHz (12 x 3192)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off_ok<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|7.89GB (1.42GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-06-23 16:13:45",
        "state": "open",
        "number": 100864
    },
    {
        "title": "Extension doesn't activate after install",
        "description": "Windows 10\r\n\r\nSteps:\r\n- install extension https://marketplace.visualstudio.com/items?itemName=ban.spellright\r\n- Run any SpellRight command\r\n\r\nObserve: you get an error\r\n\r\n- Run command `Show Running extension`\r\n\r\nObserve: \r\n\r\nSpell Right is not running\r\n\r\nInspect the spell right package.json. It has\r\n\r\n```\r\n\t\"activationEvents\": [\r\n\t\t\"*\"\r\n\t]\r\n```\r\n\r\n",
        "createdAt": "2020-06-23 14:51:33",
        "state": "open",
        "number": 100856
    },
    {
        "title": "Printable keyboard cheatsheet with real bindings",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nGreetings, \r\nprintable keyboard cheetsheet is great idea. However, IMHO it will be much better, if it reflects real keybinings. For example, I use Eclipse Keymap, so the current cheatsheet is not entirely relevant and practically unusable, because you do not know if that keybinding was remapped or it is a feature you did not know about. Surely that document can be generated as HTML at runtime from within VS Code using real keybindings.",
        "createdAt": "2020-06-23 07:10:00",
        "state": "open",
        "number": 100825
    },
    {
        "title": "Bookmark a line",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nAdd an option to bookmark or star lines in a file and add an option in the explorer to view all the starred/bookmarked lines.\r\n\r\nVS Code version: Code 1.46.0 (a5d1cc28bb5da32ec67e86cc50f84c67cc690321, 2020-06-10T09:03:20.462Z)\r\nOS version: Windows_NT x64 10.0.16299\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-06-23 06:47:38",
        "state": "open",
        "number": 100823
    },
    {
        "title": "Breadcrumbs view font settings",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nHol\u00e0,\r\n\r\nIt is a minor feature request that would make it possible to change the font settings of the breadcrumbs view, having a different font and size than the main one would make it more visible to users.\r\n\r\nThanks!",
        "createdAt": "2020-06-22 21:46:07",
        "state": "open",
        "number": 100790
    },
    {
        "title": "Make debug viewlet secondary actions contributable",
        "description": "",
        "createdAt": "2020-06-22 16:05:30",
        "state": "open",
        "number": 100771
    },
    {
        "title": "Status bar entries should use border for focus",
        "description": "* see attached gif\r\n* move to the lower right corner of status bar\r\n* click\r\n* :bug: status bar gets a focus border\r\n\r\n![Jun-22-2020 10-01-33](https://user-images.githubusercontent.com/1794099/85263400-68bfef00-b46f-11ea-8f7f-35a450fa4201.gif)\r\n",
        "createdAt": "2020-06-22 08:02:40",
        "state": "open",
        "number": 100735
    },
    {
        "title": "View undo/redo history visually or an indicator or a counter",
        "description": "Dear VSCode,\r\n\r\nThank you very much for this project.\r\n\r\nAlthough, the feature we might need is the Undo/Redo `history` like in the Photoshop, for example:\r\n\r\n![](https://i.imgur.com/LMUv2pn.png)\r\nor `counters` (these numbers below show the number of `Undo`ings the coder did (or number of `Redo` available to restore))\r\n\r\n![](https://i.imgur.com/IxhaFfi.png)\r\n\r\nor an `indicator` if any **Redo** is available.\r\n\r\nThe reason of this request is that without it the VSCode forces you to recheck if any edits have undone after returning to the project by clicking `Ctrl+Shift+Z`/`Ctrl+Y` and `Ctrl+Z` repeatedly etc. to **ensure** and not lose the undo/redo history by an accident.\r\n\r\nIn short, the there are 3 ways to implement.\r\n```\r\n1. The Undo/Redo history window(like on 1 picture above)\r\n2. A global or per file Redo available counter(like on 2 picture above)\r\n3. A global or per file Redo indication (Redo exists or not)\r\n```\r\nJust, imagine a situation:\r\n```\r\nYou are coding a big code.\r\n1. Ctrl+Z in one file so to view some code you rewrote.\r\n2. Open/View different file.\r\n3. Forget that you Undo first one\r\n4. Return to first one\r\n5. Write 1 char or reformat/beatify it accidentally\r\n6. The whole Redo history of first file is **GONE** ... oops (what if full block of such or even more?!)\r\n```\r\nSo, this request might eliminate this problem.\r\n\r\nIt might be already nearly implemented:\r\nThe `Undo/Redo` might already is stored in some `object map` or such, so just iterate through and do stuff. I.e. show the map in list or length of each `map` per file.\r\n\r\nInteresting [link](http://www.dr-qubit.org/undo-tree.html) which shows how might Emacs have such \"feature\".\r\n\r\nBest regards",
        "createdAt": "2020-06-22 02:33:32",
        "state": "open",
        "number": 100717
    },
    {
        "title": "\"Find in Folder\" \\ add safety to Replace All (in a file)",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nThe Replace All (in a file) buttons are insanely located right next to the Dismiss ones, the changes can't be reverted if the file wasn't open, and it doesn't have confirmation dialog, i got relatively low damage, but that wasn't more than luck .\r\n\r\nAdd at least the confirmation dialog, and better implement this https://github.com/Microsoft/vscode/issues/47783 .",
        "createdAt": "2020-06-21 19:24:47",
        "state": "open",
        "number": 100702
    },
    {
        "title": "Use JSON5 instead of JSONC for configuration files",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nCurrently configuration files are in JSONC format, which is a format without a specification, loosely standing for \"JSON with comments\". The VSCode version of it happens to allow trailing commas in arrays and objects, but this is a VSCode-specific implementation detail meant to make editing its own config files easier, rather than anything that is based on a specification. As such, VSCode config files are incompatible with other tools and tooling (and the fact that the file extension continues to be \".json\" only exacerbates the problem).\r\n\r\nI propose to use [JSON5](https://json5.org/) instead of the more-or-less proprietary variant of JSONC (with .json extension, with trailing commas) that is currently in use in VSCode config files. JSON5 is a well-defined specification that includes comments, trailing commas, multi-line strings, single or double quotes, object keys without quotes and a couple other things borrowed from ECMAScript 5.1. It's still a strict subset of JavaScript and as such immediately understandable and usable for the vast majority of developers - in fact it could be argued that it's easier to understand than JSON, because it gets rid of some of the arbitrary and at times unexpected limitations that JSON imposes.\r\n\r\nThe most important thing, though, IMHO, is that Microsoft doesn't just forge its own path with proprietary implementations/extensions of JSON, creating essentially an \"MS-JSON\" variant, and instead embraces a cross-vendor, implementation-independent specification.\r\n\r\nSee also the discussion at https://github.com/microsoft/terminal/issues/4232",
        "createdAt": "2020-06-21 11:14:49",
        "state": "open",
        "number": 100688
    },
    {
        "title": "Alt+Backspace to delete previous character without smart indentation-aware deletion",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nSometimes, you want to move a block of code left, but pressing backspace moves it to the last tabstop. I suggest that pressing Alt+Backspace doesn't do this, and just removes one character.",
        "createdAt": "2020-06-20 22:52:33",
        "state": "open",
        "number": 100667
    },
    {
        "title": "Cannot run multiple debug sessons with the same launch config name",
        "description": "When trying to run multiple debug sessions that are configured with the same launch name, the 2nd session will not start. In the example below, you cannot run both debuggers at the same time if the names are the same:\r\n\r\nAPI/.vscode/launch.json:\r\n`{\r\n    configurations: [\r\n        {\r\n            \"name\": \"Serve\"\r\n            ...\r\n        }\r\n    ]\r\n}`\r\n\r\nUI/.vscode/launch.json:\r\n`{\r\n    configurations: [\r\n        {\r\n            \"name\": \"Serve\"\r\n            ...\r\n        }\r\n    ]\r\n}`\r\n\r\nVersion: 1.46.1 (user setup)\r\nCommit: cd9ea6488829f560dc949a8b2fb789f3cdc05f5d\r\nDate: 2020-06-17T21:13:20.174Z\r\nElectron: 7.3.1\r\nChrome: 78.0.3904.130\r\nNode.js: 12.8.1\r\nV8: 7.8.279.23-electron.0\r\nOS: Windows_NT x64 10.0.18362",
        "createdAt": "2020-06-19 16:35:16",
        "state": "open",
        "number": 100589
    },
    {
        "title": "Symbolic links to folders can lead to the same file opened in two tabs",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n### General Description\r\n\r\nWhen a folder that is itself a symlink is used as a workspace, VS Code does not recognize that the files in that folder are _the same_ as files in the linked-to folder. Saving new files or opening existing files will use the linked-to folder, the Explorer Tree will use the symlinked folder, and Search will allow both, allowing the same file to be opened concurrently in two different editor tabs in the same project.\r\n\r\n![Screen Shot 2020-06-18 at 5 39 48 PM](https://user-images.githubusercontent.com/245071/85074569-c5c75680-b18a-11ea-9757-103ab83bbb1b.png)\r\n\r\n### Versions Used\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n\r\n#### VSCode Version: **1.46.1**\r\n\r\nFrom Code > About Visual Studio Code:\r\n\r\n```\r\nVersion: 1.46.1\r\nCommit: cd9ea6488829f560dc949a8b2fb789f3cdc05f5d\r\nDate: 2020-06-17T21:17:14.222Z (23 hrs ago)\r\nElectron: 7.3.1\r\nChrome: 78.0.3904.130\r\nNode.js: 12.8.1\r\nV8: 7.8.279.23-electron.0\r\nOS: Darwin x64 19.4.0\r\n```\r\n\r\n#### OS Version\r\n\r\nFrom Apple > About This Mac: **OS X Catalina 10.15.4**\r\n\r\nFrom Help > Report Issue (copy-pasted):\r\n\r\n```\r\nCPUs | Intel(R) Core(TM) i7-5557U CPU @ 3.10GHz (4 x 3100)\r\n-- | --\r\nGPU Status | 2d_canvas: enabledflash_3d: enabledflash_stage3d: enabledflash_stage3d_baseline: enabledgpu_compositing: enabledmetal: disabled_offmultiple_raster_threads: enabled_onoop_rasterization: disabled_offprotected_video_decode: unavailable_offrasterization: enabledskia_renderer: disabled_off_okvideo_decode: enabledviz_display_compositor: enabled_onviz_hit_test_surface_layer: disabled_off_okwebgl: enabledwebgl2: enabled\r\nLoad (avg) | 8, 5, 6\r\nMemory (System) | 16.00GB (2.35GB free)\r\nProcess Argv | --disable-extensions test_project_link\r\nScreen Reader | no\r\nVM | 0%\r\n```\r\n\r\n\r\n### Steps to Reproduce\r\n\r\n- Setup\r\n  1. Create a new directory, e.g. `mkdir test_project`\r\n  2. Create a symbolic link to that directory, e.g. `ln -s test_project test_project_link`\r\n  3. Open the symlinked folder in VS Code, e.g. `code  --disable-extensions test_project_link`\r\n- Reproduce\r\n  1. Create a new file in the symlinked workspace, and save it, e.g. to `example.txt`\r\n      - **BUG 1**: File is shown in the open editors in the non-symlinked directory, e.g `example.txt - ~/test_project`\r\n  2. Select the created file in the Explorer Tree. \r\n      - **BUG 2**: It opens a second editor *for the same file*.\r\n  3. Use the command palette to search for your file, e.g. `\u2318P` and type `example.txt`.\r\n      - **BUG 3**: Both the non-symlinked and symlinked file will appear, and can be open in separate editors.\r\n\r\n### Extra Notes\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\n- Does this issue occur when all extensions are disabled?: **Yes**\r\n- Does this issue occur in VSCode Insiders?: **Yes**\r\n\r\n```\r\nVersion: 1.47.0-insider\r\nCommit: 84f52fe1c0124307046ac0f5443493cda946e60f\r\nDate: 2020-06-17T06:56:23.406Z\r\nElectron: 7.3.1\r\nChrome: 78.0.3904.130\r\nNode.js: 12.8.1\r\nV8: 7.8.279.23-electron.0\r\nOS: Darwin x64 19.4.0\r\n```",
        "createdAt": "2020-06-18 21:58:07",
        "state": "open",
        "number": 100533
    },
    {
        "title": "Silence the startup command printout in Integrated Terminal",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nWhen I run a Dart app in the Integrated Terminal, it prints out a very verbose startup command, e.g.:\r\n\r\n`cd /Users/mikem/myproject; /usr/local/Cellar/dart/2.8.2/libexec/bin/dart --enable-vm-service=0 --pause_isolates_on_start=true --write-service-info=file:///var/folders/2n/vn59_vz152vg107rrs53ympc0000gn/T/dart-vm-service-ee74.json -DSILENT_OBSERVATORY=true --enable-asserts bin/main.dart`\r\n\r\nThis happens for Javascript too:\r\n\r\n`mikem@MBP node_sample %  /usr/local/bin/node --inspect-brk=6018 scripts/simple.js \r\nDebugger listening on ws://127.0.0.1:6018/453abe68-1da3-4862-8ba4-71d8e3dfd8d6\r\nFor help, see: https://nodejs.org/en/docs/inspector\r\nDebugger attached.`\r\n\r\nThese printouts pollute the scrollback and aren't very useful imho. Could we get an option to silence this output, so the first thing I see in the Integrated Terminal is one of the print statements actually in my code?\r\n\r\nNote that this doesn't happen when using the Debug Console. There, I only see this printout (which also would be nice to silence, but at least it's less verbose): \r\n\r\n`Connecting to VM Service at ws://127.0.0.1:58210/4yciVJ1NsWE=/w`",
        "createdAt": "2020-06-18 19:01:38",
        "state": "open",
        "number": 100522
    },
    {
        "title": "Better localisation support for error (original English button)",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nHey guys, it very nice to read and understand eroor in our native language, but is it possible to add a original localisation icon support ?\r\nBecause sometime if we need copy past error on the web for search or talk about a error, it not useful to translate the message, and sometime the translate dont give the real original English message.\r\n\r\n![image](https://user-images.githubusercontent.com/24865815/85054621-56416f00-b16a-11ea-8909-8a16f4bfb4cb.png)\r\nJust need a very fast buton to get original message in English will be user full.\r\nExample for the case upper, i really dont know what append, and the translate give me nothing.",
        "createdAt": "2020-06-18 17:52:09",
        "state": "open",
        "number": 100514
    },
    {
        "title": "Filter `Keyboard Shortcuts` by particular column",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nI want to focus on Explorer when my cursor is in the main panel without using mouse.\r\n\r\nSo I started searching for `focus` in `Keyboard Shortcuts`\r\n\r\nNow it filters `focus` everywhere including other columns like `Keybinding` & `When`.\r\n\r\nBut I only want it to show on `Command` column.\r\n\r\nI tried doing `filter:Command focus` but it doesn't work.\r\n\r\nI want it to work like either Github or Twitter. As in if you want to search for a particular users tweets with a keyword, you can type `from:username javascript` & it'll give you those results.\r\n\r\nDoes this exist in VSCode? If not, would be a great feature :)\r\n\r\nVS Code version: Code 1.46.0 (a5d1cc28bb5da32ec67e86cc50f84c67cc690321, 2020-06-10T09:03:20.462Z)\r\nOS version: Windows_NT x64 10.0.18362\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-06-18 13:50:02",
        "state": "open",
        "number": 100498
    },
    {
        "title": "Add command to switch to a specific theme.",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nMy eyesight is not what it used to be, and I often find myself constantly switching between a dark and light theme as I code through the day depending on the light situation or my mood (...). It would be nice if I can configure a default 'light' and 'dark' theme and then be able to switch between them via a toggle button on the GUI (hey, themes are an important part of the coding sub-culture and warrant a button for instant gratification IMHO) and/or a shortcut (Cmd + Shift + K + T, for example). \r\n\r\nPerhaps this can also be tackled via an extension (I dunno how), but I feel this is important enough (see sub-text on sub-culture above) that it's an integral part of the IDE experience.",
        "createdAt": "2020-06-18 06:48:58",
        "state": "open",
        "number": 100460
    },
    {
        "title": "Debugger evaluation status indicator",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nWhen the debugger is busy in evaluation - e.g. after entering a long-running command in the debug window, or when hovering above a variable that has a long-running string representation method - there is no visible indication of this work. This contributes to a programmer's confusion/frustration trying to understand why the debugger is non-responsive.\r\n\r\nA good counter example is the \"Locals\" window which **does** show an indicator when evaluating variables.\r\n\r\nRelated https://github.com/microsoft/debugpy/issues/294#issue-639028616",
        "createdAt": "2020-06-17 21:45:13",
        "state": "open",
        "number": 100430
    },
    {
        "title": "Implement Google Chrome-like grouped tabs",
        "description": "Google Chrome Beta recently announced [grouped tabs](https://blog.google/products/chrome/manage-tabs-with-google-chrome/), which is pretty awesome.\r\n\r\nHere's the gist:\r\n\r\n![chrome-grouped-tabs](https://user-images.githubusercontent.com/927310/84832686-6821f580-b036-11ea-9a71-f620d676f831.png)\r\n\r\nHaving such a thing within VSCode will be very useful IMO. \r\n\r\nHaving it integrated with the search, where a group is automatically created once you open more than one search result, should help with the tab clutter it ensues. Same for Peek references, automatic grouping of files within the same folders... I see many possibilities for it.",
        "createdAt": "2020-06-16 22:06:35",
        "state": "open",
        "number": 100335
    },
    {
        "title": "[Feature Request] - Support Ctrl + L for clearing console to match Chrome and Edge consoles",
        "description": "In all modern browsers I can Ctrl + l to clear the console when debugging but not in VSCode.\r\n\r\nI can override this by setting:\r\n| Command              | Shortcut | When                                    |\r\n|----------------------|----------|-----------------------------------------|\r\n| Debug: Clear Console | ^ + L    | activeViewlet == 'workbench.view.debug' |\r\n\r\nBut it would be good if this was available out the box.\r\n",
        "createdAt": "2020-06-16 13:33:18",
        "state": "open",
        "number": 100330
    },
    {
        "title": "Provide additional search context in terminal link provider API",
        "description": "Proposal extracted from https://github.com/microsoft/vscode/issues/91290\r\n\r\n```ts\r\nexport interface TerminalLinkSearchContext {\r\n\t/**\r\n\t * A regular expression that will be searched upwards to give additional context of the\r\n\t * link. This is useful for example when a linter/compiler prints a file name that contains\r\n\t * errors and then all the errors on lines below it.\r\n\t */\r\n\tsearchContextPattern?: RegExp;\r\n\r\n\t/**\r\n\t * The number of lines to search upwards for the regexp pattern. This defaults to 5 and will\r\n\t * never search beyond 100 lines.\r\n\t */\r\n\tsearchContextLimit?: number;\r\n}\r\n\r\nexport interface TerminalLinkProviderOptions {\r\n\tsearchContext?: TerminalLinkSearchContext;\r\n}\r\n\r\nexport interface TerminalLinkContext {\r\n\t/**\r\n\t * An additional context line if a [TerminalLinkSearchContext](#TerminalLinkSearchContext)\r\n\t * was used when registering the link provider.\r\n\t */\r\n\tsearchContextLine?: string;\r\n}\r\n\r\nexport namespace window {\r\n\texport function registerTerminalLinkProvider(provider: TerminalLinkProvider, options?: TerminalLinkProviderOptions): Disposable;\r\n}\r\n```",
        "createdAt": "2020-06-16 13:55:22",
        "state": "open",
        "number": 100293
    },
    {
        "title": "Support reverse tunnel",
        "description": "## context\r\nI am trying to access adb in local machine from my remote server. To do that, I tried something like \r\n`ssh -R ${remote_port}:localhost:${local_port} remote_address\r\n`which opened a reverse port forwarding from my server and local machine so that I was able to access local attached devices in my remote server terminal.\r\nHowever, rather than using remote ssh tunnel everytime, I want to automate everything in vscode extension\r\n## Problem\r\nIt looks reverse port is a known issue. Wondering when that will be resolved? (https://code.visualstudio.com/api/advanced-topics/remote-extensions#known-issues)\r\n\r\nI tried to use vscode.workspace.openTunnel \r\n(https://raw.githubusercontent.com/microsoft/vscode/master/src/vs/vscode.proposed.d.ts)\r\napi but it only supports a forward tunnel. Can we support reverse tunnel in this api?",
        "createdAt": "2020-06-15 17:13:09",
        "state": "open",
        "number": 100222
    },
    {
        "title": "[scss] Support completion/intellisense of SCSS/SASS variables & mixins",
        "description": "We've got a feature request in Eclipse Wild Web Developer for intellisense/completion for variable & mixins in SCSS files: https://github.com/eclipse/wildwebdeveloper/issues/445 . It seems like this is a standard feature of the language thus it should IMO be part of the \"reference\" CSS language server that's in VSCode.\r\nThere is some extension that does that (https://github.com/mrmlnc/vscode-scss/ ) but there isn't much that's not reusable out of VSCode at the moment.",
        "createdAt": "2020-06-15 16:08:02",
        "state": "open",
        "number": 100217
    },
    {
        "title": "Automatically apply terminal environment changes to terminals that have not been interacted with",
        "description": "If extensions modify terminal variables (using `ExtensionContext.EnvironmentVariableCollection`), terminals need to be reloaded. If this has happened seconds after the terminal was created (eg. during startup/project open) it seems reasonable that the (unused) terminal could just be immediately recreated, rather than the icon being shown and the user having to do it.\r\n\r\n(this was mentioned at https://github.com/microsoft/vscode/issues/99874#issuecomment-644115406).\r\n\r\n@Tyriar",
        "createdAt": "2020-06-15 13:09:41",
        "state": "open",
        "number": 100193
    },
    {
        "title": "Support moving refactoring preview view",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\nVersion: 1.46.0\r\nCommit: a5d1cc28bb5da32ec67e86cc50f84c67cc690321\r\nDate: 2020-06-10T08:59:04.923Z\r\nElectron: 7.3.1\r\nChrome: 78.0.3904.130\r\nNode.js: 12.8.1\r\nV8: 7.8.279.23-electron.0\r\nOS: Linux x64 5.3.0-59-generic\r\n\r\nSteps to Reproduce:\r\n\r\n1.trigger the refactoring preview window;\r\n2.drag it to wherever you like ---- oops, cannot drag them\r\nand yes it can be reproduced on the Insider version\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes/No\r\nYes",
        "createdAt": "2020-06-15 03:06:19",
        "state": "open",
        "number": 100147
    },
    {
        "title": "Create a context key for when the terminal shell has a program running inside it",
        "description": "Tracking this is part of the solution to https://github.com/microsoft/vscode/issues/97219 and https://github.com/microsoft/vscode/issues/23808",
        "createdAt": "2020-06-12 13:08:32",
        "state": "open",
        "number": 99991
    },
    {
        "title": "Show activation events in Feature Contributions",
        "description": "![Screenshot (252)](https://user-images.githubusercontent.com/9638156/84491080-ade46400-acac-11ea-893f-428885a7af30.png)",
        "createdAt": "2020-06-12 10:00:39",
        "state": "open",
        "number": 99971
    },
    {
        "title": "Support for Running/Debugging Multiple Instances of VS Code Extension",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nWhile developing my VS Code extension, it would be nice to be able to run multiple instances of it. Currently when I run the project, a separate window labeled [Extension Development Host] opens. If I open another window from this Extension Development Host, I would expect the new window to also be running the extension, but it is just a normal instance of VS Code as indicated by the absence of \"[Extension Development Host]\". \r\n\r\nThe only workaround to be able to test multiple instances requires packaging the extension and temporarily installing it. See this related post: https://stackoverflow.com/questions/38303086/vscode-extensions-not-working-with-multiple-instances\r\n",
        "createdAt": "2020-06-12 03:44:24",
        "state": "open",
        "number": 99936
    },
    {
        "title": "Double click on debug viewlet sash should take into account the title width",
        "description": "Typically double clicking on a viewlet sash will cause the viewlet to be resized to fit the contents. However the debug viewlet still clips some of its contents when double clicked:\r\n![image](https://user-images.githubusercontent.com/8586769/84450408-e892c180-ac04-11ea-9789-775bcd88d8b3.png)\r\n\r\nNotice the `...` is all but missing entirely, and more could probably be shown for the select configuration dropdown.",
        "createdAt": "2020-06-12 00:00:14",
        "state": "open",
        "number": 99923
    },
    {
        "title": "Terminal links don't work with git bash paths",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.46\r\n- OS Version: Windows 10 / v.2004 / 19041.329\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\nI believe that the hyperlink feature in the integrated terminal could be slightly improved.\r\n\r\n1. It currently doesn't execute IPv6 links correctly.  These links currently open Windows Explorer at the _This PC_ location. Expected is to open the default browser at `localhost:<port>`.\r\n\r\n![image](https://user-images.githubusercontent.com/1554615/84325307-bdfc2680-ab7a-11ea-8221-04766056879b.png)\r\n\r\n2. The working folder in bash is not parsed as a folder link. Instead it suggests to search in the workspace. Expected behaviour in this case is  to open Windows Explorer at the location of `D:\\Projects\\2017\\2018\\Wordsmith\\word-flip-app`.\r\n\r\n![image](https://user-images.githubusercontent.com/1554615/84325448-0d425700-ab7b-11ea-8f71-c1957124db67.png)\r\n",
        "createdAt": "2020-06-10 22:32:56",
        "state": "open",
        "number": 99806
    },
    {
        "title": "Allow snippets to define NOT scopes",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIt would be really nice if vscode allowed for the ! as a scope definition.\r\n\r\nSay you wanted two exact snippets. One with the output wrapped in quotes and one without quotes. You could define them as scope: !json for the one without quotes AND scope: json for the one with quotes. Example below\r\n```json\r\n    \"ISO DATETIME\": {\r\n        \"prefix\": \"isostamp\",\r\n        \"scope\": \"!json\",\r\n        \"description\": \"Outputs ISO 8601 Timestamp\",\r\n        \"body\": [\r\n            \"${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}T${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}Z\"\r\n        ]\r\n    },\r\n    \"ISO DATETIME JSON\": {\r\n        \"prefix\": \"isostamp\",\r\n        \"description\": \"Outputs ISO 8601 Timestamp\",\r\n        \"scope\": \"json\",\r\n        \"body\": [\r\n            \"\\\"${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}T${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}Z\\\"\"\r\n        ]\r\n    },\r\n```\r\nThis would allow you to type one prefix and get even more specific snippet selections.\r\n\r\nI searched in the issues for anything related and didn't find any similar issues, but please close if there is a duplicate. Thanks :)\r\n",
        "createdAt": "2020-06-10 21:11:53",
        "state": "open",
        "number": 99799
    },
    {
        "title": "Change preferences sync log time to use UTC",
        "description": "This would make it easier to know what time a particular issue happened, without needing to know the user's timezone and calculating the difference. Currently the outputted time is local:\r\n\r\n```\r\n[2020-06-10 13:42:19.809] [userDataSync] [trace] Extensions: Merging remote extensions with local extensions...\r\n[2020-06-10 13:42:19.810] [userDataSync] [info] Extensions: No changes found during synchronizing extensions.\r\n[2020-06-10 13:42:19.810] [userDataSync] [trace] Extensions: Finished synchronizing extensions.\r\n[2020-06-10 13:42:19.811] [userDataSync] [info] Sync done. Took 407ms\r\n```",
        "createdAt": "2020-06-10 20:43:14",
        "state": "open",
        "number": 99796
    },
    {
        "title": "Implement CodeTalk extension for VS Code",
        "description": "We are looking for help from community members who might be interested in implementing a CodeTalk extension for VS Code.\r\n@suiyengar from the CodeTalk extension can provide more details if there are interested community members.\r\n@sana-ajani maybe we should note this issue for the next time MS opens accessbility challanges.\r\n\r\nMore about CodeTalk extension which currently exists for Visual Studio https://github.com/microsoft/CodeTalk\r\n\r\nhttps://github.com/microsoft/CodeTalk/issues/11\r\n",
        "createdAt": "2020-06-10 19:59:17",
        "state": "open",
        "number": 99784
    },
    {
        "title": "Enablement using listDoubleSelection and listMultiSelection not working in contributed view",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nI am creating an extension with a custom view. I am trying to make sure that certain commands are only enabled when there are two items selected and other commands when only a single item is selected.\r\n\r\nI have tried using `\"enablement\": \"listDoubleSelection\"` and `\"enablement\": \"!listMultiSelection\"` in the command declaration for these cases. However, it looks like the values `listMultiSelection` and `listDoubleSelection` are always false. \r\n\r\nPerhaps I'm doing something wrong, but I'm pretty sure I'm following the docs.\r\n\r\nI'm attaching a zip of a sample project that illustrates the problem I'm having.\r\n\r\n[multi-select-bug.zip](https://github.com/microsoft/vscode/files/4759712/multi-select-bug.zip)\r\n\r\nTo reproduce:\r\n\r\n1. unzip the workspace above\r\n2. open workspace in vscode\r\n3. run the extension\r\n4. open the view with the icon like this: <img width=\"46\" alt=\"package_json_\u2014_multi-select-bug\" src=\"https://user-images.githubusercontent.com/363559/84289932-eee74780-aaf7-11ea-8ff2-a4d478161beb.png\">\r\n5. select one or multiple items in the list view and right click. Notice that the enablement of the commands does not follow what is in the package.json file.\r\n\r\nVS Code version: Code 1.45.1 (5763d909d5f12fe19f215cbfdd29a91c0fa9208a, 2020-05-14T08:33:47.663Z)\r\nOS version: Darwin x64 19.5.0\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i9-9980HK CPU @ 2.40GHz (16 x 2400)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>metal: disabled_off<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off_ok<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|2, 3, 3|\r\n|Memory (System)|64.00GB (34.46GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (22)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-markdownlint|Dav|0.36.0\r\nvscode-eslint|dba|2.1.5\r\ngitlens|eam|10.2.1\r\ntsl-problem-matcher|eam|0.2.0\r\nvscode-html-css|ecm|0.2.3\r\nprettier-vscode|esb|5.0.0\r\nvscode-diff|fab|1.4.0\r\nwolfram-language|fli|0.1.0\r\nvscode-codeql|Git|1.2.2\r\nvscode-pull-request-github|Git|0.16.0\r\nvscode-test-explorer|hbe|2.19.1\r\nmysql-syntax|jak|1.3.1\r\nvscode-edit-csv|jan|0.2.9\r\ncode-beautifier|mic|2.3.3\r\nvscode-docker|ms-|1.2.1\r\nazure-account|ms-|0.8.11\r\nvscode-typescript-tslint-plugin|ms-|1.2.3\r\nvsliveshare|ms-|1.0.2274\r\ndebugger-for-chrome|msj|4.12.8\r\nvscode-react-native|msj|0.16.0\r\nvscode-zipexplorer|sle|0.3.1\r\nhtml-css-class-completion|Zig|1.19.0\r\n\r\n(1 theme extensions excluded)\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-06-10 15:54:58",
        "state": "open",
        "number": 99767
    },
    {
        "title": "Back off extension auto update when failed",
        "description": "Back off extension auto update when failed\r\n",
        "createdAt": "2020-06-10 08:15:25",
        "state": "open",
        "number": 99734
    },
    {
        "title": "Add hover/drag sash color",
        "description": "Here is an example from slack, when you try to grab a resize bar\r\n![sash](https://user-images.githubusercontent.com/641685/84197673-52c62d80-aa70-11ea-8e39-70e146bdd9c7.gif)\r\n",
        "createdAt": "2020-06-09 20:43:56",
        "state": "open",
        "number": 99709
    },
    {
        "title": "Web: Support to save as admin",
        "description": "Related for remote: microsoft/vscode-remote-release#1688",
        "createdAt": "2020-06-08 12:25:59",
        "state": "open",
        "number": 99611
    },
    {
        "title": "Support code --status in web",
        "description": "We should think about support for `code --status` in web integrated terminal.",
        "createdAt": "2020-06-08 12:17:01",
        "state": "open",
        "number": 99608
    },
    {
        "title": "Rendering problem with RTL text which contains emojis",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.45.1\r\n- OS Version: 10 64\r\n\r\nI have a json file in my project, emojies is ok in note pad ++ but in vs code is not good UI, \r\nphoto:\r\n[\r\n![jsonUI](https://user-images.githubusercontent.com/25050762/83992919-24106000-a967-11ea-8639-e98181863b9c.png)\r\n](url)\r\n\r\n**json:**\r\n```\r\n{\r\n \"invoice_vip\":[\r\n    [\"\ud83d\udda8\ufe0f \u0686\u0627\u067e \u0641\u0627\u06a9\u062a\u0648\u0631\",\"\ud83c\udfa8 \u062a\u0646\u0638\u06cc\u0645\u0627\u062a\"]\r\n  ]\r\n}\r\n```\r\n",
        "createdAt": "2020-06-08 04:37:30",
        "state": "open",
        "number": 99589
    },
    {
        "title": " A quick way to blame extensions",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI hope I can enable or disable half of extensions at a time, which is especially convenient when troubleshooting extension problems. ",
        "createdAt": "2020-06-07 05:08:14",
        "state": "open",
        "number": 99552
    },
    {
        "title": "Can't go back after showing same keybindings",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nAt the moment, when I open the keyboard shortcuts, right-click a shortcut and click \"Show Same Keybindings\", there seems to be no way to go back to the previous view. This forces me to retype (or re-paste) the key search query into the search box. I've tried Backspace, Ctrl+Z, Alt+Left and looking for a back button. I hope I'm not missing some stupid feature.\r\n\r\nSteps to reproduce:\r\n\r\n1. Open the Keyboard Shortcuts settings page, either via\r\n   - pressing Ctrl+K and then D, or\r\n   - pressing Ctrl+Shift+P and then searching for \"Preferences: Open Keyboard Shortcuts\".\r\n2. Search for any shortcut (or don't).\r\n3. Right click on any shortcut entry.\r\n4. Click \"Show Same Keybindings\".\r\n![image](https://user-images.githubusercontent.com/29358863/83951064-f7552f00-a826-11ea-8272-166a0de239bc.png)\r\n\r\n5. Observe how the search query changed to the key combination (or single key).\r\n![image](https://user-images.githubusercontent.com/29358863/83951073-0b009580-a827-11ea-9426-ae38af3d99e5.png)\r\n\r\n6. Realise that you can't go back to the previous view without entering the search field and re-typing your search query.\r\n\r\nPlease add a shortcut or button to go back if there isn't one already. Thank you.",
        "createdAt": "2020-06-06 18:23:37",
        "state": "open",
        "number": 99530
    },
    {
        "title": "Option to clear debug console suggestions",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nI'd like there to be an option to clear debug console suggestions. For me, clearing the debug console history does not clear the debug console suggestions. I have tried setting `debug.console.historySuggestions` to `false` in `settings.json`, but it's not quite what I'm looking for: I still want to have suggestions in the debug console, I just want to clear all of the existing ones. For me, I can't make this history suggestions go away, either by reloading the window, or by closing and reopening VSCode entirely.\r\n\r\nI'm using a Windows 10 64-bit computer. My VSCode \"about\" details are as follows:\r\n\r\nVersion: 1.45.1 (user setup)\r\nCommit: 5763d909d5f12fe19f215cbfdd29a91c0fa9208a\r\nDate: 2020-05-14T08:27:35.169Z\r\nElectron: 7.2.4\r\nChrome: 78.0.3904.130\r\nNode.js: 12.8.1\r\nV8: 7.8.279.23-electron.0\r\nOS: Windows_NT x64 10.0.18363",
        "createdAt": "2020-06-05 23:22:05",
        "state": "open",
        "number": 99494
    },
    {
        "title": "Add restore context menu action for file entries in synced data views",
        "description": "Extracted from https://github.com/microsoft/vscode/issues/98820\r\n\r\nAdd restore context menu action for file entries in synced data views.",
        "createdAt": "2020-06-04 20:00:08",
        "state": "open",
        "number": 99401
    },
    {
        "title": "Notebooks output contains unsupported/unknown types",
        "description": "![recording (14)](https://user-images.githubusercontent.com/22350/83756746-ca125080-a66f-11ea-9362-70b828a70e77.gif)\r\n",
        "createdAt": "2020-06-04 12:29:27",
        "state": "open",
        "number": 99365
    },
    {
        "title": "Notebook: undo to saved state does not clear dirty marker",
        "description": "In text files if you undo often enough the document eventually turns saved.",
        "createdAt": "2020-06-04 11:52:16",
        "state": "open",
        "number": 99359
    },
    {
        "title": "Clarify docs on CompletionList.isIncomplete to make it very clear the behaviour when using backspace",
        "description": "I've raised a [request for the LSP spec to be explicit](https://github.com/microsoft/language-server-protocol/issues/954) about this behaviour, but since it's possible to use the VS Code APIs without LSP I believe it should be concrete here too.\r\n\r\nThere is a flag on `CompletionList` called `isIncomplete` which informs VS Code that it needs to re-query the server as the user continues to type when the suggestion list is visible (rather than just filtering client-side).\r\n\r\nWhat is not clear from the spec, is the behaviour of when `isIncomplete=false` in the case where the user presses `<backspace>`.\r\n\r\nFor example, let's say my completion list simple has:\r\n\r\n- one\r\n- two\r\n- three\r\n\r\nIf the user invokes completion where `^` is here:\r\n\r\n```dart\r\nprint(on^\r\n```\r\n\r\nIf the server is using `IsIncomplete=false` (eg. it's providing the \"full list\"), should it include `two` and `three` here, on the assumption that the client will *not* call the server again even if the user hits backspace, or should it assume that the client-side filtering is only for typing forwards?\r\n\r\nI did some testing of this and found:\r\n\r\n- If you type a single character to trigger completion, then hit `backspace`, the completion widget closes\r\n- If you type several characters to trigger completion, then backspace - the completion widget does not go back to the server if the original completion request was made before you'd typed the character you deleted (eg. it can be assumed the server had already included all relevant completions)\r\n- If you invoke backspace with an existing prefix and then backspace (such that you now have a shorter prefix than was sent to the server), then it *does* re-call the server\r\n\r\nTherefore, I've concluded that it's always safe for the server to filter based on the current prefix, and can assume if the user backspaces back past the prefix that existed when the server was called, VS Code will re-request the items. However, the spec is not at all detailed on this - it simply says:\r\n\r\n- This list is not complete. Further typing should result in recomputing this list.\r\n\r\nIf this assumption can be clarified/guaranteed, then we can probably significantly improve the performance of completion in many situations (for example when using LiveShare, the whole list ends up being sent over the web, and we could drop around 25/26ths of the data if we could filter on the initial character that triggered completion).",
        "createdAt": "2020-06-04 10:30:42",
        "state": "open",
        "number": 99355
    },
    {
        "title": "Dropdown from view item menu",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIn our extension, we have custom views with various nodes in the tree:\r\n![image](https://user-images.githubusercontent.com/58596139/83736195-91fc1500-a651-11ea-9a8f-3009881bc182.png)\r\n\r\nYou can see there are 4 commands on the right-hand side of the node. We would like to add a dropdown to hold those items.\r\n\r\nI know it's possible to add commands to the context menu, but you have to right-click to see it. We are worried that new users will not be aware they can right-click on nodes for more options. If we could add a dropdown to the toolbar, it would be more obvious that other commands are available.\r\n\r\nFor example, in the Source Control view, you have an icon with 3 dots, that opens a dropdown:\r\n![image](https://user-images.githubusercontent.com/58596139/83736125-81e43580-a651-11ea-8311-63c4738076af.png)\r\n\r\nIt would be great if we could either add to a standard dropdown, or use a command like `node.showDropdown` when someone clicks on the 3 dots icon.",
        "createdAt": "2020-06-04 08:53:35",
        "state": "open",
        "number": 99345
    },
    {
        "title": "Add revert action in diff preview when opened from sync data view",
        "description": "Extracted from https://github.com/microsoft/vscode/issues/98820\r\n\r\nAdd revert action in diff preview when opened from sync data view\r\n\r\n",
        "createdAt": "2020-06-04 08:08:47",
        "state": "open",
        "number": 99340
    },
    {
        "title": "Allow for \"random access\" undos",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\nRefs: https://github.com/microsoft/vscode/issues/99159\r\n\r\n> The undo fails regardless of the change made in the other file. I wonder if VS Code could be smart enough to see that the range effected by the edit/undo wasn't changed, and be able to handle the rename (even line-level detection would probably work)",
        "createdAt": "2020-06-03 15:51:33",
        "state": "open",
        "number": 99295
    },
    {
        "title": "Remove all unused code",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nTesting https://github.com/microsoft/vscode/issues/98997.\r\n\r\nEarly observations  for **Remove All Unused Code**:\r\n- unused variables and members are removed\r\n- code after a `return` statement is not\r\n- unused parameters of a function declaration are removed but I'd like more fine-grained control here. For example, in `src/vs/code/electron-main/app.ts` we use parameter declarations for documentation purposes, and I also do this sometimes in my code. I would not want to lose those.\r\n\r\nVS Code version: Code - Insiders 1.46.0-insider (595d2b9b916d063aadfc2c1a8c8f6df5b45572a8, 2020-06-03T05:38:33.098Z)\r\nOS version: Darwin x64 18.7.0\r\nRemote OS version: Linux x64 5.3.0-1020-azure\r\nRemote OS version: Linux x64 5.3.0-1020-azure\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-06-03 15:17:40",
        "state": "open",
        "number": 99287
    },
    {
        "title": "Codicons are not supported in the view + view container icons in package.json",
        "description": "Testing #98996\r\n\r\nI think we should support codicons in the view icons, just like commands as it will make it easier for extension authors to provide icons.",
        "createdAt": "2020-06-03 15:04:37",
        "state": "open",
        "number": 99284
    },
    {
        "title": "Tasks: Pick folder for user tasks in multi-root-workspaces",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nUser-Tasks in Multi-Root-Workspaces should ask in which workspace Folder they should be executed. Currently every User-Task will only be executed in the first workspaceFolder.",
        "createdAt": "2020-06-03 14:38:02",
        "state": "open",
        "number": 99276
    },
    {
        "title": "Notebook: Split cell not working when at end of content",
        "description": "Testing #98985\r\nVersion: 1.46.0-insider\r\nCommit: 595d2b9b916d063aadfc2c1a8c8f6df5b45572a8\r\nDate: 2020-06-03T05:33:25.873Z\r\nElectron: 7.3.1\r\nChrome: 78.0.3904.130\r\nNode.js: 12.8.1\r\nV8: 7.8.279.23-electron.0\r\nOS: Linux x64 5.3.0-51-generic\r\n\r\nSplit cell does not seem to work at times (I've seen it working, not sure what exactly makes the difference)\r\n\r\n- have a Github issues notebook:\r\n```\r\n[{\"kind\":2,\"language\":\"github-issues\",\"value\":\"$current=milestone:\\\"May 2020\\\"\\n$repo=repo:microsoft/vscode\\n\",\"editable\":true},{\"kind\":2,\"language\":\"github-issues\",\"value\":\"$repo $current is:issue label:breadcrumbs\",\"editable\":true},{\"kind\":2,\"language\":\"github-issues\",\"value\":\"Nor all there\",\"editable\":true}]\r\n```\r\n- set cursor in first cell, split, nothing happend\r\n- same for other cells\r\n\r\n",
        "createdAt": "2020-06-03 14:35:58",
        "state": "open",
        "number": 99275
    },
    {
        "title": "Show the default editor in the picker",
        "description": "Testing #99003\r\n\r\n<img width=\"626\" alt=\"image\" src=\"https://user-images.githubusercontent.com/10746682/83642030-98858080-a5ae-11ea-8635-778e4e4ce04d.png\">\r\n\r\nI do not know what is the default configured editor from the picker\r\n\r\n",
        "createdAt": "2020-06-03 13:26:58",
        "state": "open",
        "number": 99262
    },
    {
        "title": "scrollPredominantAxis not aggressive enough",
        "description": "1. Use an apple magic mouse\r\n2. Scroll vertically in the editor\r\n3. Ocasionally there is an unwanted horizontal drift\r\n\r\nI noticed the `scrollPredominantAxis` setting which is turned on by default, but it does not seem to have any effect for me and my mouse.\r\nAn alternative would be to just turn off horizontal scrolling for me, but I can not do this on the OS level and neither on the VS Code level.\r\n\r\nI have to use an apple magic mouse becuase other mouses stutter when connected via bluetooth.",
        "createdAt": "2020-06-03 10:51:41",
        "state": "open",
        "number": 99237
    },
    {
        "title": "Partial cross-file undo if a file is changed in the meantime",
        "description": "Testing #98987\r\n\r\nRepro:\r\n1. Rename symbol to update 3+ files\r\n2. Edit one file on disk\r\n3. Undo on another file\r\n\r\n:bug: => cross-file undo does not work at all. Could we fix a majority of the files that don't have this issue?",
        "createdAt": "2020-06-02 17:26:13",
        "state": "open",
        "number": 99159
    },
    {
        "title": "Problems view do not show markers when Show Active File filter is on",
        "description": "Testing #98821\r\n\r\n- Enable the filter `Show Active File Only` in Problems view using the filter dropdown in filter input box\r\n- Open any notebook with problems\r\n\r\n\ud83d\udc1b Problems are not shown\r\n\r\n<img width=\"1346\" alt=\"image\" src=\"https://user-images.githubusercontent.com/10746682/83549389-8e5b7780-a505-11ea-9682-894c69534932.png\">\r\n\r\n",
        "createdAt": "2020-06-02 17:16:31",
        "state": "open",
        "number": 99155
    },
    {
        "title": "Opening a file causes it to change",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\nRefs: https://github.com/microsoft/vscode/issues/98989\r\n\r\nSteps to Reproduce:\r\n\r\n1. Set `\"editor.unusualLineTerminators\": \"auto\"` and `file.autoSave` on in some way\r\n2. Open an unusual file with unusual terminators\r\n3. They're automatically removed when the file is open\r\n\r\nIt feels surprising that simply opening a file would cause a side-effect. `files.trimTrailingWhitespace` is a similar mechanism; in that case the trimming is only run if the file is modified.\r\n",
        "createdAt": "2020-06-02 17:12:08",
        "state": "open",
        "number": 99154
    },
    {
        "title": "Redundant entries in Find all references view",
        "description": "Testing #98821\r\n\r\n- Open My Work notebook\r\n- Find all references for `$vscode`\r\n- Rename `$vscode` to `$vscoderepo`\r\n- clear results in references view\r\n- click on refresh action on `$vscode` entry in references view\r\n- clear results again\r\n\r\n\ud83d\udc1b Two entries are shown now which are pointing to same\r\n\r\n<img width=\"455\" alt=\"image\" src=\"https://user-images.githubusercontent.com/10746682/83549015-e8a80880-a504-11ea-9203-0c12b1e29365.png\">\r\n\r\n\r\n\r\n",
        "createdAt": "2020-06-02 17:12:00",
        "state": "open",
        "number": 99153
    },
    {
        "title": "Find all references is not highlighting the match",
        "description": "Testing #98821\r\n\r\nSorry that I did not look for dups, if it is please close it.\r\n\r\n<img width=\"1049\" alt=\"image\" src=\"https://user-images.githubusercontent.com/10746682/83547731-f0ff4400-a502-11ea-8295-4a70faa07508.png\">\r\n\r\n\r\n",
        "createdAt": "2020-06-02 16:58:08",
        "state": "open",
        "number": 99147
    },
    {
        "title": "Step in Targets visible in unrelated file?",
        "description": "Testing #97801\r\n\r\nNot sure if this is an issue with the Mock Debug Adapter or Step in Targets itself, but if I open say `settings.json` while I am debugging, I get a context menu that has step in targets (and run to cursor, add inline breakpoint). These options don't make any sense in my current context.",
        "createdAt": "2020-06-02 16:55:36",
        "state": "open",
        "number": 99144
    },
    {
        "title": "Settings sync - Diff view should include machine names in the tab name",
        "description": "Testing #98962\r\n\r\nWe should include the machine name in the tab name when diffing settings sync information.",
        "createdAt": "2020-06-02 13:39:15",
        "state": "open",
        "number": 99092
    },
    {
        "title": "Add buttons for filtering and sorting when searching for extensions",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\nTried searching for existing issues but couldn't find any, so my apologies if this is a duplicate.\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\n![image](https://user-images.githubusercontent.com/12476526/83343945-b359ab80-a2b5-11ea-81b5-1f4c9b33d041.png)\r\n\r\nUsing the above image as reference:\r\n\r\nI think that it would be a very useful to have dedicated buttons for applying filters, and for applying different sorting to the Extension Marketplace search view. I believe it would be a good addition for a few reasons:\r\n\r\n1. Give these features more discoverable to new (and old) users.\r\n2. Much quicker and easier access than clicking the \"3 dot\" button and then visually searching through the long list of very visually similar looking options.\r\n3. This would be a good place to also add a \"clear filters/sorting\" button.\r\n\r\nThanks! \ud83d\ude0a \r\n\r\n",
        "createdAt": "2020-05-31 03:44:25",
        "state": "open",
        "number": 98883
    },
    {
        "title": "Problems view: Sort by message ",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nWorking with the problems tab in the panel, issues are grouped by file. Although this is useful, certain dev workflows require dealing with one problem type (EDIT: by problem type here we mean the problem message) at a time and therefore grouping problems by type would be useful. Current view for comparison\r\n\r\n![Screenshot 2020-05-29 at 18 37 15](https://user-images.githubusercontent.com/703848/83278648-97360b80-a1dc-11ea-8027-dc1c581f740e.png)\r\n\r\nNote that this feature had been requested before https://github.com/microsoft/vscode/issues/41114 and while the moderator has closed it with the argument that filtering functionality can meet this requirement, I am reopening the discussion here, more than 2 years down the line, for reconsideration. Where filtering alone fails is allowing for wider analysis of the number of occurrences of different problems across the solution i.e. is it a widespread problem with say 10-20 occurrences or is it just a single instance. This is essential when performing large refactoring or code upgrades where we have to deal with tens or even hundreds of problems at a time. \r\n\r\nAdditionally in support of this I am attaching a screenshot of how Visual Studio problems panel displays which many of us coming from the Enterprise are used to with writing C#. Currently all those capabilities are present in VS Code except for the default grouping of problems we get.\r\n\r\n![image](https://user-images.githubusercontent.com/703848/83277039-2b52a380-a1da-11ea-8111-9cd47626b716.png)\r\n",
        "createdAt": "2020-05-29 15:44:30",
        "state": "open",
        "number": 98819
    },
    {
        "title": "Plotly notification doesn't appear in notebook",
        "description": "- Have an output with a plotly graph\r\n- Click the screenshot button\r\n- It should show a notification popup in the top left corner, but the plotly library adds this to the document body, and it will be covered up by a cell in our notebook",
        "createdAt": "2020-05-29 00:30:38",
        "state": "open",
        "number": 98773
    },
    {
        "title": "Stable/Predictable  Lifecycle hooks for extensions (NOT activates/deactivates)",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n## This is a feature request for LifeCycle hooks API for extensions\r\nBased on my research this has been requested / talked about in the past, but to no avail or concrete updates yet. Here are some conversations around this topic:\r\n- [Visual Studio Code: Installation hook for snippets extension](https://stackoverflow.com/questions/42812416/visual-studio-code-installation-hook-for-snippets-extension)\r\n- [Extension deactivate() doesn't call #47881](https://github.com/Microsoft/vscode/issues/47881) where deactivate does not behave as one might expect\r\n- [Provide access to VS Code API in extension uninstall lifecycle hook #45474](https://github.com/microsoft/vscode/issues/45474)\r\n- There are not many questions regarding this in [stack overflow](https://stackoverflow.com/search?q=%5Bvscode-extensions%5D+lifecycle+hook) too\r\n- I am not sure if [this](https://github.com/codota/tabnine-vscode/pull/97) is related but will just add it in here\r\n\r\n<!-- Describe the feature you'd like. -->\r\n## Feature requested\r\nLifecycle hooks similar to those from Vue JS / React JS, where the extensions would be able to define functions to run for the lifecycle events.\r\nAlthough hooks like those from vue would be great, those from chrome extensions seem usable too albeit not as extensive or fine grained\r\n- <https://stackoverflow.com/a/40614389/13137262>\r\n- <https://developer.chrome.com/apps/app_lifecycle>\r\n- <https://developer.chrome.com/extensions/runtime>\r\n\r\nHere are some suggested hooks if this feature becomes a thing:\r\n- onInstall\r\n- onUpdate\r\n- onUninstall\r\n- onEnable\r\n- onDisable\r\n\r\n## Purpose of these hooks and how they can be used\r\nThese hooks can be used for a wide variety of stuff, here are just some basic examples\r\n- running 1 time setup processes after installation\r\n- run configuration change or what not when the user updates the extension\r\n- telemetry and usage reporting\r\n- clean ups during uninstallation\r\n- ... and many many more\r\n\r\n## How is this different from activation / deactivation methods\r\n- Because activation runs every single time you use/activate the extension using any one of the activation events, which means that if you place any setup code here, they will be ran repeatedly over and over again when vs code relaunches. Especially true when u are using the \"*\" activation event.\r\n- Thus this is not really similar to that of a onInstall hook.\r\n- For example, if I want to run a setup function that only runs post installation to update user settings, I can with code in activation method, but it will be ran repeatedly and not only once.\r\n- This means reduced efficiency and longer startup/load times\r\n    - I suspect this might be why some extensions like eslint are slow when vs code first opens / during the first save\r\n    - They might probably be running their setup codes on activation every single time before registering and executing the commands. Or they can only setup event listeners and act upon those events on activation which makes them slow.\r\n- I am not suggesting for activation event to be dropped in favour of lifecycle hooks, but having more fine grained extension lifecycle hooks can make for a better vs code and extensions thanks to more efficient operations.\r\n\r\n\r\n## Example\r\n- This [file](https://github.com/Enkel-Digital/relative-goto/blob/1da3dd4332ab6de296a37d12e1cc2fe1684f5a64/src/extension.ts#L18\r\n) calls this [module](https://github.com/Enkel-Digital/relative-goto/blob/1da3dd4332ab6de296a37d12e1cc2fe1684f5a64/src/setup.ts) everytime before registering the commands, which causes \r\n    1. a visible lag time before the command can be executed\r\n    2. inefficiency\r\n    3. potential bugs where you only want it to be ran once\r\n- For example, right now for a simple extension with my current setup function, takes about 3-6 seconds to activate and allow first run of command, and below is my system specs\r\n    - cpu: i5-8250u\r\n    - ram: 16GB \r\n    - disk: nvme SSD (not sure about exact specs but basically should be super fast)\r\n\r\n\r\n## Side note\r\n- When I was first starting out, I was confused and thought that activation is only for first install which makes more sense then actiavating everytime before u use it, from a beginner point of view\r\n- We should update docs to make the definition of activation clearer, as it is super easy to confuse it as a setup / onInstall hook since the generated template with ```yo code``` says that \"These code will only be executed once when your extension is activated\" which can easily be interpreted as installation hook if activation is not clearly defined.\r\n- Right now, I am not sure how to proceed without directly digging into the vscode Core to see if this is possible, but would love it if someone familiar with this part of the architecture can provide some insights for this.\r\n- If I'm missing out something do let me know! Pretty new to this, have only been working with vs code extensions for 3 days \ud83d\ude05",
        "createdAt": "2020-05-28 13:29:56",
        "state": "open",
        "number": 98732
    },
    {
        "title": "[json] JSONSchema draft 2019-09 support",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\nJSONSchema draft-07 is currently supported but `http://json-schema.org/draft/2019-09/schema#` does not currently load, or at least no completion or validation functionality is able to be provided from it.\r\n",
        "createdAt": "2020-05-28 12:30:28",
        "state": "open",
        "number": 98724
    },
    {
        "title": "Add option `editor.scrollbar.vertical/horizontal` as official",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIs there any chance that the setting of `editor.scrollbar.vertical` and `editor.scrollbar.horizontal` will be official?\r\nI currently have the \"Unknown configuration setting\" notification \ud83d\ude2c\r\nA lot of people using this option and it would be good to add it as official\r\n\r\n![obraz](https://user-images.githubusercontent.com/30685349/82982115-be7ab600-9fed-11ea-8f61-e5d1ac3028a3.png)\r\n\r\n\r\n",
        "createdAt": "2020-05-27 05:44:21",
        "state": "open",
        "number": 98632
    },
    {
        "title": "Bulb menu should open immediately after clicking on the info icon in the problems view",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nWhen working through large no.s of lints in the 'problems' pane I use the quick fix bulb to rapidly fix many trivial errors.\r\n\r\nThis process is slowed down by how the 'quick fix bulb' appears and then disappears.\r\nThe process I used to apply these fixes is:\r\nOpen the 'problems pane'.\r\nclick on the line\r\nwait for the bulb to appear\r\nclick the bulb\r\nselect the action.\r\n\r\nThe problem is that the bulb will appear and then disappear before re-appearing.\r\nIt also changes color from white to yellow (which I'm sure indicates something but I've not worked it out as yet).\r\nMy preferred operation would be:\r\nclick line\r\nclick 'info' icon.\r\nThe code then looks for quick fixes and displays the menu.\r\n\r\nThis would eliminate the slight delay in having to wait for the bulb to appear.\r\n\r\n![May-26-2020 14-38-21](https://user-images.githubusercontent.com/1078012/82907572-af98f280-9f5e-11ea-9fe5-9b038493f965.gif)",
        "createdAt": "2020-05-26 23:14:47",
        "state": "open",
        "number": 98618
    },
    {
        "title": "Timeline doesn't show file saves changes",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.45.0\r\n- OS Version: Fedora 32\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open a git workspace\r\n2. Create a new file (without committing it)\r\n3. Write some content in the file and save it\r\n4. Edit the file (delete some of the content or add other content) and save it again\r\n5. Open the Timeline view and instead of seeing the file history you will just see `Uncommitted Changes`\r\n6. Open the *More Actions ...* menu\r\n7. Only `Include: Git History` is available for selection\r\n \r\nI don't know if this is the normal behavior, but because in the changelog it was documented that the timeline works also with `file saves` I'd expected it works and show changes for each saves.\r\n\r\n\r\n> The Timeline view is now out of preview and enabled by default. This is a unified view for visualizing time-series events (for example, Git commits, file saves, test runs, etc.) for a file.\r\nQuote: https://code.visualstudio.com/updates/v1_44#_timeline-view\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-05-26 18:04:08",
        "state": "open",
        "number": 98601
    },
    {
        "title": "Add visual indication for integrated terminal bell",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nImplement some or all settings for making the (integrated) terminal bell:\r\n- focus the terminal\r\n- highlight the terminal\r\n- highlight the corresponding VS Code instance in the taskbar\r\n\r\n### Background and motivation\r\nSome terminal emulators (e.g. mintty) support setting the terminal bell to give a visual indication either by flashing and/or highlighting the application window. This is a really handy feature, because hearing a terminal bell without knowing where it comes from can be frustrating. From an accessibility perspective this feature is not only handy, but actually essential.",
        "createdAt": "2020-05-25 08:25:46",
        "state": "open",
        "number": 98502
    },
    {
        "title": "Add waitForExit API to TaskExecution",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nCurrently there is no trivial way to wait for a TaskExecution to be completed. Before 1.44, there was a way to do this using `onDidEndTaskProcess`, however as of 1.44 this is broken, and a still open bug report (https://github.com/microsoft/vscode/issues/96643). Instead of needing to do workarounds with callbacks and condition variables to wait for a task to complete, a much simpler solution would be to add a `waitForExit(cancel: CancellationToken): Thenable<number>` api directly to `TaskExecution`. This would allow an easy way to wait for a process to exit, without needing to go through callback nightmares, especially when those callbacks break. ",
        "createdAt": "2020-05-25 02:02:48",
        "state": "open",
        "number": 98483
    },
    {
        "title": "Allow to modify hardcoded quick open keybinding shortcuts",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nWhen I step through the the VSCode Quick Open menu, I want it not to automatically switch between editors until I've selected the file I'm interested in (and hit enter). But with a recent (April?) change to VSCode, it automatically shows me each file as I step through the menu.  Furthermore, it doesn't show the currently selected file.  Instead, it shows each file as it becomes UNselected.\r\n\r\n---\r\n\r\nHere's my motivation, for those who are interested:\r\n\r\nOne of the (common?) ways to use VSCode's \"Quick Open\" menu is to use it like the \"last channel\" button on a TV remote. I want to open one editor, then open another, and then quickly toggle back and forth between the two. Since they are my current and most-recent editors, they should appear at the top of the Quick Open Menu, so toggling between them is fast.\r\n\r\nThis used to work just fine, but a recent (April?) change to the Quick Open menu seems to have broken this functionality. Now, it automatically activates the editor for every file that I step through in the menu, changing my \"most recent\" ordering. It can no longer be used like a \"last channel\" button.\r\n\r\nHere's a short video demonstrating the problem. Here, I'm starting with `one.txt`. I want to select `five.txt` via the Quick Open menu, and then quickly toggle between the two. But it opens all the other files along the way!  Instead of toggling between `one.txt`  and `five.txt`, it toggles between `four.txt` and `five.txt`.\r\n\r\n(In fact, if you watch closely, the behavior is even weirder: It doesn't show me the currently selected file -- it opens the editor for each file as it becomes UN-selected. Maybe this is just a bug?)\r\n\r\n[![quick menu behavior animation][1]][1]\r\n\r\n\r\nFWIW, here are the the relevant parts of my `keybindings.json`, to make it clear which commands I'm referring to:\r\n\r\n```javascript\r\n// keybindings.json\r\n[\r\n  // Trigger quick open menu and pre-select the previously used editor.\r\n  // (With either cmd+left/cmd+right)\r\n  {\r\n    \"key\": \"cmd+left\",\r\n    \"command\": \"workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup\",\r\n    \"when\": \"!inEditorsPicker\"\r\n  },\r\n  {\r\n    \"key\": \"cmd+right\",\r\n    \"command\": \"workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup\",\r\n    \"when\": \"!inEditorsPicker\"\r\n  },\r\n\r\n  // Once the menu is open, scan through the choices.\r\n  // (Forward with cmd+right, backward with cmd+left)\r\n  {\r\n    \"key\": \"cmd+left\",\r\n    \"command\": \"workbench.action.quickOpenNavigatePreviousInEditorPicker\",\r\n    \"when\": \"inEditorsPicker && inQuickOpen\"\r\n  },\r\n  {\r\n    \"key\": \"cmd+right\",\r\n    \"command\": \"workbench.action.quickOpenNavigateNextInEditorPicker\",\r\n    \"when\": \"inEditorsPicker && inQuickOpen\"\r\n  }\r\n]\r\n```\r\n\r\n  [1]: https://i.stack.imgur.com/hkDk4.gif\r\n\r\nVS Code version: Code - Insiders 1.46.0-insider (2591ede95a52400d5d22989b16706f9b8b4831da, 2020-05-22T21:12:04.233Z)\r\nOS version: Darwin x64 19.4.0\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz (16 x 2300)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>metal: disabled_off<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>opengl: enabled_on<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|2, 2, 2|\r\n|Memory (System)|32.00GB (2.19GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (21)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-bazel|Baz|0.3.0\r\nkill-ring|dvk|0.2.3\r\njson-tools|eri|1.0.2\r\nworkspacesort|ici|1.5.9\r\nerror-gutters|Igo|1.0.1\r\nrestructuredtext|lex|128.0.0\r\nautoconf|mae|0.1.0\r\nvscode-docker|ms-|1.2.0\r\npython|ms-|2020.5.80290\r\nremote-containers|ms-|0.117.1\r\nremote-ssh|ms-|0.51.0\r\nremote-ssh-edit|ms-|0.51.0\r\nremote-wsl|ms-|0.44.2\r\nvscode-remote-extensionpack|ms-|0.20.0\r\ncmake-tools|ms-|1.4.0\r\ncpptools|ms-|0.28.1\r\nvscode-json-editor|nic|0.2.3\r\nvscode-singularity|onn|0.5.0\r\ntrailing-spaces|sha|0.3.1\r\ngitblame|wad|4.0.1\r\nvscode-proto3|zxh|0.4.2\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-05-24 21:25:38",
        "state": "open",
        "number": 98479
    },
    {
        "title": "[Integrated Terminal] Allow ctrl+backspace to delete entire word in cmd.exe",
        "description": "Within the integrated terminal using `cmd.exe`, I'd like to be able to use `ctrl+backspace` in order to delete an entire word, as can be done in the regular editor. `ctrl+backspace` *does* work inside powershell, but not when using `cmd.exe`.\r\n\r\nThis is currently possible within the new Windows Terminal as well as the \"old\" Windows 10 terminal,\r\nhttps://github.com/microsoft/terminal/issues/755\r\n",
        "createdAt": "2020-05-22 22:37:08",
        "state": "open",
        "number": 98404
    },
    {
        "title": "Publish to GitHub to Org Repo and not personal accout",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI would like the Publish to GitHub to work with Enterprise Org repo. Right now it defaults to my account and I do not see a way to change it.",
        "createdAt": "2020-05-21 19:09:16",
        "state": "open",
        "number": 98349
    },
    {
        "title": "Resize Pane actions for all panes",
        "description": "![image](https://user-images.githubusercontent.com/323878/82589405-bcce6f80-9b61-11ea-8ef0-cc5da1a6e8cf.png)\r\n\r\nI just discovered these, why are they just for the terminal and not for the panel in general? They would be useful anywhere.",
        "createdAt": "2020-05-21 17:51:48",
        "state": "open",
        "number": 98343
    },
    {
        "title": "Allow extensions to call cell commands with cell arguments",
        "description": "In the Python notebook we have commands to run\r\n* Current cell and all below\r\n* All cells above current cell\r\n\r\nThis is also available in Jupter.\r\nWe can add our own commands and icons for this, however there's no way to allow user to cancel the execution.\r\nToday when user runs a cell, they get an individual cancel against each cell, if they run all cells they get a cancel button on the top.\r\n\r\nIf we (python extension) added our own commands to run the cells, then we'd need our own cancellation icon and I think this would be inconsistent with the current VS Code UI.\r\n\r\nProviding at a minimum the VS Code commands such as `notebook.cell.executeAllBelow` & `notebook.cellexecuteAllAbove` and allowing extension authors to execute these would be awesome.\r\n\r\n@rebornix /cc",
        "createdAt": "2020-05-20 23:38:50",
        "state": "open",
        "number": 98282
    },
    {
        "title": "Support outline with notebooks",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nUsing a GH Issues notebook.\r\n\r\n1) Open a notebook\r\n1) Cmd+Shift+O => Quick outline appears\r\n3) outline view remains empty\r\n\r\n\r\nVS Code version: Code - Insiders 1.46.0-insider (da3bf754c3c0eabda1dc80ed9d627679ee560697, 2020-05-19T10:04:14.981Z)\r\nOS version: Darwin x64 18.7.0\r\nRemote OS version: Linux x64 5.3.0-1020-azure\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-05-19 13:48:16",
        "state": "open",
        "number": 98173
    },
    {
        "title": "Pinned tabs: show them in a secondary tab row above others",
        "description": "Refs: https://github.com/microsoft/vscode/issues/12622\r\n\r\nPinned tabs by default will show to the left of other tabs. An alternative presentation is to do what Visual Studio does and have a secondary tab row above the others:\r\n\r\n![image](https://user-images.githubusercontent.com/900690/82320671-f2dde900-99d3-11ea-8b20-95504d25a75b.png)\r\n\r\nvs what we do today:\r\n\r\n![pin-tabs](https://user-images.githubusercontent.com/900690/82320691-f7a29d00-99d3-11ea-8379-05ee03e804fe.gif)\r\n",
        "createdAt": "2020-05-19 11:24:21",
        "state": "open",
        "number": 98160
    },
    {
        "title": "do not count disabled extension in toolbar badge number",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n\r\nwe have several disabled extensions and it's quite annoying to see the badge in the toolbar counting them, too.\r\n\r\n![Screenshot 2020-05-19 at 10 28 11](https://user-images.githubusercontent.com/640536/82303676-92db4880-99bb-11ea-8280-f20b52cac743.png)\r\n\r\n",
        "createdAt": "2020-05-19 08:30:08",
        "state": "open",
        "number": 98148
    },
    {
        "title": "Allow extensions to fully control workspace symbol search (matching and highlights)",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\nFor qualified workspace-symbols queries like `llvm::Str`, our language server returns results like `{containerName: \"llvm\", name: \"StringRef\"}`.\r\n\r\nVSCode attempts to fuzzy-match the query (`llvm::Str`) against the name only (`StringRef`). Because this always fails, it doesn't display any results.\r\n\r\nIn #23509 it's suggested this is something extensions should deal with, but it's not clear what extensions can do.  The `provideWorkspaceSymbols` extension point must return [SymbolInformation](https://code.visualstudio.com/api/references/vscode-api#SymbolInformation) which are then filtered by `name`. Adding the qualifier to `name` means it is displayed twice - once in `name` and once in `containerName`.",
        "createdAt": "2020-05-19 00:13:06",
        "state": "open",
        "number": 98125
    },
    {
        "title": "Add a way to inspect memento contents",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nAs an extension developer I do a lot of work with mementos. It would be nice if there was some Developer command / etc. to inspect (and modify) the contents of the memento storage for each extension, `globalState` in particular, though `workspaceState` would also be nice.\r\n",
        "createdAt": "2020-05-18 20:15:16",
        "state": "open",
        "number": 98113
    },
    {
        "title": "API Proposal for multiline quick input",
        "description": "## Problem\r\n\r\nCurrently there's no way to take a multiline input via `showInputBox`. We need one because we use `showInputBox` to take the commit message (which can be multiline) in git extension. (#40295, #39969)\r\n\r\n## Solution APIs\r\n\r\n<details><summary>TLDR: allow passing a <code>multiline</code> property to the <code>showInputBox</code> options</summary><br>\r\n\r\n- **PROPOSED** API: Allow passing a `multiline` property to the `showInputBox` options.\r\n\r\n\t- Problem: Users can have `{ multiline: true, password: true }` which won't work because it's a textarea. More importantly in future there could be more options applicable to only multiline (eg an option mapping to textarea's `row` attribute) or to only singleline\r\n\r\n\t\t- **PROPOSED** Solution: It's okay just document it\r\n\t\t- Solution: It's okay just document it and throw an error if such case arises\r\n\t\t- Solution: make the type of options like ```{ multiline?: false, password?: boolean } | { multiline?: true, password?: false }```\r\n\r\n            - Problem: Terrible typescript inference and error message ergonomics if the options are not literal\r\n\t\t\t- Problem: It's typescript-only solutiton\r\n\r\n- API: Have another function called `showMultilineInputBox` that takes options only applicable to it (meaning doesn't take `password` property as option)\r\n\r\n\t- Problem: Feels a little overkill especially at the moment as we only one option (ie `password`) exclusive to singleline. It would have been okay if we had a bunch of options only exclusive to multiline eg `maxHeight`, `autoGrow`, `initialRows`, etc. or bunch of options exclusive to singleline</details>\r\n\r\n## Solution Behaviors\r\n\r\n<details><summary>TLDR: when <code>multiline</code> is set to true, <code>showInputBox</code> shows a multline quick input where the user hits shift+enter to insert a newline and works exactly like current quick input</summary><br>\r\n\r\n- **PROPOSED** Behavior: Allow users to insert a newline with shift+enter instead of submitting\r\n\t- Prior art: In chrome developer console enter executes the code but shift+enter inserts a newline. As in, usually afaik in scenarios where enter is already taken, shift+enter mimics the \"usual\" enter behavior. I guess it's also [popu](https://twitter.com/jaffathecake/status/1290306529539821568)[lar](https://twitter.com/rauschma/status/1095298670017343488) convention.\r\n- Behavior: Allow users to insert a newline with enter instead of submitting and have shift+enter submit it.\r\n\t- Problem: The behavior is not \"additive\" to singleline behavior as user would expect enter to submit it in multiline also as it does in singleline\r\n- Behavior: Allow users to insert a newline with enter instead of submitting and have a button to submit it. \r\n\t- Problem: Kinda kills the whole point of \"quick input\" you'll have to press tab to focus to button and hit enter, foreign to quick action ui and not additive to singleline behavior</details>\r\n\r\n## Implementation\r\n\r\nFor currently proposed api and behavior: #98042, [demo](https://github.com/microsoft/vscode/issues/40295#issuecomment-629862549)\r\n\r\ncc @jrieken @chrmarti @joaomoreno",
        "createdAt": "2020-05-18 15:46:41",
        "state": "open",
        "number": 98098
    },
    {
        "title": "Do not show Warnings for workspace recommended extensions if they are already installed even if they do no exist in marketplace",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nWe have some private / internal extensions that show `not found in marketplace` every time you open vscode, despite the extension actually being installed. It would be nice if it did not show a warning for this every time as long as the extension is installed. Even if that means explicitly labeling the extension in the recommendations like:\r\n\r\n```\r\n{\r\n    \"recommendations\": [\r\n        \"private:publisher.extension\",\r\n        \"dbaeumer.vscode-eslint\",\r\n        ...\r\n    ]\r\n}\r\n```",
        "createdAt": "2020-05-18 13:39:19",
        "state": "open",
        "number": 98088
    },
    {
        "title": "Provide an extension to find VS Code API references in the samples and popular extensions",
        "description": "",
        "createdAt": "2020-05-18 10:21:21",
        "state": "open",
        "number": 98077
    },
    {
        "title": "Add an option to save files atomically",
        "description": "(prior art: https://github.com/microsoft/vscode/issues/56361)\r\n\r\nAll our writes in VSCode today operate on the target file:\r\n* truncate the file to 0 bytes\r\n* write the contents into the file\r\n\r\nIf a crash happens after truncation, the file will remain empty. This should typically not result in dataloss because we have a backup to recover from. However, some external tools may act up when they get an event for the file being empty and in certain bad situations we still might end up with an empty file (e.g. when auto save is on where we do not backup).\r\n\r\nAn alternate strategy to ensure a file is consistent is to:\r\n* write the contents of the editor into a temporary file\r\n* move the file over the original one in a single atomic file operation (my understanding is that moves are atomic unless you move across disks)\r\n\r\nWhile this reduces the chance of corrupt files, the downside to this approach is that some external file watchers might be confused about a file constantly being replaced and not just written to.",
        "createdAt": "2020-05-18 07:41:37",
        "state": "open",
        "number": 98063
    },
    {
        "title": "Explore bringing GitLens \"Git Commands\" into built-in Git",
        "description": "### Git Commands\r\n> Provides guided (step-by-step) access to common Git commands and their flags\r\n> ![menu-git-commands](https://user-images.githubusercontent.com/641685/67904366-85a45c80-fb44-11e9-8b6f-29f04090e9f5.png)\r\n\r\nThis feature IMO *should* be moved into VS Code as there is duplication with VS Code commands and it provides a nice unified way of dealing with the growing list of Git commands, of which are hard to discover and deal with different options for. By moving this into VS Code directly, the UX of this feature could be improved as well, to provide a more seamless experience for navigating commands. For example, it would be great if this experience was shown immediately upon typing `git ` (with the space) in the Command Palette. Also many of the hoops and hacks that are needed to provide this experience should be largely eliminated as well (although many could be addressed through an expanded quick pick api).\r\n\r\nIncluding this feature would also eliminate many duplicate git commands between GitLens and VS Code. And also since this feature is on-demand, there is no perf overhead for VS Code to provide this.",
        "createdAt": "2020-05-18 01:35:14",
        "state": "open",
        "number": 98047
    },
    {
        "title": "Support Language, not just Editor Language in the keybindings \"when\" property.",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nSupport Language, not just Editor Language in keybindings.json.\r\n\r\nFor example:\r\n\r\n    {\r\n        \"key\": \"shift+alt+f\",\r\n        \"command\": \"extension.formatSelectionAsHtml\",\r\n        \"when\": \"editorTextFocus && editorHasSelection && langId == vue-html\"\r\n    },\r\n",
        "createdAt": "2020-05-17 05:18:45",
        "state": "open",
        "number": 98013
    },
    {
        "title": "[css][html] Option to disable MDN Reference popups only (without effecting other functionalities)",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nPretty please give us an option to disable ONLY and ONLY those 'MDN Reference' info boxes but NOT the hover boxes alltogether. \r\n\r\nDisabling Editor > Hover in Settings also disables other useful things like ColorPicker popup plugins depending on it etc. MDN info may be useful for some but most of the time it is just a HUGE annoyance for others. \r\n\r\nTaking this idea one step further MDN Reference may be removed alltogether and/or make it an optional download for whoever needs it. I know it is there to help but it is also a source of problem too eager to get in the way between you and your code.",
        "createdAt": "2020-05-16 11:02:41",
        "state": "open",
        "number": 97979
    },
    {
        "title": "[html] don't let '/' trigger a suggest in embedded JavaScript",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nCreate and save a new .html file.  Add a script tag, such as:\r\n\r\n```\r\n<script>\r\n    function main() {\r\n        /**/\r\n    }\r\n</script>\r\n```\r\n\r\nYou will notice that after typing the closing slash, IntelliSense pops up (leading to potential unintended insertions if Enter is pressed, for example).  If the identical JavaScript code is put into a .js file, the behavior does not occur.\r\n\r\nVS Code version: Code 1.45.1 (5763d909d5f12fe19f215cbfdd29a91c0fa9208a, 2020-05-14T08:27:35.169Z)\r\nOS version: Windows_NT x64 10.0.18363\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz (8 x 2808)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: enabled<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off_ok<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|15.86GB (8.52GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (2)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-eslint|dba|2.1.5\r\npython|ms-|2020.5.78807\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-05-15 21:22:58",
        "state": "open",
        "number": 97949
    },
    {
        "title": "Paths with spaces are not clickable in integrated terminal ",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.45.1\r\n- OS Version: MacOS 10.15.4\r\n\r\nSteps to Reproduce:\r\n\r\n1. create a vscode python project in a directory with a space that contains some code that produces a failing test or stacktrace\r\n2. hover over the paths in the stacktrace and notice that those with a space in a directory name are not rendered as links.  those without spaces are.\r\n\r\nI have created a tiny repo that reproduces the bug: https://github.com/nielsvaneck/vscode_space_path_bug\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: *Yes*\r\n",
        "createdAt": "2020-05-15 18:51:50",
        "state": "open",
        "number": 97941
    },
    {
        "title": "Split branches from tags in source control checkout window",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI am working on a project that has many tags, and whenever I want to switch branches by clicking the bottom-left source control button, I am presented with branches and tags combined in a single list. It would be useful to split them to reduce the clutter\r\n\r\nBottom-left source control button:\r\n![image](https://user-images.githubusercontent.com/7645621/82051512-47beee00-96ba-11ea-8c6b-772d95b788d8.png)\r\n\r\nList of branches + tags popup\r\n![image](https://user-images.githubusercontent.com/7645621/82051541-5c9b8180-96ba-11ea-8b06-50f5d8e429de.png)\r\n\r\nAn alternative would be to have origin/ branches on top, so that all branches are grouped, but I believe that moving tags away completely is a better solution",
        "createdAt": "2020-05-15 12:44:23",
        "state": "open",
        "number": 97909
    },
    {
        "title": "Hitting enter on results in the find all references tree should move focus to the corresponding line in the editor",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nCC: @isidorn\r\n\r\n1. With a keyboard, trigger a find all references in any project. Navigate to the tree view and hit enter on a result.\r\n\r\nAn editor opens showing the relevant part of the file. However, keyboard focus does not move from the tree view of results to the editor as one would expect.\r\n\r\nVS Code version: Code - Insiders 1.46.0-insider (288852d8c26d797974bfb8aed06e1bff9b809223, 2020-05-12T05:43:31.363Z)\r\nOS version: Windows_NT x64 10.0.18363\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz (8 x 1992)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: enabled<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off_ok<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|15.86GB (3.61GB free)|\r\n|Process Argv||\r\n|Screen Reader|yes|\r\n|VM|33%|\r\n</details><details><summary>Extensions (13)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nnotes|can|1.0.0\r\nvscode-markdownlint|Dav|0.35.1\r\nvscode-eslint|dba|2.1.5\r\nprettier-vscode|esb|4.7.0\r\nrest-client|hum|0.23.2\r\npython|ms-|2020.5.78807\r\nremote-wsl|ms-|0.44.2\r\ncpptools|ms-|0.28.0\r\nGo|ms-|0.14.2\r\nvsnotes|pat|0.7.1\r\nrust|rus|0.7.8\r\nmarkdown-preview-enhanced|shd|0.5.3\r\nvscode-webhint|web|1.5.5\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-05-14 14:11:48",
        "state": "open",
        "number": 97817
    },
    {
        "title": "Allow window.createTreeView to set minimumBodySize of the view's Pane",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nMy extension contributes a TreeView to the Explorer side bar. When my view is expanded it has a minimum height that results in blank lines if there aren't at least 5 entries in the tree.\r\n\r\nThis can be seen in the following screenshot from tree-view-sample\r\n\r\n![image](https://user-images.githubusercontent.com/6726799/81911375-1fa19300-95c5-11ea-930b-7b158f140391.png)\r\n\r\nCompare this with how the Open Editors view behaves (see top of that screenshot). It only occupies one line when only one editor is open.\r\n\r\nPerhaps TreeViewOptions could be enhanced to allow us to pass an integer that ultimately sets minimumBodySize on the Pane.\r\n\r\nVS Code version: Code 1.45.0 (d69a79b73808559a91206d73d7717ff5f798f23c, 2020-05-07T16:18:48.860Z)\r\nOS version: Windows_NT x64 10.0.18363\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-05-14 08:31:35",
        "state": "open",
        "number": 97791
    },
    {
        "title": "Include the name of the currently focused view in the window title",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nHi, would it be possible to add a setting to modify the title of the VSCode window to include the currently focused panel (editor, terminal, explorer etc)?\r\n\r\nI use dictation software for all coding and the easiest way to activate and deactivate sets of commands is by matching on the window title, so for example `.py` in the window title activates Python commands. It would be useful to be able to activate a certain set of commands for editing code and a different set of commands when using the integrated terminal.\r\n\r\nisidorn in the accessibility Gitter channel suggested this be implemented by allowing something like `${focusedView}` in the `window.title` setting, and I think this would work well.\r\n\r\nThanks",
        "createdAt": "2020-05-14 08:19:37",
        "state": "open",
        "number": 97790
    },
    {
        "title": "Commit message text box: Suggest file name if just one file has been staged.",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\nWhen committing changes to a single file, I always start the message with the name of that file. It would be very convenient to not always have to type in the file name.\r\n",
        "createdAt": "2020-05-13 16:31:04",
        "state": "open",
        "number": 97732
    },
    {
        "title": "Allow cmd/ctrl-clicking in Intellisense tooltips",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIntellisense tooltips often contain semantic information such as types. I frequently want to follow into that information, for example to open a type that is displayed. Currently there is no way to follow into information shown in the tooltip.\r\n\r\nI'm specifically interested in support for TypeScript types, but other languages should be able to use it as well.\r\n\r\nThe natural way of doing this would be to cmd/ctrl-click inside the tooltip, just like you do in other code.  (This is how it works e.g. in Eclipse - this is the one thing I sorely miss from it.)\r\n\r\nThe workaround I have to use (if the type doesn't happen to be present somewhere nearby) is to manually add + auto-import the type somewhere in the code and then cmd-click that, and then undo. \ud83d\ude29\r\n\r\n![Example of clicking tooltip not working + workaround by manually typing + importing the displayed type](https://user-images.githubusercontent.com/1436281/81805414-7b1b4480-9523-11ea-8eb2-47e5910adbd6.gif)\r\n",
        "createdAt": "2020-05-13 11:12:13",
        "state": "open",
        "number": 97704
    },
    {
        "title": "[folding] fold surrounding",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nThis feature request looks related to #78557 but is about **siblings** of the current region, not nested.\r\n\r\nWhen you are editing a large file with deep nesting you can get lost in the structure. It is sometimes extremely hard to estimate where you are, how much elements are around the current piece.\r\nIf you scroll up or down to find the parent of the element (especially if neighbours are large enough and look similar to each other) you get lost.\r\n\r\nThe purpose of the feature request is to allow you to **quickly get focused on the current piece** of structure and fold others, unrelated regions.\r\nSo my proposal is to **introduce some command** (for example `<alt> + click`) **to collapse all siblings on all levels** starting from current level up to root.\r\n\r\nSo, given you are editing a file like this:\r\n```json\r\n{\r\n    \"destination_addresses\": [\r\n      \"Washington, DC, USA\",\r\n      \"Philadelphia, PA, USA\",\r\n      \"Santa Barbara, CA, USA\",\r\n      \"Miami, FL, USA\",\r\n      \"Austin, TX, USA\",\r\n      \"Napa County, CA, USA\"\r\n    ],\r\n    \"origin_addresses\": [\r\n      \"New York, NY, USA\"\r\n    ],\r\n    \"rows\": [{\r\n      \"elements\": [{\r\n          \"distance\": {\r\n            \"text\": \"227 mi\",\r\n            \"value\": 365468\r\n          },\r\n          \"duration\": {\r\n            \"text\": \"3 hours 54 mins\",\r\n            \"value\": 14064\r\n          },\r\n          \"status\": \"OK\"\r\n        },\r\n        {\r\n          \"distance\": {\r\n            \"text\": \"94.6 mi\",\r\n            \"value\": 152193\r\n          },\r\n          \"duration\": {\r\n            \"text\": \"1 hour 44 mins\",\r\n            \"value\": 6227\r\n          },\r\n          \"status\": \"OK\"\r\n        },\r\n        {\r\n          \"distance\": {\r\n            \"text\": \"2,878 mi\",\r\n            \"value\": 4632197\r\n          },\r\n          \"duration\": {\r\n            \"text\": \"1 day 18 hours\",\r\n            \"value\": 151772\r\n          },\r\n          \"status\": \"OK\"\r\n        },\r\n        {\r\n          \"distance\": {\r\n            \"text\": \"1,286 mi\",\r\n            \"value\": 2069031\r\n          },\r\n          \"duration\": {\r\n            \"text\": \"18 hours 43 mins\",\r\n            \"value\": 67405\r\n          },\r\n          \"status\": \"OK\"\r\n        },\r\n        {\r\n          \"distance\": {\r\n            \"text\": \"1,742 mi\",\r\n            \"value\": 2802972\r\n          },\r\n          \"duration\": {\r\n            \"text\": \"1 day 2 hours\",\r\n            \"value\": 93070\r\n          },\r\n          \"status\": \"OK\"\r\n        },\r\n        {\r\n          \"distance\": {\r\n            \"text\": \"2,871 mi\",\r\n            \"value\": 4620514\r\n          },\r\n          \"duration\": {\r\n            \"text\": \"1 day 18 hours\",\r\n            \"value\": 152913\r\n          },\r\n          \"status\": \"OK\"\r\n        }\r\n      ]\r\n    }],\r\n    \"status\": \"OK\"\r\n  }\r\n```\r\nthe behavior will be as shown below.\r\n\r\nWhen you open a file:\r\n![image](https://user-images.githubusercontent.com/296593/81785345-e276cb80-9506-11ea-822b-8c130e66b8f3.png)\r\nafter you `<alt>+click` on the folding indicator on line 36 it should look like that:\r\n![image](https://user-images.githubusercontent.com/296593/81785726-4b5e4380-9507-11ea-95b2-40376f338608.png)\r\n",
        "createdAt": "2020-05-13 07:50:45",
        "state": "open",
        "number": 97684
    },
    {
        "title": "Make editor.action.marker.nextInFiles prioritize severe issues",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\nThe command editor.action.goToTypeDefinition navigates to the next issue regardless of the severity. IMHO this makes the functionality less useful, especially if you have many extensions that give you all kinds of \"help\" and you likely only cares about compile issues 80% of the time.\r\n\r\nOn the other hand, IntelliJ only navigates to a warning when the entire file does not have any errors. Can we have a setting that tweaks this behavior?",
        "createdAt": "2020-05-12 20:45:04",
        "state": "open",
        "number": 97643
    },
    {
        "title": "Update the `vscode-uri` package with `Uri.joinPath`",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\n`Uri.joinPath` [is now a part of the API](https://github.com/microsoft/vscode/commit/00ce259594a15d21bdac58c31a17b6371d3a479f), but it's not yet in the [`vscode-uri`](https://www.npmjs.com/package/vscode-uri) npm package.\r\n\r\nThe standalone `vscode-uri` package is convenient, for example, for writing and unit testing extension modules that do not directly depend on vscode itself, but still operate `Uri`s.",
        "createdAt": "2020-05-12 06:51:41",
        "state": "open",
        "number": 97580
    },
    {
        "title": "missing icons due to wrong svg content type",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nTry to set File Icon Theme to other than Seti (Visual Studio Code), and file icons will show no icons (or an empty tab space as icon). Also, somehow the root cause affected my 'Bookmarks' Extension which shows no icon. \r\n\r\n![Anotaci\u00f3n 2020-05-11 200509](https://user-images.githubusercontent.com/65148411/81627025-d71a8780-93c2-11ea-91f4-0c02d3908f01.png)\r\n\r\nI've downgraded VSCode to version 1.42, and the issue is not present there.\r\nI'm pretty sure the issue is not related to VSCode version, as I have installed the latest version to another PC, and the issue is not present there.\r\n\r\nI've also reinstalled VSCode as many as four or five times, deleting some tmp files from VSCode, but have not got rid of the issue.\r\n\r\nVS Code version: Code 1.45.0 (d69a79b73808559a91206d73d7717ff5f798f23c, 2020-05-07T16:18:48.860Z)\r\nOS version: Windows_NT x64 10.0.17763\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i5-8350U CPU @ 1.70GHz (8 x 1896)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: enabled<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off_ok<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|7.85GB (1.98GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (6)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nBookmarks|ale|11.2.0\r\nbracket-pair-colorizer|Coe|1.0.61\r\npython|ms-|2020.4.76186\r\ncpptools|ms-|0.28.0-insiders3\r\nvscode-icons|vsc|10.1.1\r\nsrecord|xia|0.0.3\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-05-12 01:06:40",
        "state": "open",
        "number": 97564
    },
    {
        "title": "Show All Tasks When Filtered Clears Filter",
        "description": "Issue Type: <b>Bug</b>\r\n\r\n 1. Open a workspace with collapsed tasks, for example npm tasks.\r\n 2. Run command 'Tasks: Run Task'.\r\n 3. Type something in the textbox to filter the tasks.\r\n 4. Choose 'Show All Tasks...'\r\n 5. The filter is being cleared.\r\n\r\nI expected the filter to remain since I'm looking for a named task.\r\n\r\nVS Code version: Code 1.45.0 (d69a79b73808559a91206d73d7717ff5f798f23c, 2020-05-07T16:18:48.860Z)\r\nOS version: Windows_NT x64 10.0.18363\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-05-11 07:06:17",
        "state": "open",
        "number": 97467
    },
    {
        "title": "Context Menu Should Follow Access Key conventions ",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nPlease include a way to access the context menu items with access keys. \r\n\r\nCurrently, I can't find a way to enable access key shortcuts for the contextual menu, you have to either memorize all the shortcuts (kind hard to do now that there are so many extensions adding their own, but that's a good problem to have I think \ud83d\ude0f) or arrow up/down to the respective item. \r\n\r\nThis probably isn't a problem for people that use a mouse, but I do not use one. \r\n\r\nAnyways, this has been standard practice for contextual menus for decades regardless of how people interact. Either I am dense and can't find a way to enable this, highly possible, or it's just not supported. \r\n\r\nFor a visual, I'm expecting the access key indicators (`_`) under letters per normal conventions:\r\n![Annotation 2020-05-10 140037](https://user-images.githubusercontent.com/11242654/81508037-23809d00-92c7-11ea-9ca4-aadb4aec34d9.png)\r\n\r\nWhere all I would have to do is type the letter.\r\n\r\n",
        "createdAt": "2020-05-10 19:06:35",
        "state": "open",
        "number": 97421
    },
    {
        "title": "Redundant conditions specified for keyboard shortcuts",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nI noticed that some keyboard shortcuts have the same condition specified which seems redundant. \r\n\r\n![image](https://user-images.githubusercontent.com/211268/81488814-06928e00-9223-11ea-824d-cf78eff99054.png)\r\n\r\n![image](https://user-images.githubusercontent.com/211268/81488828-2b870100-9223-11ea-9b79-65af8805e8ed.png)\r\n\r\nVS Code version: Code - Insiders 1.46.0-insider (d487078dc7fc1c276657cadb61b4f63833a8df55, 2020-05-07T16:19:54.327Z)\r\nOS version: Windows_NT x64 10.0.17763\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-05-10 01:34:42",
        "state": "open",
        "number": 97381
    },
    {
        "title": "Multiple selections with find and replace",
        "description": "This PR fixes #97365\r\n\r\nIn case of more than two selections, the first highlighted selection is sent to find (this was already present) and the last highlighted text is sent to replace(this feature was added).",
        "createdAt": "2020-05-09 18:34:40",
        "state": "open",
        "number": 97368
    },
    {
        "title": "Notebook cell queued status",
        "description": "Could we add an additional notebook cell status of `vscode.NotebookCellRunState.Queued`? It would indicate that this cell is queued for execution, but not currently running.\r\n\r\nJupyter typically uses a `*` as the execution ID for that in the UI, but I feel that in the UI story here an additional cell status might be best?",
        "createdAt": "2020-05-09 10:29:53",
        "state": "open",
        "number": 97341
    },
    {
        "title": "Enhancement: option for smartSelect to ignore subwords",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nConsider the following TypeScript snippet:\r\n\r\n```TypeScript\r\nclass Person {\r\n\tprivate age: number;\r\n\tprivate firstName: string;\r\n\tprivate lastName: string;\r\n}\r\n```\r\n\r\nPlace multiple cursors like so (`|` denoting a cursor without a selection) and execute Expand Selection (`editor.action.smartSelect.grow`):\r\n```TypeScript\r\nclass Person {\r\n\tprivate |age: number;\r\n\tprivate |firstName: string;\r\n\tprivate |lastName: string;\r\n}\r\n```\r\nThe result as of now is the following (`[` and `]` denoting selection) - Expand Select respects subwords in camelCase words:\r\n```TypeScript\r\nclass Person {\r\n\tprivate [age]: number;\r\n\tprivate [first]Name: string;\r\n\tprivate [last]Name: string;\r\n}\r\n```\r\nAt this point, if you execute Expand Selection again, the following thing happens (again using square brackets to denote selection):\r\n\r\n```TypeScript\r\nclass Person {\r\n\t[private age: number;]\r\n\tprivate [firstName]: string;\r\n\tprivate [lastName]: string;\r\n}\r\n```\r\n\r\nWhat I'm suggesting is the following: a setting, say `editor.smartSelect.ignoreSubwords`, which, if set to `true`, will alter Expand Selection so that triggering it **once** from the same initial state will result in the following:\r\n\r\n```TypeScript\r\nclass Person {\r\n\tprivate [age]: number;\r\n\tprivate [firstName]: string;\r\n\tprivate [lastName]: string;\r\n}\r\n```\r\n\r\nThe example applies to the normal use of one cursor too (and so should the suggested setting), but selecting multiple varied terms (including words with and without subwords) illustrates even better why it might be useful.",
        "createdAt": "2020-05-08 14:14:42",
        "state": "open",
        "number": 97257
    },
    {
        "title": "Update variables in Variable Window",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nI have a problem when I developing a Debug Server for C/C++.\r\nWhen I set new value to a variable in Variable Window, the client send SetVariableRequest. The variable is changed and it has side effects on other varialbes (tags of a union, etc.), it seems that there is no API to notify VSCode to update the variables. The variables in Watch Window will evaluate again.\r\nI think that, there should be a way to notify VSCode to update some/all nodes in Variable Window. Otherwise, it looks very strange.",
        "createdAt": "2020-05-08 10:11:20",
        "state": "open",
        "number": 97236
    },
    {
        "title": "Provide some richer (optional) UI for custom tree views",
        "description": "Refs: #96927\r\n\r\nIt would be great to have some richer optional UI components that could be enabled within a custom view, e.g.\r\n\r\n- Search/Filter box\r\n- General input box\r\n- \"Details\" pane -- kind of like a footer to show details about the selected item(s)\r\n- Richer hovers https://github.com/microsoft/vscode/issues/84032\r\n\r\n@idoprz Can you please add some more details here too?",
        "createdAt": "2020-05-07 22:59:03",
        "state": "open",
        "number": 97190
    },
    {
        "title": "Explore a richer ui for the account picker and settings sync",
        "description": "Similar to Chrome and Edge, we should explore using a richer ui to make the information and actions much clearer. This could follow the similar visual patten as notifications.\r\n\r\n## Chrome\r\n<img width=\"50%\" src=\"https://user-images.githubusercontent.com/35271042/81324578-068c6580-904c-11ea-9a4d-ec231752c0fb.png\">\r\n\r\n\r\n## Edge\r\n<img width=\"50%\" src=\"https://user-images.githubusercontent.com/35271042/81324500-e9579700-904b-11ea-8f6c-43ac9f8112ec.png\">\r\n",
        "createdAt": "2020-05-07 17:19:02",
        "state": "open",
        "number": 97168
    },
    {
        "title": "Allow tasks to run commands regardless of their output",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.44.2\r\n- OS Version: Win10\r\n\r\nSteps to Reproduce:\r\n1. Define a task with command variable.\r\n2. An error is thrown if the command doesn't resolve to a string.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes/No\r\nYes\r\n\r\n---\r\n\r\nI'm trying to execute extension commands via tasks.json but an error is thrown since the commands return booleans once resolved, instead of strings.\r\n\r\n[My issue](https://github.com/microsoft/AL/issues/5859) and others similar to it could be resolved by forcing extension creators to change their commands (or add new ones) so they return strings/undefined/null but that shouldn't really be necessary.\r\n\r\n[We should be able to execute commands as tasks](https://github.com/microsoft/vscode/issues/11396) but the implementation assumes that the command is being run to [replace a command variable with the string output](https://code.visualstudio.com/docs/editor/variables-reference#_settings-command-variables-and-input-variables).\r\n\r\nI thought of four different solutions to this:\r\n\r\n1) Don't rely on the output of command variables, e.g. task type: \"command\".\r\n\r\nTasks would be able to have type: \"command\" and command: \"commandId\" for executing a command, without expecting an output (since it wouldn't require resolveVariablesFromSet to be called). See: [terminalTaskSystem's](https://github.com/microsoft/vscode/blob/master/src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts) executeCommand.\r\nThis was the original proposition in 2018 so I'm not sure why it's not possible.\r\n```\r\n{\r\n    \"tasks\": [\r\n        {\r\n            \"label\": \"MyTask\",\r\n            \"type\": \"command\",\r\n            \"command\": \"MyCommand\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n2) It might be simpler to just detect if the command variable is the same as the task's command itself and skip the error throwing and the shell execution, since the output of the command variable would be blank.\r\n```\r\n{\r\n    \"tasks\": [\r\n        {\r\n            \"label\": \"MyTask\",\r\n            \"command\": \"${command:MyCommand}\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n3) Use extended form of variables, e.g. something like \"${command:myext.mycommand-default}\" or \"${commandIgnore:myext.mycommand}\" so that they can output something other than a string (or choose to ignore the output and return empty string). See lines 184 and 322 (case 'command'): [configurationResolverService](https://github.com/microsoft/vscode/blob/master/src/vs/workbench/services/configurationResolver/browser/configurationResolverService.ts). Similar method is suggested in #92854, except that's just for env variables, but would then apply to more types of variables.\r\n```\r\n{\r\n    \"tasks\": [\r\n        {\r\n            \"label\": \"MyTask\",\r\n            \"command\": \"${command:MyCommand-default}\"\r\n            or...\r\n            \"command\": \"${commandIgnore:mycommand}\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n4) Provide a type and a fallback/default value for input commands, so you'd have something like:\r\n```\r\n{\r\n    \"tasks\": [\r\n        {\r\n            \"label\": \"MyTask\",\r\n            \"type\": \"shell\",\r\n            \"command\": \"echo\",\r\n            \"args\": [\"${input:MyCommand}\"]\r\n        }\r\n    ],\r\n    \"inputs\": [\r\n        \"id\": \"MyCommand\",\r\n        \"type\": \"command\",\r\n        \"command\": \"myextension.mycommand\",\r\n        \"returnType\": \"none\",\r\n        \"defaultValue\": \"\"\r\n    ]\r\n}\r\n```\r\nThe returnType could also have the values \"number\" (fixes #95866) | \"string\" (default) | \"boolean\" etc. which would validate (just like is done now agains the string) before throwing the error.\r\nThe defaultValue could be assigned instead of throwing the error.\r\nThese could also reside within a deeper \"option\" object or maybe a single property which covers all the cases mentioned if that's preferred.\r\n\r\nPlease give feedback to these suggestions (or even come with an alternative) and I might submit a PR if it's simple enough to implement!",
        "createdAt": "2020-05-07 15:47:41",
        "state": "open",
        "number": 97161
    },
    {
        "title": "Folder explorer Fold level control like editor ",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n![fold example](https://user-images.githubusercontent.com/27716524/81258623-0e123580-9071-11ea-8b49-166a202202a6.gif)\r\n\r\n## In Editor - feature exist\r\nI can fold code by `ctrl` + `shift` + `] or [`\r\n\r\nand  `shift` + `click`, `alt` + `click`\r\n\r\nEspecially `shift` + `click` is really great that change all shown fold level like upper gif\r\n\r\n## In Folder Explorer - My request\r\n- `alt` + `click` - working but fold everything - not remembering previous state\r\n- `shift` + `click` - doesn't work - like in editor, control of folding level will be great feature\r\n\r\n<!-- Describe the feature you'd like. -->\r\n",
        "createdAt": "2020-05-07 05:47:16",
        "state": "open",
        "number": 97117
    },
    {
        "title": "Support DocumentSymbolProvider in CustomTextEditor",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nI think it would be a great idea if CustomTextEditor supported DocumentSymbolProvider  since CustomTextEditor use TextDocument as a model.\r\n\r\nFor example, I am writing an extension with the new CustomTextEditor APIs for special xml files that can be rendered in a special way. I have written a DocumentSymbolProvider for xml files with this schema and I expected the Outline view to be populated by the symbols.\r\n\r\nOther examples for how useful it would be to support DocumentSymbolProvider are:\r\n- Getting the outline for markdown documents while displaying the preview mode\r\n- Could be ground work to make the Outline view work with jupyter notebooks (see the sections tree view on Google Colab to get an idea of the end result)\r\n- Many UI frameworks use xml to describe a layout, with custom editors and DocumentSymbolProvider you could potentially have GUI based editor and the view hierarchy in the outline\r\n\r\nIdeally the CustomTextEditor should be able to intercept \"goto symbol\" events to focus the symbol in the custom editor (i.e. going to a particular section or highlighting an element in the layout editor).\r\n\r\n",
        "createdAt": "2020-05-06 20:58:08",
        "state": "open",
        "number": 97095
    },
    {
        "title": "Support multiple link actions for a single link in the terminal",
        "description": "Consider the example of gitlens and ghpr extensions both contributing link providers for a git commit, it would be great if via the tooltip you could action any of these from there and choose the default you prefer.",
        "createdAt": "2020-05-06 13:20:27",
        "state": "open",
        "number": 97070
    },
    {
        "title": "[semantic] proposals for new standard semantic token types ",
        "description": "The new semantic token provider API comes with a list of standard token types and modifiers.\r\nhttps://code.visualstudio.com/api/language-extensions/semantic-highlight-guide#semantic-token-classification\r\n\r\nThese type serve as a base across languages and by having all/most providers using theme will make easier to write theming rules across languages.\r\n\r\nThat said, semantic token providers are not forced to stick to the standard, but can add new types/modifiers, or extend existing types as seen in the doc.\r\n\r\nThis issue is to collect proposals for new types and modifiers. When making a suggestion, please add a description and a small code sample. If it exists, name the corresponding TextMate scope.\r\n\r\nThe standard token types should be be applicable across multiple languages and be useful for theming. We want to keep the set of standard tokens consistent  and coherent.\r\n\r\n\r\nProposed types:\r\n\r\n| Identifier (extends)       | Description  | Ref  | Sample  | TextMate scope |\r\n| ------------- |:-------------:| -----:| -----:| -----:|\r\n| importKeyword (keyword)     |  keywords related to imports/includes | (1) | __import__ * from x | |\r\n| modifierKeyword (keyword) | keywords describing a modifier | (1) | __private__ void foo(); | |\r\n| docComment (comment) | documentation comments | #96712 | /** */ | |\r\n\r\nProposed modifiers:\r\n\r\n| Identifier       | Description  | Ref  | Sample  | \r\n| ------------- |:-------------:| -----:| -----:| \r\n| unused     |  annotated all unused symbols | (2) | let __unusedVariable__; | \r\n\r\nReferences:\r\n(1) https://github.com/microsoft/language-server-protocol/issues/968\r\n(2) https://github.com/microsoft/vscode-languageserver-node/issues/604",
        "createdAt": "2020-05-06 10:01:18",
        "state": "open",
        "number": 97063
    },
    {
        "title": "Use light theme for --disable-extensions",
        "description": "Is it possible to use `default light+` theme for CLI flag `--disable-extensions` if the current theme type is `light`?\r\n\r\nI'm running extension tests by launching vscode instance and would like to avoid unnecessary extension activations, but the theme switching (from `light` to `dark` and back) is blinking too much.",
        "createdAt": "2020-05-06 09:12:44",
        "state": "open",
        "number": 97058
    },
    {
        "title": "Option to not follow symlink files in Explorer",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n**tl;dr:** I'd like the option to treat symlink files as simple files in VS Code Explorer (perhaps an `explorer.followSymlinks` option?)\r\n\r\n**Goal:**\r\nI'm aware of the `search.followSymlinks` option, and I'm hoping for something like an `explorer.followSymlinks` option, which would make VS Code Explorer treat symlink files as simple files, rather than resolving/following them.\r\n\r\n**Reasoning:**\r\nSymlinks are files, and while plenty of people use symlinks to files and directories to organize projects/work environments _(and would therefore likely want them to act like the target files and directories)_, some people like me have projects that include symlink files _as_ project files.\r\n\r\nFor many of my projects, symlink files are simply project assets, so I certainly _don't_ want to resolve/follow any of them. I _especially_ don't want to follow symlinks to directories--this really muddies VS Code Explorer navigation of such projects.\r\n\r\n**Ideas:**\r\nPerhaps, if the appropriate option were set, symlink files _could_ still be very intentionally followed, with a right-click \"Follow symlink\" option or something to that effect.",
        "createdAt": "2020-05-05 19:47:52",
        "state": "open",
        "number": 97030
    },
    {
        "title": "More Sorting Options For Key Bindings",
        "description": "\r\n<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nSort key bindings by:\r\n\r\n* Assigned\r\n* Unassigned\r\n* Active\r\n* context\r\n* Extension\r\n* Core\r\n",
        "createdAt": "2020-05-05 12:48:53",
        "state": "open",
        "number": 96994
    },
    {
        "title": "Open with Code for windows libaries",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nMessing around with context menus on windows I saw that there is no entry point for Open with Code for libraries but `Git` does have one, to unify the experience I have created a snip that adds the functionality.\r\nhttps://gist.github.com/YoraiLevi/418c973a319008fb2f5c1ebbbd38bad2\r\n\r\nAs it stands right now, I am using the windows `libraries` feature to aggregate folders together.\r\nIt is a little confusing that sometimes `Open with Code` shows up and sometimes it doesn't base on whether I have navigated to the folder directly or accessed through a library shortcut.",
        "createdAt": "2020-05-05 03:04:40",
        "state": "open",
        "number": 96960
    },
    {
        "title": "Notebooks: pasting notebook JSON into notebook should automatically add cells",
        "description": "I've been sharing notebooks with others and keep running to the issue of easily adding/importing notebooks from others. Currently the steps that I do is:\r\n\r\n1. Copy notebook JSON\r\n2. Create new txt file\r\n3. Paste notebook json and save\r\n4. Rename output to `{name}.github-issue`\r\n5. View notebook\r\n\r\nI would LOVE it if I could just paste in the JSON data into any notebook an have it automatically add the cells to my notebook. Be it on an empty notebook or in an existing one.",
        "createdAt": "2020-05-04 21:32:04",
        "state": "open",
        "number": 96943
    },
    {
        "title": "Support /mnt WSL links in windows not using Remote WSL",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.44.2\r\n- OS Version: Windows 10 1909\r\n\r\nUsing a Windows terminal for the integrated terminal system such as Powershell lets you jump to places in code logged by errors by holding ctrl and clicking on the directory. However, using WSL, you can't do this because your Windows filesystem is mounted so it shows `/mnt/` before the directory. I think this can be fixed with some Regex and I would appreciate if it were fixed because I find the code jumping convenient.",
        "createdAt": "2020-05-04 20:37:47",
        "state": "open",
        "number": 96941
    },
    {
        "title": "Include a bracket pair colorizing feature",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nOne of my favorite extensions for VSCode, [Bracket Pair Colorizer (2)](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2) has sadly been abandoned by his author, stating he won't continue developing it. Now, of course the community could step up and maintain a fork or create a new version but I feel like this is such a good and fundamental feature, why not make it an option in VSCode itself? The original extension also always had performance problems which, I think, could be avoided by having it in the core experience.",
        "createdAt": "2020-05-04 09:13:14",
        "state": "open",
        "number": 96899
    },
    {
        "title": "Add support for `.XCompose`",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: Insiders ece7aaee [snap]\r\n- OS Version: Ubuntu 20.04 LTS\r\n\r\nETA: Also occurs in latest stable (specifically ff915844 [snap])\r\n\r\nSteps to Reproduce:\r\n\r\n1. `echo include \\\"%L\\\" > .XCompose`\r\n2. `echo <Multi_key> <t> <h> <e> <r> <e> <f> <o> <r> <e> : \"\u2234\" >> .XCompose`\r\n3. Launch visual studio code.\r\n4. In the main text editor (new file), `<compose>therefore` produces `\u00feerefore`, and in addition `<compose>` by itself is missing its indicator (image 1). In integrated terminal, `<compose>the` produces `he`, still missing the indicator.\r\n\r\nImages:\r\n![Caret in chrome](https://user-images.githubusercontent.com/16487249/80920109-8de48b00-8d65-11ea-8e9f-f20403ad897e.png)\r\n![`<compose>therefor` in chrome](https://user-images.githubusercontent.com/16487249/80920145-cbe1af00-8d65-11ea-9d06-0779ae0b7b12.png)\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\nExpected vs produced:\r\n`\u2234` vs information in 4\r\n",
        "createdAt": "2020-05-03 16:45:36",
        "state": "open",
        "number": 96875
    },
    {
        "title": "[html] No values suggested for `autocapitalize`",
        "description": "- VSCode Version: 1.45.0\r\n- OS Version: macOS 10.15.4\r\n\r\nSteps to Reproduce:\r\n\r\n1. Copy the following to an HTML file: `<div role=\"\" autocapitalize=\"\"></div>`\r\n2. Notice that there is autocompletion for the role's attribute values but, even though VS Code knows about autocapitalize's values (shown when you are autocompleting that attribute), it does not show suggestions for it's values.\r\n\r\nDoes this issue occur when all extensions are disabled? Yes\r\n",
        "createdAt": "2020-05-02 14:34:28",
        "state": "open",
        "number": 96834
    },
    {
        "title": "when ctrl+click doesn't find symbol, do a regular search.",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nMost of the time I just do a regular search, sometimes there are only < 10 results. Especially when I'm working across multiple languages that bind to one another, a simple search will work great. ",
        "createdAt": "2020-05-01 14:58:50",
        "state": "open",
        "number": 96780
    },
    {
        "title": "New Option: editor.deleteAllLeadingBlankCharacters",
        "description": "<!-- Thank you for submitting a Pull Request. Please: \r\n* Read our Pull Request guidelines:\r\n  https://github.com/Microsoft/vscode/wiki/How-to-Contribute#pull-requests.\r\n* Associate an issue with the Pull Request.\r\n* Ensure that the code is up-to-date with the `master` branch.\r\n* Include a description of the proposed changes and how to test them. \r\n-->\r\n\r\nThis PR addresses #95642 by adding the option mentioned in the issue and making the option language-specific. For example, the user can enable it for C++ and Java and disable it for languages that rely on indentation such as Python. \r\n\r\n",
        "createdAt": "2020-05-01 08:35:44",
        "state": "open",
        "number": 96767
    },
    {
        "title": "Allow Line Numbers in Notebook Cells",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nNotebook cells markdown in edit mode and code cells should allow line numbers. I enabled word wrap and it was difficult to discern lines.\r\n\r\nVS Code version: Code - Insiders 1.45.0-insider (a0fe37870c42e0704a492cdc6b8550b4cf23f63c, 2020-04-30T05:39:08.281Z)\r\nOS version: Windows_NT x64 10.0.19041\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-04-30 23:26:22",
        "state": "open",
        "number": 96742
    },
    {
        "title": "Add setting to specify shellArgs for the automationShell",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nWe can set a separate shell for tasks/debug (using `terminal.integrated.automationShell.windows`) which is a useful feature, but there doesn't seem to be a way to specify shellArgs for the automationShell (and only the automationShell), aka a setting like \"terminal.integrated.automationShell.shellArgs.windows\"\r\n\r\n> NOTE: This is related to https://github.com/microsoft/vscode/issues/90073, but that discusses existing behavior about the current shellArgs setting being ignored. I have no problem with that behavior, I'm asking for a _new feature_ to specify automation-specific shellArgs\r\n\r\nAs background, I work on the Azure Functions extension and we've had several users reports problems while debugging because they like to use `Set-Location` in their PowerShell profile (Personally I wouldn't do that, but \ud83e\udd37\u200d\u2642\ufe0f). However, that breaks tasks/debug because the PowerShell profile changes the cwd to the wrong folder. If there was a setting `terminal.integrated.automationShell.shellArgs.windows`, they could add `-NoProfile` as an arg specific to the automation shell and keep `Set-Location` in their profile for non-automation scenarios.\r\n\r\nOriginal issues on the Functions extension: https://github.com/microsoft/vscode-azurefunctions/issues/1175, https://github.com/microsoft/vscode-azurefunctions/issues/1260, https://github.com/Azure/azure-functions-core-tools/issues/1945\r\n",
        "createdAt": "2020-04-30 19:26:02",
        "state": "open",
        "number": 96732
    },
    {
        "title": "Resolve relative paths in terminal link handler",
        "description": "You could resolve these so it would search for the right file. Or do you not want to make assumptions about the format of the thing?\r\n\r\n![image](https://user-images.githubusercontent.com/323878/80738201-3d0d3200-8ada-11ea-83e8-ba4f70d355c5.png)\r\n\r\n![image](https://user-images.githubusercontent.com/323878/80738213-439ba980-8ada-11ea-8fe0-0396ea9e31a8.png)\r\n",
        "createdAt": "2020-04-30 17:01:40",
        "state": "open",
        "number": 96715
    },
    {
        "title": "Add syntax highlighting to env var info widget",
        "description": "Are there standard theme colors that could be used for this?\r\n\r\n![image](https://user-images.githubusercontent.com/2193314/80715821-bfcac880-8aab-11ea-8515-5802d6535f8c.png)\r\n",
        "createdAt": "2020-04-30 13:28:35",
        "state": "open",
        "number": 96698
    },
    {
        "title": "Timeline: Checkout",
        "description": "It'd be nice to have a `checkout ref` context menu entry on git timeline items. Like GitHub's \"browse repository at this point in history\"",
        "createdAt": "2020-04-29 16:55:30",
        "state": "open",
        "number": 96615
    },
    {
        "title": "Separation (or mark) of disabled add-ons into built-in and additional ones",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nAt the moment we have this division:\r\n![obraz](https://user-images.githubusercontent.com/30685349/80611282-b6554800-8a3a-11ea-828b-60ccd0b034b7.png)\r\n\r\nIn the current situation, built-in add-ons that are turned off mix with the turned-off add-ons that i install from the market by myself\r\n![obraz](https://user-images.githubusercontent.com/30685349/80611647-2b288200-8a3b-11ea-86e4-6b0bd8bff0ba.png)\r\n\r\nIt would be good if the disabled built-in add-ons have some indication that they are built-in add-ons\r\nMaybe some small badge similar to add-ons marked with an asterisk as recommended?\r\n\r\nOr maybe just stop showing built-in disabled add-ons in `Show disabled extensions`\r\nOr maybe any different separation way?\r\n\r\nI request about it because if you have many add-ons that are turned off, this is a bit confusing\r\n\r\n\r\n",
        "createdAt": "2020-04-29 15:10:25",
        "state": "open",
        "number": 96597
    },
    {
        "title": "No commands to fold/unfold markdown content",
        "description": "#96279\r\n\r\nNo commands to fold/unfold markdown content",
        "createdAt": "2020-04-29 11:16:31",
        "state": "open",
        "number": 96561
    },
    {
        "title": "Add context menu action to copy and paste cell",
        "description": "#96279\r\n\r\nAdd context menu action to copy and paste cell",
        "createdAt": "2020-04-29 10:49:43",
        "state": "open",
        "number": 96552
    },
    {
        "title": "[Remote extension pack] - local and remote folders in file explorer to facilitate remote diffing",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI need to do remote file diffing on a regular basis.  Not many good tools exist for than, I'd like to use the very good diffing tool in vscode.\r\nInstalled the Remote Explorer extension and set up my remote machines. so far so good.\r\n\r\nUnfortunately, when I open a remote folder, vscode launches a new window with only the remote folder in the Folders tab of the explorer.  I can still open local file next to remote files, but I need to drag them into vscode from a windows explorer on the side.  Not very efficient\r\n\r\nIt would be nice to have a fifth \"remote folder\" tab next to the \"folders\" tab in order to be able to quickly open remote and local tabs for diffing.",
        "createdAt": "2020-04-29 10:14:23",
        "state": "open",
        "number": 96550
    },
    {
        "title": "Tabs: allow to control scrolling direction",
        "description": "This should impact both the scrolling direction (\"natural\", \"reverse\") as well as when switching tabs for mouse scroll is enabled.",
        "createdAt": "2020-04-29 09:09:50",
        "state": "open",
        "number": 96544
    },
    {
        "title": "Navigate to each view when cycling through F6",
        "description": "Refs: #96263\r\n\r\nWhile testing this, I found myself wanting it to stop on each view in the side bar, so that you could navigate/interact with them quickly.",
        "createdAt": "2020-04-28 20:01:47",
        "state": "open",
        "number": 96480
    },
    {
        "title": "Notebooks: show errors in overview ruler",
        "description": "Refs: https://github.com/microsoft/vscode/issues/96279\r\n\r\nI think it would be great if errors in a notebook could be shown in the overview ruler:\r\n\r\n![image](https://user-images.githubusercontent.com/900690/80511240-218c1500-897c-11ea-8860-49b5f24cc33d.png)\r\n\r\n//cc @jrieken ",
        "createdAt": "2020-04-28 16:14:53",
        "state": "open",
        "number": 96442
    },
    {
        "title": "Allow the ability to store extension specific metadata in Notebook cells",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n#### For the PowerShell extension's Notebook Mode:\r\n\r\nThe idea is: \"There are two types of comment blocks: `<# #>` (aka block comments) and `#` (aka line comments). While parsing a script, I want to store metadata in the cell object to say \"this cell is backed by block comments not regular comments\" so that when I save, the comment type can be honored.\"\r\n\r\nTo get around this, I am using a `Map<number, CommentType (enum)>` in the extension to store this metadata:\r\nhttps://github.com/TylerLeonhardt/vscode-powershell/blob/fe8576bda498b81f89f05806b2667d8c50e0f6a9/src/features/PowerShellNotebooks.ts#L16\r\n\r\nBut if I could store this on the cell directly, it would be incredibly safer.\r\n\r\n#### For a Jupyter extension\r\n\r\n`.ipynb` files have a `metadata` section:\r\nhttps://gist.github.com/TylerLeonhardt/b51583af068b62be2ca2305aa4061f89?short_path=03c798a#file-azure-powershell-visualization-demo-ipynb-L5-L8\r\n\r\nfor cell specific details. If this feature was added to Notebook UI in VS Code, I could see a Jupyter extension taking advantage of it as well.",
        "createdAt": "2020-04-28 15:28:11",
        "state": "open",
        "number": 96433
    },
    {
        "title": "InputBox: prompt should support codicons",
        "description": "This should get me a `codicon-add` icon in the input box prompt label:\r\n\r\n```\r\n\t\t\tconst input = await vscode.window.showInputBox({\r\n\t\t\t\tplaceHolder: 'Name',\r\n\t\t\t\tprompt: '$(add) Create'\r\n\t\t\t});\r\n\r\n```",
        "createdAt": "2020-04-28 14:53:19",
        "state": "open",
        "number": 96430
    },
    {
        "title": "Terminal doesn't detect UNC paths",
        "description": "Testing #96299\r\n\r\nProbably not a big deal but sometimes people use these and file bugs where they aren't supported.\r\n\r\n- On Windows\r\n- `echo \\\\localhost\\c$\\Users`\r\n- Hover, it should be detected as a folder that can be opened",
        "createdAt": "2020-04-28 14:49:01",
        "state": "open",
        "number": 96428
    },
    {
        "title": "Trackpad: Tab switch on mouse scroll: horizontal scrolling sensitivity too high",
        "description": "Refs: https://github.com/microsoft/vscode/issues/95952\r\n\r\n1. \"workbench.editor.scrollToSwitchTabs\": natural\r\n2. Have a mouse with horizontal press\r\n3. Horizontal scroll is too senstivie in the tab area and seems pretty useless due to that\r\n\r\nVertical scroll works just fine. And horizontal scroll in the editor has good sensitivity so maybe you could check with Alex how he handles the horizontal scroll.",
        "createdAt": "2020-04-28 13:33:50",
        "state": "open",
        "number": 96409
    },
    {
        "title": "Accounts context menu should show what account is being used for sync",
        "description": "#96226\r\n\r\n* I have to select the sync-entry to know what account is being used\r\n* IMO it would be nice to have some kind of hint what account is used for sync at this level\r\n\r\n\r\n<img width=\"379\" alt=\"Screenshot 2020-04-28 at 11 41 18\" src=\"https://user-images.githubusercontent.com/1794099/80472570-31d4cd80-8945-11ea-810b-6f27412c8e67.png\">\r\n",
        "createdAt": "2020-04-28 09:42:46",
        "state": "open",
        "number": 96362
    },
    {
        "title": "Add back button to sync config",
        "description": "#96226\r\n\r\nThe state below is always a dead end but I often use it to check what is being sync for my account, not for tweaking anything. Go back is what I often want and not losing \"all state\"\r\n\r\n<img width=\"721\" alt=\"Screenshot 2020-04-28 at 11 36 29\" src=\"https://user-images.githubusercontent.com/1794099/80472109-93e10300-8944-11ea-8d78-c621713d3580.png\">\r\n",
        "createdAt": "2020-04-28 09:41:05",
        "state": "open",
        "number": 96361
    },
    {
        "title": "Support search in iframe based webview",
        "description": "For #83188\r\n\r\n## Problem\r\nOn desktop, VS Code's webviews using the electron `<webview>` tag. This gives a [nice api](https://www.electronjs.org/docs/api/webview-tag#webviewfindinpagetext-options) for searching inside a webview\r\n\r\nHowever on web we use normal iframes for webviews. These currently don't support the search functionality because there is no equivalent API for searching inside a iframe. \r\n\r\nThis is one blocker for using normal iframes for the webviews in desktop VS Code: #83188\r\n\r\n## Request\r\nImplement search for iframe based webviews. This should attempt to match the behavior of the existing search functionality as much as possible\r\n\r\n\r\n/cc @deepak1556 \r\n",
        "createdAt": "2020-04-27 22:15:12",
        "state": "open",
        "number": 96307
    },
    {
        "title": "Option to disable creation of a branch when a remote tracking branch is selected",
        "description": "When using vscode with Git repositories, in the branch switching pane if a remote tracking branch is selected, vscode automatically creates a local branch using selected remote tracking branch.\r\n\r\nIt would be useful to have a setting to turn this off and checkout the remote tracking branch in a detached state. I use branches in detached state to browse the code, run quick builds, copy code. With the local branches getting created, my repo ends up with a lot of those and I end up spending time later to cleanup the local branches. \r\n\r\nTo get around this, I switch to the terminal and checkout the remote tracking branch (`git checkout origin/<remote_branch_name>`) and then switch back to vscode.",
        "createdAt": "2020-04-27 14:06:10",
        "state": "open",
        "number": 96264
    },
    {
        "title": "Show notification when certificate verification fails",
        "description": "> Currently the user would have to add any custom certificate in both places to get consistent behavior.\r\n\r\nIts bit difficult to solve this, since node doesn't care about NSS db we will write our own native module which would essentially be a wrapper around https://source.chromium.org/chromium/chromium/src/+/master:net/cert/nss_cert_database.h to allow importing client certificates to the shared NSS db.\r\n\r\nI think we can better surface the error with a notification `net::ERR_CERT_AUTHORITY_INVALID` using https://github.com/electron/electron/blob/master/docs/api/app.md#event-certificate-error and ask users to add certificate in the NSS db with https://chromium.googlesource.com/chromium/src/+/lkgr/docs/linux/cert_management.md#add-a-certificate\r\n\r\n_Originally posted by @deepak1556 in https://github.com/microsoft/vscode/issues/93595#issuecomment-615018175_",
        "createdAt": "2020-04-27 11:42:39",
        "state": "open",
        "number": 96247
    },
    {
        "title": "Set default browser for VSCode application",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nHi, I'm using multiple browsers / profiles and I would like to be able to set the default web browser per application or workspace.\r\n\r\nThe solution could be similar to what VisualStudio have which gives a user drop down menu to chose the browser.\r\nIdeally there should be an option in settings to select a default browser for all actions which require VSCode to open the web browser.\r\n\r\nExample of current problems:\r\nIf I want to log in into a LiveShare extension it opens my default browser (chrome) where my microsoft profile is different then the one I want to use to sign in for sharing the code.\r\n\r\nThis is very irritating because the microsoft URLs often contains multiple redirects and who knows what so I cannot just copy the URL and sing in using a different browser with the correct profile.\r\n\r\nHere is more evidence that this feature would be appreciated by more people.\r\nhttps://stackoverflow.com/questions/47519768/how-do-i-set-the-default-browser-as-chrome-in-visual-studio-code/47520320",
        "createdAt": "2020-04-25 12:26:28",
        "state": "open",
        "number": 96132
    },
    {
        "title": "[json] support setting schema associations at runtime",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\nRelated PR: https://github.com/microsoft/vscode/pull/73424\r\nRelated FR: https://github.com/microsoft/vscode/issues/69868\r\n<!-- Describe the feature you'd like. -->\r\nFeature Request: Configure `jsonValidation` contribution point dynamically.\r\nUse Case: Twin json files like `myFile.json` and `myFile.js`, which file name is the same as another file under the same directory, but file extension name is normal `.json`. So, glob matching or content detection does not work well, dynamic configuration is required.",
        "createdAt": "2020-04-25 06:20:04",
        "state": "open",
        "number": 96120
    },
    {
        "title": "Allow to drag the entire panel/sidebar to move it left or right",
        "description": "I would think the panel - when dragged as its entire thing - should allow to be dropped to the right or left of the editor area to support the different layout options we already have.",
        "createdAt": "2020-04-25 06:17:10",
        "state": "open",
        "number": 96118
    },
    {
        "title": "Add support to dispatch keybindings based on CAPSLOCK",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\nVersion: 1.44.2 (user setup)\r\nCommit: ff915844119ce9485abfe8aa9076ec76b5300ddd\r\nDate: 2020-04-16T16:36:23.138Z\r\nElectron: 7.1.11\r\nChrome: 78.0.3904.130\r\nNode.js: 12.8.1\r\nV8: 7.8.279.23-electron.0\r\nOS: Windows_NT x64 10.0.18363\r\n\r\nSteps to Reproduce:\r\n\r\nIn my case, I have a keybinding entry:\r\n`{ \"key\": \"j\", \"command\": \"vscode-neovim.compositeEscape1\", \"when\": \"editorTextFocus && neovim.mode != normal\", \"args\": \"j\" }`\r\n\r\nThe lowercase 'j' gets inserted even when I have CAPSLOCK enabled so if I try to type \"JUSTIFY\" it comes out as \"jUSTIFY\".\r\n\r\nP.S - Is there a \"when\" clause to determine if CAPSLOCK is enabled? If not, this would be a good addition to be able to check these things.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-04-24 21:49:26",
        "state": "open",
        "number": 96097
    },
    {
        "title": "Auto-hide Activity Bar exactly like Windows taskbar",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n**Auto-hide the Activity Bar,\r\nexactly like the behavior of the Windows 10 taskbar with the setting enabled:\r\n\"Automatically hide the taskbar\".**\r\n\r\nN.B.: Similar to this: https://github.com/microsoft/vscode/issues/3742#issuecomment-193368095 but for _Activity Bar_ (not side bar entirely). Also: the plugins mentioned there do not cover this use case.\r\n\r\nThanks for your consideration! I'm a happy user of vscode for years now!",
        "createdAt": "2020-04-24 14:10:55",
        "state": "open",
        "number": 96063
    },
    {
        "title": "Localization for renderers",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\nWe don't really have a good story for this for webviews right now either. We should figure out what to do here.\r\n",
        "createdAt": "2020-04-23 22:47:03",
        "state": "open",
        "number": 96016
    },
    {
        "title": "Stepping when in a skipped frame navigates me back out to the last non skipped frame",
        "description": "Repro steps:\r\nDebug something that will have skipped frames\r\nBreak in\r\nStep into a function that will be in in a skipped frame\r\nKeep stepping over some stuff in the skipped frame\r\n\r\nExpected: I intentionally stepped in, I expect to go to that file\r\nActual: each time I step over while in a skipped frame in I'm shown the editor that the last non skipped frame was from. This means I have to keep re-opening the frame I care about.\r\n![confusingStepping](https://user-images.githubusercontent.com/38270282/80080164-821ceb80-8551-11ea-91e4-338cdef76846.gif)\r\n",
        "createdAt": "2020-04-23 08:59:34",
        "state": "open",
        "number": 95954
    },
    {
        "title": "Show Gravatar on the details of commits in Timeline view",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nThe new feature \"Time line view\" allows to view information about specific commits (author, e-mail, date and time of commit, commit message, etc . . .) when we \"rest the mouse cursor\" over the commit item.\r\n\r\nCould these information include the **Gravatar image** of the author?",
        "createdAt": "2020-04-23 04:03:02",
        "state": "open",
        "number": 95934
    },
    {
        "title": "Clear output cells in notebook",
        "description": "- notebooks should provide Clear Output out of the box\r\n- I should be able to clear output using the keyboard\r\n\r\n### challenges\r\n- if a cell has more than one output cell,  can I delete only one of them? If we allow to delete individual output cells we need a way to focus them with the keyboard. So far, we only focus input and output together\r\n- I'd like to use `Backspace` to delete the output cell(s) if there are any, and I'd like to use `Backspace` to delete the cell if there is no output. I could accomplish that if we had a context key `hasOutput`",
        "createdAt": "2020-04-22 18:56:46",
        "state": "open",
        "number": 95907
    },
    {
        "title": "[TypeScript] Semantic Highlighting for resolve and reject in Promises",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nThis Issue applies to TypeScript, but might also be interesting for other languages with promises.\r\n\r\nThe `resolve()` and `reject()` functions of a promise in TypeScript have similar functionality to what `return` and `throw` do in a normal function, but are highlighted like any other variable if semantic highlighting is enabled and like any other function if not.\r\n\r\nThis makes it hard to spot all locations there the promise gets resolved or rejected.\r\n\r\nIt would be nice if they would be highlighted more prominent (like `return` and `throw`), when semantic highlighting is enabled.\r\n\r\nThis would make promises much more readable.",
        "createdAt": "2020-04-22 17:01:33",
        "state": "open",
        "number": 95897
    },
    {
        "title": "Allow use of integer variables in tasks.json",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nI'm trying to call `revealLine` from a task input as that allows variable substitution (unlike keybindings):\r\n\r\n```\r\n    \"inputs\": [\r\n        {\r\n            \"id\": \"RevealLine\",\r\n            \"type\": \"command\",\r\n            \"command\": \"revealLine\",\r\n            \"args\":{\r\n                \"lineNumber\": \"${lineNumber}\",\r\n                \"at\": \"center\"\r\n            },\r\n        }\r\n    ]\r\n```\r\nObviously this fails because the command `revealLine` expects an integer as the first command. It works fine if I substitute `\"${lineNumber}\"` with any old integer.\r\n\r\nOf course, this is a valid JSON file with no pre-process and I anticipate you want to keep this concept. But it occurs to me that the type matching between strings an integers could be loosened a bit, allowing this conversion. I may be useful elsewhere.\r\n\r\nThanks again for this great tool.",
        "createdAt": "2020-04-22 11:38:12",
        "state": "open",
        "number": 95866
    },
    {
        "title": "Consider to show dynamic launch configs in Welcome view",
        "description": "With the new API #88230 we now have a way to find default debug configurations of a specific debugger. With #95835 they are surfaced in the (not so obvious) \"Debug: Select and Start Debugging\" command.\r\n\r\nWe should explore whether it makes sense to automatically show them in the debuggers Welcome view.\r\n\r\n/cc @connor4312  ",
        "createdAt": "2020-04-22 11:00:55",
        "state": "open",
        "number": 95863
    },
    {
        "title": "Improve hover UX so moving point diagonally from highlight to hover doesn't clear over",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nIt woudl be nice if the hover UX allowed the pointer to go diagonally up and right where it comes off the highlighted text and makes it to the hover. As it is the hover disappears because there is an instant where the pointer is neither on the highlighted text nor on the hover box\r\n\r\n![hover-ux](https://user-images.githubusercontent.com/234804/79932233-fc813900-8487-11ea-8bc2-95a4e5755156.gif)\r\n\r\nThis has been a known issue for UX design since in the 1980s in particular going from a menu item to a submenu item and there are [various solutions](https://css-tricks.com/dropdown-menus-with-more-forgiving-mouse-movement-paths/).\r\n\r\nI would be nice if hovers had some similar solution. Maybe a small delay (100ms?) before they disappear so when the mouse travels that small amount shown above they don't vanish. There is a settable delay before showing. Maybe a solution would be a delay for hiding as well?\r\n\r\n",
        "createdAt": "2020-04-22 02:11:58",
        "state": "open",
        "number": 95816
    },
    {
        "title": "Allow \"launch\" json setting to be placed into a \"[language]\": object.",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nCurrently, VSCode supports having a \"launch\" object in settings.json which allows you to specify \"tasks\" that would normally be in \"tasks.json\" inside the config file. This is very useful as often you will want to use similar launch actions in multiple projects (\"run the current file in the python interpreter\", \"open index.html in the browser\", \"launch node run\", etc) but when you do that, all of the actions will appear regardless of the context of your particular project (so if you're writing a python program, you'll have \"open index.html in browser\" when there isn't any index.html). Some of these are not going to make any sense to do in that context. \r\n\r\nSo the idea is that you can put \"launch\" inside a language block normally used for the editor and if you're editing a project that contains files of that language, then that option will appear in \"run and debug\". It may also be nice to add a \"availableWhen\" property in any \"configurations\" object that allows you to specify \"if `__main__.py` exists\" or \"if `node_modules` exist\". This would allow an even more robust per-language and even per-project-type configuration of tasks. Also, by framing it this way, if a project employs multiple types of code (e.g. a flask server that serves pages written with react), then everything will be there for react and for python. ",
        "createdAt": "2020-04-22 02:04:43",
        "state": "open",
        "number": 95815
    },
    {
        "title": "Breadcrumbs are poorly legible if editor tabs are disabled",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\nVersion: 1.44.1\r\nCommit: a9f8623ec050e5f0b44cc8ce8204a1455884749f\r\nDate: 2020-04-13T14:40:29.529Z\r\nElectron: 7.1.11\r\nChrome: 78.0.3904.130\r\nNode.js: 12.8.1\r\nV8: 7.8.279.23-electron.0\r\nOS: Linux x64 5.4.33\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open a file in a language which provides hierarchical document symbols\r\n2. Note how breadcrumbs at the top look like\r\n3. Set `\"workbench.editor.showTabs\": false,`\r\n4. Note how breadcumbs change style and become less legible\r\n\r\nHere's the two screenshots:\r\n\r\n![no-tabs](https://user-images.githubusercontent.com/1711539/79906737-a5904b00-8418-11ea-8a44-292230a3e46b.png)\r\n\r\n![tabs](https://user-images.githubusercontent.com/1711539/79906739-a628e180-8418-11ea-91d0-92f53ad64372.png)\r\n\r\nI wish the first version also used `>` and file icon to make it clear where the path component ends, and to make the separation between components more pronounced in general. \r\n\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-04-21 19:42:09",
        "state": "open",
        "number": 95796
    },
    {
        "title": "Use more prominent focus indicator in explorer",
        "description": "From https://github.com/microsoft/vscode/issues/93916\r\n\r\nThe different shades of backgrounds in the explorer are a little confusing:\r\n\r\n![image](https://user-images.githubusercontent.com/2193314/79865698-6f0eed80-8390-11ea-8113-9d5633392eb5.png)\r\n\r\nA border could be nicer and more obvious which is the special item, it also aligned with Windows Explorer:\r\n\r\n![image](https://user-images.githubusercontent.com/2193314/79865658-5e5e7780-8390-11ea-93de-26bd8cf4e5c9.png)\r\n![image](https://user-images.githubusercontent.com/2193314/79865665-60283b00-8390-11ea-9956-e5a5303d4301.png)\r\n\r\nRelated: https://github.com/microsoft/vscode/issues/95767",
        "createdAt": "2020-04-21 12:25:40",
        "state": "open",
        "number": 95768
    },
    {
        "title": "List: range selection should update focused element",
        "description": "Current behavior looks a little weird imo:\r\n\r\n![55a14309-f15c-49e4-97ff-7692a09c041b](https://user-images.githubusercontent.com/2193314/79865419-fc9e0d80-838f-11ea-895c-bc789ddaa05c.gif)\r\n\r\nI think the reason behind this is because the original item is important as it is the root item if the user shift+clicks elsewhere. But even so, the last clicked item is probably more important at this point. I suggest we move to what Windows explorer does and highlight the item that was most recently clicked:\r\n\r\n![222f4401-258b-4ba7-9d7a-834837ea9c24](https://user-images.githubusercontent.com/2193314/79865297-c9f41500-838f-11ea-9529-a550e8a6d266.gif)\r\n",
        "createdAt": "2020-04-21 12:23:47",
        "state": "open",
        "number": 95767
    },
    {
        "title": "consider to add a table view for variables and watches",
        "description": "With the arrival of more flexible window/workbench layout, debug views are no longer constrained by narrow vertical layout arrangement. A variable view can now be moved to the horizontal panel:\r\n\r\n<img width=\"1459\" alt=\"2020-04-21_13-13-34\" src=\"https://user-images.githubusercontent.com/1898161/79859924-16604480-83d2-11ea-99e9-23a2c8fbe5f7.png\">\r\n\r\nThis makes it possible to explore a table view for the debugger's variables and  watches views.",
        "createdAt": "2020-04-21 11:59:29",
        "state": "open",
        "number": 95766
    },
    {
        "title": "Setting to control opacity of inserted/removed background in diff editor",
        "description": "I've started using the PR extension a lot recently, and I find the diff editor to have too much going on when there are lots of changes.\r\n\r\nWhen I'm looking at a large number of changes, I would like the \"this line has some changes\" color to be much lower opacity than the \"this is the thing that changed in this line\" color. As far as I can tell, I can only set a color for the inserted/removed backgrounds once, and I can't individually control the opacity for \"this line has some changes\" and \"this is the thing that changed\".",
        "createdAt": "2020-04-21 09:41:47",
        "state": "open",
        "number": 95756
    },
    {
        "title": "Let extension decide what it contributes to the Problems pane",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nFor reference, see https://github.com/streetsidesoftware/vscode-spell-checker/issues/186\r\n\r\nCurrently there exists a few type of \"problems\": Error, Warning, Information, and Hint.\r\n\r\nA spell checker, such as cSpell, would possibly want to display Information with blue squiggly lines in the editors, but not show these errors at all in the Problems pane. A good reason for this is that one would maybe want the Problems pane to be for the more important errors and warnings.\r\n\r\nCurrently, the cSpell extension lets you configure `\"cSpell.diagnosticLevel\": \"Hint\",` which was implemented in https://github.com/microsoft/vscode/issues/44141. This made it so that the faults did not show up in the Problems pane anymore, but it also changed the feedback in the editor to use three dots instead of completely doing the blue squiggly lines.\r\n\r\nIt would be nicer to let the extension control what shows up in the Problems pane, for the various levels.",
        "createdAt": "2020-04-20 14:42:46",
        "state": "open",
        "number": 95707
    },
    {
        "title": "Setting request: Don't collapse explorer node on single click (unless on twistie)",
        "description": "I've found it pretty annoying for a while how if I want to search on a particular folder in the explorer, I need to click it (which collapses it), then click it again (to re-expand) and then hit alt+shift+f. This happens other times too, when I collapse folders I typically do it with the left arrow.\r\n\r\nI couldn't see a request for this but I think I'd prefer the following behavior:\r\n\r\n- Single click does not change expand/collapse state, unless the twistie is hit\r\n![image](https://user-images.githubusercontent.com/2193314/79761327-20048200-82d6-11ea-8824-9f60f3f36b4d.png)\r\n- The twistie has a hover effect\r\n- Clicking on a _focused_ explorer folder would collapse it\r\n\r\nThis could potentially be a good default as well as you can do more with it, it just needs a little more precision to collapse a folder in a single click.\r\n\r\nI like the current single click to expand behavior as expanding a folder is what I want to do almost all the time when I click a folder.",
        "createdAt": "2020-04-20 14:15:43",
        "state": "open",
        "number": 95697
    },
    {
        "title": "Extension Feature Contributions doesn't render markdownDescription",
        "description": "Issue Type: <b>Bug</b>\r\n\r\n```js\r\n\"errorLens.padding\": {\r\n\t\"type\": \"string\",\r\n\t\"default\": \"\",\r\n\t\"markdownDescription\": \"Adds padding for the message. Visible difference when `message` colors are set. [Issue #23](https://github.com/usernamehw/vscode-error-lens/issues/23). Example: `2px 1ch`.\",\r\n\t\"examples\": [\r\n\t\t\"2px 1ch\"\r\n\t]\r\n},\r\n```\r\n\r\n![Screenshot (185)](https://user-images.githubusercontent.com/9638156/79727148-93b58780-82f4-11ea-89af-3fbf581c8901.png)\r\n\r\nVS Code version: Code - Insiders 1.45.0-insider (ec0d19789f89d4c25895f4a0cf364276cfb0c6ed, 2020-04-20T06:08:30.812Z)\r\nOS version: Windows_NT x64 6.2.9200\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-04-20 07:50:50",
        "state": "open",
        "number": 95671
    },
    {
        "title": "Provide a way to get diagnostic info for an issue about an extension that's not hosted on GIthub",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nRIght now, there's an Issue Reporter that collects all the info, but it only works with GitHub issues. But our team develops an extension using a GitLab repository.\r\n\r\nIt would be nice to have a way to collect the diagnostic info for a GitLab issue, similarly to what the Issue Reporter does. For example, something like `env.getDiagnosticInfo(): string` in the api. Or just having the default Issue Reporter work with GitLab issues.",
        "createdAt": "2020-04-20 07:22:34",
        "state": "open",
        "number": 95669
    },
    {
        "title": "Add option to disable \"quick diff\" pop-up window",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nIt would be very helpful to be able to disable showing the **\"quick diff\"** window that shows up after you click the gutter\r\n\r\nMore info about the suggestion [here](https://stackoverflow.com/questions/61290060/how-to-disable-clicking-on-gutter-in-vs-code)",
        "createdAt": "2020-04-18 14:37:23",
        "state": "open",
        "number": 95599
    },
    {
        "title": "Support terminal link keyboard navigation",
        "description": "Right now there is navigation mode which is similar to this but only with the text in the line. Where this gets really interesting is navigating types of links (eg. web links only, local files only, all links). Example mockup:\r\n\r\n![image](https://user-images.githubusercontent.com/2193314/79618006-b9a51700-80bd-11ea-9577-8e4d0ed30b52.png)\r\n\r\nIt could feature up, down, left, right as well as previous and next navigation.",
        "createdAt": "2020-04-17 22:13:01",
        "state": "open",
        "number": 95570
    },
    {
        "title": "launch.json: support debug active test file",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nOur launch.json supports debugging all mocha test files perfectly but we can't tweak it to debug a single test file easily without hard coding.\r\n\r\nFor example, I want to debug a unit test file `/home/rebornix/vscode/out/vs/workbench/contrib/notebook/test/notebookFolding.test.js`, what I need to do in VS Code `launch.json` is tweaking `Run Unit Test`\r\n\r\n```diff\r\n{\r\n    \"type\": \"node\",\r\n    \"request\": \"launch\",\r\n    \"name\": \"Run Unit Tests\",\r\n    \"program\": \"${workspaceFolder}/test/unit/electron/index.js\",\r\n    \"args\": [\r\n        \"--remote-debugging-port=9222\",\r\n+.     \"--run=/home/rebornix/vscode/out/vs/workbench/contrib/notebook/test/notebookFolding.test.js\"\r\n    ],\r\n    \"outFiles\": [\r\n        \"${workspaceFolder}/out/**/*.js\"\r\n    ]\r\n}\r\n```\r\n\r\nI'd like to replace the hard code file path with variables, what we have right now are\r\n\r\n*  `\"workspaceFolder\" : \"/home/rebornix/\"`\r\n* `\"relativeFileDirName\": \"src/vs/workbench/contrib/notebook/test/\"`\r\n* `\"fileWithNoExtension\": \"notebookFolding.test\"`\r\n\r\nThe only change we need to do is replacing `src` with `out` but I guess it requires knowledge of `tsconfig`. If the typescript can contribute a variable like `outputFilePath` then the problem can be solved.\r\n\r\ncc @mjbvz \r\n\r\n\r\n\r\nVS Code version: Code - Insiders 1.45.0-insider (6e9a34c0de4181a99f11e106733ee3e8c9db79f1, 2020-04-16T05:41:45.257Z)\r\nOS version: Darwin x64 19.2.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-04-17 16:09:47",
        "state": "open",
        "number": 95544
    },
    {
        "title": "Allow \"run anyway\" option for `runtimeVersion`",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\n`runtimeVersion` is too limiting in that it only supports `nvm` and `nvs`, and not `fish-nvm` or `n`. While I could ask to try and support every Node version managing program in existence and every program that will be invented in the future, I feel a much better solution is to rather warn users but still let them run node.\r\n\r\nAs it currently is, it straight-up blocks some developers unless they go through and modify their launch config locally.",
        "createdAt": "2020-04-17 06:04:24",
        "state": "open",
        "number": 95495
    },
    {
        "title": "Add support for `font-stretch`",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.44.1\r\n- OS Version: windows_NT x64 10.0.18363\r\n\r\nSteps to Reproduce:\r\n\r\n1. set font is iosevka extended (it is Monospaced font),\r\n2. it not Monospaced font in display.\r\n\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes/No\r\nyes\r\n\r\np.s.: [iosevka](https://github.com/be5invis/Iosevka)",
        "createdAt": "2020-04-17 03:44:46",
        "state": "open",
        "number": 95493
    },
    {
        "title": "Use encrypted keychain for account management",
        "description": "```ts\r\nexport namespace authentication {\r\n    export function getPassword(key: string): Thenable<string | null>;\r\n    export function setPassword(key: string, value: string | null): Thenable<void>;\r\n}\r\n```",
        "createdAt": "2020-04-16 19:08:06",
        "state": "open",
        "number": 95475
    },
    {
        "title": "Improve rendering of find matches touching each other",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nI need to remove some lines of text from about 80 files (every file has about 2000 rows) at the same time. I wanted to use search&replace tool in vs Code(ctrl+shift+f). \r\n\r\nAnd my issue consists of two different problems:\r\n## Problem 1  \r\nGiven following rows:\r\n```\r\nb\u00fdt=elektronick\u00fd=z\u00e1silka\r\nb\u00fdt=jin\u00fd=zp\u016fsob\r\nb\u00fdt=poskytov\u00e1n\u00ed=poz\u00e1ru\u010dn\u00ed\r\nb\u00fdt=poskytov\u00e1n\u00ed=servisn\u00ed\r\nb\u00fdt=pozd\u011b=t\u0159et\u00ed\r\nb\u00fdt=poz\u00e1ru\u010dn\u00ed\r\nb\u00fdt=poz\u00e1ru\u010dn\u00ed=servis\r\nb\u00fdt=p\u0159\u00edslu\u0161n\u00fd=krajsk\u00fd\r\nb\u00fdt=p\u0159\u00edslu\u0161n\u00fd=po\u0161kozen\u00fd\r\nb\u00fdt=schopn\u00fd=dodan\u00fd\r\nb\u00fdt=servis\r\nb\u00fdt=servisn\u00ed\r\nb\u00fdt=servisn\u00ed=slu\u017eba\r\nb\u00fdt=slu\u017eba=zahrnuj\u00edc\u00ed\r\nb\u00fdt=zejm\u00e9na=uveden\u00fd\r\n```\r\nwhere I need to remove whole row with occurence. This works correctly and matches 3+grams: \r\n`^b\u00fdt=[^=]+=.*`\r\nThis incorrectly matches also 2grams:\r\n`^b\u00fdt=[^=]+=.*\\n`\r\n\r\nThen i thought - ok, I can make some workaround and split it to two regexps which lead to problem 2.\r\n\r\n## Problem 2 \r\nWhen I removed all occurences of this `^b\u00fdt=[^=]+=.*` from all files, then I needed to remove blank lines. I used the same tool for multi search and replace in all files from the same folder.\r\nI used this regexp `^\\n` and the button for replace all (it said about 2000 occurences) didn't do almost anything (changed about 3 files from 80). \r\n\r\nOk I tried to click to replace all button in multisearch window file by file. Reached 3rd file where it stopped to work as well. \r\n\r\nOk if I click fast enough I might be done soon I thought and clicked on replace for each occurence in multisearch window.\r\n\r\nAnd I was terrified when I later found that it instead of deleting blank lines also deleted lines with text. (e.g. `cena=n\u00e1hradn\u00ed=d\u00edl`) \r\n\r\nVS Code version: Code 1.44.1 (a9f8623ec050e5f0b44cc8ce8204a1455884749f, 2020-04-11T01:48:12.622Z)\r\nOS version: Windows_NT x64 10.0.18363\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz (8 x 2808)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: enabled<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off_ok<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|31.87GB (20.32GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (14)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-base64|ada|0.1.0\r\nvscode-markdownlint|Dav|0.34.0\r\njsonpath-extract|dav|1.2.3\r\ngc-excelviewer|Gra|2.1.34\r\nAngular2|joh|9.1.2\r\nrainbow-csv|mec|1.6.0\r\nvscode-docker|ms-|1.0.0\r\ncsharp|ms-|1.21.17\r\nvscode-kubernetes-tools|ms-|1.1.1\r\npython|ms-|2020.3.71659\r\npowershell|ms-|2020.3.0\r\nvscode-typescript-tslint-plugin|ms-|1.2.3\r\nvscode-yaml|red|0.7.2\r\nmarkdown-all-in-one|yzh|2.8.0\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-04-16 08:38:59",
        "state": "open",
        "number": 95425
    },
    {
        "title": "Hide only tag items in Git branch list.",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nThere's currently a \"Checkout Type\" setting that allows the following options :  All, local, tags, remote.\r\n\r\nThere's not an option to show both local and remote only (i.e., hide only tags). I'd like to see this setting converted to a checkbox for each option so that any combination of options can be selected.\r\n",
        "createdAt": "2020-04-15 21:58:36",
        "state": "open",
        "number": 95385
    },
    {
        "title": "Allow updating \"find in selection\" range",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nI set up my search dialog to replace a string with another inside the selection. Then I made the selection, and clicked the Replace All button.\r\n\r\nInstead of changing it inside the selection, it changed it on another line as well.\r\n\r\nRelated to #91210, which is more generally about how I find find-replace behavior to be very inconsistent, but this seems more like a bug.\r\n\r\n![ezgif com-video-to-gif](https://user-images.githubusercontent.com/108767/79366241-d43e8b00-7f19-11ea-97ef-3bc56696342b.gif)\r\n\r\n\r\nVS Code version: Code 1.44.0 (2aae1f26c72891c399f860409176fe435a154b13, 2020-04-08T08:23:56.137Z)\r\nOS version: Darwin x64 19.4.0\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-8559U CPU @ 2.70GHz (8 x 2700)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>metal: disabled_off<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off_ok<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|3, 2, 2|\r\n|Memory (System)|16.00GB (0.09GB free)|\r\n|Process Argv|-psn_0_172074|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (21)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nccls|ccl|0.1.28\r\nsystemd-unit-file|coo|1.0.6\r\nvscode-eslint|dba|2.1.3\r\nvscode-dash|dee|2.4.0\r\ncode-runner|for|0.9.17\r\nvscode-codeql|Git|1.1.1\r\nvscode-test-explorer|hbe|2.18.0\r\nr|Iku|1.2.8\r\nvscode-cudacpp|kri|0.1.1\r\nlinter-gfortran|krv|2.1.1\r\nrestructuredtext|lex|126.0.0\r\nnc-gcode|ML|0.13.0\r\nvscode-docker|ms-|1.0.0\r\npython|ms-|2020.3.71659\r\nremote-containers|ms-|0.112.0\r\nremote-ssh|ms-|0.51.0\r\nremote-ssh-edit|ms-|0.51.0\r\nremote-wsl|ms-|0.44.2\r\nvscode-remote-extensionpack|ms-|0.20.0\r\ncmake-tools|ms-|1.3.1\r\ncpptools|ms-|0.27.0\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->\r\n\r\n",
        "createdAt": "2020-04-15 17:06:28",
        "state": "open",
        "number": 95356
    },
    {
        "title": "Should we optimize sync setup for syncing everything",
        "description": "If the vast majority of people just sync everything (like myself), we could save users from encountering this visually noisy/complex dialog:\r\n\r\n![image](https://user-images.githubusercontent.com/2193314/79363645-0261a200-7efd-11ea-997a-7ded9c73b3d8.png)\r\n\r\nBy hiding it behind another that simply listed the options:\r\n\r\n- Sync everything\r\n- Customize what to sync",
        "createdAt": "2020-04-15 16:40:45",
        "state": "open",
        "number": 95352
    },
    {
        "title": "Expose utility functions for Uri paths",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nSeeing as `joinPath` is now [a proposed API](https://github.com/microsoft/vscode/blob/b02307e53deacb2bd84e976449213b7768060367/src/vs/vscode.proposed.d.ts#L1963), it would be nice to also have [`dirname`, `basename` and `extname`](https://github.com/microsoft/vscode/blob/a94e5d915c29906bcf3e375f57420522c29c8e36/src/vs/base/common/resources.ts#L71-L85).",
        "createdAt": "2020-04-15 16:18:00",
        "state": "open",
        "number": 95350
    },
    {
        "title": "Timeline support for folders",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\nThe timeline should support folders as well: the timeline of a file X is equivalent to `gitk -- X`, and the timeline of a folder X should be equivalent to `gitk -- X`.",
        "createdAt": "2020-04-15 12:24:54",
        "state": "open",
        "number": 95332
    },
    {
        "title": "Set default location for workspace configuration files",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI save all my workspaces in a shared folder so I can access them across devices. It would be nice if vscode can be configured to have a default workspace storage directory. Currently the `open workspace` command opens file selection dialog in the current folder and I have to navigate manually to the place where I saved my workspaces.\r\n",
        "createdAt": "2020-04-15 09:00:47",
        "state": "open",
        "number": 95311
    },
    {
        "title": "Minimap supports display //Mark: in normal size like xcode",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nMinimap supports display //Mark: in normal size like xcode will be very useful.",
        "createdAt": "2020-04-15 02:43:55",
        "state": "open",
        "number": 95285
    },
    {
        "title": "Searching a folder with markdown and notebook files",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\nVersion: 1.44.1 (user setup)\r\nCommit: a9f8623ec050e5f0b44cc8ce8204a1455884749f\r\nDate: 2020-04-11T01:48:12.622Z\r\nElectron: 7.1.11\r\nChrome: 78.0.3904.130\r\nNode.js: 12.8.1\r\nV8: 7.8.279.23-electron.0\r\nOS: Windows_NT x64 10.0.18363\r\n\r\nWhen using Juputer books or a folder with exclusively markdown and notebook files, Find in folder search isn't friendly. \r\n\r\nSteps to Reproduce:\r\n\r\n1. Open a folder which has notebook and markdown files and search for a term to get some results.\r\n2. On clicking the expanded results, if it's a markdown file, it opens up as text file and if it's a ipynb file, it refreshes and does not scroll to the correct place.\r\n\r\n\r\n**It would be a better experience if we just show flat files which has the search term and open up the file in the correct format on click. Or have the expanded results to open up in the correct file format and scroll to correct location.**\r\n\r\n",
        "createdAt": "2020-04-14 23:08:32",
        "state": "open",
        "number": 95275
    },
    {
        "title": "Support synchronising extension's global state",
        "description": "Support synchronising extension's global state",
        "createdAt": "2020-04-14 10:56:13",
        "state": "open",
        "number": 95209
    },
    {
        "title": "Support codicons in webview",
        "description": "Just like we support to use all theme colors in webview, we should support the use of codicons inside webviews. This will help with issues like https://github.com/microsoft/vscode-github-issue-notebooks/issues/15 or https://github.com/microsoft/vscode-github-issue-notebooks/issues/7",
        "createdAt": "2020-04-14 09:32:59",
        "state": "open",
        "number": 95199
    },
    {
        "title": "Provide a protocol handler for diffing two files",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\nVSCode supports some protocol handler activation (e.g. to clone a repo). However there is none to deal with file diffing. Win32 apps can do this with `code.cmd --diff left.txt right.txt`. However this pattern is not possible from UWP apps (they can't start arbitrary processes). Instead, UWP apps need to call `Launcher.LaunchUriAsync`.",
        "createdAt": "2020-04-14 06:14:50",
        "state": "open",
        "number": 95184
    },
    {
        "title": "Keep terminal content after reconnecting (SSH)",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nUsing VSCode insider, we have the great \"remote SSH\", working on a remote server.\r\n\r\nWhen the connection is lost, VSCode propose to reconnect to the server. Great.\r\nBut when it does, we loose all the terminal windows, and more important, all the content of those windows.\r\n\r\nI would appreciate if the \"content\" of the terminal windows would remain, even if the tab is not connected anymore... Something like a \"Dead pane\"... allowing us to see what did happen in the terminal while reloading the window.\r\n\r\nHave a nice day",
        "createdAt": "2020-04-14 06:03:38",
        "state": "open",
        "number": 95183
    },
    {
        "title": "Support \"perspectives\" like approach in VSCode ",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\n**What is a Perspective?**\r\nhttps://www.tutorialspoint.com/eclipse/eclipse_perspectives.htm\r\nhttps://www.eclipse.org/articles/using-perspectives/PerspectiveArticle.html\r\n\r\nConsidering large projects with different components (backend, frontend  projects with mix of languages) a feature similar to Eclipse IDE \"perspectives\" would be very useful to easy switch between the projects or scope to a section of the current project. To switch between the perspectives, a ui similar to open recent (Ctrl-R) project could be used and triggered with a shortcut (Ctrl-9). The icon in each entry can show the project's main technology (angular, c#, etc).\r\n\r\nIn the File Explorer (VSCode's Tab) a new context menu option \"Create Perspective\" is used to add perspectives based on a folder.\r\n\r\nIn the Sidebar a new item can be added named \"Perspectives\" that can list the existing perspectives with a highlight on the active one. A color can be used in the ui sidebar item or a status bar indicator similar to \"Open Remote Window\" with the name of the current perspective, at click will open Ctrl-9 ui mentioned above.\r\n\r\n![image](https://user-images.githubusercontent.com/37976898/79321063-76a74000-7f13-11ea-9701-a1799df1db4b.png)\r\n \r\n\r\nBenefits:\r\n- large projects can be easier managed on each component (eg: backend perspective, web app perspective, mobile app perspective)\r\n- scope to section in same project / perspective with  \"Create Perspective\"\r\n- keeps the same window but switches the workspace (no alt-tab jumps)\r\n- keeps the same simple/clean layout (no need for multiple sidebars clutter)",
        "createdAt": "2020-04-14 05:40:20",
        "state": "open",
        "number": 95182
    },
    {
        "title": "Adopt GitHub Auth provider for issues reporter ",
        "description": "Since we now have a way for users to login to GitHub within VSCode, we can leverage this in the issue reporter. As a first step, if the user is already signed in and we have a token with scopes for creating an issue, we can just directly post the issue instead of showing the intermediate \"new issue\" page",
        "createdAt": "2020-04-14 00:55:42",
        "state": "open",
        "number": 95165
    },
    {
        "title": "[folding] mode to have region based folding only",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIs it possible to remove folding for the language, but leave it only for writing keywords (for example in C# #region #endregion)",
        "createdAt": "2020-04-13 22:44:02",
        "state": "open",
        "number": 95156
    },
    {
        "title": "Keyboard shortcuts for switching focus between left & right sides of diff view",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIt would be great if there was a keyboard shortcut to switch between the left and right sides of a diff view (what opens when you show changes to a file from the source control tab, or when you use the \"Compare active file with...\" command). I often find myself comparing two files, especially when refactoring, and copying content from the left file to the right one, and without keyboard shortcuts this is tedious as I have to use the mouse every time to switch focus. (If there's an existing command for this I can bind a keyboard shortcut to, that'd be great too!)\r\n\r\nThanks for all the amazing work!\r\n\r\nVS Code version 1.44.0 on Windows 10",
        "createdAt": "2020-04-12 21:08:48",
        "state": "open",
        "number": 95068
    },
    {
        "title": "Show error/warning above the documentation on mouse hover",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nHi,\r\n\r\nWhen I hover my mouse over an item with error/warning, I want to immediately see the error/warning rather than the documentation for that item. As of today, the documentation gets priority over error/warning, which doesn't make sense to me. Can you provide an option to switch this behavior?\r\n\r\nExample:\r\n\r\nThe documentation for `Response` is shown by default (1st screenshot). But I'm interested in the warning, which is visible only after I scroll down (2nd screenshot).\r\n\r\n<img width=\"575\" alt=\"Screen Shot 2020-04-10 at 8 34 50 PM\" src=\"https://user-images.githubusercontent.com/1058322/79035461-d4363800-7b73-11ea-97d7-6586f1e32627.png\">\r\n<img width=\"576\" alt=\"Screen Shot 2020-04-10 at 8 35 05 PM\" src=\"https://user-images.githubusercontent.com/1058322/79035465-d7312880-7b73-11ea-8b69-55b64bda24b9.png\">\r\n",
        "createdAt": "2020-04-11 04:40:26",
        "state": "open",
        "number": 94972
    },
    {
        "title": "Truncate and copy large values from the debug console",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n\r\nIn js-debug, we truncate large data inside the debug adapter before giving back to the UI. However, this means that if the user logs a very large string, they have no way to view it. The Chrome devtools solve this by adding a \"copy\" and \"show all\" button to very large strings.\r\n\r\n![image](https://user-images.githubusercontent.com/2230985/79011635-49285400-7b19-11ea-9f6f-c648f1ea557c.png)\r\n\r\nWe don't currently have a way to show buttons in the output. I believe the just having a \"copy\" button in the UI is sufficient. An approach for this is to use the `evaluateName` in the output's `variablesReference` with an `evaluate` call, in the `clipboard` context if supported. It's notable that the UI can use this even for values that aren't truncated to allow the user to copy complex expressions.\r\n\r\nThe question of who does the truncation is orthogonal to the ability to copy. If the debug adapter continues to do the truncation, then it should have a DAP flag to hint to the UI that the value can be expanded (using the presence of an `evaluateName` alone would prevent thatgeneralized copy functionality).\r\n\r\nIf the UI does the truncation, it means more traffic over the protocol, and it might also be tricky to figure out how to show a truncated state for complex objects. But then the UI can also implement \"show all\" without any debug adapter changes. Overall I think UI-side truncation is preferable.\r\n\r\ncc @isidorn @weinand @roblourens ",
        "createdAt": "2020-04-10 18:03:27",
        "state": "open",
        "number": 94937
    },
    {
        "title": "Search freezes computer when large files are present in workspace",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nI have several big text files in my workspace (over ten files  ~10gb each). And when I try to search something globally whole computer stops working, I can't even move the mouse or open terminal, and probably all the files are loaded to memory. And also I have 'Max Memory For Large Files MB' set to 4gb\r\n\r\nVS Code version: Code 1.44.0 (2aae1f26c72891c399f860409176fe435a154b13, 2020-04-08T11:22:13.689Z)\r\nOS version: Linux x64 5.3.0-42-generic\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz (8 x 2800)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: disabled_software<br>skia_renderer: disabled_off_ok<br>video_decode: unavailable_off<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off_ok<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|1, 1, 2|\r\n|Memory (System)|23.36GB (8.48GB free)|\r\n|Process Argv|--no-sandbox --unity-launch|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (40)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nhtml-snippets|abu|0.2.1\r\ncode-gnu-global|aus|0.2.2\r\nvscode-node-readme|ben|3.0.2\r\nsimple-react-snippets|bur|1.2.2\r\ngitignore|cod|0.6.0\r\nes7-react-js-snippets|dsz|2.7.1\r\ngitlens|eam|10.2.1\r\nvscode-html-css|ecm|0.2.3\r\nvscode-npm-script|eg2|0.3.11\r\ncode-runner|for|0.9.17\r\ngc-excelviewer|Gra|2.1.34\r\nCppSnippets|har|0.0.14\r\nsmarty|imp|0.3.0\r\npath-autocomplete|ion|1.13.6\r\nsearch-node-modules|jas|1.3.0\r\nmarkdownfromcsv|joj|1.0.6\r\nibm-assembler|kel|0.6.0\r\nnode-module-intellisense|lei|1.5.0\r\ncsharpfixformat|Leo|0.0.84\r\nrainbow-csv|mec|1.6.0\r\nvscode-docker|ms-|1.0.0\r\ncsharp|ms-|1.21.16\r\npython|ms-|2020.3.71659\r\ncpptools|ms-|0.27.0\r\nvscode-typescript-tslint-plugin|ms-|1.2.3\r\nhades-assembler|pir|0.0.1\r\nmaterial-icon-theme|PKi|4.0.1\r\ntypescript-hero|rbb|3.0.0\r\nruby|reb|0.27.0\r\nsass-indented|rob|1.5.1\r\ntrailing-spaces|sha|0.3.1\r\nascii-plist|spe|1.0.3\r\nautoimport|ste|1.5.3\r\nvs-code-node-require|tgr|1.4.7\r\nvsfire|tob|1.4.1\r\nvscode-status-bar-format-toggle|tom|2.0.0\r\nlorem-ipsum|Tyr|1.2.0\r\nerrorlens|use|3.1.0\r\nvscode-ruby|win|0.27.0\r\nhtml-css-class-completion|Zig|1.19.0\r\n\r\n(2 theme extensions excluded)\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-04-10 12:36:52",
        "state": "open",
        "number": 94903
    },
    {
        "title": "Allow extensions to get editorLayout (from EditorGroup)",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nWhen developing a extension I am using `vscode.setEditorLayout` as described in https://code.visualstudio.com/api/references/commands, and I am able to set editor layout/groups:\r\n\r\n```javascript\r\nvscode.commands.executeCommand(\r\n  'vscode.setEditorLayout',\r\n  { orientation: 1, groups: [{size: 0.4 }, { size: 0.6 }], }\r\n);\r\n```\r\n\r\nThe problem is that, before setting the layout, sometimes is good the get the current state, so we don't mess with the current displayed layout: \r\n\r\n```javascript\r\nlet layout = vscode.window.editorLayout \r\nconsole.log(layout)\r\n// { orientation: 1, groups: [{size: 0.7 }, { size: 0.3 }], }\r\n```\r\n\r\nIn the above example we could check that we already have two groups in vertical orientation, and because of that we won't change the size, we will respect the sizes the user already set.\r\n\r\nI looked at vscode source code and found IEditorGroupsService, but couldn't find a way for a extension to access it, so sorry if I missed something.\r\n\r\nPS: the window.editorLayout is just an idea, I don't know if there is another name or more appropriate namespace for this.\r\n",
        "createdAt": "2020-04-09 18:11:16",
        "state": "open",
        "number": 94817
    },
    {
        "title": "Notebook source control / diff",
        "description": "This is the summary of the discussions @kieferrm and me had about how to support diff in VS Code, what the UX is like and what are the gaps in the API to get it working properly.\r\n\r\n## UX (Rich/Plaintext diff)\r\n\r\nNotebooks are reprenseted in rich UI (markdown previews, code editors, and outputs rendered in various forms) but the notebook documents are usually stored to file systems in text form and then it can be tracked by source control systems. Today in VS Code you can already do text form diffing but that's limited, for example, if an image/chart output changes, we can't tell what's being changed through text diff.\r\n\r\nThus we want to do rich diffs by rendering notebooks in Notebook Editor side by side, align the cells positions (similar to how we align lines in text diff editor). The catch with this approach is it doesn't present all the data in the document. One example is Jupyter Notebook stores custom metadatas (kernel info, document schema version, etc) but they are never presented in the VS Code UI. To allow users still have a full picture of what's being changed behind the scenes, we may want to still support text based diffing and users can easily switch between them.\r\n\r\n## FS & Source Control\r\n\r\nCurrently the two responsbilities of a `vscode.NotebookContentProvider` are\r\n\r\n1. resolving the content for a resource (identified by `vscode.Uri`) and converting to structured data `vscode.NotebookDocument`, and \r\n2. serializing `vscode.NotebookDocument` and saving its text form onto file system. \r\n\r\nSince the identifiers for resources are `vscode.Uri`, which are always backed up by a file system provider, notebook content providers should use `vscode.workspace.fs` to resolve its raw content, instead of using node's `fs`. \r\n\r\nThe source control API in VS Code works seemlessly with `vscode.Uri`. For example, if you have a pending file change in a git repo, git extension can provide two resource `Uri` for the file, one `file:///` uri for current content and one `git:///` uri for the content prior to the change. Then we can ask notebook content provider to resolve the content for both `Uri`s. \r\n\r\n*SCM API*\r\n\r\n```ts\r\nexport interface SourceControl {\r\n    quickDiffProvider?: QuickDiffProvider;\r\n}\r\n\r\ninterface QuickDiffProvider {\r\n    provideOriginalResource?(uri: Uri, token: CancellationToken): ProviderResult<Uri>;\r\n}\r\n```\r\n\r\n*Notebook Content Provider*\r\n\r\n```ts\r\nexport interface NotebookContentProvider {\r\n    /**\r\n     * Resolve content from `uri` and convert it to `NotebookData`\r\n     * Extensions should use `vscode.workspace.fs` for resolving the raw content for `uri`.\r\n     */\r\n    openNotebook(uri: Uri, openContext: NotebookDocumentOpenContext): NotebookData | Promise<NotebookData>;\r\n}\r\n```\r\n\r\n## Dirty changes in workspace\r\n\r\n`Uri`s work great for source control as the content changes are already saved to file system. However if users have a dirty notebook document in the workspace (say auto saved is turned off), we can't differenciate *content on disk* and *content in workspace* as they share the same `Uri` and VS Code core doesn't know how to turn the dirty `vscode.NotebookDocument` to text.\r\n\r\nSince `vscode.NotebookContentProvider` is the only one who knows how to convert a `vscode.NotebookDocument` to text, we will delegate this to the content provider:\r\n\r\n\r\n```ts\r\nexport interface NotebookContentProvider {\r\n    /**\r\n     * Save the text form of `notebookDocument` into `textDocument`\r\n     */\r\n    notebookAsText(notebookDocument: NotebookDocument, textDocument: TextDocument): Promise<void>;\r\n}\r\n```\r\n\r\n## Diff\r\n\r\nWe have a complex two way diff algorithm for the text files, which can probably be used for the notebook document too. The catch is how we are going to compare `NotebookCell`s efficiently. If notebook providers can provide an unique id for each cell, that would be great. If not, we have to do deep comparison for `NotebookCell` content.\r\n\r\nThe comparison algorithm for `NotebookCell` might differ for different notebook providers. For example the GitHub Notebook wants to exclude outputs but Jupyter Notebook may include them. Not sure yet whether this can be described descriptively through metadata or we need to introduce new APIs.",
        "createdAt": "2020-04-09 15:43:29",
        "state": "open",
        "number": 94810
    },
    {
        "title": "Unit testing extensions is quite difficult",
        "description": "Refs: #93604\r\n\r\nMaybe we could provide a mock library for certain vs code types, and guidance (docs, examples, blogs, etc) on how it can be done effectively.\r\n\r\n/cc @jrieken ",
        "createdAt": "2020-04-09 04:53:05",
        "state": "open",
        "number": 94746
    },
    {
        "title": "Provide a UI component toolkit for WebViews",
        "description": "Refs: #93604\r\n\r\nAs WebViews get used more and more to provide functionality (especially now with Custom Editors), it would be great to provide a reusable set of components that fit VS Code's UI/UX style and behavior.",
        "createdAt": "2020-04-09 04:38:49",
        "state": "open",
        "number": 94741
    },
    {
        "title": "Git: Offer to show the entire git commit output, when it fails",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nI'm using git pre-commit hooks via Husky to run the Prettier code formatter on my project. Sometimes I try to commit code that has a syntax error and when that happens the pre-commit hooks fail. If I commit from the terminal I get an informative error message like the following:\r\n```shell\r\n$ git commit -am \"test\"\r\nhusky > pre-commit (node v10.19.0)\r\nPreparing... [started]\r\nPreparing... [completed]\r\nRunning tasks... [started]\r\nRunning tasks for *.{ts,js,json,html,scss,md} [started]\r\nprettier --write [started]\r\nprettier --write [failed]\r\n\u2192\r\nRunning tasks for *.{ts,js,json,html,scss,md} [failed]\r\n\u2192\r\nRunning tasks... [failed]\r\nApplying modifications... [started]\r\nApplying modifications... [skipped]\r\n\u2192 Skipped because of errors from tasks.\r\nReverting to original state... [started]\r\nReverting to original state... [completed]\r\nCleaning up... [started]\r\nCleaning up... [completed]\r\n\r\n\r\n\r\n\u00d7 prettier found some errors. Please fix them and try committing again.\r\n\r\n[error] packages\\site\\src\\app\\app.component.ts: SyntaxError: '{' expected. (9:3)\r\n[error]    7 | })\r\n[error]    8 | export class AppComponent\r\n[error] >  9 |   title = \"site\";\r\n[error]      |   ^\r\n[error]   10 | }\r\n[error]   11 |\r\nhusky > pre-commit hook failed (add --no-verify to bypass)\r\n```\r\n\r\nHowever when I commit via VSCode's built-in commands I get a much less informative error dialog which requires me to click \"Open Git Log\" and scroll back through a page or two of git output to find the detailed error message.\r\n![image](https://user-images.githubusercontent.com/667716/78824730-d8fcbf80-79ac-11ea-869b-f2b8aee94167.png)\r\n\r\n\r\nVS Code version: Code 1.43.2 (0ba0ca52957102ca3527cf479571617f0de6ed50, 2020-03-24T07:38:38.248Z)\r\nOS version: Windows_NT x64 10.0.18363\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz (12 x 2208)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: enabled<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off_ok<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|31.77GB (12.20GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (43)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nproject-manager|ale|10.11.0\r\nng-template|Ang|0.901.0\r\nspellright|ban|3.0.50\r\nscratchpads|bue|0.0.7\r\nfind-related|eam|0.9.0\r\ngitlens|eam|10.2.1\r\nEditorConfig|Edi|0.14.5\r\nprettier-vscode|esb|4.1.1\r\nkotlin|fwc|0.2.11\r\ntodo-tree|Gru|0.0.171\r\nrest-client|hum|0.23.2\r\nsearch-node-modules|jas|1.3.0\r\nsvg|joc|1.1.7\r\nescape-regexp|kir|1.0.0\r\nvscode-commitizen|Kni|0.8.4\r\nvscode-duplicate|mrm|1.2.1\r\nvscode-scss|mrm|0.9.0\r\nvscode-azureappservice|ms-|0.16.4\r\nmssql|ms-|1.9.0\r\npython|ms-|2020.3.71659\r\nremote-containers|ms-|0.106.0\r\nremote-ssh|ms-|0.51.0\r\nremote-ssh-edit|ms-|0.51.0\r\nremote-wsl|ms-|0.42.4\r\nvscode-remote-extensionpack|ms-|0.20.0\r\nazure-account|ms-|0.8.9\r\nvscode-typescript-tslint-plugin|ms-|1.2.3\r\nvsliveshare|ms-|1.0.1891\r\ndebugger-for-chrome|msj|4.12.6\r\njava|red|0.59.1\r\nvscode-xml|red|0.11.0\r\nvscode-yaml|red|0.7.2\r\nvscode-open|san|0.1.0\r\nreveal|smu|1.2.7\r\nhighlight-matching-tag|vin|0.9.6\r\nvscodeintellicode|Vis|1.2.6\r\nvscode-java-debug|vsc|0.25.1\r\nvscode-java-dependency|vsc|0.9.0\r\nvscode-java-pack|vsc|0.8.1\r\nvscode-java-test|vsc|0.22.3\r\nvscode-maven|vsc|0.21.2\r\nvim|vsc|1.13.1\r\nmaterial-theme|zhu|3.2.5\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-04-08 19:25:14",
        "state": "open",
        "number": 94711
    },
    {
        "title": "using orca I can't edit commands already executed in the VSCode terminal",
        "description": "Issue Type: <b>Bug</b>\r\n\r\n1. In a linux environment launch orca and VSCode.\r\n2. Press ctrl+` to activate a VSCode terminal.\r\n3. Type a shell command and press enter, for example:\r\necho This is a test.\r\n4. Press the up arrow.\r\n\r\nOrca reads the command typed in the step 3 as expected.\r\n\r\n5. Try use left and right arrow to review the content of the command.\r\n\r\nOrca should read each character as left and right are pressed but instead it is muted.\r\n\r\n@isidorn @joanmarie\r\nI'm not sure if the problem is with orca or VSCode.\r\n\r\nVS Code version: Code - Insiders 1.44.0-insider (2aae1f26c72891c399f860409176fe435a154b13, 2020-04-07T21:48:49.536Z)\r\nOS version: Linux x64 5.6.2-arch1-2\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-04-08 18:40:08",
        "state": "open",
        "number": 94708
    },
    {
        "title": "Feature request: Multiple output panels",
        "description": "Looking at my editor right now there are 23 different items in the dropdown on the output tab. Only ~2-3 of those are actually relevant for my current work. It would be great if I could split those 2 or 3 important output streams into their own panels/tabs. \r\n\r\nRight now it's tedious if there's more than 1 important output stream at once -- I have to go to output, open the dropdown, locate the option I want out of 23, then click to switch any time I need to look at the other output stream. Depending on the task at hand this can happen quite frequently. It would be so much more useful to be able to split out those couple important output streams to top level tabs.",
        "createdAt": "2020-04-08 11:44:09",
        "state": "open",
        "number": 94681
    },
    {
        "title": "Option to expand computed TypeScript types on hover",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nWhen working with complex types, I often encounter types like this:\r\n\r\n![image](https://user-images.githubusercontent.com/19621208/78776659-d9e61f00-79b5-11ea-865d-f8803c5ca206.png)\r\n\r\nIt's opaque enough that without understanding all the utils that are used and computing it in the head, it's hard to understand what type is being represented. I'd love to have a way to expand it into the fully resolved type, which in the case of the above example would be:\r\n\r\n```TS\r\n{\r\n  a: number;\r\n  b?: boolean | null | undefined;\r\n  c: string;\r\n  d: symbol;\r\n}\r\n```\r\n\r\nThe impl of actual utils I'm using are inconsequential; it's the same if we'd used `Pick`, `Omit`, or `Partial`. It'd be great to be able to expand computed types. I'm not sure whether the responsibility for this lies in VSCode or TypeScript, so if I should be moving this there, let me know :)",
        "createdAt": "2020-04-08 11:05:14",
        "state": "open",
        "number": 94679
    },
    {
        "title": "Should provide buttons to select/unselect all changes when preview a workspace edit",
        "description": "**Use Case**:\r\nWhen the user renames a Java file from file explorer, the Java extension would watch on `workspace.onDidRenameFiles` event, then calculate and generate a workspace edit to update its class name and references. Since it takes some time to calculate the edit, the user may perceive the file contents to be updated after a while. There is a lag between file rename and file content update. In order to improve the UX, we would show progress notification at the status bar during the calculation, and also want to try the preview API to preview the workspace edit instead of automatically applying the edit.\r\n\r\n**Problem**:\r\nCurrently `workspace.applyEdit` interface doesn't provide an option to allow the extension to force preview the workspace edit. A workaround is to add `WorkspaceEditEntryMetadata` property to the workspace edit. Since in java language, we don't distinguish which changes need to be confirmed, in order to trigger the preview pane, i just set the needsConfirmation to true for all changes. This will make all changes unchecked in the preview tree, and the users have to check one by one if they want to apply all. This is especially not convenient for large projects, as the possible modifications include many positions.\r\n![image](https://user-images.githubusercontent.com/14052197/78649658-531b3e80-78f0-11ea-9932-8c9eda0c88ed.png)\r\n\r\n**Expected**:\r\nAt least, provide an easy way to bulk select the changes. Further, it would be nice to expose a client API to force preview a workspace edit and keep all changes checked by default, like what rename did (shift + enter).\r\n\r\n\r\n",
        "createdAt": "2020-04-08 03:48:06",
        "state": "open",
        "number": 94650
    },
    {
        "title": "Scrollbar doens't respond to touch screen dragging",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version:\r\nVersion: 1.43.2 (system setup)\r\nCommit: 0ba0ca52957102ca3527cf479571617f0de6ed50\r\nDate: 2020-03-24T07:36:51.261Z\r\nElectron: 7.1.11\r\nChrome: 78.0.3904.130\r\nNode.js: 12.8.1\r\nV8: 7.8.279.23-electron.0\r\nOS: Windows_NT ia32 10.0.18363\r\n\r\nSteps to Reproduce:\r\n\r\n1. Touch and drag the scrollbar in the code editor\r\n2. Nothing happens\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-04-07 13:56:03",
        "state": "open",
        "number": 94610
    },
    {
        "title": "Trim Final Newlines integrates poorly with EditorConfig for Windows files",
        "description": "Overall VSCode does a decent job integrating with EditorConfig. Including the Trim Final Newlines setting once enabled.\r\n\r\nHowever, where final EOLs are disabled (such as for .AHK and other Windows-centric files), then Trim Final Newlines fails to delete final EOLs. How can we make sure that VSCode respects more EditorConfig configurations?\r\n\r\nIn particular:\r\n\r\n* Binary files should be ignored/preserved as-is.\r\n* .PATCH files should be ignored/preserved as-is.\r\n* Text files with contents consisting of exactly one EOL (CRLF, LF, or CR) should be ignored/preserved as-is.\r\n* .CS, .FS, .FSX, .VBS, .BAT, .COM, .PS1, .AHK, and other Windows-centric files should have zero trailing EOLs at the end of the buffer.\r\n* All other files should have exactly one (LF) EOL at the end of the buffer.\r\n\r\nVSCode 1.43.2\r\nWindows 10",
        "createdAt": "2020-04-06 19:07:37",
        "state": "open",
        "number": 94562
    },
    {
        "title": "Detect Indentation doesn't work on pasted text",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.41.1\r\n- OS Version: 4.19.97-gentoo\r\n\r\nSteps to Reproduce:\r\n\r\n1. set editor.detectIndentation: true\r\n2. open a .js file and create an object with template literals, like this:\r\n```JS\r\n\t\tbody: `\r\n\t\tasdasd\r\n\t\tasd\r\n    \t\t`,\r\n```\r\n3. paste multiline input that has no indentation, for example:\r\n```JS\r\n   txtUserId = getRequestString(\"password\");\r\ntxtSQL = \"SELECT * FROM Pass WHERE Pass =\"+pass;\r\n```\r\n4. result would look like this:\r\n```JS\r\n\t\tbody: `\r\n\t\tasdasd\r\n\t\tasd\r\n\t\ttxtUserId = getRequestString(\"password\");\r\ntxtSQL = \"SELECT * FROM Pass WHERE Pass =\"+pass;\r\n```\r\nThere seems to be no way to auto ident it based on the text around it \\ context.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-04-06 16:58:02",
        "state": "open",
        "number": 94554
    },
    {
        "title": "Support custom TaskGroup",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI plan to create an extension that will show my tasks ordered by group. I also have many custom task providers, and I would like to create a custom TaskGroup for them.\r\nRight now the API describes a constructor for [TaskGroup API](https://code.visualstudio.com/api/references/vscode-api#TaskGroup), but it is private, and I can't register it. \r\nI found this old [issue ](https://github.com/microsoft/vscode/issues/27575) but it doesn't seems to be up to date.\r\n",
        "createdAt": "2020-04-06 14:32:52",
        "state": "open",
        "number": 94548
    },
    {
        "title": "Support cygwin in the default shell selector",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nCygwin shell is not supported in vscode, would like to see this made available.\r\n\r\n\r\n![cygwin](https://user-images.githubusercontent.com/439226/78504112-f45f9480-7738-11ea-8452-d47719b56d39.png)\r\n\r\nVS Code version: Code - Insiders 1.43.0-insider (e6a45f4242ebddb7aa9a229f85555e8a3bd987e2, 2020-02-21T05:40:52.685Z)\r\nOS version: Linux x64 5.5.13-1-default\r\n\r\n\r\n<!-- generated by issue reporter -->\r\n",
        "createdAt": "2020-04-05 16:28:59",
        "state": "open",
        "number": 94473
    },
    {
        "title": "`workbench.view.alwaysShowHeaderActions` for notebook cells",
        "description": "We have `workbench.view.alwaysShowHeaderActions` in the viewlet to make view actions not visible based on hover, but instead always visible. It would be nice to have this for notebook cell actions too. For some (including myself) UI elements coming in and out of visibility based on cursor movement is distracting and it would be nice to have a way to allow the actions to always be available. \r\n\r\nPerhaps this could be rolled in with `workbench.view.alwaysShowHeaderActions` to a new setting, like \"workbench.reduceUIFlicker\" or something. ",
        "createdAt": "2020-04-05 04:09:16",
        "state": "open",
        "number": 94455
    },
    {
        "title": "Combine extensions.ignoreRecommendations and extensions.showRecommendationsOnlyOnDemand",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n\r\nI feel it's rather confusing to have two distinct settings for filtering extension recommendations: What's the result if both are `true`?\r\n\r\nSo, I suggest to combine these to settings into a single one with three options (click triangle to unfold):\r\n\r\n<details><summary>Recommend Extensions</summary>\r\n\r\n- Never\r\n- On demand only\r\n- Always\r\n</details>",
        "createdAt": "2020-04-03 21:27:04",
        "state": "open",
        "number": 94416
    },
    {
        "title": "Make extensions section in extensions pack expandable/collapsible ",
        "description": "From @jwarkentin in #89962\r\n\r\nMake the section expandable with a button/link at the bottom middle or left of the list of extensions that just says \"Show more\" or \"Show all extensions\" or something to that effect? \r\n\r\nThat way the readme is still visible but the user can choose to expand the extension list as part of the one scrollable content area.",
        "createdAt": "2020-04-03 07:23:25",
        "state": "open",
        "number": 94346
    },
    {
        "title": "[rename on type] API for languages beyond HTML",
        "description": "Continuing #88424, which implements the Synced Region feature for HTML.\r\n\r\nWe could offer an API and I can try doing it for JSX (#85707).\r\n\r\nI tried running this feature in real programming languages such as TypeScript, but automatic mode creates a lot of confusion. For example:\r\n\r\n```ts\r\nconst a = { b: 1, c: 2 }\r\na.b|\r\n```\r\n\r\nIn automatic mode, when I'm deleting `b` and entering `c` to change from `a.b` to `a.c`, `b: 1` would also be changed. This is undesirable.\r\n\r\nNevertheless, having Cmd+Shift+F2 to live-rename in a for-loop etc would be very helpful.\r\n\r\nThis issue tracks the API proposal below:\r\n\r\n```ts\r\n/**\r\n * The rename provider interface defines the contract between extensions and\r\n * the live-rename feature.\r\n */\r\nexport interface OnTypeRenameProvider {\r\n\t/**\r\n\t * Provide a list of ranges that can be live renamed together.\r\n\t *\r\n\t * @param document The document in which the command was invoked.\r\n\t * @param position The position at which the command was invoked.\r\n\t * @param token A cancellation token.\r\n\t * @return A list of ranges that can be live-renamed togehter. The ranges must have\r\n\t * identical length and contain identical text content. The ranges cannot overlap.\r\n\t */\r\n\tprovideOnTypeRenameRanges(document: TextDocument, position: Position, token: CancellationToken): ProviderResult<Range[]>;\r\n}\r\n\r\nnamespace languages {\r\n\t/**\r\n\t * Register a rename provider that works on type.\r\n\t *\r\n\t * Multiple providers can be registered for a language. In that case providers are sorted\r\n\t * by their [score](#languages.match) and the best-matching provider is used. Failure\r\n\t * of the selected provider will cause a failure of the whole operation.\r\n\t *\r\n\t * @param selector A selector that defines the documents this provider is applicable to.\r\n\t * @param provider An on type rename provider.\r\n\t * @param stopPattern Stop on type renaming when input text matches the regular expression. Defaults to `^\\s`.\r\n\t * @return A [disposable](#Disposable) that unregisters this provider when being disposed.\r\n\t */\r\n\texport function registerOnTypeRenameProvider(selector: DocumentSelector, provider: OnTypeRenameProvider, stopPattern?: RegExp): Disposable;\r\n}\r\n```",
        "createdAt": "2020-04-02 19:03:22",
        "state": "open",
        "number": 94316
    },
    {
        "title": "Better support for case sensitive macOS",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nI have found a case where a GIT repo has two folders with different casing.\r\nbut VSCode only shows one directory\r\n\r\nrelated to https://github.com/microsoft/vscode/issues/90983\r\n\r\nVS Code version: Code - Insiders 1.44.0-insider (20b88fa0694cae8e46ffd305a1450ba58ae6065b, 2020-04-01T08:34:11.087Z)\r\nOS version: Darwin x64 19.4.0\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-8850H CPU @ 2.60GHz (12 x 2600)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>metal: disabled_off<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off_ok<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|3, 3, 3|\r\n|Memory (System)|16.00GB (0.80GB free)|\r\n|Process Argv|-psn_0_5612890|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (22)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-base64|ada|0.1.0\r\nmarkdown-toc|Ala|1.5.6\r\ninline-hasher|ale|1.0.0\r\nspellright|ban|3.0.50\r\nbetter-toml|bun|0.3.2\r\ngotemplate|cas|0.3.0\r\nhadolint|exi|0.3.0\r\ngithub-actions|for|0.0.1\r\nterraform|mau|1.4.0\r\nmarkdown-shortcuts|mdi|0.12.0\r\nvscode-docker|ms-|1.0.0\r\ngithub-actions-vscode|Oma|2.7.0\r\nvscode-yaml-sort|Pas|2.3.0\r\nerrorlens|Phi|1.1.3\r\nvscode-yaml|red|0.7.2\r\nvscode-gitweblinks|red|1.5.0\r\ncode-settings-sync|Sha|3.4.3\r\nvscode-nginx|sha|0.6.0\r\nshellcheck|tim|0.9.0\r\nsort-lines|Tyr|1.9.0\r\nvscode-icons|vsc|10.0.0\r\nHCL|who|0.0.5\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-04-02 17:22:44",
        "state": "open",
        "number": 94307
    },
    {
        "title": "Add gear with additional actions to extension detail page",
        "description": "![image](https://user-images.githubusercontent.com/35271042/78258409-0e3a7680-74b0-11ea-9546-a298ad0f70f5.png)\r\n\r\nCurrently from the extension detail page there is no way to access the additional actions from the gear menu so you have to go all the way back to the viewlet:\r\n\r\n![image](https://user-images.githubusercontent.com/35271042/78258394-08dd2c00-74b0-11ea-97d7-d9d19e374cf4.png)\r\n\r\nProposal would be to add the gear menu after the uninstall button and surface those extra actions. We could also move the sync icon so they match:\r\n![image](https://user-images.githubusercontent.com/35271042/78258804-991b7100-74b0-11ea-86ae-9f0951cbdd0c.png)\r\n",
        "createdAt": "2020-04-02 14:08:29",
        "state": "open",
        "number": 94289
    },
    {
        "title": "[semantic tokens] provide code assist for tokenModifiers",
        "description": "refs #93804:\r\n\r\nno code assist for tokenModifiers:\r\n<img width=\"672\" alt=\"2020-04-02_11-59-20\" src=\"https://user-images.githubusercontent.com/1898161/78236003-b6b10080-74d9-11ea-8103-cec53834ae19.png\">\r\n\r\nI did get code assist in other cases:\r\n<img width=\"803\" alt=\"2020-04-02_11-59-50\" src=\"https://user-images.githubusercontent.com/1898161/78236058-cc262a80-74d9-11ea-9040-0b876db62f69.png\">\r\n",
        "createdAt": "2020-04-02 10:02:46",
        "state": "open",
        "number": 94269
    },
    {
        "title": "Notebook: find doesn't search in output",
        "description": "Testing https://github.com/microsoft/vscode/issues/93742\r\n\r\n* Create a notebook with query `label:electron $repo sort desc by reactions`\r\n* Search for some text that is also in the cell output\r\n* Notice results are only highlighted for text in query cell",
        "createdAt": "2020-04-02 03:50:17",
        "state": "open",
        "number": 94239
    },
    {
        "title": "Sorting of entries in the refactor preview puts checked items last instead of first",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! bug_report_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.43.2\r\n- OS Version: Windows or others.\r\n\r\nSteps to Reproduce:\r\n\r\n1. See issue https://github.com/microsoft/vscode/issues/90664 , that says \"We should make sure that categories with unconfirmed changes go atop, files should be sorted by name and changes by line number\".\r\n\r\nExpected: Our C/C++ extension would prefer the opposite behavior with the confirmed changes going on at the top, which is what was originally requested at https://github.com/microsoft/vscode/issues/77728#issuecomment-585985696 and what matches Visual Studio's C++ Rename preview:\r\n\r\n![image](https://user-images.githubusercontent.com/19859882/78183200-57d98180-741c-11ea-8002-4497d14771af.png)\r\n\r\nWas there a reason the opposite sorting was desired? Our Find All References UI (and our current Rename UI) puts the confirmed/checked references at the top, so flipping the order for rename is confusing to our users. In many scenarios, users just want to preview the confirmed/checked references, and they skip the other stuff, which is why we'd prefer the other types of unconfirmed/unchecked references to be at the bottom, since those types are less likely to be renamed.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-04-01 20:30:17",
        "state": "open",
        "number": 94210
    },
    {
        "title": "Prefernces Sync: Remote Backup showing empty diffs",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\n#93771\r\n\r\nSeeing a few empty diffs for settings and snippets:\r\n\r\n![image](https://user-images.githubusercontent.com/9205389/78176445-c807f780-745c-11ea-8ac6-ef54b033f156.png)\r\n\r\nFunny: When I enable 'Ignore leading / trailing whitespace' in that diff editor, that setting is toggled in the right part of the diff editor which I expected to be read-only.\r\n\r\nVS Code version: Code - Insiders 1.44.0-insider (20b88fa0694cae8e46ffd305a1450ba58ae6065b, 2020-04-01T08:29:34.507Z)\r\nOS version: Linux x64 5.3.0-42-generic\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i9-9980HK CPU @ 2.40GHz (4 x 2400)|\r\n|GPU Status|2d_canvas: unavailable_software<br>flash_3d: disabled_software<br>flash_stage3d: disabled_software<br>flash_stage3d_baseline: disabled_software<br>gpu_compositing: disabled_software<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: disabled_off<br>rasterization: disabled_software<br>skia_renderer: disabled_off_ok<br>video_decode: disabled_software<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off_ok<br>webgl: unavailable_software<br>webgl2: unavailable_software|\r\n|Load (avg)|0, 0, 0|\r\n|Memory (System)|7.77GB (3.27GB free)|\r\n|Process Argv|--disable-gpu --extensions-dir=/home/chrmarti/tmp/ext2 --user-data-dir=/home/chrmarti/tmp/user2 --no-sandbox|\r\n|Screen Reader|no|\r\n|VM|100%|\r\n</details><details><summary>Extensions (24)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nunique-lines|bib|1.0.0\r\nvscode-eslint|dba|2.1.2\r\nghlink|dt|1.2.0\r\nremotehub|eam|0.5.0\r\ntsl-problem-matcher|eam|0.1.1\r\nEditorConfig|Edi|0.14.4\r\ntslint|eg2|1.0.44\r\nvscode-pull-request-github-insiders|Git|2020.4.511\r\nrest-client|hum|0.23.2\r\ngraphql-for-vscode|kum|1.15.3\r\nvscode-docker|ms-|1.0.0\r\nvscode-kubernetes-tools|ms-|1.1.1\r\nremote-containers|ms-|0.109.0\r\nremote-ssh-edit-nightly|ms-|2020.3.44100\r\nremote-ssh-nightly|ms-|2020.3.44100\r\nremote-wsl|ms-|0.44.2\r\nazure-account|ms-|0.8.8\r\nazurecli|ms-|0.5.0\r\ngithub-issues-prs|ms-|0.9.2\r\ndebugger-for-chrome|msj|4.12.6\r\nvscode-versionlens|pfl|0.25.0\r\nvscode-yaml|red|0.7.2\r\nvscode-open-in-github|sys|1.13.0\r\nvscodeintellicode|Vis|1.2.6\r\n\r\n(1 theme extensions excluded)\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-04-01 19:09:55",
        "state": "open",
        "number": 94203
    },
    {
        "title": "Display Language doesn't update automatically",
        "description": "- Open argv file and change the display language.\r\n- No restart notification is shown\r\n\r\nRe #93771\r\n\r\n* Change Display Language in one instance, it requires restarting the app\r\n* The second instance doesn't show any notification after sync update\r\n* Restart the second instance uses the new display language",
        "createdAt": "2020-04-01 18:56:06",
        "state": "open",
        "number": 94201
    },
    {
        "title": "Contribution point for timeline provider",
        "description": "Testing #93820\r\n\r\nWhy is not there a `package.json` contribution point for timeline provider? Following are the advantages\r\n\r\n- I am not sure how I have to activate my extension if I only contribute timeline provider. Having a timeline contribution point can allow me to activate my extension when user starts using the timeline my extension contributes\r\n\r\n- Also helps in displaying the feature contributions in extension editor view",
        "createdAt": "2020-04-01 12:30:00",
        "state": "open",
        "number": 94151
    },
    {
        "title": "NPM scripts: insert local node module bin folder into path",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nWith https://github.com/microsoft/vscode/issues/46696, extensions are able to modify environment variables for the integrated terminal. I'd love to have `node_modules/.bin` folder from current workspace temporarily in `PATH` when I'm using the terminal. It can be a feature of NPM Scripts extension.\r\n\r\n```typescript\r\nconst collection = vscode.window.getEnvironmentVariableCollection();\r\nconst workspaceFolders = vscode.workspace.workspaceFolders;\r\n\r\nif (workspaceFolders?.length) {\r\n    collection.append('PATH', ':' + path.join(workspaceFolders[0].uri.fsPath, 'node_modules/.bin'));\r\n}\r\n```\r\n\r\nVS Code version: Code - Insiders 1.44.0-insider (d7d1147d6b764a48b789000c03088ee9afabcd8a, 2020-03-31T08:22:34.682Z)\r\nOS version: Darwin x64 19.2.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-03-31 21:37:48",
        "state": "open",
        "number": 94067
    },
    {
        "title": "Search for ignored sync settings or extensions",
        "description": "Testing https://github.com/microsoft/vscode/issues/93801\r\n\r\nChanging extensions and settings that have been ignored to being synced again was smooth, but could we making searching for which extensions and settings easier?  Like being able to search for \"@ sync: ignored\" in extensions view or in settings search\r\n\r\n![image](https://user-images.githubusercontent.com/9721254/78065253-fef8e300-7360-11ea-8152-9a9571bb36d4.png)\r\n",
        "createdAt": "2020-03-31 19:04:15",
        "state": "open",
        "number": 94034
    },
    {
        "title": "Be more specific about sync time in settings editor",
        "description": "#93801\r\n\r\nVersion: 1.44.0-insider (user setup)\r\nCommit: d7d1147d6b764a48b789000c03088ee9afabcd8a\r\nDate: 2020-03-31T08:23:56.446Z\r\nElectron: 7.1.11\r\nChrome: 78.0.3904.130\r\nNode.js: 12.8.1\r\nV8: 7.8.279.23-electron.0\r\nOS: Windows_NT x64 10.0.18362\r\n\r\n---\r\n\r\nThis:\r\n\r\n![image](https://user-images.githubusercontent.com/2193314/78051996-57b18700-7333-11ea-9d78-91cc236ed1ba.png)\r\n\r\nReminds me of this in onenote:\r\n\r\n![image](https://user-images.githubusercontent.com/2193314/78052044-6a2bc080-7333-11ea-84cb-39d3f2012e52.png)\r\n\r\nThe latter of which drives me crazy as it always lies to me and a restart to re-sync onenote is needed sometimes. Can we get the local time down to the second when you hover the last synced text?",
        "createdAt": "2020-03-31 16:39:47",
        "state": "open",
        "number": 93990
    },
    {
        "title": "Indicate dirty workspaces in \"Open Recent\"",
        "description": "refs #93729:\r\n\r\nI have never used the \"Open Recent\" quickpick because I'm always using the \"Open Recent...\" menu. So I was really surprised that the dirty workspaces are not marked in that menu:\r\n\r\n<img width=\"1294\" alt=\"2020-03-31_17-54-50\" src=\"https://user-images.githubusercontent.com/1898161/78047893-37a4b680-7379-11ea-85da-03da2abaff31.png\">\r\n\r\nbut that they are only marked in the \"Open Recent\" quickpick.\r\n\r\n",
        "createdAt": "2020-03-31 16:01:11",
        "state": "open",
        "number": 93984
    },
    {
        "title": "Add selection to next find match not working across Cells",
        "description": "Refs: #93742\r\n\r\n1. Have multiple cells, each cell having the word \"Zurich\"\r\n2. Try to select all the words \"Zurich\" across cells via `cmd+d` (add selection to next find match), does not work",
        "createdAt": "2020-03-31 14:38:33",
        "state": "open",
        "number": 93957
    },
    {
        "title": "Sync: View doesn't move when order changes in server",
        "description": "Testing #93771 on Windows\r\n\r\n1. Move `Open Editors` below `File Explorer` on instance A\r\n2. Move to instance B, wait for sync.\r\n\r\n\ud83d\udc1b `Open Editors` does not move down.\r\n\r\nIf you `Reload`, then the view is moved down.",
        "createdAt": "2020-03-31 12:13:17",
        "state": "open",
        "number": 93909
    },
    {
        "title": "Add option `editor.lineDecorationsWidth` as official",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIs there any chance that the setting of `editor.lineDecorationsWidth` will be official?\r\nI currently have the \"Unknown configuration setting\" notification \ud83d\ude2c\r\nA lot of people using this option and it would be good to add it as official\r\n\r\n![obraz](https://user-images.githubusercontent.com/30685349/78021422-83dd0000-7353-11ea-86f9-41f14a8b37c1.png)\r\n",
        "createdAt": "2020-03-31 11:28:42",
        "state": "open",
        "number": 93887
    },
    {
        "title": "Allow context key expression that compares object properties",
        "description": "@jrieken I was attempting to change the Timeline's `timeline.excludeSources` setting from an array to an object (as requested [here](https://github.com/microsoft/vscode/commit/59c57e1e899db397deb331f13e1c8c431c7dcb93#commitcomment-37761862)).\r\n\r\nI've pushed a branch with the changes here: [eamodio/timeline-excludesources](https://github.com/microsoft/vscode/commits/eamodio/timeline-excludesources)\r\n\r\nHere I am trying to use the `timeline.excludeSources.<source-id>` property as the `toggled` condition.\r\nhttps://github.com/microsoft/vscode/blob/2d551abb57bfde80a48f2f5517b4c5fcab2380a4/src/vs/workbench/contrib/timeline/browser/timelinePane.ts#L1177\r\n\r\nThis seems to work for the initial state, but it never gets updated when the property is removed or re-added. It looks like the cause is somewhere in here:\r\nhttps://github.com/microsoft/vscode/blob/db36e74f62b1b2603906d4d2c892ab12cf632a12/src/vs/platform/contextkey/browser/contextKeyService.ts#L102-L120\r\n\r\nWhere `this._values` will contain `timeline.excludeSources.<source-id>`, but the `event.affectedKeys` will only have `timeline.excludeSources`.\r\n\r\n/cc @rebornix ",
        "createdAt": "2020-03-31 06:23:40",
        "state": "open",
        "number": 93825
    },
    {
        "title": "Provide a \"focus-follow-mouse\" setting",
        "description": "<!-- \u26a0\ufe0f\u26a0\ufe0f Do Not Delete This! feature_request_template \u26a0\ufe0f\u26a0\ufe0f -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nI am used for years (X11 times) with focus following the mouse, instead of having to click to type (which is slow, and wears).\r\n",
        "createdAt": "2020-03-30 16:48:31",
        "state": "open",
        "number": 93772
    },
    {
        "title": "Add a special type instead of using a busy error for semantic tokens",
        "description": "Proposal for error name: `UnavailableError` / `TemporaryUnavailableError` (other: `CancelError` / `BusyError` / `NotReadyError` / `RetryError`)\r\n\r\nThis error should not appear in the extension host log (see #92583 where the busy error appears in the extension host log).",
        "createdAt": "2020-03-29 13:38:41",
        "state": "open",
        "number": 93686
    },
    {
        "title": "Untitled Notebook",
        "description": "<!-- Thank you for submitting a Pull Request. Please: \r\n* Read our Pull Request guidelines:\r\n  https://github.com/Microsoft/vscode/wiki/How-to-Contribute#pull-requests.\r\n* Associate an issue with the Pull Request.\r\n* Ensure that the code is up-to-date with the `master` branch.\r\n* Include a description of the proposed changes and how to test them. \r\n-->\r\n\r\nExploration for supporting untitled notebook, users can choose notebook type through language picker. cc @misolori \r\n\r\n![Kapture 2020-03-28 at 14 20 21](https://user-images.githubusercontent.com/876920/77834119-63b50300-70ff-11ea-9bef-db7e961f9aff.gif)\r\n",
        "createdAt": "2020-03-28 21:19:23",
        "state": "open",
        "number": 93669
    },
    {
        "title": "Better diff review keyboard navigation  ",
        "description": "Diff review is used when the changes view is opened and diffs are navigated via `F7` and `shift + F7`.\r\n\r\nAs reported by @jvesouza  It seems that I can only navigate the content using the up and down arrow. It would be interesting if we could use left and right, home and end in addition to ctrl + home and ctrl + end.\r\n\r\nCode pointer for a potential pull request \r\nhttps://github.com/microsoft/vscode/blob/51c5f904990a651cc859014971f29ecbb214ed84/src/vs/editor/browser/widget/diffReview.ts#L137",
        "createdAt": "2020-03-26 14:54:26",
        "state": "open",
        "number": 93498
    },
    {
        "title": "Event for onWill|DidRename|Create|Delete should indicate what caused the event (explorer vs workspace edit)",
        "description": "Backstory: https://github.com/redhat-developer/vscode-java/issues/1222#issuecomment-603750889\r\n\r\nWe have events that fore before and after files are being created, deleted, or renamed. They fire when users manipulate files, e.g. in the explorer, or when the workspace-edits-api is used. There are cases in which it is valuable to know what the source of said events are. \r\n\r\n",
        "createdAt": "2020-03-26 08:57:55",
        "state": "open",
        "number": 93470
    },
    {
        "title": "Let openTextDocument create an untitled file with a specific file extension ",
        "description": "## Problem\r\nCustom editors support untitled resources. However it is currently not easy to open these untitled resources with our existing APIs because the untitled resources need to have a specific file extension.  Here's what I have to do today:\r\n\r\n```ts\r\n// Create untitled file\r\nconst newFileUri = vscode.Uri.file(path.join(vscode.workspace?.rootPath!, 'newFile.cscratch')).with({ scheme: 'untitled' });\r\nawait vscode.workspace.openTextDocument(newFileUri);\r\n\r\n// Fill in initial content\r\nconst edit = new vscode.WorkspaceEdit();\r\nedit.insert(newFileUri, new vscode.Position(0, 0), \"{}\");\r\nawait vscode.workspace.applyEdit(edit);\r\n\r\n// Actually show the editor\r\nvscode.commands.executeCommand('vscode.open', newFileUri);\r\n```\r\n\r\nThis code works but is complex and fragile. For example, it breaks if a file called `newFile.csratch` already exists in the workspace\r\n\r\n## Proposal\r\nIn the version of `openTextDocument` [that support untitled files](https://github.com/microsoft/vscode/blob/d778f85cd5f23391cf94fa0965ada594c68e1fc5/src/vs/vscode.d.ts#L8785), add a  new optional parameter for the file extension:\r\n\r\n```ts\r\nexport function openTextDocument(options?: { language?: string; content?: string; fileExtension?: string }): Thenable<TextDocument>;\r\n```\r\n\r\nThis would be used when creating the new file name so that custom editors can correctly enable themselves for it\r\n\r\n\r\n",
        "createdAt": "2020-03-25 22:48:40",
        "state": "open",
        "number": 93441
    },
    {
        "title": "html.customData samples don't work as expected in VS Code 1.43.2",
        "description": "Our team has developed a bunch of custom tags which will be used as part of the HTML authoring. I started here https://code.visualstudio.com/docs/languages/html#_html-custom-data and ended up looking at samples at https://github.com/microsoft/vscode-custom-data\r\n\r\nI am running VS Code 1.43.2 and unable to make these samples work as documented. I also see some limitations in the feature.\r\n\r\nBUG: I tried the sample and I can only see the root element. After inserting <foo and space I don't see any attribute suggestions, although I can see the presence of the attribute if I scroll down in the suggestions list.\r\n\r\nFEATURE REQUEST: I am unable to author child tags. the documentation only talks about root element and its attributes and global attributes. how do we author child tags? I tried to add another \"tags\" element as a sibling to \"attributes\" but it didn't do any good.\r\n\r\nFEATURE REQUEST: How can I stop Intellisense showing HTML tags under custom tags? I ideally want to see only our custom tags.\r\n\r\nBUG/FEATURE REQUEST: Whatever that is working is working only in workspace setting and not in global settings. As long as my settings.json is in .vscode directory it works. If I move the settings.json along with the html-data.json file to %appdata%\\Code\\User, it doesn't work at all. I also tried to restart VS Code with no luck. In fact I find more interesting and useful in user setting mode and not in workspace setting. Why would a user take pains to build a schema for himself/herself to insert those custom tags that others don't even know what they are and how to interpret? custom tags are more useful if a platform is written to parse them and an entire team or their customers can make use of it.\r\n\r\nIs the validation built-in once I define my schema in the html-data.json? I am assuming yes but I couldn't validate because my basic scenario isn't working.\r\n\r\nI love this overall feature and would love to make full use of this, provided I get some guidance on how to make this work.\r\n\r\nThanks, \r\nPranav",
        "createdAt": "2020-03-25 19:27:28",
        "state": "open",
        "number": 93427
    },
    {
        "title": "Consider using a different Razor grammar",
        "description": "Sorry in advance if this isn't where I am supposed to post this, but I did try some searching and couldn't find much and actually didn't know how to search, but anyway. I notice that inline syntax highlighting for cshtml seems to have an issue when using an inline C# chunk inside of an attribute of an html tag. \r\n\r\nFor example, notice how the closing parentheses is red along with the double quotes.\r\n![image](https://user-images.githubusercontent.com/26332509/77558312-c9e42080-6e88-11ea-8f5d-85354f41373c.png)\r\n\r\nI am on version 1.43.2 of vscode in windows 10 x64, and my language mode is set to autodetect, which looks like it defaults to aspnetcorerazor, however i tried changing it to Razor and the same thing shows. \r\n\r\nIt doesn't affect the actual build, it is just an annoyance when looking at it.\r\n\r\nFor reference, here is how it looks in Visual Studio Community 2019\r\n\r\n![image](https://user-images.githubusercontent.com/26332509/77558943-935ad580-6e89-11ea-9ab4-003197e799b1.png)\r\n\r\nHere is my vscode info:\r\nVersion: 1.43.2 (user setup)\r\nCommit: 0ba0ca52957102ca3527cf479571617f0de6ed50\r\nDate: 2020-03-24T07:38:38.248Z\r\nElectron: 7.1.11\r\nChrome: 78.0.3904.130\r\nNode.js: 12.8.1\r\nV8: 7.8.279.23-electron.0\r\nOS: Windows_NT x64 10.0.18362\r\n\r\n\r\n ",
        "createdAt": "2020-03-25 16:14:24",
        "state": "open",
        "number": 93407
    },
    {
        "title": "Add \"remove recent\" action to recent tasks in tasks quick pick",
        "description": "With the new tasks quick pick layout the recent tasks space is very valuable. It would be useful to have a way to remove tasks from the recent list.\r\n\r\n@eamodio FYI since you suggested this.",
        "createdAt": "2020-03-25 15:54:58",
        "state": "open",
        "number": 93403
    },
    {
        "title": "'machine' scoped setting can't be applied in remote window from local extension",
        "description": "- Create UI extension with a 'machine' scoped setting\r\n- Load that UI extension in a remote window\r\n- See a message in local settings that this setting can only be set on the remote\r\n\r\nIf I understand correctly, since the extension is local, the setting should be set locally, right?",
        "createdAt": "2020-03-24 19:00:17",
        "state": "open",
        "number": 93322
    },
    {
        "title": "Git: After cloning and no folder is open, add option to open the folder automatically.",
        "description": "<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. I did-->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n<!-- Please include the latest version of VS Code you've confirmed to not have this feature --> v1.43.1\r\n![image](https://user-images.githubusercontent.com/38327267/77420124-693de080-6dc1-11ea-959b-7687e9171029.png)\r\nAdd an option in preferences, that when this message appears and you don't have anything open, open the folder automatically.",
        "createdAt": "2020-03-24 11:21:42",
        "state": "open",
        "number": 93300
    },
    {
        "title": "Rename file with \"Git: Rename file\"",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nI found that time to time I do file rename. To do this, I need to open integrated terminal and do `git mv old_file_name new_file_name`. I think that it will be easier to do via `Command Palette` using **\"Git: Rename file\"** command. It looks easy to add. Can you please do it for me? Thank you!\r\n\r\nVS Code version: Code 1.43.1 (fe22a9645b44368865c0ba92e2fb881ff1afce94, 2020-03-18T07:01:41.240Z)\r\nOS version: Darwin x64 19.3.0, macOS\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-03-24 11:08:51",
        "state": "open",
        "number": 93299
    },
    {
        "title": "Should we use namespacing in the CLI",
        "description": "@Microsoft/vscode\r\n\r\nhttps://github.com/microsoft/vscode/issues/92031 is requesting a terminal CLI to enable things like creating a new tab and splitting the current tab which would align with the capabilities of many terminals (including [Windows Terminal](https://github.com/microsoft/terminal/blob/master/doc/user-docs/UsingCommandlineArguments.md#using-the-wtexe-commandline)) and enable splitting a terminal tab by running a command in the terminal.\r\n\r\nDoes anyone have opinions for or against this? If we want to go with this I think we should also do the same for extensions by deprecating/aliasing the current CLI and moving them to either `code ext ...` or `code extension ...` as it keeps growing and could be better organized:\r\n\r\n```\r\nExtensions Management\r\n  --extensions-dir <dir>                            Set the root path for\r\n                                                    extensions.\r\n  --list-extensions                                 List the installed\r\n                                                    extensions.\r\n  --show-versions                                   Show versions of installed\r\n                                                    extensions, when using\r\n                                                    --list-extension.\r\n  --category                                        Filters installed\r\n                                                    extensions by provided\r\n                                                    category, when using\r\n                                                    --list-extension.\r\n  --install-extension <extension-id | path-to-vsix> Installs or updates the\r\n                                                    extension. Use `--force`\r\n                                                    argument to avoid\r\n                                                    prompts.\r\n  --uninstall-extension <extension-id>              Uninstalls an extension.\r\n  --enable-proposed-api <extension-id>              Enables proposed API\r\n                                                    features for extensions.\r\n                                                    Can receive one or more\r\n                                                    extension IDs to enable\r\n                                                    individually.\r\n```",
        "createdAt": "2020-03-23 14:24:31",
        "state": "open",
        "number": 93241
    },
    {
        "title": "Support \"Find With Selection\" in terminal view",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nRepro steps:\r\nSelect code in the Terminal view, then press cmd+e\r\n\r\nExpected result:\r\nThe selected text is used as the text to search for; cmd+g should find the next result.\r\n\r\nActual result:\r\nDoesn't seem like anything happens. cmd+g doesn't find the next instance of that text, and if you open the find panel with cmd+f the old find text is still there.\r\n\r\nVS Code version: Code - Insiders 1.44.0-insider (708b019bb4e20f07cf89df9f1d943af3d38d7a70, 2020-03-18T05:43:24.249Z)\r\nOS version: Darwin x64 18.7.0\r\n\r\n(As an aside, other apps in macOS call this \"Use selection for find\" - any chance VS Code could use that name too?  ![image](https://user-images.githubusercontent.com/614934/77321600-cb76e280-6ce8-11ea-9224-8bb0a35b288f.png) )\r\n\r\n\r\n<!-- generated by issue reporter -->\r\n\r\nThanks!",
        "createdAt": "2020-03-23 13:30:05",
        "state": "open",
        "number": 93236
    },
    {
        "title": "Add extension contributed syntax colors to search results",
        "description": "Issue Type: Feature Request\r\n\r\nI recently found this extension: https://marketplace.visualstudio.com/items?itemName=travisthieman.better-search. It was abandoned since VScode implemented the feature natively, however it is still missing the syntax colors for the search results. It would be very nice If you could include them like in the extension\r\n\r\n![image](https://user-images.githubusercontent.com/496904/77269805-a09c7800-6c6f-11ea-9616-c33958c6e8f1.png)\r\n\r\nVS Code version: Version: 1.43.1 (fe22a96,2020-03-18T07:01:41.240Z)\r\nOS version: OS: Darwin x64 17.7.0",
        "createdAt": "2020-03-23 01:03:02",
        "state": "open",
        "number": 93198
    },
    {
        "title": "Show rulers in commit message textbox for max lengths",
        "description": "# Usability issue\r\n\r\nWhen writing commit messages I'm missing the following information (at 1 glance):\r\n\r\n* **How much more can I write in the current line?**\r\n  This is kind of available by the \"x characters left message\" but I find it easier to recognize a line which is \"coming closer\" than a decreasing written number.\r\n\r\n* **Do all lines of a multi line commit meet the desired max line length?**\r\n  I can already move the cursor through all lines and wait for the \"validator\" to turn orange or stay green but I find that very laborious mainly for 2 reasons:\r\n  + There's no way to tell at one glance if the whole message is valid.\r\n  + When moving the cursor 1 line up or down, I always have to wait for the \"validator update\" and if it doesn't change I'm always left with the feeling of \"did it maybe not update correctly\"?\r\n\r\n# Solution/Request\r\n\r\n* Monospaced font in the commit message textbox\r\n* The textbox should not \"auto-wrap\" but show a horizontal scrollbar if needed\r\n* 2 rulers at the values from settings `Input Validation Length` & `Input Validation Subject Length`\r\n\r\nI see that this is at least related to #2718 but created a dedicated request since I'm not looking for any \"auto correction\" but only a better visual guidance.\r\n",
        "createdAt": "2020-03-21 18:40:04",
        "state": "open",
        "number": 93150
    },
    {
        "title": "Make extension defined task types work in code-workspace files",
        "description": "- VSCode Version: 1.43.1\r\n- OS Version: Windows 10\r\n\r\nSteps to Reproduce:\r\n\r\n1. Create new workspace\r\n2. Add script in `scripts` of `package.json` as follow: `\"buildfordebug\": \"tsc --project ./tsconfig.json --outDir ./out\",`\r\n3. Create default `tsconfig.json`\r\n4. Setup `launch` in `workspace` with following configurations\r\n```\r\n\t\"launch\": {\r\n\t\t\"version\": \"0.2.0\",\r\n\t\t\"configurations\": [\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"node\",\r\n\t\t\t\t\"request\": \"launch\",\r\n\t\t\t\t\"name\": \"Launch Program\",\r\n\t\t\t\t\"skipFiles\": [\r\n\t\t\t\t\t\"<node_internals>/**\"\r\n\t\t\t\t],\r\n\t\t\t\t\"program\": \"${workspaceFolder}/index.ts\",\r\n\t\t\t\t\"preLaunchTask\": \"buildfordebug\",\r\n\t\t\t\t\"outFiles\": [\"${workspaceFolder}/out/**/*.js\"]\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n```\r\n5. Setup `tasks` in `workspace` with following configurations\r\n```\r\n\t\"tasks\": {\r\n\t\t\"version\": \"2.0.0\",\r\n\t\t\"tasks\": [\r\n\t\t\t{\r\n\t\t\t\t\"label\": \"buildfordebug\",\r\n\t\t\t\t\"group\": \"build\",\r\n\t\t\t\t\"type\": \"npm\",\r\n\t\t\t\t\"script\": \"buildfordebug\",\r\n\t\t\t\t\"presentation\": {\r\n\t\t\t\t\t\"reveal\": \"silent\",\r\n\t\t\t\t\t\"panel\": \"new\"\r\n\t\t\t\t},\r\n\t\t\t\t\"problemMatcher\": [\"$tsc\"]\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n```\r\n5. Launch debug by pressing F5\r\n\r\nFor easy demo, please clone it from [https://github.com/mannok/WorkspaceLaunchTaskDemo](https://github.com/mannok/WorkspaceLaunchTaskDemo)\r\np.s. 1. Clone it   2. `npm install`   3. Press F5\r\n\r\n### **Error is then prompted as: Could not find the task 'buildfordebug'**\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-03-21 17:59:25",
        "state": "open",
        "number": 93149
    },
    {
        "title": "Please make it possible to add gutter (margin) before the text area",
        "description": "Please consider making an option to add gutter before the text area to improve usability.\r\nCurrently it is problematic to use the mouse to place the caret in the beginning \r\nof the line because there is no gutter to trap the mouse selection cursor:\r\nOn the screenshot below I try to place the cursor before the dot, and need to be \r\npixel-precise to make so.   \r\n\r\n![Code_1pplK1AaJt](https://user-images.githubusercontent.com/12515548/77123628-afa5df00-6a51-11ea-948a-abbe1cda9391.png)\r\n\r\n\r\n\r\nAlso I find it annoying when something \"sticks\" to the text/code, whether \r\nit is folding icons or line numbers (if folding is off) so I personally always want some \r\nextra margin to the left to improve readability.\r\n\r\nThe setting could be named something like:\r\n\r\n\t\"editor.leftMargin\": 5,\r\n\r\nThe number would indicate the margin width in characters, I suppose.\r\nIn addition, an option to control how the mouse click behaves in this area should be added,\r\nI suggest \"line selection\" mode or \"standard selection\" mode.\r\nFor \"standard selection\" a placeholder cursor would be shown just like in text.\r\nFor \"line selection\" pointer cursor would be shown, like by clicking on the line number area.",
        "createdAt": "2020-03-19 23:24:07",
        "state": "open",
        "number": 93053
    },
    {
        "title": "Replace in search Editor",
        "description": "Having a replace field in the search editor would permit to quickly replace all occurence without having to manage each occurence.\r\n\r\nBonus point for displaying difference like in search panel\r\n",
        "createdAt": "2020-03-19 17:36:32",
        "state": "open",
        "number": 93031
    },
    {
        "title": "Allow comments to reference workspace-local/relative image paths",
        "description": "Currently, the markdown support for comments allows referencing HTTP-based images, but not relative/local image paths. As part of building the [CodeTour](https://aka.ms/codetour) extension, I'd love for the description of a step to be able to reference images that are within the same codebase that the tour is associated with (e.g. `![image](./images/foo.png)`). \r\n\r\n// CC @rebornix ",
        "createdAt": "2020-03-19 17:14:05",
        "state": "open",
        "number": 93028
    },
    {
        "title": "Progress notifications: visually distinguish between title and message",
        "description": "Currently the notificatino simply append progress title and message.\r\nI suggest to have some visual distinction to make them more readable.\r\n\r\nUse case: debug progress has both title and message, and it would be cool if they are nicely formated. Currently I can not append them to be in the same content since then the status bar message will be too long\r\n\r\nfyi @weinand",
        "createdAt": "2020-03-18 17:34:21",
        "state": "open",
        "number": 92948
    },
    {
        "title": "Cannot easily switch settings categories",
        "description": "I have reported a related issue about a tree of settings categories not being focusable, but this is very new. Another thing is that even if it were focusable, when I would focus it and search for some group of settings like extensions/c#, then by pressing tab I would land on the c# settings. However when pressing tab after the last c# setting I land on the next category, and when pressing shift+tab on the first setting I land on the previous category. I do not see any easy way to return to a tree. It looks almost like all the settings of vscode were just displayed in one big group, so searching through them (if you don't use a search field) is non trivial.",
        "createdAt": "2020-03-18 14:25:44",
        "state": "open",
        "number": 92935
    },
    {
        "title": "Reduce header size of extension view",
        "description": "In extension tabs, the header of extension takes up a significant amount of vertical space (220px). On smaller screens, especially with a terminal window open, this means that there is very little room for the content of the extension as seen here:\r\n\r\n<img width=\"1392\" alt=\"Screen Shot 2020-03-17 at 15 09 45\" src=\"https://user-images.githubusercontent.com/1286001/76870489-abb36a80-6861-11ea-8d42-9a15705c4a00.png\">\r\n\r\nI propose changing the header to relative position rather than absolute, or alternatively a redesign of the header to include only important information and shrinking it down to a more reasonable size (< 80px).\r\n\r\nThis is a small quality of life feature request, and is low importance. Let me know what you think.\r\n\r\nVersion: 1.43.0\r\nCommit: 78a4c91400152c0f27ba4d363eb56d2835f9903a\r\nDate: 2020-03-09T19:34:44.548Z\r\nElectron: 7.1.11\r\nChrome: 78.0.3904.130\r\nNode.js: 12.8.1\r\nV8: 7.8.279.23-electron.0\r\nOS: Darwin x64 19.3.0\r\n",
        "createdAt": "2020-03-17 15:19:39",
        "state": "open",
        "number": 92858
    },
    {
        "title": "Version control does not honor \"remote.origin.push\" git config.",
        "description": "- VSCode Version: 1.41.1\r\n- OS Version: Cent OS 7\r\n\r\nSteps to Reproduce:\r\n\r\n1. Set the push to git config \r\n```git config --global remote.origin.push refs/heads/master:refs/for/master```\r\n\r\n2. Use the push context menu on version control tab.\r\ngit config is not considered.\r\ngit output shows the following command used to push the code.\r\n```git push origin master:master```\r\n\r\nExpected behavior: \r\nIt should use the following command.\r\ngit push origin refs/heads/master:refs/for/master\r\n\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-03-17 15:11:25",
        "state": "open",
        "number": 92856
    },
    {
        "title": "Variable substitution with environment - allow for fallback to default",
        "description": "<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nWhen doing variable substitution with environment (at debugging launch, but could be useful for tasks too - `${env:Name}`), I would like to provide a fallback (default) when the environment variable is not set.\r\n\r\nAs an example, see the variable substitution scheme for Docker Compose: https://docs.docker.com/compose/compose-file/#variable-substitution\r\n\r\n> - `${VARIABLE:-default}` evaluates to default if `VARIABLE` is unset or empty in the environment.\r\n> - `${VARIABLE-default}` evaluates to default only if `VARIABLE` is unset in the environment.\r\n\r\nThe syntax for VS Code could be `${env:Name:-default}` and `${env:Name-default}` with the same logic. \r\n\r\n<!-- Please include the latest version of VS Code you've confirmed to not have this feature -->\r\nVS Code version 1.42.1\r\n",
        "createdAt": "2020-03-17 15:02:25",
        "state": "open",
        "number": 92854
    },
    {
        "title": "Hybrid Treeviews: TreeDataProvider with FileSystemProvider skills",
        "description": "Hello to everyone ! \ud83d\ude0a\ud83d\udc4b\ud83c\udffc\r\n\r\n## Origin\r\n\r\nMy original idea was to join the TreeDataProvider API with FileSystemProvider API in order to have the features in other ViewContainers as well.\r\nBut i think that could be more practical to improve the existing TreeViews with on-demand options.\r\nThis will enhance the TreeView UX.\r\n\r\n## \"I have A Dream\"\r\n\r\nI improved my vision :\r\nThe following is a concept regarding the future API.\r\nBasically it improves existing TreeViews giving them new optional skills like:\r\n\r\n- <kbd>F2</kbd> to inline-rename an item\r\n- <kbd>Del</kbd> to delete an item\r\n- Drag to reorder items\r\n- Drag to move items from parent to parent\r\n- Drag nodes from TreeViews to other TreeViews (as full calendar does with [its events](https://fullcalendar.io/docs/other-calendar-dragging))\r\n- Defer item click with double clicks in order to enhance the above features\r\n- Introduce the `FileIcon` class to use existing icon pack themes to decorate `TreeItem`s\r\n\r\n## Proposed Interfaces\r\n\r\nI was thinking about using `TreeViewOptions` to enable/disable the various features :\r\n``` Typescript\r\n/**\r\n * Options for creating a [TreeView](#TreeView)\r\n */\r\nexport interface TreeViewOptions<T> {\r\n/*\r\n--------------\r\n        Current:\r\n--------------\r\n*/\r\n    treeDataProvider: TreeDataProvider<T>;\r\n    showCollapseAll?: boolean;\r\n    canSelectMany?: boolean;\r\n/*\r\n--------------\r\n    Proposed:\r\n--------------\r\n*/\r\n    /*\r\n    * Whether the tree requires two click in order to launch the command contained in the tree item.\r\n    * this will improve node searches\r\n    */\r\n    enableDoubleClick?:boolean;\r\n    /*\r\n    * Whether the tree supports node deletion (with **Del** key)\r\n    */\r\n    canDelete?: boolean;\r\n    /*\r\n    * Whether the tree supports file system-like inline-renaming (with **F2** key).\r\n    */\r\n    canRename?: boolean;\r\n    /*\r\n    * Whether the tree supports node dragging.\r\n    * When dragging node to other nodes != parent a rename event will be raised\r\n    */\r\n    canDragItems?: boolean;\r\n    \r\n    /*\r\n    * Whether the tree supports node reordering.\r\n    * When dragging node inside the parent a reorder event will be raised\r\n    */\r\n    canReorderItems?: boolean;\r\n\r\n    /*\r\n    * When true user can drag node between trees\r\n    * These tree normally resides on the same ViewContainer\r\n    * It requires canDragItems set to true\r\n    */\r\n    canDropToOtherTrees?: boolean;\r\n    /*\r\n    * When both this and canDragItems are set to true,\r\n    * nodes from external trees can be dropped\r\n    */\r\n    allowDropFromOtherTrees?: boolean;\r\n}\r\n```\r\n\r\nThen to propose the following new properties:\r\n``` Typescript\r\nexport class TreeItem {\r\n/*\r\n--------------\r\n        Current:\r\n--------------\r\n*/\r\n    label?: string;\r\n    id?: string;\r\n    description?: string | boolean;\r\n    resourceUri?: Uri;\r\n    tooltip?: string | undefined;\r\n    command?: Command;\r\n    collapsibleState?: TreeItemCollapsibleState;\r\n    contextValue?: string;\r\n    constructor(label: string, collapsibleState?: TreeItemCollapsibleState);\r\n    constructor(resourceUri: Uri, collapsibleState?: TreeItemCollapsibleState);\r\n/*\r\n--------------\r\n        Proposed:\r\n--------------\r\n*/        \r\n    /*\r\n    * [Addition:] When set to FileIcon the icon will be picked among the current Icon Theme set\r\n    */\r\n    iconPath?: string | Uri | { light: string | Uri; dark: string | Uri } | ThemeIcon | FileIcon;\r\n    \r\n    /*\r\n    * Get or Set the child's orderIndex\r\n    */\r\n    orderIndex: number;\r\n\r\n    /*\r\n    * Optional flag indicating whether to store origin info in bridged treeViews scenarios\r\n    */\r\n    storeExternalDropInfo?:boolean;\r\n    /*\r\n    * Optional source treeView id from which was dragged in bridged treeViews scenarios\r\n    */\r\n    sourceTree?:string;\r\n\r\n    /*\r\n    * Optional copy of the source node that was used to generate this node\r\n    */\r\n    sourceNode?:TreeItem;\r\n}\r\n```\r\n\r\nEventually these are the proposed events in the `TreeDataProvider`:\r\n``` Typescript\r\nexport interface TreeDataProvider<T> {\r\n/*\r\n--------------\r\n        Current:\r\n--------------\r\n*/\r\n    onDidChangeTreeData?: Event<T | undefined | null>;\r\n    getTreeItem(element: T): TreeItem | Thenable<TreeItem>;\r\n    getChildren(element?: T): ProviderResult<T[]>;\r\n    getParent?(element: T): ProviderResult<T>;\r\n/*\r\n--------------\r\n        Proposed:\r\n--------------\r\n*/    \r\n    /**\r\n     * Delete a node.\r\n     *\r\n     * @param element The node that is to be deleted.\r\n     * @param options Defines if deletion of folders is recursive.\r\n     * @throws [`OperationNotAllowed`](#TreeViewError.OperationNotAllowed) when permissions aren't sufficient.\r\n     */\r\n    delete(element: TreeItem, options: { recursive: boolean }): void | Thenable<void>;\r\n\r\n    /**\r\n     * Rename a node.\r\n     *\r\n     * @param oldUri The existing file.\r\n     * @param newUri The new location.\r\n     * @param options Defines if existing files should be overwritten.\r\n     * @throws [`NodeExists`](#TreeViewError.NodeExists) when `newElement` exists and when the `overwrite` option is not `true`.\r\n     * @throws [`OperationNotAllowed`](#TreeViewError.OperationNotAllowed) when permissions aren't sufficient.\r\n     */\r\n    rename(oldElement: TreeItem, newElement: TreeItem, options: { overwrite: boolean }): void | Thenable<void>;\r\n\r\n    /**\r\n     * Copy nodes. Implementing this function is optional but it will speedup\r\n     * the copy operation.\r\n     *\r\n     * @param source The existing Node.\r\n     * @param destination The destination location.\r\n     * @param options Defines if existing Nodes should be overwritten.\r\n     * @throws [`NodeExists`](#TreeViewError.NodeExists) when `destination` exists and when the `overwrite` option is not `true`.\r\n     * @throws [`OperationNotAllowed`](#TreeViewError.OperationNotAllowed) when permissions aren't sufficient.\r\n     */\r\n    copy?(source: TreeItem, destination: TreeItem, options: { overwrite: boolean }): void | Thenable<void>;\r\n    \r\n    /**\r\n     * Drop a node.\r\n     *\r\n     * @param sourceElement The origin node(s).\r\n     * @param newElement The new node(s).\r\n     * @param options Defines if existing nodes should be overwritten.\r\n     * @throws [`NodeExists`](#TreeViewError.NodeExists) when `newElement` exists and when the `overwrite` option is not `true`.\r\n     * @throws [`OperationNotAllowed`](#TreeViewError.OperationNotAllowed) when permissions aren't sufficient.\r\n     */\r\n    onExternalDrop?(sourceElement: TreeItem|TreeItem[], newElement?: TreeItem|TreeItem[], sourceTree:TreeDataProvider||TreeView, options: { },): void | Thenable<void>;\r\n    \r\n    /**\r\n     * Order a (group of?) node(s).\r\n     *\r\n     * @param element The node(s) affected.\r\n     * @param fromIndex The original location(s).\r\n     * @param toIndex The new location(s).\r\n     * @param destinationParentElement The target destination, useful when changing parent.\r\n     * @throws [`OperationNotAllowed`](#TreeViewError.OperationNotAllowed) when permissions aren't sufficient.\r\n     */\r\n    reorder?(element: TreeItem|TreeItem[], fromIndex:number|number[], toIndex: number|number[], destinationParentElement: TreeItem): void | Thenable<void>;\r\n}\r\n```\r\n(<small>Not sure if these goes here or in the `TreeView` class, but the concept is having somewhere these events</small>)\r\n\r\nI Don't know how hard is to join the two from your side, but i think could be very interesting to have such a feature at devs disposal.\r\nBest !",
        "createdAt": "2020-03-17 13:41:22",
        "state": "open",
        "number": 92848
    },
    {
        "title": "Disable the red problem highlightings in the minimap",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nHi, Any can give me some hints how to disable the problem highlightings in the minimap?\r\n\r\nWhenever I occurred a new problem in the problem panel, it is rendered in red color in the minimap  at the same time. I found it pretty annoying and I racked my brains to find the relative setting inside the `defaulsetting.jason` but to no avail.\r\n\r\n\r\nVS Code version: Code 1.43.0 (78a4c91400152c0f27ba4d363eb56d2835f9903a, 2020-03-09T19:47:57.235Z)\r\nOS version: Windows_NT x64 10.0.18363\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-03-17 08:34:39",
        "state": "open",
        "number": 92830
    },
    {
        "title": "Poor UX for the editor.fontLigatures setting",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\n**Repro**\r\n1. In settings editor, search for `editor.fontLigatures`\r\n\r\n**Bugs**\r\n\r\n<img width=\"588\" alt=\"Screen Shot 2020-03-16 at 10 04 28 PM\" src=\"https://user-images.githubusercontent.com/12821956/76823683-2765d680-67d2-11ea-8cf3-722b08748840.png\">\r\n\r\nIn the settings UI:\r\n\r\n- If I don't know what ligatures are, the description is not useful. Maybe link to our documentation?\r\n- The description also does not explain the font features part. Maybe have an example?\r\n- I have to use the settings json editor to actually change this setting. I suspect the most common use of this setting is turning it on or off\r\n\r\nIn the settings json editor:\r\n\r\n- It was not clear to me at first how to configure the font features (for a while, I thought it was supposed to be an object instead of a string)\r\n- If you have `\"editor.fontLigatures\": \"\"` and hover over the string, the description of what this string does is very generic\r\n\r\nVS Code version: Code - Insiders 1.44.0-insider (798481c7978af034b054e14ace4e471e7a83f665, 2020-03-16T07:10:59.884Z)\r\nOS version: Darwin x64 19.3.0\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i9-9980HK CPU @ 2.40GHz (16 x 2400)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>metal: disabled_off<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off_ok<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|1, 2, 2|\r\n|Memory (System)|32.00GB (0.86GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|11%|\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-03-17 05:05:27",
        "state": "open",
        "number": 92823
    },
    {
        "title": "Add product icon themes",
        "description": "Fixes  #79130\r\n\r\n- [x] productIconThemes definition files, with font specification and icon definitions (name -> font character)\r\n- [x] JSON schema for product icon themes associated to -product-icon-theme.json\r\n- [x] New contribution point `productIconThemes`\r\n- [x] new setting `workbench.productIconTheme`\r\n- [x] `Test Product Icons` example in `vscode-colorize-tests`\r\n- [x] icon registry with all themable icons\r\n- [ ] allow to contribute to icon registry from icon contribution point\r\n- [x] update svg references to use codicons #86708\r\n- [x] product icon theme selection command\r\n- [ ] name icons ids like we did it with color ids (id describes icon location `glyphMargin.collapedRange`, not the chosen representation (`chevron-right`). However we want to keep `chevron-right` as these can be accessed in Markdown or labels using `$(chevron-right)\r\n- [ ] update code references to unicode characters (git decorations, debug breakpoints, etc.)\r\n- [ ] allow codicons to be used in webviews\r\n- [ ] have helper wdget that makes it easy to host an image",
        "createdAt": "2020-03-16 14:58:41",
        "state": "open",
        "number": 92791
    },
    {
        "title": "Improve TypeScript hovers",
        "description": "In certain cases, function invocation hover can look really bad compared to function definition:\r\n\r\n[Playground](https://www.typescriptlang.org/play#code/FAegVGwARlAqALApgTygYwPYFsAOAbAQwEsA7JAEygBcFDqoBHAV2PQGsoyAzTKXgE79mpdNWKZSAZygB3ZAKRRCNFLiW5CAwtiTUkQ4jJ4HFVan0KkomAEYArJGIxWoAcz1RFhfPjQA3A1tMKSUyKFJMBkCBNGZQ7mZ8OUIUKQAaZVIqYjxMAWoraj8aBCMbWyl0ZkUZWiUAKQBlABFMdAwcXVJqKQA6KABJBlCkbBl8YnYlesVATAIZAUwcGj5c3CXA0qUWNk4ePiQAD3UBYiRRJQUlAAoyfW0xYi3jzWyQLF9CXFCAfgBKTK2ZgMeooOZUWxXb64NDEbhQABqTSgAGFMBQlPZ4iMEJhZJRtlBmm0OpJVrgBgBRQhSc5CCxQUZyOgMQZQXSucKEJ6STJSPjsxTobz6KgqKoXLQSJm5YhEBl8eT0bZoKR4glUXQALmgsAAApptNgmMwDGhEDszbF+PkoLYiAh7Y7nYQEHqoPrjjoCEgPQADQP2KQe7hkCgAeXINwA3q6nQBff4AbgDgY9HoAgtlVlAKHwBbpaGQ3Hn4dwDBdqLqYFA0-7g6Hw1GkLHbZggVpMsr9DEoEn63qQMBMegFUpEqJxOSw9kWwAeOAAPhuLHN2vg-w3AAUltgjEh5wAlJCEfOkPyLpdL1OgECmvZcUi8KDXYCzyPRmPQGzkDcARnSH9qFkTANwAJiAqBSkUJANwAZig20ag3AAWJCw0CDcAFYkLpI4NwANjwpBAlIDcAHYkKQYg3AQasoAADmAAcgA)\r\n\r\n![image](https://user-images.githubusercontent.com/4033249/76769083-32305500-6759-11ea-9f81-c9f584f39f59.png)\r\n\r\n![image](https://user-images.githubusercontent.com/4033249/76769090-365c7280-6759-11ea-9743-84ca4b55ac4c.png)\r\nThe invocation hides all documentation for the function.\r\n\r\nThis issue investigates how we might improve the ordering or display of the hover, either by doing some work in VS Code or asking for changes in TypeScript.",
        "createdAt": "2020-03-16 14:39:54",
        "state": "open",
        "number": 92787
    },
    {
        "title": "[themes] Allow gradients along with colors",
        "description": "Please support CSS gradients where backgrounds and borders are theme-able.\r\n\r\nThe latest version of VS Code you've confirmed to not have this feature is: 1.43.0",
        "createdAt": "2020-03-15 20:11:16",
        "state": "open",
        "number": 92736
    },
    {
        "title": "[undo] Fold commands can't be undone",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nFold commands like Fold Level 1 cannot be undone with ctrl + z.\r\n\r\nVS Code version: Code - Insiders 1.44.0-insider (efd7548df65de8e775015b67863190e6bd4934fc, 2020-03-13T06:05:25.782Z)\r\nOS version: Windows_NT x64 10.0.18363\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-03-13 19:59:50",
        "state": "open",
        "number": 92667
    },
    {
        "title": "Manipulating on-the-go \ud83c\udfc3\u200d\u2642\ufe0f\ufe0f",
        "description": "# Manipulating on-the-go \ud83c\udfc3\u200d\u2642\ufe0f\ufe0f\r\n\r\nThis happens to me a lot to go through other people's codes (usually in form of legacy) codes and try to understand it and then extend and/or debug their work. Whenever I'm doing this, I find myself redirect the control flow by interventions like:\r\n\r\n* Manipulating local variables (mostly boolean flags).\r\n* Putting fake implementation for long-running or external API-dependent methods.\r\n* Raising unreal exceptions.\r\n* Jumping over some lines of code (*not running to the cursor location*).\r\n\r\nThe thing is I always make sure doing these without ever actually modifying the original code. There are always risks that I forget to revert my changes and, as you've already guessed, commit-and-push my faulty version up to the remote repository. So, there'd be no recourse other than debugger tools that let me alter things on the run. The point is, I feel VS Code can still use some improvements on these kind of tools, like the brilliant one that recently was added which is \"jumping over\".\r\n\r\n## Suggestions\r\n\r\nI suggest the features below. Please note that these are not thought through needs, so I'm just trying to deliver my point. \r\n\r\n* Being able to add some temporary lines of code, at any point, and disable, enable, and precondition them just like breakpoints. This alone hugely facilitates code investigation and catching of bugs. *Currently there's no way to do this but to use the debug console.*\r\n* Commenting on the run, by which some lines could be commented out for the debug session in progress. This, too, needs enable/disable/precondition functionalities. Although this seems like the jumping over feature, but the point is you wouldn't have to pause and jump the control manually every time.\r\n\r\n## Note on feasibility\r\n\r\nI don't really know if my requested features are feasible, or, if they are, to what extent, but the least of such functionalities like manipulating variables (even locals), which are totally feasible, would hugely help in many scenarios.\r\n\r\nAlso, I have yet to see such features in any well-known editor/IDE.\r\n ",
        "createdAt": "2020-03-12 18:36:08",
        "state": "open",
        "number": 92594
    },
    {
        "title": "minimap.background also makes the text transparent",
        "description": "The `minimap.background` artificially sets opacity on the whole canvas instead of just making the background transparent. This makes also the text transparent, which decreases its readibility. \r\n```\r\n  \"workbench.colorCustomizations\": {\r\n      \"minimap.background\": \"#12121280\",\r\n```\r\nI would prefer if only the background was transparent so that the text map keeps its contrast and readability.\r\n\r\nI have tested the viability here: [codesandbox.io/s/canvas-opacity-vs-background-transparency](https://codesandbox.io/s/canvas-opacity-vs-background-transparency-f2tpq)\r\n![image](https://user-images.githubusercontent.com/2313018/76423981-e58af980-63a7-11ea-9c09-d8b9b970198a.png)\r\n\r\n---\r\n\r\n`default: #1e1e1e`\r\n![image](https://user-images.githubusercontent.com/2313018/76412016-2f1d1980-6393-11ea-8d24-5b7780b59d37.png)\r\n\r\n`#1e1e1e80`\r\n![image](https://user-images.githubusercontent.com/2313018/76412285-a652ad80-6393-11ea-97a7-2b2031b54051.png)\r\n\r\n\r\nAfter digging deeper, I realised that the minimap is rendered into canvas and that the transparency is done by artificially setting opacity on the canvas. As my case study above suggests, it is possible to remove the background from the canvas and move it to css where it is possible to make it transparent separately, without affecting the canvas' opacity.\r\n![image](https://user-images.githubusercontent.com/2313018/76412776-85d72300-6394-11ea-98c7-47ea795ada9f.png)\r\n_note: `opacity: 0.502` equals the alphachannel value of the color above `#1e1e1e80`_",
        "createdAt": "2020-03-11 13:57:54",
        "state": "open",
        "number": 92490
    },
    {
        "title": "Sync mutliple settings profiles",
        "description": "Settings sync is recently introduced in insiders.\r\n(I don't run insiders, I just saw the announcement in the release notes so this may already be present)\r\nTo date I have used an extension for this that operates very well (mega props to the dev): https://github.com/shanalikhan/code-settings-sync\r\n\r\nThis extension uses private GitHub gists to sync settings, this means that there can be multiple gists for multiple settings \"profiles\". This is super handy for example where I have settings that I use across machines at work, and different settings that I use across personal machines.\r\n\r\nDoes, or can, the settings sync feature support similar?\r\n\r\nThanks!",
        "createdAt": "2020-03-10 18:41:44",
        "state": "open",
        "number": 92393
    },
    {
        "title": "Allow Shift+Delete to remove recently opened entries from quick pick",
        "description": "The \"Go To File...\" (CTRL+P) menu shows a mix of files that match from the current workspace, other files you've opened recently, and who knows what.  Sometimes these results rank things I don't want (e.g. files with same names from another workspace) higher than the file I'm actually trying to open.  I'd like to be able to \"delete\" suggestions so they don't appear again in the future.\r\n\r\nThere are a bunch of features that allow you to use the keyboard to navigate to a recently-opened file, and they all work a little differently.  #15340 is about the \"recently opened\" picker (cc @bpasero )  and is referenced in #31221.  #34097 is about the \"quick open\" menu, which I guess is different for some reason? Anyway, that's supposed to be resolved by #30770 but I don't actually want to *never* get history results, I just want to get rid of the ones that bother me the most.\r\n\r\nAs for implementation, I like the idea mentioned on several of those tickets: if I open a \"select file\" quick menu of any stripe, I should be able to highlight an entry and remove it with `shift + delete`.",
        "createdAt": "2020-03-10 13:58:06",
        "state": "open",
        "number": 92358
    },
    {
        "title": "Settings Sync : Allow for custom backend service end points",
        "description": "<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nAccording to the Settings Sync Plan #90129 and to the Settings Sync documentation ( https://code.visualstudio.com/docs/editor/settings-sync ) it seems that only Microsoft and public Github account are supported.\r\n\r\nWhat if we wanted to use a Github Enterprise backend, or any other git remote ( Gitlab, Gogs, whatever... ) ?",
        "createdAt": "2020-03-10 13:57:19",
        "state": "open",
        "number": 92357
    },
    {
        "title": "SCM: Provide multiple ScmResourceGroup in menu commands",
        "description": "Hi,\r\nWhen implementing a menu on a ResourceGroup in SourceControl view. There is always only one group in command args even if the user select multiple ResourceGroup and perform a common menu action there. \r\n\r\n```ts\r\n// groups length is always 1 even when multiple group selected\r\ncommands.registerCommand(\"commandId\", (...groups: SourceControlResourceGroup[]) => {\r\n```\r\n\r\nThe expected behavior is to have the list of SourceControlResourceGroup in command args like when selecting multiple SourceControlResource and execute a common menu action.\r\n\r\n```ts\r\n// resources length is greater than 1 when there is multiple resources selected in SourceControl View\r\ncommands.registerCommand(\"commandId\", (...resources: SourceControlResourceState[]) => {\r\n```\r\n\r\nRegards.\r\n\r\n- VSCode Version: 1.42.1\r\n- OS Version: win10\r\n\r\n\r\n",
        "createdAt": "2020-03-10 09:55:36",
        "state": "open",
        "number": 92337
    },
    {
        "title": "Replace underbar in Parameter Hints with color",
        "description": "I find the Parameter Hints in VS Code very hard to read in comparison to IntelliJ.\r\n\r\nThe main distraction is the underbar which hinders the read flow. The underbar distracts the pattern recognition of your eyes and makes it hard to read whatever is above it. There are whole studies on the topic of underbars and readability, see for example [uxbooth.com](https://www.uxbooth.com/articles/is-the-underlined-link-hurting-readability/).\r\n\r\n<ins>**You don't need to read a paper to come to the conclusion that reading text with an underbar is bad.**</ins>\r\n\r\n**See for yourself how much easier it is without because you can read that much faster.**\r\n\r\nInstead of an underbar below the current parameter, using a color would be a much better choice. I personally like a bold orange color like in Webstorm, but would already be happy if just the underbar were gone. Please, reconsider this design choice.\r\n\r\n### VS Code\r\n![vscode](https://user-images.githubusercontent.com/33468089/76261402-2ecd3300-625a-11ea-9265-8e1caa11b3ee.png)\r\n\r\n![vscodelong](https://user-images.githubusercontent.com/33468089/76263953-90909b80-6260-11ea-81ca-82861ff59702.png)\r\n\r\n### Webstorm\r\n![webstorm](https://user-images.githubusercontent.com/33468089/76261401-2e349c80-625a-11ea-8199-19e984495a2d.png)\r\n\r\n![wish](https://user-images.githubusercontent.com/33468089/76261399-2d9c0600-625a-11ea-8b93-1cdfc227d35e.png)\r\n\r\n\r\n",
        "createdAt": "2020-03-09 22:12:15",
        "state": "open",
        "number": 92297
    },
    {
        "title": "Startup is blocked resolving configuration for a slow remote folder",
        "description": "Hi, in my use case i have some folders opened in the workspace, one of these is remote, i mean that one of these is on a computer in lan network with access allowed by Samba.\r\nWhen i start Visual Studio Code if this lan-computer is off Visual Studio Code is blocked for some min trying to access on the lan-folder uslessly.\r\nIt would be nice to make this access to each folder on workspace in async way, for avoid the bloking.\r\n\r\nThanks :)\r\n",
        "createdAt": "2020-03-09 15:44:41",
        "state": "open",
        "number": 92274
    },
    {
        "title": "Markdown Preview - Navigate back",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\n## Description\r\n\r\nIf you write a relative link in markdown and follow the relative link while in Markdown Preview, there is no way to navigate back using Backspace or Mouse 4. Using the `workbench.action.navigateBack` command will go back to the `.md`-file opened before the preview. The only way to get back is to re-open the editor of the original `.md`-file and use `markdown.showPreview` again.\r\n\r\nThis is quite annoying when testing your documentation home-page, which can have dozens of relative links. While writing markdown for documentation purposes, testing your links is very important as it's quite easy to introduce typos while writing links.\r\n\r\n## Reproduce\r\n\r\nTo reproduce, you need two `.md`-files, and a link between them. In [this archive](https://github.com/microsoft/vscode/files/4305742/MarkdownPreviewNavigateBack.zip) I provide `a.md` and `b.md`.\r\n\r\n`a.md`:\r\n\r\n```\r\n# A\r\n\r\nHere a [link to b].\r\n\r\n[link to b]: ./b\r\n\r\n```\r\n\r\n`b.md`:\r\n\r\n```\r\n# B\r\n\r\nYou can't go back from here.\r\n\r\nIf you use `workbench.action.navigateBack`, you'll go to `a.md`, rather than `a`'s preview.\r\n\r\n```\r\n\r\n1. Open `a.md`.\r\n2. Run `markdown.showPreview` .\r\n3. Press the link.\r\n4. If you try using Backspace or Mouse4 to navigate back - nothing will happen. If you use `workbench.action.navigateBack`, you go to the editor of `a.md` rather than its preview.\r\n\r\n## Expected behavior\r\n\r\nI as a user would want a way to navigate back to the preview of `a` after clicking its link to the preview of `b`. The behavior of`workbench.action.navigateBack` goes back to the previous editor window rather than the previous preview.\r\n\r\n### Version info\r\n\r\nVS Code version: Code 1.42.1 (c47d83b293181d9be64f27ff093689e8e7aed054, 2020-02-11T14:45:59.656Z)\r\nOS version: Windows_NT x64 10.0.18362\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-03-09 09:41:15",
        "state": "open",
        "number": 92257
    },
    {
        "title": "Support ANSI encoding",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nWe need ANSI encoding for Visual Studio Code by default.\r\n\r\nVS Code version: Code 1.42.1 (c47d83b293181d9be64f27ff093689e8e7aed054, 2020-02-11T14:45:59.656Z)\r\nOS version: Windows_NT x64 10.0.18363\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-03-08 21:33:41",
        "state": "open",
        "number": 92240
    },
    {
        "title": "Alias keybindings in command palette",
        "description": "You can access user shortcuts in the command palette by typing \"Keyboard Shortcuts\":\r\n\r\n![image](https://user-images.githubusercontent.com/4307307/76166519-8faf1b00-6135-11ea-9b54-44e85b3afb71.png)\r\n\r\nThe actual persisted file is named `keybindings.json`:\r\n\r\n![image](https://user-images.githubusercontent.com/4307307/76166553-bec58c80-6135-11ea-852f-92fc92b7df39.png)\r\n\r\nBut typing \"keybindings\" doesn't turn up any suggestions:\r\n\r\n![image](https://user-images.githubusercontent.com/4307307/76166601-1237da80-6136-11ea-89af-663a7039d17c.png)\r\n\r\nIf it's possible to alias some commands, it might be helpful to include other common terms for keyboard shortcuts like \"keybindings\" or \"hotkeys\"",
        "createdAt": "2020-03-08 16:14:55",
        "state": "open",
        "number": 92233
    },
    {
        "title": "launch.json - allow serverReadyAction to launch another configuration",
        "description": "Currently it is possible to use `serverReadyAction` in launch.json configuration to either start a default browser without debugging  (using `openExternally` value) or launch chrome debugging (using `debugWithChrome` value). However these options are insufficient if you want to use different browser for debugging or your chrome debug configuration is non-default (different executable location, custom debug path mappings). All those browser-specific debug setting are however handled by their respective browser debugging extensions. Therefore the solution, that would satisfy a lot of use cases for combined backend+frontend debugging would be to simply allow `serverReadyAction` to launch another configuration in launch.json\r\n",
        "createdAt": "2020-03-07 23:11:46",
        "state": "open",
        "number": 92220
    },
    {
        "title": "[folding] command that adds folding markers",
        "description": "I'm a Data Scientist, and I find an exceptional value add from the code folding within sections feature.\r\ne.g., [https://support.rstudio.com/hc/en-us/articles/200484568-Code-Folding-and-Sections](https://support.rstudio.com/hc/en-us/articles/200484568-Code-Folding-and-Sections)\r\n\r\nMy source code gets to hundreds of lines long fairly quickly and Jupyter notebooks are cumbersome to scroll and find stuff within.\r\n\r\nIt allows me to jump between sections more easily and stay organized in the development \r\ne.g.,\r\n```\r\n# Load Necessary Packages\r\n<import tensorflow as tf>\r\n# Load Data\r\n...\r\n# QA Data\r\n...\r\n# Transform Data\r\n...\r\n# Descriptives\r\n...\r\n# Models\r\n...\r\n# Model Evaluation\r\n...\r\n# \r\n```\r\n\r\nAn example of a workflow I'm developing in Visual Studio Code is below. Where if I could collapse some sections, it would be awesome. Thank you!\r\n\r\n![image](https://user-images.githubusercontent.com/3031952/76127351-ada63f80-5fbe-11ea-94fa-a8b762bc78f1.png)\r\n",
        "createdAt": "2020-03-06 22:27:12",
        "state": "open",
        "number": 92185
    },
    {
        "title": "API for reading current word-wrap state (and toggling it) on a TextDocument",
        "description": "The are currently lots of issues with decorations and word-wrapping, especially with GitLens. Extension authors could at least mitigate some of these issues with the knowledge that word-wrapping is actually on. And then for more advanced usages -- like showing GitLens' blame, it would be great to turn off word-wrapping while the blame annotations are shown.",
        "createdAt": "2020-03-06 20:17:06",
        "state": "open",
        "number": 92177
    },
    {
        "title": "Improve parameter hints UX",
        "description": "This is similar to https://github.com/microsoft/vscode/issues/14165, but focuses specifically on parameter hints. Here's the comparison of UI for IntelliJ and VS Code:\r\n\r\nIDEA:\r\n![good](https://user-images.githubusercontent.com/1711539/76109452-c1609e80-5fdc-11ea-85b1-26cd06e18b24.png)\r\n\r\nVS Code:\r\n![wtf](https://user-images.githubusercontent.com/1711539/76109454-c1f93500-5fdc-11ea-9378-b2cbd69897f1.png)\r\n\r\nIDEA's version is massively more useful, because:\r\n\r\n* it uses a single line (so no spacing wasted for wrapping, no weird breaks mid parameter)\r\n* it is *centered* at the cursor position (as opposed to being to the right)\r\n\r\nAlthough this is far from an extreme case, the VS Code version is nigh unusable :-( \r\n\r\nNote that many language servers for VS Code implements parameter snippet completion, where arguments of the function call are prefilled: \r\n\r\n![image](https://user-images.githubusercontent.com/1711539/76109788-7b580a80-5fdd-11ea-93d7-121f16487df8.png)\r\n\r\nI think that this behavior is basically a work-around for VS Code parameter hints not being very useful.",
        "createdAt": "2020-03-06 18:08:05",
        "state": "open",
        "number": 92174
    },
    {
        "title": "Time line provider for sync resources",
        "description": "Time line provider for sync resources - settings, keybindings and may be extensions.",
        "createdAt": "2020-03-06 16:20:16",
        "state": "open",
        "number": 92166
    },
    {
        "title": "[json] support \"$id\" references.",
        "description": "The relevant documentation for `$id` can be found here: https://json-schema.org/understanding-json-schema/structuring.html#using-id-with-ref\r\n\r\n- Version: 1.43.0-insider (user setup)\r\n- Commit: 17c6d123d212f90300429ecad3fc96fcec6e338f\r\n- Date: 2020-02-28T12:46:02.355Z\r\n- Electron: 7.1.11\r\n- Chrome: 78.0.3904.130\r\n- Node.js: 12.8.1\r\n- V8: 7.8.279.23-electron.0\r\n- OS: Windows_NT x64 10.0.18362\r\n\r\nSteps to Reproduce:\r\n\r\n![image](https://user-images.githubusercontent.com/3902892/75932440-3f317800-5e2c-11ea-95c9-e1aea6a2f685.png)\r\n\r\nThis validates correctly using ajv@6.6.2.\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-03-04 23:29:37",
        "state": "open",
        "number": 92042
    },
    {
        "title": "Add a CLI for controlling the integrated terminal",
        "description": "## \ud83d\ude4b\u200d\u2642\ufe0f Feature request\r\nControlling the integrated terminal using the CLI will enable devs to program predefined terminal experiences in Visual Studio Code.\r\n\r\nThe most basic functionality would be to open a **new tab** and **split pane**.\r\n\r\n### API suggestion\r\n\r\nAfter discussing the subject on an [issue](https://github.com/ranyitz/newsh/issues/11) in a utility library for controlling terminals.\r\n\r\n@Tyriar's [suggested](https://github.com/ranyitz/newsh/issues/11#issuecomment-594591915) to go for an API that looks like this:\r\n\r\n```sh\r\ncode terminal split-pane\r\n```\r\n\r\n```sh\r\ncode terminal new-tab\r\n```\r\n\r\nIn order to not pollute the top-level `code` namespace.\r\n\r\n**Important to note** that there is an API with similar functionality which is being developed for [microsoft/terminal](https://github.com/microsoft/terminal/blob/master/doc/user-docs/UsingCommandlineArguments.md#using-the-wtexe-commandline)\r\n",
        "createdAt": "2020-03-04 20:48:20",
        "state": "open",
        "number": 92031
    },
    {
        "title": "Use codicons in file icons",
        "description": "Related to #86308. We need support to re-use codicons from our file icons, like our \"Minimal\" file icon theme: \r\n\r\nhttps://github.com/microsoft/vscode/blob/20b4e047c6c43223ce9f66055fa5f58eab8aa36b/extensions/theme-defaults/fileicons/vs_minimal-icon-theme.json#L2-L8\r\n\r\nIdeally we'd like to use the same syntax as #84695.",
        "createdAt": "2020-03-03 19:40:18",
        "state": "open",
        "number": 91973
    },
    {
        "title": "Minify dependencies and remove junk files",
        "description": "The shipped dependencies, available under macOS at `/Applications/Visual Studio Code.app/Contents/Resources/app/node_modules.asar`, are unminified and all sorts of junk files are in there (readmes, licenses...).\r\n\r\nMinifying everything and avoiding shipping unnecessary files seems like a fairly decent optimization opportunity.",
        "createdAt": "2020-03-01 21:40:19",
        "state": "open",
        "number": 91861
    },
    {
        "title": "Repository selector in status bar - Versioncontrol",
        "description": "I work with a multi-root workspace and recently installed the GitHub Pull Requests extension, which can be cumbersome in this environment.\r\nIn order to open a pull request, I have to go to the Source Control pane, make sure that the correct repository is selected, and then go back to the GitHub Pull Requests pane to start opening the pull request.\r\nThis would be much easier and intuitive if, along with the branch selector in the status bar, there was a repository selector.\r\n",
        "createdAt": "2020-02-28 09:54:30",
        "state": "open",
        "number": 91742
    },
    {
        "title": "Diagnostic link hovers should show target",
        "description": "From https://github.com/microsoft/vscode/issues/11847\r\n\r\nI know we have the trusted link infrastructure but I would like to see the target of a diagnostic code link if possible, would it be possible to show the link in the tooltip when I hover it?\r\n\r\nI can't think of any other places where there is no way to tell where the link goes before clicking it and that makes me nervous about clicking it.",
        "createdAt": "2020-02-27 19:43:50",
        "state": "open",
        "number": 91711
    },
    {
        "title": "Debug console suggestions should not fuzzy match on history entries",
        "description": "In the image below the `itemsMap` variable is a `Map`, but it doesn't even seem to be seen as an object at all.\r\n\r\n![image](https://user-images.githubusercontent.com/641685/75386608-fcadef80-58af-11ea-867a-f684244923bc.png)\r\n",
        "createdAt": "2020-02-26 21:01:09",
        "state": "open",
        "number": 91617
    },
    {
        "title": "[folding] pressing Enter in collapsed region should add new line outside region",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\n1. In a TypeScript file add a region\r\n```ts\r\n//#region Helper functions XXX\r\nYYY\r\n... some code goes here\r\n//#endregion\r\nZZZ\r\n```\r\n2. Collapse the region.\r\n3. Place the cursor just after XXX.\r\n4. Press Enter\r\n\r\n**Expected result:**\r\n Line break is added after end of region (before ZZZ)\r\n```ts\r\n//#region Helper functions XXX\r\nYYY\r\n... some code goes here\r\n//#endregion\r\n\r\nZZZ\r\n```\r\n**Actual result:**\r\nRegion is expanded. Line break is added at the beginning off the region (before YYY)\r\n```ts\r\n//#region Helper functions XXX\r\n\r\nYYY\r\n... some code goes here\r\n//#endregion\r\nZZZ\r\n```\r\n\r\nVS Code version: Code 1.42.1 (c47d83b293181d9be64f27ff093689e8e7aed054, 2020-02-11T14:46:03.121Z)\r\nOS version: Windows_NT ia32 10.0.18363\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-6700 CPU @ 3.40GHz (8 x 3408)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>metal: disabled_off<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off<br>surface_control: disabled_off<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|31.79GB (15.58GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (4)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nEditorConfig|Edi|0.14.4\r\ncsharp|ms-|1.21.12\r\ndebugger-for-chrome|msj|4.12.6\r\nvetur|oct|0.23.0\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-02-26 18:31:32",
        "state": "open",
        "number": 91600
    },
    {
        "title": "Notebooks should have titles",
        "description": "refs #91328\r\n\r\nAll notebooks rendered in VS Code have a tab title that is `<filename>.ipynb`. In some notebook editors, I like that you can set a human readable title for a notebook.\r\n",
        "createdAt": "2020-02-26 16:13:16",
        "state": "open",
        "number": 91589
    },
    {
        "title": "Please allow toggling rendering and editing of markdown cells",
        "description": "refs #91328\r\n\r\nI prefer to be able to render markdown only after I'm done editing to not clutter the notebook.\r\n\r\n",
        "createdAt": "2020-02-26 16:02:24",
        "state": "open",
        "number": 91586
    },
    {
        "title": "HTML not rendered",
        "description": "refs #91328\r\n\r\nI can only assume this is supposed to render the html\r\n\r\n![image](https://user-images.githubusercontent.com/6561887/75297410-ac1d9000-57e4-11ea-9a77-f15cad1e66a5.png)\r\n",
        "createdAt": "2020-02-25 23:37:31",
        "state": "open",
        "number": 91501
    },
    {
        "title": "Unrecognized settings show errors when in language blocks",
        "description": "- Add an unrecognized setting to settings.json\r\n- See that it is correctly dimmed with no warning underline\r\n- Add it to a language-specific settings block\r\n- There is a warning, \"This setting does not support per-language configuration which is misleading\"\r\n\r\n![image](https://user-images.githubusercontent.com/323878/75295327-467ad500-57df-11ea-9b48-f5e0ff30a381.png)\r\n\r\n\r\n",
        "createdAt": "2020-02-25 22:59:46",
        "state": "open",
        "number": 91490
    },
    {
        "title": "Add support for paranthesis in \"when\" conditions",
        "description": "<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.42.0\r\n- OS Version: Ubuntu 18.04.3\r\n\r\nThe `when` expression that contains parentheses which we set for a keybinding defined in the contribution point of our extension results into a corrupted (invalidly transformed expression in user's keybinding settings), e.g. the following declaration:\r\n```json\r\n{\r\n    \"command\": \"extension.helloWorld\",\r\n    \"key\": \"enter\",\r\n    \"when\": \"editorLangId == rust && !suggestWidgetVisible && (!vim.active || vim.mode == 'Insert')\"\r\n}\r\n```\r\nproduces the following invalid when expression:\r\n![](https://user-images.githubusercontent.com/36276403/75283143-ef92f100-581a-11ea-858a-48aaf950fc9d.png)\r\n\r\n\r\nSteps to Reproduce:\r\n\r\n1. Go to the [following repo with the reproduction](https://github.com/Veetaha/report-vscode-corrupted-when-codition-with-parens)\r\n2. Follow the steps in README.md\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-02-25 20:13:22",
        "state": "open",
        "number": 91473
    },
    {
        "title": "Define a `vscode.executeSemanticHighlightProvider` command",
        "description": "Providers also define a command so that extensions can use them. See\r\nhttps://code.visualstudio.com/api/references/commands\r\nfor examples.\r\n\r\nThe semantic highlight provider should offer something similar.\r\n\r\nUses cases:\r\n- get semantic highlighting for a virtual document\r\n",
        "createdAt": "2020-02-25 13:16:02",
        "state": "open",
        "number": 91375
    },
    {
        "title": "Undo/Redo: consider to show global undo/redo as label in menu",
        "description": "Refs: #91248\r\n\r\nI think we should indicate to the user that the next Undo or Redo triggers as global undo/redo by showing this in the Edit menu. E.g. `Undo (Rename)` and `Redo (Rename)`. \r\n\r\nI would not change the labels for operations that happened from user typing and not refactorings.",
        "createdAt": "2020-02-25 12:37:59",
        "state": "open",
        "number": 91370
    },
    {
        "title": "Peek problems doesn't wrap or provide a horizontal scrollbar",
        "description": "Issue Type: <b>Bug</b>\r\n\r\n![image](https://user-images.githubusercontent.com/641685/75198318-51296180-572e-11ea-8b84-3091b197b640.png)\r\n\r\nVS Code version: Code - Insiders 1.43.0-insider (07c33977da255861edf71e65b18249d2f67d0762, 2020-02-24T05:33:18.353Z)\r\nOS version: Windows_NT x64 10.0.19041\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|AMD Ryzen 9 3900X 12-Core Processor             (24 x 3800)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off_ok<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off_ok<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|31.95GB (16.31GB free)|\r\n|Process Argv|--folder-uri file:///c%3A/Users/Eric/code/microsoft/vscode|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-02-24 22:52:59",
        "state": "open",
        "number": 91321
    },
    {
        "title": "[folding] context menu on expand/collapse arrow",
        "description": "It would be nice if you can right click on expand/collapse code block arrow to get small menu to collapse/expand all blocks:\r\n\r\n![2020-02-24_18-17-20](https://user-images.githubusercontent.com/3820367/75175215-3527bf00-5732-11ea-8502-cd910659864a.png)\r\n\r\n",
        "createdAt": "2020-02-24 17:19:36",
        "state": "open",
        "number": 91293
    },
    {
        "title": "Settings sync should debounce requests when a request is in progress",
        "description": "On a slow responding server, several requests get fired before proceeding ones have finished. For the following log I think the behavior should be:\r\n\r\n```\r\n[2020-02-24 07:29:36.999] Fire sync request\r\n[2020-02-24 07:29:58.309] Queue a request\r\n[2020-02-24 07:30:06.612] Queue a request (does nothing, one's already queued)\r\n[2020-02-24 07:30:08.798] Queue a request (does nothing, one's already queued)\r\n[2020-02-24 07:30:10.024] Queue a request (does nothing, one's already queued)\r\n[2020-02-24 07:30:12.788] Queue a request (does nothing, one's already queued)\r\n[2020-02-24 07:30:38.955] Queue a request (does nothing, one's already queued)\r\n[2020-02-24 07:31:36.999] Abandon request as it's taken over 2 minutes\r\n[2020-02-24 07:31:36.999] Fire sync request as it has been queued\r\n[2020-02-24 07:31:51.136] Queue a request (does nothing, one's already queued)\r\n[2020-02-24 07:31:52.629] Queue a request (does nothing, one's already queued)\r\n[2020-02-24 07:32:09.359] Queue a request (does nothing, one's already queued)\r\n[2020-02-24 07:32:12.146] Queue a request (does nothing, one's already queued)\r\n...\r\n```\r\n\r\nActual sync log:\r\n\r\n```\r\n[2020-02-24 07:29:36.999] [userDataSync] [info] Auto Sync: Triggered.\r\n[2020-02-24 07:29:58.309] [userDataSync] [info] Auto Sync: Triggered.\r\n[2020-02-24 07:30:06.612] [userDataSync] [info] Auto Sync: Triggered.\r\n[2020-02-24 07:30:08.798] [userDataSync] [info] Auto Sync: Triggered.\r\n[2020-02-24 07:30:10.024] [userDataSync] [info] Auto Sync: Triggered.\r\n[2020-02-24 07:30:12.788] [userDataSync] [info] Auto Sync: Triggered.\r\n[2020-02-24 07:30:38.955] [userDataSync] [info] Auto Sync: Triggered.\r\n[2020-02-24 07:31:51.136] [userDataSync] [info] Auto Sync: Triggered.\r\n[2020-02-24 07:31:52.629] [userDataSync] [info] Auto Sync: Triggered.\r\n[2020-02-24 07:32:09.359] [userDataSync] [info] Auto Sync: Triggered.\r\n[2020-02-24 07:32:12.146] [userDataSync] [info] Auto Sync: Triggered.\r\n[2020-02-24 07:32:18.444] [userDataSync] [error] Unknown (UserDataSyncError) undefined: Server returned 500\r\n    at d.manifest (file:///C:/Users/daimms.REDMOND/AppData/Local/Programs/Microsoft VS Code Insiders/resources/app/out/vs/code/electron-browser/sharedProcess/sharedProcessMain.js:446:798)\r\n    at async m.sync (file:///C:/Users/daimms.REDMOND/AppData/Local/Programs/Microsoft VS Code Insiders/resources/app/out/vs/code/electron-browser/sharedProcess/sharedProcessMain.js:441:8)\r\n    at async l.sync (file:///C:/Users/daimms.REDMOND/AppData/Local/Programs/Microsoft VS Code Insiders/resources/app/out/vs/code/electron-browser/sharedProcess/sharedProcessMain.js:431:979)\r\n[2020-02-24 07:32:26.674] [userDataSync] [error] Unknown (UserDataSyncError) undefined: Server returned 500\r\n    at d.manifest (file:///C:/Users/daimms.REDMOND/AppData/Local/Programs/Microsoft VS Code Insiders/resources/app/out/vs/code/electron-browser/sharedProcess/sharedProcessMain.js:446:798)\r\n    at async m.sync (file:///C:/Users/daimms.REDMOND/AppData/Local/Programs/Microsoft VS Code Insiders/resources/app/out/vs/code/electron-browser/sharedProcess/sharedProcessMain.js:441:8)\r\n    at async l.sync (file:///C:/Users/daimms.REDMOND/AppData/Local/Programs/Microsoft VS Code Insiders/resources/app/out/vs/code/electron-browser/sharedProcess/sharedProcessMain.js:431:979)\r\n[2020-02-24 07:32:28.864] [userDataSync] [error] Unknown (UserDataSyncError) undefined: Server returned 500\r\n    at d.manifest (file:///C:/Users/daimms.REDMOND/AppData/Local/Programs/Microsoft VS Code Insiders/resources/app/out/vs/code/electron-browser/sharedProcess/sharedProcessMain.js:446:798)\r\n    at async m.sync (file:///C:/Users/daimms.REDMOND/AppData/Local/Programs/Microsoft VS Code Insiders/resources/app/out/vs/code/electron-browser/sharedProcess/sharedProcessMain.js:441:8)\r\n    at async l.sync (file:///C:/Users/daimms.REDMOND/AppData/Local/Programs/Microsoft VS Code Insiders/resources/app/out/vs/code/electron-browser/sharedProcess/sharedProcessMain.js:431:979)\r\n[2020-02-24 07:32:30.082] [userDataSync] [error] Unknown (UserDataSyncError) undefined: Server returned 500\r\n    at d.manifest (file:///C:/Users/daimms.REDMOND/AppData/Local/Programs/Microsoft VS Code Insiders/resources/app/out/vs/code/electron-browser/sharedProcess/sharedProcessMain.js:446:798)\r\n    at async m.sync (file:///C:/Users/daimms.REDMOND/AppData/Local/Programs/Microsoft VS Code Insiders/resources/app/out/vs/code/electron-browser/sharedProcess/sharedProcessMain.js:441:8)\r\n    at async l.sync (file:///C:/Users/daimms.REDMOND/AppData/Local/Programs/Microsoft VS Code Insiders/resources/app/out/vs/code/electron-browser/sharedProcess/sharedProcessMain.js:431:979)\r\n[2020-02-24 07:32:32.854] [userDataSync] [error] Unknown (UserDataSyncError) undefined: Server returned 500\r\n    at d.manifest (file:///C:/Users/daimms.REDMOND/AppData/Local/Programs/Microsoft VS Code Insiders/resources/app/out/vs/code/electron-browser/sharedProcess/sharedProcessMain.js:446:798)\r\n    at async m.sync (file:///C:/Users/daimms.REDMOND/AppData/Local/Programs/Microsoft VS Code Insiders/resources/app/out/vs/code/electron-browser/sharedProcess/sharedProcessMain.js:441:8)\r\n    at async l.sync (file:///C:/Users/daimms.REDMOND/AppData/Local/Programs/Microsoft VS Code Insiders/resources/app/out/vs/code/electron-browser/sharedProcess/sharedProcessMain.js:431:979)\r\n[2020-02-24 07:32:59.021] [userDataSync] [error] Unknown (UserDataSyncError) undefined: Server returned 500\r\n    at d.manifest (file:///C:/Users/daimms.REDMOND/AppData/Local/Programs/Microsoft VS Code Insiders/resources/app/out/vs/code/electron-browser/sharedProcess/sharedProcessMain.js:446:798)\r\n    at async m.sync (file:///C:/Users/daimms.REDMOND/AppData/Local/Programs/Microsoft VS Code Insiders/resources/app/out/vs/code/electron-browser/sharedProcess/sharedProcessMain.js:441:8)\r\n    at async l.sync (file:///C:/Users/daimms.REDMOND/AppData/Local/Programs/Microsoft VS Code Insiders/resources/app/out/vs/code/electron-browser/sharedProcess/sharedProcessMain.js:431:979)\r\n```",
        "createdAt": "2020-02-24 15:39:14",
        "state": "open",
        "number": 91286
    },
    {
        "title": "Semantic Highlighting not shown in Markdown preview in TypeScript code",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nWhen I use `\"editor.semanticHighlighting.enabled\": true,` TypeScript looks great, but now the Markdown code looks bad in comparison. Please see the screenshot.\r\n![Screenshot from 2020-02-24 14-31-46](https://user-images.githubusercontent.com/12832280/75160748-7f00ad00-5712-11ea-963d-d53655328848.png)\r\n\r\n\r\nVS Code version: Code 1.42.1 (c47d83b293181d9be64f27ff093689e8e7aed054, 2020-02-11T14:50:36.977Z)\r\nOS version: Linux x64 4.18.0-147.5.1.el8_1.x86_64\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-4770S CPU @ 3.10GHz (8 x 3681)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>metal: disabled_off<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: disabled_software<br>skia_renderer: disabled_off<br>surface_control: disabled_off<br>surface_synchronization: enabled_on<br>video_decode: unavailable_off<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|1, 1, 0|\r\n|Memory (System)|7.50GB (2.44GB free)|\r\n|Process Argv|--no-sandbox --unity-launch /home/david/sites/Link to typing objects cheat-sheet.md|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (9)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-deno|axe|2.0.4\r\nspellright|ban|3.0.50\r\nvscode-eslint|dba|2.1.1\r\nprettier-vscode|esb|3.20.0\r\nshell-format|fox|7.0.1\r\ndebugger-for-chrome|msj|4.12.6\r\nLiveServer|rit|5.6.1\r\nshellcheck|tim|0.9.0\r\nquokka-vscode|Wal|1.0.279\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-02-24 14:34:03",
        "state": "open",
        "number": 91279
    },
    {
        "title": "[themes] Support ${preferredTheme} as theme setting",
        "description": "<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n\r\n\r\n\"workbench.colorTheme\" should not be in the user settings if the automatic dark-mode switch is on. Or at least it shouldn't be changed **by** vscode **for** the user.\r\n\r\nThat file is for **me** to tell vscode what to **do**. **Not** for vscode to tell me what it **did**.\r\n\r\nMy dotfiles are changing depending on the time of day now, and that's not the way it should be.\r\n\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.42.1\r\n- OS Version: macOS 10.15.3\r\n\r\nCopied from about:\r\n```\r\nVersion: 1.42.1\r\nCommit: c47d83b293181d9be64f27ff093689e8e7aed054\r\nDate: 2020-02-11T14:44:27.652Z\r\nElectron: 6.1.6\r\nChrome: 76.0.3809.146\r\nNode.js: 12.4.0\r\nV8: 7.6.303.31-electron.0\r\nOS: Darwin x64 19.3.0\r\n```\r\n\r\n\r\nSteps to Reproduce:\r\n\r\n1. Make settings like:\r\n```\r\n\"window.autoDetectColorScheme\": true,\r\n\"workbench.preferredDarkColorTheme\": \"Base16 Dark Eighties\",\r\n\"workbench.preferredLightColorTheme\": \"Base16 Light Tomorrow\",\r\n```\r\n2. Switch the dark-mode to on or off.\r\n3. See `\"workbench.colorTheme\": \"Base16 Light Tomorrow\"` appear in settings.\r\nThis setting shouldn't be there, it's not my setting. It's vscode's \"state\".\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-02-23 15:01:21",
        "state": "open",
        "number": 91231
    },
    {
        "title": "Find/replace icons are not intuitive",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nRelated to my feedback on find/replace behavior (#91210), the dialog is also difficult to use because of its reliance on mystifying icons over labeled buttons.\r\n\r\n* Several icons are just variants of `Aa` and `Ab` and `AB` etc. which are hard to keep straight without tool tips\r\n* The \"find in selection\" icon doesn't convey selection\r\n* Replacement options are hidden behind a generic disclosure triangle\r\n* \"Match whole word\" doesn't convey much; there are 3 lines and I don't know what any of them represents\r\n* \"Replace\" vs \"Replace all\" is reasonably intuitive but I'm not sure why \"replace all\" is differentiated with multiple characters being replaced rather than just multiple occurrences.\r\n\r\nAside from its icon, I'm not sure why \"find in selection\" is over to the right by the controls for navigating between occurrences, rather than an option that controls search behavior like \"ignore case\".\r\n\r\nI also noticed that some button tooltips are in Title Case and others are in Sentence case, not sure if there is a reason for that.\r\n\r\nVS Code version: Code 1.42.1 (c47d83b293181d9be64f27ff093689e8e7aed054, 2020-02-11T14:44:27.652Z)\r\nOS version: Darwin x64 19.3.0",
        "createdAt": "2020-02-22 21:38:16",
        "state": "open",
        "number": 91211
    },
    {
        "title": "Cannot drag/drop file from VS Code to other apps due to invalid data object",
        "description": "Version: 1.42.1 (user setup)\r\nCommit: c47d83b293181d9be64f27ff093689e8e7aed054\r\nDate: 2020-02-11T14:45:59.656Z\r\nElectron: 6.1.6\r\nChrome: 76.0.3809.146\r\nNode.js: 12.4.0\r\nV8: 7.6.303.31-electron.0\r\nOS: Windows_NT x64 10.0.18363\r\n\r\n## Steps to Reproduce:\r\nDrag a file from _Explorer_ tool window and drop it onto:\r\n\r\n### Visual Studio\r\n1. Visual Studio's main window (with no editors open)\r\n\r\n**Expected**: For VS to open the file\r\n**Actual**: Get stop icon indicating the drag is not supported\r\n\r\n2. C# project in Solution Explorer\r\n\r\n**Expected**: For the file to be copied to the project\r\n**Actual**: Get an drag icon indicating that a Copy will occur, but after dropping nothing happens --\r\n\r\n### Outlook\r\n3. Onto Outlook\r\n\r\n**Expected**: New Email with file as attachment\r\n**Actual** : Message Box with _Cannot copy the items_\r\n\r\n### Excel\r\n\r\n4. Drop it on Excel\r\n\r\nExpected: File to be opened as text\r\nActual: Just the _file name_ is pasted into cell \r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\n## Background\r\nI work on Visual Studio and debugged this from our side, and this is what I've found. We are expecting a format of CF_HDROP and doing the following pseudo code:\r\n\r\n``` C#\r\nvar format = new FORMATETC\r\n{\r\n    cfFormat = CF_HDROP,\r\n    ptd = IntPtr.Zero,\r\n    dwAspect = (uint)DVASPECT.DVASPECT_CONTENT,\r\n    lindex = -1,\r\n    tymed = (uint)TYMED.TYMED_HGLOBAL\r\n};\r\n\r\nvar storage = default(STGMEDIUM);\r\n\r\nif (dataObject.QueryGetData(format) == S_OK)\r\n{\r\n     dataObject.GetData(format, storage) // \"Invalid FORMATETC structure (0x80040064 - DV_E_FORMATETC)\r\n}\r\n```\r\n\r\nQueryGetData is saying \"I support this format\", yet GetData is returning a HRESULT saying the format we just passed to QueryGetData is invalid. I suspect this is happening similarly in other applications. We have 4 or 5 places we look CF_HDROP and everyone of them fails.\r\n\r\nI spent a little bit of time trying to figure out how VS Code produces CF_HDROP but to no avail. Could not find any code that looks like it puts a data object into the clipboard other than text.",
        "createdAt": "2020-02-21 06:54:50",
        "state": "open",
        "number": 91132
    },
    {
        "title": "Add a command to file an issue (bug) with relevant info",
        "description": "I would love to be able to have a command (in the palette and something I can shortcut) that would open a GitHub issue and paste in the system info. Basically like using the Issue Reporter and you uncheck include extensions (I never want to include those), but in a single shot without entering a title or message.",
        "createdAt": "2020-02-20 19:09:36",
        "state": "open",
        "number": 91108
    },
    {
        "title": "Ability to try out an extension without getting synced",
        "description": "If user has 2 machines opened, installs C# on one, waits 10 minutes and then marks to not sync. Ideally the second machine would never have installed the C# extension.",
        "createdAt": "2020-02-20 08:15:42",
        "state": "open",
        "number": 91054
    },
    {
        "title": "[folding] Command to jump to previous/next fold",
        "description": "It would be useful for navigating code to have a command to jump to previous/next foldable line. This would allow me to easily jump to the lines that I can either fold/unfold.",
        "createdAt": "2020-02-19 21:49:57",
        "state": "open",
        "number": 91023
    },
    {
        "title": "Settings sync should support user tasks",
        "description": "Low priority but it makes sense to sync this.\r\n\r\nFYI @alexr00 ",
        "createdAt": "2020-02-19 18:26:52",
        "state": "open",
        "number": 91011
    },
    {
        "title": "Sync remote extensions ",
        "description": "Also sync remote extensions (WSL, SSH, Dev Container) while syncing",
        "createdAt": "2020-02-19 10:55:17",
        "state": "open",
        "number": 90968
    },
    {
        "title": "Adopt codicons for bundled extensions",
        "description": "With #84695 and related issues deployed, bundled extensions like [npm](https://github.com/microsoft/vscode/tree/master/extensions/npm) and [git](https://github.com/microsoft/vscode/tree/master/extensions/git) can replace most of their bundled svg icons with native codicons.",
        "createdAt": "2020-02-18 19:02:12",
        "state": "open",
        "number": 90911
    },
    {
        "title": "Screen readers not announcing encountered break points",
        "description": "@sana-ajani \r\n@isidorn \r\n\r\nIssue Type: <b>Bug</b>\r\n\r\n<h3>Issue:</h3>\r\nVoiceOver is not announcing when a break point is encountered within the file. \r\n\r\n<h4>Expected:</h4>\r\nVoiceOver should announce when the cursor encounters a break point within the file. \r\n\r\n<h4>Actual:</h4>\r\nVoiceOver is not announcing when it encounters a break point.\r\n\r\n<h4>Recreate:</h4>\r\n<ul>\r\n<li>Turn on VoiceOver</li>\r\n<li>Insert a break point within a file</li>\r\n<li>Use the up and down arrow keys to move the cursor over the line containing the break point</li>\r\n</ul>\r\n\r\nVS Code version: Code 1.42.1 (c47d83b293181d9be64f27ff093689e8e7aed054, 2020-02-11T14:44:27.652Z)\r\nOS version: Darwin x64 19.3.0\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-6820HQ CPU @ 2.70GHz (8 x 2700)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>metal: disabled_off<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off<br>surface_control: disabled_off<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|2, 1, 2|\r\n|Memory (System)|16.00GB (3.72GB free)|\r\n|Process Argv||\r\n|Screen Reader|yes|\r\n|VM|0%|\r\n</details><details><summary>Extensions (3)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\npython|ms-|2020.2.63072\r\npython|tht|0.2.3\r\nvscodeintellicode|Vis|1.2.5\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-02-17 18:42:09",
        "state": "open",
        "number": 90842
    },
    {
        "title": "Keyboard events not passed to terminal UI apps",
        "description": "**VScode:**\r\nVersion: 1.41.1\r\nCommit: 26076a4de974ead31f97692a0d32f90d735645c0\r\nDate: 2019-12-18T15:04:31.999Z\r\nElectron: 6.1.5\r\nChrome: 76.0.3809.146\r\nNode.js: 12.4.0\r\nV8: 7.6.303.31-electron.0\r\nOS: Linux x64 4.19.0-6-amd64\r\n\r\n**Description:**\r\nSome keyboard presses are not passed to a terminal UI app, running inside integrated terminal. It seems like they are handled and consumed by vscode itself, even though they could be used by the terminal UI app.\r\n\r\n**Steps to Reproduce:**\r\n1.  Open integrated terminal\r\n1.  Launch `nano` editor containing multi-line text with cursor in the first line \r\n1.  Press `ctrl-shif-arrowDown`\r\n1.  Add `{\r\n        \"key\": \"ctrl+shift+down\",\r\n        \"command\": \"-workbench.action.terminal.scrollDown\",\r\n        \"when\": \"terminalFocus\"\r\n    },` to `keybindings.json`.\r\n1.  Press `ctrl-shif-arrowDown`again in the `nano` editor\r\n1.  Repeat steps 2-3 in external terminal like `gnome-terminal` or `xfce4-terminal`.\r\n\r\n**Observed behavior**\r\nStep 3 - nothing happens. Step 5 and 6 - text is selected up to the end of the `nano`'s buffer.\r\n\r\n**Expected behavior:**\r\nThe shortcut should work without disabling integrated terminal scrolling in keybindings. Maybe vscode shouldn't consume key events that could be used by terminal UI apps. This is the way it works in external terminals (`ctrl-shif-arrowDown` - scrolls down in normal mode, but is usable for launched terminal UI apps).  \r\nIn vscode `ctrl-shif-arrowDown` is not even delivered to the terminal UI app.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-02-17 16:56:26",
        "state": "open",
        "number": 90838
    },
    {
        "title": "Key binding condition for \"is merging conflicts\"?",
        "description": "It would be great if there is a way to express the key binding condition of merging conflicts. That way I can bind the same key to \"move to next change\" and \"move to next conflict\" and let VSCode do the right thing smartly.\r\n\r\nLooks like [there is another person](https://stackoverflow.com/a/46133407/1755086) who would like this as well. ",
        "createdAt": "2020-02-17 07:03:48",
        "state": "open",
        "number": 90800
    },
    {
        "title": "Support tmux control mode (-CC flag)",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nI saw the suggestion from @roblourens to use tmux in microsoft/vscode-remote-release#1185\r\n\r\nThat's mostly good, however has a few issues:\r\n- `code` command doesn't work inside tmux.\r\n- no GUI support - the built-in tab management and split panes then aren't usable.\r\n- scrolling doesn't work (control codes not sent to the terminal?)\r\n\r\nI'd love to see support for tmux's control mode (tmux -CC) - then vscode could use its native tab/window management and sessions would be persisted between app opens/closes.\r\n\r\nExtension version: 0.36.0\r\nVS Code version: Code - Insiders 1.34.0-insider (daf71423252a707b8e396e8afa8102b717f8213b, 2019-05-06T22:07:35.830Z)\r\nOS version: Darwin x64 18.7.0\r\nRemote OS version: Linux x64 5.2.17-1rodete3-amd64\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-02-14 04:45:10",
        "state": "open",
        "number": 90696
    },
    {
        "title": "Add support for premium extensions",
        "description": "This was previously raised in #36577 but that is closed and locked. Rather than reopen it please allow this one to be a backlog candidate at least, so interested folk can upvote it.",
        "createdAt": "2020-02-14 04:23:43",
        "state": "open",
        "number": 90648
    },
    {
        "title": "Allow ThemeIcon in WebviewPanel.iconPath",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nYou can only pass an Uri or an object containing Uris to WebviewPanel.iconPath, while iconPath on QuickInputButton and TreeItem also supports ThemeIcon. This would increase codicon reusability.\r\n\r\nVS Code version: Code 1.42.0 (ae08d5460b5a45169385ff3fd44208f431992451, 2020-02-06T10:51:34.058Z)\r\nOS version: Windows_NT x64 10.0.18362\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-02-13 16:36:30",
        "state": "open",
        "number": 90616
    },
    {
        "title": "Install all remote extensions locally [Remote: SSH]",
        "description": "I know https://github.com/microsoft/vscode/issues/83675 exists, but I don't think it contains this scenario. If it does so, please close this issue.\r\n\r\nI have a remote server, where I \"store\" my extensions and whenever I log into that server I would like to install all of the extensions locally. A button, a menu option or a command would be perfect.\r\n\r\nI know the extensions and settings sync functionality is being worked on, but I think this should be implemented, as it allows scenarios like installing all extensions from a shared server, without credentials (except ssh, of course).",
        "createdAt": "2020-02-12 19:16:47",
        "state": "open",
        "number": 90548
    },
    {
        "title": "Include into tasks.json and launch.json",
        "description": "From https://github.com/stuartthomson/vscode-buttons/issues/1:\r\n> It's currently not possible to have more than one tasks.json file per workspace. This means that tasks must either all be shared by a team or ignored by source control.\r\n\r\nThis gave me the idea to allow for includes into tasks.json (and other files like launch.json), for example with the following syntax:\r\n```\r\n{\r\n    \"tasks\": [\r\n        {\r\n            ...\r\n        }\r\n    ],\r\n    \"include\": [\r\n        \"team_tasks.json\",\r\n        \"smart_tasks.json\"\r\n    ]\r\n}\r\n```\r\n\r\nHere, team_tasks.json could be a file of tasks shared in your development team and smart_tasks.json a file of tasks that you have found on the Internet.\r\n\r\nInclusion could also be a way to [share variables between tasks.json and launch.json](https://github.com/microsoft/vscode/issues/89703).",
        "createdAt": "2020-02-12 15:24:03",
        "state": "open",
        "number": 90530
    },
    {
        "title": "TerminalOptions' env parameter does not work with WSL as a shell",
        "description": "Originally from this issue: https://github.com/microsoft/vscode-docker/issues/1524 created by @diablodale\r\n\r\nWe have some users that use WSL.exe (as in, C:\\Windows\\System32\\wsl.exe) as the default integrated shell in Windows. Because environment variables are not automatically inherited, the [TerminalOptions](https://code.visualstudio.com/api/references/vscode-api#TerminalOptions) env option does not work. Most likely, [WSLENV](https://devblogs.microsoft.com/commandline/share-environment-vars-between-wsl-and-windows/) would need to be used to pass in some things.",
        "createdAt": "2020-02-12 13:42:56",
        "state": "open",
        "number": 90527
    },
    {
        "title": "Provide a way to quiclky open an ignored file",
        "description": "TL;DR Ctrl + P for ignored files\r\n\r\nSometimes when I'm debugging I want to quickly open an ignored file (in node_modules for example). It seems that I cannot do that. Is there a command to do this? Can you add one? It would be nice if it would also have a keyboard binding by default.\r\n",
        "createdAt": "2020-02-12 13:29:14",
        "state": "open",
        "number": 90525
    },
    {
        "title": "Support custom QuickPick filter logic",
        "description": "Currently the `QuickPick` filter logic supports wild cards and which parts of the item to search in but not things like switched up word order or regex. [An issue](https://github.com/brunnerh/insert-unicode/issues/13) was opened for one of my extensions asking for a more lenient search, which does not seem possible with the current API.\r\n\r\nRather than adding a lot of options specifying exactly how the filtering behaves it might be easier and more sensible to provide a custom filter callback and maybe a filter delay option. The delay would trigger the filter logic only `n` milliseconds after the user has last typed, in case the filter logic is complex or there are many items (- i have 33k -) causing long filter times.\r\n\r\nSuggested interface for the options:\r\n\r\n```ts\r\ninterface QuickPickOptions {\r\n\t// ...\r\n\r\n\t/**\r\n\t * Time in milliseconds to wait after last user input\r\n\t * before filtering the list.\r\n\t * Default: 0\r\n\t */\r\n\tfilterDelay: number,\r\n\r\n\t/**\r\n\t * Optional filter callback which overrides the default filter\r\n\t * behavior. The callback is called for every item in the list\r\n\t * with the current user input.\r\n\t * Default: undefined\r\n\t */\r\n\tfilterCallback?: (item: QuickPickItem | string, filterText: string) => boolean,\r\n}\r\n```\r\n\r\nI had a look at handling a quick pick \"manually\" by using `createQuickPick` but it also filters completely automatically.\r\n\r\n---\r\n\r\nMaybe `QuickPickOptions` could also be made generic. It already has the `onDidSelectItem` property which uses a union for the item type instead of a generic. Then functions like `showQuickPick<T extends QuickPickItem>` could propagate their generic type to the options argument.",
        "createdAt": "2020-02-12 12:26:50",
        "state": "open",
        "number": 90521
    },
    {
        "title": "Add ability for before decorations to indent (stretch across) word wrapped lines",
        "description": "Refs: https://github.com/eamodio/vscode-gitlens/issues/930\r\n\r\nI've gotten this report numerous times with GitLens' \"gutter\" blame annotations and there really isn't much I can do to fix/deal with this.\r\n\r\n![image](https://user-images.githubusercontent.com/641685/74216656-183fb600-4c73-11ea-9e31-4dc26348fff3.png)\r\n\r\nCan anything be done here?",
        "createdAt": "2020-02-11 07:07:38",
        "state": "open",
        "number": 90426
    },
    {
        "title": "Allow undo of text typed after Find Again",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nType the following into a new file:\r\n```\r\nx\r\nx\r\nx\r\n```\r\nNow use Find to find the first \"x\". Type something over it. Then use Find Again to find the next one, and type something over it. Repeat for the last one.\r\n\r\nNow use Undo. It will undo all three changes. It should only undo the last one, after the last Find Again.\r\n\r\n\r\n\r\nVS Code version: Code 1.42.0 (ae08d5460b5a45169385ff3fd44208f431992451, 2020-02-06T10:51:33.119Z)\r\nOS version: Darwin x64 18.7.0\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-3615QM CPU @ 2.30GHz (8 x 2300)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>metal: disabled_off<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off<br>surface_control: disabled_off<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|2, 2, 2|\r\n|Memory (System)|16.00GB (0.68GB free)|\r\n|Process Argv|-psn_0_1065220|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (28)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nproject-manager|ale|10.10.0\r\nnpm-intellisense|chr|1.3.0\r\ndart-code|Dar|3.8.1\r\nmustache|daw|1.1.1\r\nvscode-eslint|dba|2.0.15\r\ngitlens|eam|10.2.1\r\nvscode-npm-script|eg2|0.3.11\r\nvscode-powertools|ego|0.57.0\r\nphp-debug|fel|1.13.0\r\nvscode-favorites|how|1.4.0\r\nsvn-scm|joh|2.6.1\r\nvscode-apache|mrm|1.2.0\r\npython|ms-|2020.1.58038\r\nremote-ssh|ms-|0.49.0\r\nremote-ssh-edit|ms-|0.49.0\r\nremote-ssh-explorer|ms-|0.49.0\r\ndebugger-for-chrome|msj|4.12.6\r\njava|red|0.55.1\r\nvscode-yaml|red|0.7.2\r\nvscode-hexdump|sle|1.7.2\r\nslack|soz|0.0.14\r\nvscodeintellicode|Vis|1.2.5\r\nvscode-java-debug|vsc|0.24.0\r\nvscode-java-dependency|vsc|0.8.0\r\nvscode-java-pack|vsc|0.8.1\r\nvscode-maven|vsc|0.21.0\r\nsync-rsync|vsc|0.36.0\r\njinja|who|0.0.8\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-02-10 23:56:44",
        "state": "open",
        "number": 90406
    },
    {
        "title": "Allow to use decorations in quick input (e.g. for editors picker)",
        "description": "For the recently used menu (which is bound to <kbd>Ctrl</kbd> + <kbd>Tab</kbd>) I would like to see git decoration status (modified/untracked/...) just like they work for **OPEN EDITORS** View.\r\n\r\n![Screenshot (142)](https://user-images.githubusercontent.com/9638156/74091650-a9bff400-4aca-11ea-82ba-0218fe7a50e5.png)",
        "createdAt": "2020-02-08 20:29:21",
        "state": "open",
        "number": 90301
    },
    {
        "title": "Enable ok button for extensions using quickpick",
        "description": "I noticed that the okay button disappeared without a way to bring it back. This PR empowers extension owners to decide if they want the button or not.\r\n",
        "createdAt": "2020-02-08 00:50:48",
        "state": "open",
        "number": 90269
    },
    {
        "title": "Explore line-end-rendering of code lenses",
        "description": "This is about exploring to render code lenses not interleaved with source text but at the end line source lines. The reasoning is that it might impact code structure less but at the cost of discoverability, e.g with long lines code lens won't be visible by default. This is an exploration with unknown outcome and any result will surely be configurable so that existing behaviour can be kept the way it is today.",
        "createdAt": "2020-02-07 14:12:25",
        "state": "open",
        "number": 90235
    },
    {
        "title": "Enhance the codicon reference in treeview",
        "description": "Thank you for providing the codicon reference features to the TreeView. I have some question during using it:\r\n\r\n- Can the extension change the color of the codicon when assign it to the tree item? for example, I hope when I'm using `ThemeIcon('error')`, the icon could be red in the treeview.\r\n\r\n- Can the codicon in the treeview applies the spin style?",
        "createdAt": "2020-02-07 06:14:35",
        "state": "open",
        "number": 90200
    },
    {
        "title": "[Feature-request] Remove cursor",
        "description": "I would like the multi cursor to behave like this plugin - https://atom.io/packages/multi-cursor\r\nThis plugin allows to remove last created cursor by adding new cursor in oposite direction.\r\n\r\nExaple.\r\n```\r\nsome text|\r\nsome text 2\r\nsome text 3\r\n```\r\nadd cusor down\r\n```\r\nsome text|\r\nsome text| 2\r\nsome text 3\r\n```\r\nadd cursor dows\r\n```\r\nsome text|\r\nsome text| 2\r\nsome text| 3\r\n```\r\nadd cursor up\r\n```\r\nsome text|\r\nsome text| 2\r\nsome text 3\r\n```\r\nadd cursor up\r\n```\r\nsome text|\r\nsome text 2\r\nsome text 3\r\n```\r\n\r\nthis also works with ctrl - d command.\r\n\r\n",
        "createdAt": "2020-02-06 22:45:52",
        "state": "open",
        "number": 90181
    },
    {
        "title": "Apply active filter in problems view to \"go to problem\"",
        "description": "I was refactoring some stuff in js-debug, trying to get the project to compile, so I had filtered out lint warnings from the problems view and was using F8 to go through compile errors to fix. But F8 still navigated to the problems I had chosen to filter out of my view. It'd be neat (as a user option?) to apply the filter to the \"next problem\" command as well.",
        "createdAt": "2020-02-06 22:23:31",
        "state": "open",
        "number": 90180
    },
    {
        "title": "Add a task instancePolicy to task runOptions.",
        "description": "When a task has reached the max number of instances it can have (default is 1, can be changed with `instanceLimit`) the `instancePolicy` determines what happens when another instance is started.\r\n\r\nHistory: https://github.com/microsoft/vscode/issues/32264\r\nPR for `insanceLimit` which is relevant to anyone interested in implementing `instancePolicy`: https://github.com/microsoft/vscode/pull/89872",
        "createdAt": "2020-02-06 08:31:27",
        "state": "open",
        "number": 90125
    },
    {
        "title": "Variable substitution in task detail property",
        "description": "A helpful feature would be to have variable substitution in the task detail property.\r\n\r\nFor example:\r\n\r\n        {\r\n            \"label\": \"Install SDK\",\r\n            \"type\": \"shell\",\r\n            \"linux\": {\r\n                \"command\": \"install_sdk.sh\",\r\n                \"args\": [\r\n                    \"--dir\", \"${workspaceFolder:Target}/sdk\"\r\n                ]\r\n            },\r\n            \"detail\": \"Installs the SDK to ${workspaceFolder:Target}/sdk\"\r\n        }\r\n\r\nThe detail would read something like: \"Installs the SDK to /home/root/target/sdk\"",
        "createdAt": "2020-02-05 08:38:46",
        "state": "open",
        "number": 90055
    },
    {
        "title": "Allow to reveal an empty TreeView programmatically",
        "description": "Currently, it i possible to reveal/expand a TreeView only when there is an element in the TreeView. it is oputting revealing this element in the TreeView.\r\n\r\nit would useful to be abel to expand the TreeView even when there are no elements in the Tree.\r\n\r\nUse case:\r\n- when testing https://github.com/camel-tooling/vscode-camelk/pull/291\r\n- when writing a tutorial guiding users https://github.com/redhat-developer/vscode-didact/issues/4#issuecomment-557648413\r\n\r\nasked on StackOverflow https://stackoverflow.com/questions/59983711/how-to-programmatically-make-a-treeview-visible",
        "createdAt": "2020-02-04 12:39:58",
        "state": "open",
        "number": 90005
    },
    {
        "title": "show status bar problems count for current file only",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nPlease add an option to show status bar problems only for current file. It becomes a mess when editing many files and you can't see if there are problems in your file.\r\nP.S. I know about a filter inside Problems' pane.\r\n\r\nVS Code version: Code 1.41.1 (26076a4de974ead31f97692a0d32f90d735645c0, 2019-12-18T14:58:56.166Z)\r\nOS version: Windows_NT x64 10.0.10240\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-02-04 11:04:00",
        "state": "open",
        "number": 89998
    },
    {
        "title": "Merge comments if possible while syncing settings",
        "description": "The below are the only changes in the conflict diff editor:\r\n\r\n![image](https://user-images.githubusercontent.com/2193314/73660507-2c6d2d00-464d-11ea-9f25-b419f896cc4b.png)\r\n\r\n![image](https://user-images.githubusercontent.com/2193314/73660531-355dfe80-464d-11ea-8193-95250db05651.png)\r\n\r\nI'm guessing the problem is because of the new trailing comma at the end of `workbench.colorTheme` as everything else is just additions. This should have been merged automatically.\r\n\r\nVersion: 1.42.0-insider (user setup)\r\nCommit: be0aca7188ec6a76e7c2379758c0fbc1e9c21f7b\r\nDate: 2020-01-31T13:53:58.701Z\r\nElectron: 6.1.6\r\nChrome: 76.0.3809.146\r\nNode.js: 12.4.0\r\nV8: 7.6.303.31-electron.0\r\nOS: Windows_NT x64 10.0.19041",
        "createdAt": "2020-02-03 14:21:18",
        "state": "open",
        "number": 89928
    },
    {
        "title": "Commit (Amend) doesn't allow changing the commit message if there are no working changes",
        "description": "<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: Version: 1.41.1 (user setup), Commit: 26076a4de974ead31f97692a0d32f90d735645c0\r\n\r\n- OS Version: Windows_NT x64 10.0.18363\r\n\r\nSteps to Reproduce:\r\n\r\n1. Commit changed files\r\n2. Click on `Commit all (Amend)` the commit to change the commit message\r\n3. The message **There are no changes to commit** is displayed\r\n\r\nWhy is this a bug? The purpose of **Amend** is not only to correct files that have previously been committed. It is also highly useful to change the commit message (misspelled, forgot to reference issues etc.). The UI should behave like the CLI or provide reasonable alternative to change the commit message of a previous commit.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-02-03 13:14:21",
        "state": "open",
        "number": 89923
    },
    {
        "title": "[html] HTML breadcrumbs don't work right when optional end tags omitted",
        "description": "- VSCode Version: 1.42.0-insider\r\n- OS Version: Linux Mint 19.3\r\n\r\nSteps to Reproduce:\r\n\r\n1. Create an HTML document. Sprinkle liberally with `<p>`, `<li>` (inside of `<ul>` or `<ol>`, obviously), `<tr>` or `<td>` inside of `<table>`, and any other elements noted in the HTML5 spec as having optional end tags (see https://html.spec.whatwg.org/#syntax-tag-omission).\r\n2. If you closed the various tags above with their end tags (e.g., `</p>`), then run the page through something like HTML Tidy (I am using v5.7.28), passing in the `--omit-optional-tags yes` argument.\r\n3. Open the reformatted file in VSCode and navigate somewhere where there are multiple `<p>` or `<li>` or similar in a row. Note that there will be a breadcrumb for **each** open tag, because VSCode is apparently looking for end tags to close off the element, even though it is not required.\r\n\r\nIn a complex document, this make VSCode breadcrumbs pretty worthless. Here is an example, before a Tidy reformat, with focus on the third list item element in the fourth paragraph (note breadcrumbs working as expected):\r\n\r\n![BeforeReformat](https://user-images.githubusercontent.com/3743601/73599999-2e7da180-4510-11ea-9747-8843a2af2ba8.png)\r\n\r\nAnd here are the breadcrumbs after the Tidy reformat, with focus on the same list item element:\r\n\r\n![AfterReformat](https://user-images.githubusercontent.com/3743601/73600004-3d645400-4510-11ea-951b-1b32a983fbb4.png)\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-02-01 22:34:01",
        "state": "open",
        "number": 89850
    },
    {
        "title": "Grey-out the \"Apply [...] Stash\" menu option when there are no stashes in the repository.",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nAllowing the user to apply a stash, when there isn't any is kind of misleading.\r\n\r\nVS Code version: Code 1.41.1 (26076a4de974ead31f97692a0d32f90d735645c0, 2019-12-18T14:58:56.166Z)\r\nOS version: Windows_NT x64 10.0.18363\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-02-01 15:13:56",
        "state": "open",
        "number": 89841
    },
    {
        "title": "Git: Support fingerprint verification confirmation",
        "description": "Issue Type: <b>Bug</b>\r\n\r\n[Happens when git host hasn\u2019t been accessed via ssh before.]\r\n\r\nWhen I synchronize changes, VS Code reports:\r\n\r\n```\r\nHost key verification failed.\r\nfatal: Could not read from remote repository.\r\n\r\nPlease make sure you have the correct access rights\r\nand the repository exists.\r\n```\r\n\r\nWhen I do a `git push` in a Terminal, this happens (which fixes the issue for VS Code):\r\n\r\n```\r\n% git push\r\nThe authenticity of host 'github.com (140.82.118.3)' can't be established.\r\nRSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.\r\nAre you sure you want to continue connecting (yes/no)? yes\r\n```\r\n\r\nVS Code version: Code 1.41.1 (26076a4de974ead31f97692a0d32f90d735645c0, 2019-12-18T14:57:51.166Z)\r\nOS version: Darwin x64 19.3.0\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i5-6267U CPU @ 2.90GHz (4 x 2900)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>metal: disabled_off<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off<br>surface_control: disabled_off<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|1, 2, 2|\r\n|Memory (System)|16.00GB (0.97GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (4)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nspellright|ban|3.0.50\r\nmarkdown-table-formatter|fcr|2.0.3\r\ncenter-line|Jef|1.0.3\r\nrewrap|stk|1.9.1\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-02-01 03:00:27",
        "state": "open",
        "number": 89829
    },
    {
        "title": "Proposal: expose manual installation of vscode-remote",
        "description": "<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIt would be nice if we could expose a more easy none reverseengineering method to install vscode-remote inside a container or target remote directory with a predefined config so a developer only needs to connect and it is all installed. \r\n\r\ni am aware that this is do able via vscode ide at present but i want a script able way to deploy many workspaces predefined. You maybe already got or can need the code for vscode-online anyway.",
        "createdAt": "2020-01-31 07:40:59",
        "state": "open",
        "number": 89762
    },
    {
        "title": "PascalCase-naming doesn't work with Emmet completion in JSX",
        "description": "- VSCode Version: 1.41.1\r\n- OS Version: Ubuntu 18.04.3 LTS\r\n\r\nSteps to Reproduce:\r\n\r\n1. Create `file.jsx` (`*.jsx`, `*.js`, `*.html`, `*.vue` will do as well)\r\n2. Input the code below:\r\n```javascript\r\nfunction test() {\r\n    return (\r\n    // step 3 here\r\n    )\r\n}\r\n```\r\n3. In return block inside parenthesis start typing `my-awesome-component`\r\n4. Notice how Emmet will suggest to transform it to `my-awesome-component></my-awesome-component>`\r\n![image](https://user-images.githubusercontent.com/18618206/73493522-f6694800-43c3-11ea-98ba-20b8dc37cccc.png)\r\n5. Try to do the same with PascalCase-named component, Emmet will not suggest to transform it.\r\n![image](https://user-images.githubusercontent.com/18618206/73493540-fec18300-43c3-11ea-8b9c-a985961be12e.png)\r\n\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2020-01-30 21:53:27",
        "state": "open",
        "number": 89746
    },
    {
        "title": "Call Hierarchy view doesn't show number of callers",
        "description": "- VSCode Version: 1.42 Insiders\r\n- OS Version: Windows 10\r\n\r\nFound while testing #89386\r\n\r\nWould be nice to know how many callers, perhaps in the title bar. Something like \"X Callers of 'Area'\".\r\n\r\n![image](https://user-images.githubusercontent.com/12818376/73386904-82745600-4284-11ea-9a1a-52bf813849a3.png)\r\n",
        "createdAt": "2020-01-29 18:46:23",
        "state": "open",
        "number": 89642
    },
    {
        "title": "[semantic][typescript] Add private/protected to TS semantic tokens",
        "description": "* have a TS file with private fields\r\n* there is no semantic information about that, e.g I cannot style private fields different",
        "createdAt": "2020-01-29 14:39:14",
        "state": "open",
        "number": 89619
    },
    {
        "title": "Do not make requests if sync files are too large",
        "description": "Settings Sync Server rejects if the resource is too large. This is to discuss if we have to prevent them already from the client side\r\n\r\n@Tyriar FYI",
        "createdAt": "2020-01-29 10:58:44",
        "state": "open",
        "number": 89597
    },
    {
        "title": "Use content hash to detect save conflicts and do not rely on size",
        "description": "testing #89272\r\n\r\nThis only happens in some cases... \r\n```\r\nEditor 1:\r\n  type \"test1\"\r\nEditor 2:\r\n  type \"test2\"\r\n  save\r\nEditor 1:\r\n  save\r\n  choose 'overwrite'\r\n  change to \"test2\"\r\nEditor 2:\r\n  change to \"test3\"\r\n  save\r\nEditor 1:\r\n  save\r\n  \ud83d\udc1b> no resolve conflicts shows, overwrites existing contents without warning\r\n```\r\n\r\nThis seems to only happen if the conflict is in entirely contained within the range of the past conflict.",
        "createdAt": "2020-01-28 18:00:35",
        "state": "open",
        "number": 89537
    },
    {
        "title": "Codicon: offer intellisense for possible entries",
        "description": "Refs: https://github.com/microsoft/vscode/issues/89328\r\n\r\nFor example in package.json:\r\n\r\n![image](https://user-images.githubusercontent.com/900690/73274298-a3399e80-41e5-11ea-9413-e3691ec4b1e2.png)\r\n\r\nWould even be awesome if intellisense could preview the icon as it looks like!\r\n",
        "createdAt": "2020-01-28 14:48:53",
        "state": "open",
        "number": 89494
    },
    {
        "title": "Don't close suggestion popup when out of bounds occurs",
        "description": "This is a tiny suggestion but I run into it constantly. Often, I instinctively hit the up arrow to scroll through suggestions only for the little dialog/popup to disappear entirely rather than wrapping around to the other side of the list. For instance, if a function has 8+ overloads, I have to hit down arrow 7 times exactly. If I hit more than that, the whole thing closes and I have to start over.\r\n\r\nTalking about this popup specifically: https://streamable.com/mx94q\r\n\r\nWould be nice if it wrapped around, so I can access the last suggestion just by hitting up arrow, or don't accidentally lose my place by going too far.",
        "createdAt": "2020-01-27 02:14:03",
        "state": "open",
        "number": 89311
    },
    {
        "title": "Expose a dropdown on the sidebar for extensions",
        "description": "<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nExpose a dropdown on the side bar (see screenshot) to extensions to allow users switch between views within a view container. This can allow an extension to scale as the number of views increases, without having the need for an extension to have multiple icons in the activity bar. It also keeps the number of icons in the activity bar manageable for the users.\r\n![image](https://user-images.githubusercontent.com/4393177/73089497-35127600-3e8b-11ea-811c-4f82640df074.png)\r\n\r\n@misolori ",
        "createdAt": "2020-01-24 17:30:32",
        "state": "open",
        "number": 89243
    },
    {
        "title": "Auto closing quotes in makefiles (*.mk)",
        "description": "I found a tiny issue: quotes don't auto-close in makefiles (*.mk), but brackets do. It's because makefile didn't define any `surroundingPairs` or `autoClosingPairs` in [its language-configuration.json](https://github.com/microsoft/vscode/blob/1018bfac9c969c9caa4586b09314fbf7c3fcf158/extensions/make/language-configuration.json), but did define `brackets`, and the fallback logic is [here](https://github.com/microsoft/vscode/issues/87950#issuecomment-577594415). \r\n\r\nI'm not an expert, but I think makefile does use double and single quotes for strings.",
        "createdAt": "2020-01-23 20:11:10",
        "state": "open",
        "number": 89191
    },
    {
        "title": "Consider using high 16 bits of token type as token modifiers",
        "description": "Consider doing it in a way where having < 32 modifiers does not require the usage of the tokentype's high bits.",
        "createdAt": "2020-01-23 17:04:04",
        "state": "open",
        "number": 89185
    },
    {
        "title": "Source Control select default setting show/hide untracked changes tab",
        "description": "<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI'd like to request the ability to set a default value for whether the \"untracked changes\"-tab is expanded or minimized. \r\n\r\nAs it is now, the tab is always open to show the files. I'd like to be able to change my default to minimized to reduce clutter and noise when looking at the changes I actually care about.",
        "createdAt": "2020-01-23 09:00:31",
        "state": "open",
        "number": 89145
    },
    {
        "title": "Soft-wrap JSON following a newline \\n in a string",
        "description": "Given JSON like the following I would like to be able to opt-into soft-wrapping following any `\\n` within a JSON string. Such that this:\r\n\r\n![image](https://user-images.githubusercontent.com/452414/72941037-3fb6f900-3d2d-11ea-9012-556ada28dacc.png)\r\n\r\nWould render in the text editor similar to this when the feature is enabled:\r\n\r\n![image](https://user-images.githubusercontent.com/452414/72941000-257d1b00-3d2d-11ea-9e18-b81bfceb0eef.png)\r\n\r\nThis feature could be enabled or disabled independent of the existing word wrap feature.",
        "createdAt": "2020-01-22 22:41:45",
        "state": "open",
        "number": 89120
    },
    {
        "title": "Register Save All keyboard shortcut on Linux, too",
        "description": "Fix #34455.",
        "createdAt": "2020-01-22 09:03:18",
        "state": "open",
        "number": 89071
    },
    {
        "title": "Display message on custom view when extension is not yet active",
        "description": "Issue Type: <b>Bug</b>\r\n\r\n1. Have an extension that contributes a view container to the activity bar (ex: GitHub Pull Request extension)\r\n2. Launch VSCode and immediately focus this view container\r\n\r\nBefore the extension is activated, nothing is displayed in this view container, it's completely blank. There's a single view contributed there. It would be helpful if VSCode rendered a message in such a case. On Windows, I've found that it can take a very noticeable amount of time for the extension to activate so the empty view is shown for ~15 seconds\r\n\r\nVS Code version: Code - Insiders 1.42.0-insider (c1793c0fc77b570baa079f8198112ff355e75249, 2020-01-21T16:59:53.616Z)\r\nOS version: Darwin x64 18.7.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-01-21 23:26:27",
        "state": "open",
        "number": 89058
    },
    {
        "title": "[comments API] unnecessary markdown autocomplete when writing a comment",
        "description": "We have our own extension using the Comments API for code review. When typing a reply to a comment thread, it seems to show autocomplete for markdown. This is not always useful, and is actually inaccurate for our comment rendering (we use a different format which we convert into markdown to render in the comments API).\r\n\r\nIt would be nice to have a config setting or API setting to disable the markdown autocomplete inside comments.\r\n\r\n<img width=\"554\" alt=\"Screen Shot 2020-01-21 at 12 00 15 PM\" src=\"https://user-images.githubusercontent.com/1762690/72838685-a1039d00-3c45-11ea-8735-eaa0e3728b8e.png\">\r\n",
        "createdAt": "2020-01-21 20:00:46",
        "state": "open",
        "number": 89051
    },
    {
        "title": "Support unlisted or helper extensions",
        "description": "Hello, \r\n\r\n# Summary\r\n\r\nwould be nice if extensions could provide their own recommendations/suggestions. For example after installing extension X, the extension could suggest also installing extension Y or Z based on the workspace content.\r\n\r\n# Context\r\n\r\nMy use case:\r\n\r\nWe're considering creating 3 extensions: Tool_C#, Tool_C++, Helper. Tool_C# and Tool_C++ would provide functionality to work with external tool for given language. The Helper extension would provide common functionality. This allows code sharing and prevents command duplication.\r\n\r\nIf user installs Tool_C# extension, it can automatically install Helper extension (with extensionDependencies).\r\n\r\nBut if user installs Helper extension only, the extension can't say \"hey, I noticed you have C# files, and since you already installed this Helper extenions, you'll most likely want the Tool_C# extension too\".\r\n\r\n\r\n",
        "createdAt": "2020-01-20 14:14:07",
        "state": "open",
        "number": 88975
    },
    {
        "title": "Better diff for deleted file merge conflict",
        "description": "If there is a conflict with a deleted file during a merge, vscode won't display a diff for that file. Instead the last version of the file before being deleted is shown as readonly.\r\n\r\nWith this it's hard to see the changes that were made on the file before (or after) it was deleted.\r\n\r\nWith git you can see those changes using a commande like \r\n\r\n`git diff ...incoming_merge_branch -- rel_path_deleted_file`\r\nor\r\n`git diff incoming_merge_branch... -- rel_path_deleted_file`\r\n\r\nDepending if the conflict is a \"deleted by us\" or \"deleted by them\".\r\n\r\nWould it be possible for vscode to use this command when a displaying a conflict for a deleted file ?\r\nIt would greatly help the merge process I think.\r\n\r\nFor the time being I configured vscode to be my difftool so I can write this command and display the diff in vscode.\r\n\r\n`git difftool ...incoming_merge_branch -- rel_path_deleted_file`\r\n\r\nBut still, if I could not have to write the commande it'll be easier.\r\n",
        "createdAt": "2020-01-20 12:32:15",
        "state": "open",
        "number": 88973
    },
    {
        "title": "Integrated terminal not triggering zsh's \"alt\" bindkeys?",
        "description": "<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.41.1\r\n- OS Version: Linux [redacted] 4.19.0-6-amd64 #1 SMP Debian 4.19.67-2+deb10u2 (2019-11-11) x86_64 GNU/Linux (Debian GNU/Linux 10 (buster))\r\n- Zsh version: 5.7.1 (x86_64-debian-linux-gnu)\r\n- Oh-My-Zsh version: [4e45e12d](https://github.com/ohmyzsh/ohmyzsh/commit/4e45e12dc355e3ba34e7e40ce4936fb222f0155c) at the moment (master)\r\n\r\nHi,\r\n\r\nI am using Zsh & Oh-My-Zsh, with the [zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions) plugin. I added the following custom keybindings in ~/.oh-my-zsh/custom/zsh-autosuggestions.zsh:\r\n\r\n```\r\nbindkey '^ ' autosuggest-accept # ctrl+space\r\nbindkey '^[ ' forward-word # alt+space\r\nbindkey '^[^@' forward-word # ctrl+alt+space\r\n```\r\n\r\nAll of them work fine in the native terminal emulator (Konsole for KDE in my case, and tested on other OS / terminal emulator as well).\r\n\r\nIn VSCode's integrated terminal though, only the first one (ctrl+space) works, although I have to press it twice in a row the first time. The others do not: nothing happens, no status bar message.\r\n\r\nI've been searching for a fix on and off for a couple years now, no luck :)\r\n\r\nSteps to Reproduce:\r\n\r\n1. Install Zsh, Oh-My-Zsh, zsh-autosuggestions\r\n2. configure zsh-autosuggestions with custom keybindings, ensure it works in native terminal\r\n3. Open VSCode and integrated terminal, try the same keybindings\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: No\r\n",
        "createdAt": "2020-01-19 22:22:46",
        "state": "open",
        "number": 88942
    },
    {
        "title": "Readonly ranges/lines in the editors",
        "description": "In the Cosmos DB extension exploration, documents are opened as JSON files, which can be edited\r\n\r\n![image](https://user-images.githubusercontent.com/2230985/72649220-eb2d0b80-3931-11ea-9c12-feabda6d8205.png)\r\n\r\nThey may have user defined properties, as well as several database-defined properties. Editing these is possible, and _may_ be desired for the `_etag`, but in general will have no effect, be ignored, or break things in odd ways. On the other hand, it's not appropriate to omit these entirely, as it can be useful to reference or copy.\r\n\r\nIt could be helpful to have readonly ranges within the editor to help users understand that changes made within these fields have no affect.\r\n\r\nReadonly ranges also came up a few days ago in the context of @JacksonKearl's search editor a few days ago.",
        "createdAt": "2020-01-17 22:04:41",
        "state": "open",
        "number": 88885
    },
    {
        "title": "Reflect indent level using VoiceOver",
        "description": "A verbal indication of the indent level while using the arrow-keys to navigate code is very valuable, especially when indentation is syntactically required such as with YAML or Python.\r\n\r\nFor example, using the [vim](https://www.vim.org/) editor, I display the indent level using the [DynamicSigns plugin](https://github.com/chrisbra/DynamicSigns.git). I also navigate to lines of lesser, equal, or\r\ngreater indent using the [IndentWise plugin](https://github.com/jeetsukumaran/vim-indentwise).\r\n\r\nCC @isidorn ",
        "createdAt": "2020-01-17 19:50:30",
        "state": "open",
        "number": 88877
    },
    {
        "title": "debug requirements for TypeScript",
        "description": "from https://github.com/microsoft/vscode/issues/84044:\r\n\r\n- finding an \"evaluatable\" expression for a given source location.\r\nE.g. for any character position in the string \"doc.foo[a+b].x > foo\" return the \"evaluatable\" expression that should be shown in the hover.\r\n- exact source maps for mapping source code ranges for frames and scopes. The JS debugger receives JS source ranges and they have to map correctly to TS ranges (and vice versa).\r\n- bidirectional variable mapping.\r\nThe JS debugger only sees JS variable names and the debug extension needs to have a way of mapping JS names to TS names (and vice versa). Source maps provide a mechanism for that but the maps were not complete and aren't used in our debuggers I think.\r\n",
        "createdAt": "2020-01-17 16:05:54",
        "state": "open",
        "number": 88857
    },
    {
        "title": "Ability to install, add and remove extensions from cloud manually",
        "description": "Ability to install, add and remove extensions from cloud manually.\r\n\r\nIdea is that a user can disable syncing extensions, but can have a view in extensions viewlet to manually pull, push & remove the extensions in cloud.",
        "createdAt": "2020-01-17 06:26:08",
        "state": "open",
        "number": 88825
    },
    {
        "title": "Extensions details view needs accessibility polish",
        "description": "1. Keyboard focus should be in logical order\r\n2. Screen reader does not announces the selected/not selected state \"Details, Extension Pack, Contribution changelog\" buttons\r\n3. Keyboard focus is not visible on the \"scroll up\" button",
        "createdAt": "2020-01-16 16:51:45",
        "state": "open",
        "number": 88792
    },
    {
        "title": "Adopt CompletionItemLabel",
        "description": "<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIntelliSense shows a list of available methods and fields. It is possible to show the quick info for such an item by clicking on the info icon of the **currently selected** item.\r\n\r\nI would like to be able to see the quick info for items which are currently not selected using the mouse only, and **without using the keyboard first to navigate** to the according item.\r\n\r\nCurrently, I cannot see the quick info for items other than the selected one by using the mouse only:\r\n![intellisense](https://user-images.githubusercontent.com/22240239/72522393-e26b0580-385d-11ea-90c9-354dcdcd9cae.gif)\r\n\r\n\r\nThere is no info icon displayed for the other items and any mouse button click on the other item will insert the item into the code and close intellisense.\r\n",
        "createdAt": "2020-01-16 12:29:21",
        "state": "open",
        "number": 88757
    },
    {
        "title": "Allow \"inline\" menu contributions to quick pick items",
        "description": "Similar to tree items, it would be great to be able to contribute commands to quick pick items\r\n\r\nIt is possible internally -- see:\r\n![image](https://user-images.githubusercontent.com/641685/72477316-3b369180-37bd-11ea-8576-9cb3ccf09a66.png)\r\n\r\nExample use-case:\r\nI would like to remove that button on top (since it is dependent on selection) and instead have it available on each stash entry. There are many other quickpick lists in GitLens where I would like to do a similar thing.\r\n\r\n![image](https://user-images.githubusercontent.com/641685/72477556-c9ab1300-37bd-11ea-962c-d73f7f88f111.png)\r\n\r\n",
        "createdAt": "2020-01-15 22:39:54",
        "state": "open",
        "number": 88716
    },
    {
        "title": "Reopen Add Option: \"Git: Ignore new commits in submodules\"",
        "description": "@joaomoreno This is a reopen of https://github.com/microsoft/vscode/issues/78016\r\n\r\nI'm sorry I didn't reply to that issue, for some reason GitHub never notified me of the response.\r\n\r\nIn any event, `git` does recognize the elements of removing submodules from the list of modified files. For instance, when looking at this in VSCode: https://github.com/microsoft/vscode/blob/master/extensions/git/src/git.ts#L1025\r\n```\r\nconst args = ['diff', '--name-status', '-z', '--diff-filter=ADMR'];\r\n```\r\nChanging to the below ignores submodules\r\n```\r\nconst args = ['diff', '--name-status', '-z', '--diff-filter=ADMR', '--ignore-submodules'];\r\n```\r\n\r\nWhile I don't believe the `git` team ever got around to documenting it, it is in this commit as of March of last year: https://github.com/git/git/commit/b680ee1495fb55e2a4236456971b3d427989eb55#diff-ab603fc6eadf618560316097522fe585\r\n\r\nThe request is to add an option in the settings to toggle that constant as to remove submodules from the listing of modified files in the tree.",
        "createdAt": "2020-01-15 22:07:41",
        "state": "open",
        "number": 88715
    },
    {
        "title": "Add \"Expand All\" Button to Tree (make \"Collapse All\" toggleable)",
        "description": "Hello,\r\n\r\nas of now it is possible to conveniently collapse all tree nodes using the \"collapse all\" button in the action toolbar of the tree view. However, there is no button for the opposite action (\"expand all\").\r\n\r\nOne solution would be to make this button into a toggle. And I suppose that I am not the only one who tried to click the collapse all button again to expand the whole tree again, so it would be quite a natural user experience I suppose.\r\n\r\nIs there already an Issue regarding this? I couldn't find one for the life of me.\r\nBasically we need [#85428](https://github.com/microsoft/vscode/pull/85428) for the explorer.",
        "createdAt": "2020-01-15 15:06:35",
        "state": "open",
        "number": 88682
    },
    {
        "title": "[folding] seperate color for line numbers at collapsed row",
        "description": "When we collapse rows, it's difficult to tell that we have, especially since hovering over the line numbers gutter causes all of the expand/collapse indicators to return.\r\n\r\nI realize that, currently, a sticky expand indicator is left behind when rows are collapsed, but I propose that the line numbers themselves be lit up with a themable color.  So, for example, if rows collapse so that we have\r\n\r\n...\r\n149\r\n150\r\n**151\r\n306**\r\n307\r\n308\r\n...\r\n\r\nthe numbers **151** and **306** would glow brighter in some way.  This would be in addition to the sticky expander.\r\n",
        "createdAt": "2020-01-14 18:37:03",
        "state": "open",
        "number": 88627
    },
    {
        "title": "Settings Sync: No way to specify a platform specific extension",
        "description": "I am synchronizing settings across Windows and Mac.  \r\n\r\nOn my Windows machine, I have the `Remote - WSL` extension, which does not make sense to install on my Mac.  \r\n\r\nThere doesn't seem to be a way to specify by platform which extensions to sync (or not sync). `ignoredExtensions` makes sense if I don't want to synchronize across any machine, but if I add a second Windows machine into the mix (or rebuild a Windows machine), then the WSL extension is not installed.\r\n",
        "createdAt": "2020-01-14 18:15:28",
        "state": "open",
        "number": 88625
    },
    {
        "title": "Link to doc page for monospace font notification in terminal",
        "description": "Context: https://github.com/microsoft/vscode/issues/88607",
        "createdAt": "2020-01-14 17:13:17",
        "state": "open",
        "number": 88619
    },
    {
        "title": "Hard to read overlapping diagnostics",
        "description": "I have 3 errors in this code:\r\n\r\n![image](https://user-images.githubusercontent.com/4033249/72221886-03caa980-355f-11ea-996b-e8f324169537.png)\r\n\r\n1. `inc`\r\n2. `coun`\r\n3. The whole `<button></button>` line\r\n\r\nThe problems:\r\n\r\n1. I cannot tell how many errors I have on this line\r\n2. If there are overlapping errors, I cannot tell the inner errors' ranges ",
        "createdAt": "2020-01-12 16:18:15",
        "state": "open",
        "number": 88514
    },
    {
        "title": "Signature Help widget does not close when editor loses focus",
        "description": "Issue Type: <b>Bug</b>\r\n\r\n* open a TS file\r\n* type `console.log(`\r\n* the parameter hints widget appears\r\n* click somewhere else (move focus away from the editor)\r\n* the widget does not hide itself, which is different than other editor widgets\r\n\r\nVS Code version: Code - Insiders 1.42.0-insider (960cddb992cc96d47f56b633b361909f1b5b3353, 2020-01-10T05:39:20.794Z)\r\nOS version: Windows_NT ia32 10.0.18362\r\n\r\n\r\n<!-- generated by issue reporter -->\r\n\r\n---\r\n\r\n<details><summary>ORIGINAL DESCRIPTION FROM @aldwong</summary>\r\n\r\nThe issue is that when the signature help widget is active, the widget does not close when the editor loses focus.\r\nCurrently, the signature help widget will only close if you click on a different line within the editor.\r\nOther widgets, like suggest, will close their widget when the editor loses focus.\r\n\r\nRun the code snippet at the bottom in the playground.\r\nTo reproduce:\r\n- In the editor, type `function(`\r\n- When the signature help box appears, click outside of the editor to lose focus\r\n- The signature help box will remain \r\n\r\nThis is related to issue microsoft/monaco-editor#229, but the workaround in the issue doesn't appear to work anymore. It will cause the Signature help to slide to the new position that is set.\r\n\r\n**monaco-editor-core: \"^0.18.1\"**\r\n**Browser: Chrome**\r\n**OS:Windows**\r\n\r\n**Playground code that reproduces the issue:**\r\n```js\r\nfunction getSuggestions(range) {\r\n    return [\r\n        {\r\n            label: \"function\",\r\n            kind: monaco.languages.CompletionItemKind.Function,\r\n            documentation: \"Test Function\",\r\n            insertText: \"function\",\r\n            range: range\r\n        }\r\n    ];\r\n}\r\n\r\nmonaco.languages.registerCompletionItemProvider('javascript', {\r\n    provideCompletionItems: function(model, position) {\r\n        var word = model.getWordUntilPosition(position);\r\n        var range = {\r\n            startLineNumber: position.lineNumber,\r\n            endLineNumber: position.lineNumber,\r\n            startColumn: word.startColumn,\r\n            endColumn: word.endColumn\r\n        };\r\n        return {\r\n            suggestions: getSuggestions(range)\r\n        };\r\n    }\r\n});\r\n\r\nmonaco.languages.registerSignatureHelpProvider(\"javascript\", {\r\n    signatureHelpTriggerCharacters: [\"(\", \",\", \")\"],\r\n    provideSignatureHelp: (_model, _Postion, _token, context) => {\r\n        let activeSignature = 0;\r\n        let activeParameter = context.activeSignatureHelp ? context.activeSignatureHelp.activeParameter : 0;\r\n        if (context.isRetrigger && context.triggerKind === 2 && context.triggerCharacter !== \")\") {\r\n            activeParameter++;\r\n        } else if (context.triggerCharacter === \")\") {\r\n            return null;\r\n        }\r\n        return {\r\n            dispose: () => {},\r\n            value: {\r\n                signatures: [{\r\n                    label: \"function(param1, param2)\",\r\n                    documentation:\"function doc\",\r\n                    parameters: [{\r\n                        label: \"param1\",\r\n                        documentation: \"docs for parameter 1\"\r\n                    }, {\r\n                        label: \"param2\",\r\n                        documentation: \"docs for parameter 2\"\r\n                    }]\r\n                },],\r\n                activeSignature,\r\n                activeParameter\r\n            }\r\n        };\r\n    }\r\n});\r\n\r\nmonaco.editor.create(document.getElementById(\"container\"), {\r\n    value: \"\",\r\n    language: \"javascript\"\r\n});\r\n```\r\n\r\n</details>",
        "createdAt": "2020-01-07 02:17:42",
        "state": "open",
        "number": 88419
    },
    {
        "title": "Make it easier to define platform-specific keybindings",
        "description": "@rebornix had this idea when recording:\r\n\r\n![image](https://user-images.githubusercontent.com/2193314/72028124-49713480-3236-11ea-962a-468253166ba3.png)\r\n\r\nAs I've mentioned in the past, I think instead of having `\"sync.keybindingsPerPlatform\": true` be the default, I think we should improve the UI around making platform-specific keybindings instead and flip the default to be `false`. Otherwise it's very cumbersome to sync keybindings across different platforms.",
        "createdAt": "2020-01-09 00:46:54",
        "state": "open",
        "number": 88323
    },
    {
        "title": "Handle default platform settings while syncing",
        "description": "The setting `window.nativeTabs` is macOS specific and enables macOS Sierra window tabs. Since the setting is macOS specific it should not be synched to Windows where this setting is unknown:\r\n\r\n![image](https://user-images.githubusercontent.com/172399/71990283-648e7500-3233-11ea-843a-674c3ad53c12.png)\r\n",
        "createdAt": "2020-01-08 15:25:12",
        "state": "open",
        "number": 88291
    },
    {
        "title": "Jump to last selection (during multiselect)",
        "description": "It might be handy to have a shortcut allowing to go back to single-cursor mode on the last selection positions.\r\n\r\nLike what the [Escape] button does, but instead of going to the first selection, it would go to the last one. The default key combination would be something like [Ctrl]+[Escape].",
        "createdAt": "2020-01-08 10:17:45",
        "state": "open",
        "number": 88275
    },
    {
        "title": "Ability to drag and drop breakpoints",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nThe ability to move breakpoints, especially those that are conditional, would be considerably easier than having to delete a breakpoint and then recreate it with the same condition information on another line. Drag and drop functionality would work pretty well here I imagine.\r\n\r\nVS Code version: Code 1.41.1 (26076a4de974ead31f97692a0d32f90d735645c0, 2019-12-18T14:58:56.166Z)\r\nOS version: Windows_NT x64 10.0.18362\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-01-07 18:40:12",
        "state": "open",
        "number": 88227
    },
    {
        "title": "Ability to hide/show VSCode Exception area",
        "description": "In Visual Studio when an exception happens the IDE shows a popup with the exception details that the user can dismiss and take action. In VSCode the exception also appears but there is no way to dismiss the message/notification to take further action the error being intrusive.\r\n\r\n**The request: a way to have the exception notification dismissed after inspection**\r\n\r\nBelow is an example on the situation, an \"X\" to close the red area and a red exclamation icon/marker on the left side gutter near to the line numbers to review the notification  would be one solution suggestion. \r\n\r\n![image](https://user-images.githubusercontent.com/37976898/71910755-2fbee700-317b-11ea-8979-66e6a2545bc4.png)\r\n\r\n",
        "createdAt": "2020-01-07 16:27:10",
        "state": "open",
        "number": 88217
    },
    {
        "title": "Markdown Preview does not split to side",
        "description": "- VSCode Version:\r\n```\r\nVersion: 1.41.1\r\nCommit: 26076a4de974ead31f97692a0d32f90d735645c0\r\nDate: 2019-12-18T15:04:31.999Z\r\nElectron: 6.1.5\r\nChrome: 76.0.3809.146\r\nNode.js: 12.4.0\r\nV8: 7.6.303.31-electron.0\r\nOS: Linux x64 5.3.0-24-generic\r\n```\r\n- OS Version: ubuntu 19.10\r\n\r\n\r\nContext:\r\n- I want to edit a markdown file **AND** see the preview at the same time in a split pane to the right.\r\n\r\nSteps to Reproduce:\r\n1. open a markdown formatted file\r\n2. use CTRL+SHIFT+V to show the markdown preview\r\n3. right-click preview tab, and use \"Split Right\"\r\n4. the result is a funky empty pane on the right\r\n\r\n![image](https://user-images.githubusercontent.com/6709636/71828309-6543d180-30a2-11ea-8c5d-cc80c4e9d956.png)\r\n\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes/No\r\n",
        "createdAt": "2020-01-06 15:35:06",
        "state": "open",
        "number": 88143
    },
    {
        "title": "When using record keys search for individual keys",
        "description": "* use the \"Record Keys\" feature\r\n* press cmd+K\r\n* only \"Clear Terminal\" is shown\r\n* \ud83d\udc1b all coord'ed keybindings, like `Cmd+K, Cmd+S` etc are missing\r\n",
        "createdAt": "2020-01-06 09:02:19",
        "state": "open",
        "number": 88122
    },
    {
        "title": "Can't run commands from remote extension in a disconnected window",
        "description": "- Connect to a remote\r\n- Lose the connection so that the status bar indicator says \"Disconnected from ...\"\r\n- Try to run a command contributed by the Remote extension, such as \"Connect to host\"\r\n- This should work because the Remote-* extension is a local extension, but nothing happens\r\n\r\nI think the local EH gets shut down when the window becomes disconnected. This is not a good experience, the user wants to connect again at this time. Example: https://github.com/microsoft/vscode-remote-release/issues/2050#issuecomment-570835836\r\n\r\n",
        "createdAt": "2020-01-06 01:49:48",
        "state": "open",
        "number": 88111
    },
    {
        "title": "Ability to set default tasks based on file extension (or glob)",
        "description": "## Motivation\r\nour codebase has a mix of different languages. Some .php files some .js files for example.\r\n\r\nI need to keep switching the default task depending on which file I\u2019m working on, it can become quite frustrating.\r\n\r\nIs it possible to have a default task for that file extension? So when I\u2019m working in JS I can just run the default task, and when I\u2019m in .php I can run the default task for that? \r\n\r\n## launch.json example from a typical project\r\n\r\n```json\r\n[\r\n    {\r\n      \"label\": \"Test JS File\",\r\n      \"type\": \"shell\",\r\n      \"command\": \"yarn jest ${file}\",\r\n      \"extension\": \"js\",\r\n      \"group\": {\r\n        \"kind\": \"test\",\r\n      },\r\n    },\r\n    {\r\n      \"label\": \"Test PHP File\",\r\n      \"type\": \"shell\",\r\n      \"command\": \"phpunit ${file}\",\r\n      \"extension\": \"php\",\r\n      \"group\": {\r\n        \"kind\": \"test\",\r\n      },\r\n    }\r\n]\r\n```\r\n\r\n## Backwards Compatibility \r\n* Option 1: Default tasks can work as they are now, if a task based on file extension is added this can override the default task. So extension based tasks have higher priority.\r\n* Option 2: If no default task is set then fallback to checking if an `extension` has been set. This way `defaultTask` is still guaranteed to work as it does today\r\n* Option 3: Another option is to use globs instead, and run the task by default if it matches the particular glob pattern (see below). This can override `defaultTask`\r\n\r\n## Example table (if globs are used)\r\n\r\n| Current Open File Extension        | File           | Task  |\r\n| -------------- |:---------:| -----:|\r\n| `.js`      | javascript | Run JS file |\r\n| `.php`      | PHP      |   Run PHP File, or run PHP tests |\r\n| `.test.js` | Javascript test file      |    Run Tests |\r\n| `.html`| HTML File | Open browser with this file",
        "createdAt": "2020-01-05 13:57:05",
        "state": "open",
        "number": 88106
    },
    {
        "title": "Quick suggestions for snippet prefixes that aren't word characters",
        "description": "- VSCode Version: 1.41.1 (26076a4de974ead31f97692a0d32f90d735645c0)\r\n- OS Version: Darwin x64 19.0.0\r\n\r\nSteps to Reproduce:\r\n\r\n1. Create a snippet containing the following:\r\n\r\n```json\r\n\"ERB Block\": {\r\n\t\"scope\": \"erb,html,html.erb\",\r\n\t\"prefix\": \"%\",\r\n\t\"body\": [\r\n\t\t\"<% $1 %>\"\r\n\t],\r\n\t\"description\": \"Insert ERB <% %> block\"\r\n},\r\n```\r\n\r\n2. Open an file with a type of HTML ERB (\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes (if you remove the scope)\r\n\r\nA similar issue about being able to use symbols such as `%` was raised at https://github.com/microsoft/vscode/issues/6358 and it was apparently resolved in 2017. However, as of today I can't get it to work. Nor if I use `=` as another trigger.\r\n\r\nThese work in Atom and in Sublime Text 3, so it's really slowing down my working with Ruby on Rails sites.",
        "createdAt": "2020-01-05 13:31:29",
        "state": "open",
        "number": 88104
    },
    {
        "title": "quickfix shorcut key",
        "description": "<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\nI need a navigation shorcut key on quickfix .\r\nI use vscode with vim on Window and when i open quickfix menu I need to use arrow key for select options. \r\n\r\n![quickfix](https://i.ibb.co/RpKkCDJ/Annotation-2020-01-04-092832.png)\r\n<!-- Describe the feature you'd like. -->\r\n",
        "createdAt": "2020-01-04 02:34:38",
        "state": "open",
        "number": 88076
    },
    {
        "title": "CommentController Should have the ability to decorate the range which the comment is on",
        "description": "I work for COSINE ES within Microsoft. Exploring the possibility of an ADO pull request integration into VSCODE. Unfortunately the comment controller does not allow ranges to be decorated like they are on ADO PRs. I tested out the Github PR extension and it also does not decorate comments. Please ping me internally @ brbartel. I would love to help contribute\r\n\r\nWhat exists\r\n![image](https://user-images.githubusercontent.com/17601074/71741347-8642c300-2e13-11ea-86c3-7d518889d40b.png)\r\n\r\nWhat I want (ADO example)\r\n![image](https://user-images.githubusercontent.com/17601074/71741391-a6728200-2e13-11ea-9c5d-9c1097ae271e.png)\r\n",
        "createdAt": "2020-01-03 18:29:16",
        "state": "open",
        "number": 88055
    },
    {
        "title": "default values missing for workspace.getConfiguration().get in resolver",
        "description": "On master:\r\n\r\n- the test-resolver extension is a UI extension defining a resolver and some configuration options\r\n- In https://github.com/microsoft/vscode/blob/6f1ee4b66cc47b08e523ed8a78291258aa38ad9e/extensions/vscode-test-resolver/src/extension.ts#L29\r\nadd \r\n\r\n\r\n```ts\r\noutputChannel.appendLine(JSON.stringify(vscode.workspace.getConfiguration('testresolver').inspect('startupDelay')));\r\noutputChannel.appendLine(JSON.stringify(vscode.workspace.getConfiguration('testresolver').inspect('startupError')));\r\n```\r\n- run vscode from sources, invoke `Remote-TestResolver: New Window`\r\n- in the remote window that opens, check the `TestResolver` output view\r\n```\r\n{\"key\":\"testresolver.startupDelay\"}\r\n{\"key\":\"testresolver.startupError\"}\r\n```\r\nThe default values are missing.\r\n\r\nSame when accessing `workspace.getConfiguration('testresolver).get('startupDelay')`\r\n\r\nI have the same problem in the Remote WSL extension.",
        "createdAt": "2020-01-03 14:11:19",
        "state": "open",
        "number": 88044
    },
    {
        "title": "Intellisense based on variable contents in debug session",
        "description": "Mainly TypeScript, but other languages could also benefit. I would be nice if, when in a debug session, intellisense could provide completions based on an `any` variable's actual contents:\r\n\r\n```ts\r\nfunction getDataFromApi(): any {\r\n   return {\r\n     some: \"data\",\r\n     which: { has: \"fixed structure, but no typedefs yet\" }\r\n   }\r\n}\r\n\r\nconst data = getDataFromApi();\r\nconst formatted = data.|\r\n```\r\n\r\nIf I break after the `data` assignment and my cursor is at the pipe, it would be cool if TS could give me completions based on the actual value of the variable, rather than its usual `any` type, similar to how the debug console works.\r\n\r\nUse case is that I'm working with a complicated structure returned by a graphQL endpoint, and I don't have types for it, but the structure is constant, so it would be cool to be able to write data manipulation code I need using the actual data as a guide for intelisense suggestions. \r\n\r\nOr maybe a way to pull a type out from the runtime value of a variable? @mjbvz ",
        "createdAt": "2020-01-02 19:51:57",
        "state": "open",
        "number": 88009
    },
    {
        "title": "Allow to set explorer.autoReveal per specific folder",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nnode_modules will constantly expand itself in the Explorer, especially if your defining definitions.  I typically never want this, I think an exception should be made for showing what file is open if its in node_modules to keep the folder collapsed unless I explicitly expand it.  \r\n\r\nThe reason it's a problem is because there are so many files in node_modules you have to collapse it to keep developing, as it's completely useless in most cases to have it expanded and it pushes your work files off screen.\r\n\r\nProposition:\r\n- Never expand node_modules implicitly\r\n- If goto definition is used into a node_module, go there but do not older current folder state (if its collapsed keep it collapsed, if it was explicitly expanded by user keep it).\r\n- This behavior applies very specifically to node_modules only.\r\n\r\nVS Code version: Code - Insiders 1.42.0-insider (7c0095ee2d064033fc13184127a9adc603454729, 2019-12-20T07:58:23.119Z)\r\nOS version: Linux x64 5.3.0-24-generic\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2020-01-01 14:40:02",
        "state": "open",
        "number": 87956
    },
    {
        "title": "Diff editor: Differentiate unimportant differences",
        "description": "I would like the ability to differentiate unimportant/minor differences in the diff editor. This is somewhat related to #43026, except this is not only about whitespace and ideally _ignore_ should only be one of the ways this differentiation is used (e.g. different coloring). Obviously the semantics for what's \"unimportant\" is subjective and/or language-dependent. You might be able to use the language grammar (or new semantic API) to determine this in addition to some user configurability. **Beyond Compare** allows this differentiation based on a grammar, and it's very useful.\r\n\r\nThe following are some examples of unimportant differences:\r\n\r\n- Whitespace in a whitespace-insensitive language\r\n- Case in a case-insensitive language\r\n- Comments\r\n- Strings?\r\n",
        "createdAt": "2019-12-31 21:15:18",
        "state": "open",
        "number": 87944
    },
    {
        "title": "[Request] Add suggestions to Extensions for existing features",
        "description": "Today I found out Visual Studio Code has native auto save.\r\nI tried searching in `Extensions` for extensions that did this, but couldn't find any. Actually, for the keyword \"autosave\", there is only one result and it is auto-save for window changes. I ended up going to Google and figuring out it was a simple File -> Auto Save toggle.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/351125/71631721-fc171680-2be8-11ea-8771-36ce6e760f12.png\" height=\"200px\">\r\n\r\nSo, I was thinking... what if VSCode had auto suggestions in the extension section for things that it already has? It could show up an item saying \"looking for auto-save? Here is how to enable it\". \"looking for shortcuts? Go here to edit them\", \"themes? This is the place\" and so on.. It would get way more accessible and intuitive than currently is.",
        "createdAt": "2019-12-31 19:20:16",
        "state": "open",
        "number": 87942
    },
    {
        "title": "VS Code should warn before stashing files with unsaved changes",
        "description": "Issue Type: <b>Bug</b>\r\n\r\n1. Make changes to a source-controlled file\r\n2. Save changes\r\n3. Make additional changes to the file\r\n4. Without saving the additional changes, stash changes using the **...** menu in **SOURCE CONTROL: GIT** in VS Code _or_ by right-clicking the file in the list of files changed since last commit.\r\n\r\nYou will stash the version of the file saved in step 2. This might be what you want, but in the case of commits VS Code will warn you, and give you an opportunity to save modified files. Here, there is no indication that the file you see in the editor is NOT what will be stashed. This can be a frustrating way to lose work.\r\n\r\nVS Code version: Code 1.41.0 (9579eda04fdb3a9bba2750f15193e5fafe16b959, 2019-12-11T17:58:38.338Z)\r\nOS version: Darwin x64 18.7.0\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-7820HQ CPU @ 2.90GHz (8 x 2900)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>metal: disabled_off<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off<br>surface_control: disabled_off<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|2, 3, 3|\r\n|Memory (System)|16.00GB (3.77GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (28)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-openapi|42C|2.1.0\r\nBookmarks|ale|10.6.0\r\nswagger-viewer|Arj|2.2.2\r\natlascode|atl|2.2.1\r\njira-frontend|Atl|0.0.4\r\nvscode-python-docstring|aza|0.0.5\r\nnpm-intellisense|chr|1.3.0\r\nvscode-postgres|cko|1.1.11\r\nvscode-svgviewer|css|2.0.0\r\nvscode-markdownlint|Dav|0.33.0\r\nes7-react-js-snippets|dsz|2.5.0\r\nswagger-generator|dwa|0.1.1\r\ngitlens|eam|10.2.0\r\nvscode-npm-script|eg2|0.3.10\r\ntodo-tree|Gru|0.0.162\r\nrestructuredtext|lex|116.0.0\r\nvscode-docker|ms-|0.9.0\r\nvscode-kubernetes-tools|ms-|1.0.9\r\nmssql|ms-|1.8.0\r\npython|ms-|2019.11.50794\r\nvsliveshare|ms-|1.0.1404\r\nvscode-jest|Ort|3.1.0\r\nmaterial-icon-theme|PKi|3.9.2\r\nvscode-yaml|red|0.6.1\r\ntech-debt-tracker|Ste|0.21.0\r\ncode-spell-checker|str|1.7.20\r\nmako|tom|0.2.0\r\npdf|tom|0.5.1\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-12-31 17:51:49",
        "state": "open",
        "number": 87938
    },
    {
        "title": "Issue Reporter editor no undo/redo",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nIt seems we can't run undo/redo in the comment editor of issue reporter.\r\n\r\nVS Code version: Code 1.41.1 (26076a4de974ead31f97692a0d32f90d735645c0, 2019-12-18T14:57:51.166Z)\r\nOS version: Darwin x64 19.0.0\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i9-9980HK CPU @ 2.40GHz (16 x 2400)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>metal: disabled_off<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off<br>surface_control: disabled_off<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|2, 2, 2|\r\n|Memory (System)|32.00GB (0.38GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (1)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\npython|ms-|2019.11.50794\r\n\r\n(2 theme extensions excluded)\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-12-31 01:49:46",
        "state": "open",
        "number": 87904
    },
    {
        "title": "Support nested repository discovery via depth limit setting",
        "description": "It would be great to be able to specify a root folder in the ```.code-workspace``` file and then VS Code automatically pick up the repo folders contained therein without needing them to be explicitly specified and updated in the ```.code-workpsace``` file. This would allow repos to be added and removed far more easily.\r\n\r\nCombining this with https://github.com/microsoft/vscode/issues/87887 could then allow e.g. the following ```Main Folder``` to be specified and immediately produce a workspace with appropriately grouped repos....\r\n```\r\nMain Folder\r\n|--Repo Source or Group 1\r\n    |--Repo 1.1\r\n    |--Repo 1.2\r\n|--Repo Source or Group 2\r\n    |--Repo 2.1\r\n    |--Repo 2.2\r\n```",
        "createdAt": "2019-12-30 16:12:32",
        "state": "open",
        "number": 87888
    },
    {
        "title": "Improve task debugging by giving more context",
        "description": "<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nMost of this text comes from an email. The context is that I got on a phone call with a customer who was experiencing issues debugging an Azure Function App.\r\n\r\n\r\n#### The issue\r\n\r\nF5 debugging of a Function App would show:\r\n```\r\n> Executing task: func host start <\r\n```\r\n\r\nAnd then something saying that the last exit code was 1.\r\n\r\nIt wasn\u2019t clear what the problem was, why it was failing, and we found that this would fail on `func extensions install` and `func host install`\u2026 running the func commands in the PowerShell Integrated Console or outside of VS Code in any terminal worked just fine\u2026\r\n\r\n#### The resolution\r\n\r\nThen we realized that the customer's default shell\u2026\u2026.. was WSL.\r\n\r\nAs you know, tasks use the default shell to run in by default. Which means that the `func` commands were being run in WSL which didn\u2019t have the Core Tools installed in it so the Task threw an exit code of 1 because the command wasn\u2019t found.\r\n\r\nOnce Aleksandar changed his default shell back to PowerShell, everything started working again.\r\n\r\n#### The problem\r\n\r\nThe lack of warning on tasks as to what went wrong is very hard to debug\u2026 see above. It took an hour and a half to make this realization... And even more of the customer's time to get to the point where they asked to get on a call... \r\n\r\n#### The ask\r\n\r\nShow the shell being used to run tasks or give more than just an exit code if possible. We need more context as what's actually going on when a task is being run.\r\n\r\nI think this is a generic problem with any extension that relies on tasks and not just the Azure Functions extension.",
        "createdAt": "2019-12-29 16:31:10",
        "state": "open",
        "number": 87845
    },
    {
        "title": "supportsVariablePaging returning true, yet variables are not paged",
        "description": "- VSCode Version: 1.40.2\r\n- OS Version: Windows 10\r\n\r\nI'm currently implementing support for paged requests on the Python debugger for VSCode, but it doesn't seem like VSCode is trying to use paged requests.\r\n\r\nWhat I'm doing is:\r\n\r\n1. Check that the client is passing `supportsVariablePaging=true` (which VSCode is doing).\r\n\r\n 2. Provide a scope response saying that there are 5000 named variables and that's expensive to compute.\r\n\r\ni.e.:\r\n\r\n```\r\n{\r\n  \"request_seq\": 16, \r\n  \"body\": {\"scopes\": [{\r\n    \"variablesReference\": 63623728, \r\n    \"namedVariables\": 5000, \r\n    \"name\": \"Locals\", \r\n    \"expensive\": true, \"source\": {}}\r\n  ]}, \r\n  \"success\": true, \"seq\": -1, \"command\": \"scopes\", \"type\": \"response\"\r\n}\r\n```\r\n\r\n3. At this point I expected that the variables requests come with start and count, but this doesn't seem to be the case... the command that I'm receiving is still asking for all the variables in the scope (as can be seen below).\r\n\r\n```\r\n{\r\n    \"command\": \"variables\",\r\n    \"arguments\": {\r\n        \"variablesReference\": 63623728,\r\n        \"format\": {}\r\n    },\r\n    \"seq\": 20,\r\n    \"type\": \"request\"\r\n}\r\n```\r\n\r\nFrom the spec I expected that to be everything needed, but it's possible that I'm missing something... Does something else need to be done for VSCode to use a filter with `filter=\"named\"`, `start` and `count` parameters in the variables request or is this a bug (or feature request)?",
        "createdAt": "2019-12-26 11:04:15",
        "state": "open",
        "number": 87718
    },
    {
        "title": "Task service api feedback",
        "description": "Here's some feedback for things which I do not find friendly to use looking at the API:\r\n\r\n* Looking at the `taskService` API I could not find calls to `cancel` task runs. \r\n* `runTask` does not take a `taskId` to run. Due to that I have to do the whole `getTask` dance [here](https://github.com/Microsoft/vscode/blob/7531960f4e420e4e0ded48996b6ee5633b1e1266/src/vs/workbench/contrib/debug/browser/debugTaskRunner.ts#L116)\r\n* `runTask` does not always finish which leads us to do the whole dance [here](https://github.com/Microsoft/vscode/blob/7531960f4e420e4e0ded48996b6ee5633b1e1266/src/vs/workbench/contrib/debug/browser/debugTaskRunner.ts#L140)\r\n\r\nDue to the API being a bid cumbersome to use we had to introduce the DebugTaskRunner as a sort of wrapper. I wonder if this code should be moved to the task land that other potential clients do not have to do this.\r\nIt is of course fine leaving this code in the `DebugTaskRunner` if this is something debug specific - which I do not feel like it is.",
        "createdAt": "2019-12-24 10:43:07",
        "state": "open",
        "number": 87638
    },
    {
        "title": "Reserve shortcut prefix for user ",
        "description": "While installing multiple third-party extensions my shortcuts quickly become messed up. \r\nI found almost any direct ctrl-key sequences on my linux based system where bound, mostly by default vscode commands, with the single exception of `ctrl-e`.\r\n\r\nI started adding the individual commands I needed under that prefix in order to not remove default bindings, so if I wanted something being run with `ctrl-r` I just put it under `ctrl-e ctrl-r`.\r\n\r\n\u00a0\r\n\r\nI propose to reserve a prefix to user shortcuts in a similar way as [Spacemacs handily do](https://develop.spacemacs.org/doc/DOCUMENTATION#reserved-prefix-command-for-user) thus providing user a \"safe harbor\" to organize one's shortcuts with freedom.\r\n\r\n",
        "createdAt": "2019-12-22 18:59:05",
        "state": "open",
        "number": 87565
    },
    {
        "title": "Investigate into using language service support for REPL evaluation",
        "description": "similar to https://github.com/microsoft/vscode/issues/84044 but for DAP's \"evaluate\" request.\r\n\r\nSee https://github.com/microsoft/vscode/commit/d6c6f024c8124ca8bcce8f89737032414b31068a#commitcomment-36519182",
        "createdAt": "2019-12-20 10:00:40",
        "state": "open",
        "number": 87448
    },
    {
        "title": "Restore existing multi-root workspaces when opening N folders from the command line",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nI am programmatically opening VSC with multiple roots like this:\r\ncode.exe \"C:\\...\\Folder1\" \"C:\\...\\Folder2\" \"C:\\...\\Folder1\\SomeFile.txt\"\r\n\r\nThis will open VSC with a multi-root workspace. So far so good.\r\n\r\nThe annoying thing happens when\r\n1) running the same cmd line again while VSC is open\r\n2) closing VSC and running the same command line again\r\n\r\nIn scenario 1) I would expect VSC to just appear in the foreground and make sure \"SomeFile.txt\" is selected. Same if I used a slight variation of the command line to open a different file (but still using the same folders).\r\nHowever, instead it just launches as a second instance of VSC with the exact same configuration, so typically the user now needs to close one of them.\r\n\r\nIn scenario 2) I would expect VSC to open once. What happens though, is that it actually opens TWICE ! As far as I can tell, what happens is that VSC launches and sees that last time it was open with this multi-root configuration, so it restores that configuration. It then additionally follows the command line instructions and thus opens a second instance with that multi-root setup, which happens to be the exact same.\r\n\r\nThe results of scenario 2) are particularly annoying. The only way to prevent this ONCE is to manually select \"Close Workspace\" before closing VSC. But the user would need to do that every single time and there is no way programmatically to prevent this behavior (afaik).\r\n\r\nI tried adding \"--new-window\" and \"--reuse-window\", but both have unintended effects. \"-n\" just always opens a new window, which is not what I want, and \"-r\" just always reuses the existing window, which is also not what I want.\r\n\r\nGenerally, I want VSC to use the given folders to detect whether the exact same multi-root configuration is already open atm and then either reuse a window or launch a new one, if needed. Once that is decided, the files given via the command line should get opened.\r\n\r\n\r\n\r\n\r\nVS Code version: Code 1.41.0 (9579eda04fdb3a9bba2750f15193e5fafe16b959, 2019-12-11T18:37:42.077Z)\r\nOS version: Windows_NT x64 10.0.18362\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-12-18 22:46:57",
        "state": "open",
        "number": 87290
    },
    {
        "title": "is it possible to load monaco within a webview VSCode Extension?",
        "description": "I'm using the monaco-editor-webpack-plugin to load monaco within a `vscode` extension, but I'm running into an error around the webworkers when it loads the json language:\r\n\r\n```\r\nUncaught ReferenceError: importScripts is not defined\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/364566/71124102-007b1280-2199-11ea-92bd-437e470a85ba.png)\r\n\r\nare webworkers  just not supported?\r\n\r\nthis is the code to set the `vscode-resource` in my extension\r\n\r\n```\r\n  getWebviewContent(extensionPath: string) {\r\n    const manifest = require(path.join(extensionPath, 'build', 'asset-manifest.json'));\r\n\r\n    // get all generated chunks names\r\n    const chunksRegex = /^((?!\\.map|\\.css|\\.html).)*$/;\r\n    const chunkNames = Object.keys(manifest.files).filter(key => chunksRegex.test(key));\r\n\r\n    // Use a nonce to whitelist which scripts can be run\r\n    const nonce = v4();\r\n\r\n    const scripts = [...chunkNames]\r\n      .map((scriptName) => {\r\n        const scriptUri = vscode.Uri\r\n          .file(path.join(extensionPath, 'build', manifest.files[scriptName]))\r\n          .with({ scheme: 'vscode-resource' });\r\n\r\n        return `<script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>`;\r\n      })\r\n      .join('');\r\n\r\n    return `<!DOCTYPE html>\r\n\t\t\t<html lang=\"en\">\r\n\t\t\t<head>\r\n\t\t\t\t<meta charset=\"utf-8\">\r\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,shrink-to-fit=no\">\r\n\t\t\t\t<meta name=\"theme-color\" content=\"#000000\">\r\n\t\t\t\t<title>React App</title>\r\n        <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; img-src vscode-resource: https:; script-src 'nonce-${nonce}';style-src vscode-resource: 'unsafe-inline' http: https: data:;\">\r\n\t\t\t\t<base href=\"${vscode.Uri.file(path.join(extensionPath, 'build')).with({ scheme: 'vscode-resource' })}/\">\r\n\t\t\t\t<style>\r\n\t\t\t\t\tbody {\r\n\t\t\t\t\t\tbackground: white;\r\n\t\t\t\t\t}\r\n\t\t\t\t</style>\r\n\t\t\t</head>\r\n\r\n\t\t\t<body>\r\n\t\t\t\t<noscript>You need to enable JavaScript to run this app.</noscript>\r\n\t\t\t\t<div id=\"root\"></div>\r\n\t\t\t\t${scripts}\r\n\t\t\t</body>\r\n\t\t\t</html>`;\r\n  }\r\n```\r\n\r\n\r\nand how it gets used:\r\n\r\n```\r\n      ReactWebView.currentPanel.webview.html = this.getWebviewContent(context.extensionPath);\r\n```",
        "createdAt": "2019-12-18 21:26:34",
        "state": "open",
        "number": 87282
    },
    {
        "title": "Allow to override list styling for quick input and other places (notifications)",
        "description": "atm list styling is the same for both sidebar ex.`tree, extensions, etc...` and the quick input panel `ctrl+shift+p`.\r\n\r\nhowever this assumes that both of them have the same background and foreground styling which is not true, so is it possible to add a separate list styling for both ?",
        "createdAt": "2019-12-18 20:47:46",
        "state": "open",
        "number": 87278
    },
    {
        "title": "Split-view: Highlight occurrences of text in other windows",
        "description": "When I have multiple windows open for the same file I often find myself wishing that the auto-hint/highlight feature that's already present in the active window for all occurrences of the text that is either actively highlighted or simply has the cursor at rest in a given word would be applied to all open windows for that file (or even for all open windows.\r\n\r\n![image](https://user-images.githubusercontent.com/24979523/71116019-7c249180-2190-11ea-9765-220eed10f800.png)\r\n",
        "createdAt": "2019-12-18 19:18:32",
        "state": "open",
        "number": 87274
    },
    {
        "title": "Add a command to add multicursors to all Highlight Occurences",
        "description": "One issue with F2 to rename is it doesn't \"update as you type\". That's the main reason I went for the current multi-cursor approach to do auto rename tag.\r\n\r\n@aeschli and me talked a bit about having a `mirrorCursorProvider`, so this functionality can be available to more languages...But now I'm wondering if we can easily achieve this by adding a command that would put a cursor in all matching positions:\r\n\r\n### Before\r\n\r\n```js\r\nfunction add(fir|st, second) {\r\n  console.log(first)\r\n  return first + second\r\n}\r\n```\r\n\r\n### After command\r\n\r\n```js\r\nfunction add(fir|st, second) {\r\n  console.log(fir|st)\r\n  return fir|st + second\r\n}\r\n```\r\n\r\n@jrieken What do you think? I think this goes together with our approach of adding structured editing (expandSelection) by leveraging language server knowledge.",
        "createdAt": "2019-12-17 22:41:21",
        "state": "open",
        "number": 87204
    },
    {
        "title": "Consider adding a specific color for hover divider",
        "description": "Currently, some minimal themes do not declare `editorHoverWidget.border` for a borderless hover. This makes it hard to distinguish hover/error-hover/definition-hover:\r\n\r\n### Nord\r\n\r\n![image](https://user-images.githubusercontent.com/4033249/71034488-6c447900-20ce-11ea-9a9d-1dbd4014de9b.png)\r\n\r\nIn some cases, one can set a color that's close to the content background, but since the divider is defined as `editorHoverWidget.border` with 0.5 transparency, it's hard to read\r\n\r\n### Ayu Mirage\r\n\r\n![image](https://user-images.githubusercontent.com/4033249/71038588-03adca00-20d7-11ea-8db1-cc26b31e8564.png)\r\n\r\nI propose that we make the divider a theme key, something like `editorHoverWidget.divider`. When not set, it defaults to `editorHoverWidget.border` with 0.5 transparency.\r\n\r\n@jrieken What do you think?",
        "createdAt": "2019-12-17 22:13:04",
        "state": "open",
        "number": 87203
    },
    {
        "title": "Add setting to make Git: Fetch (Prune) default behaviour for Git Fetch And Pull",
        "description": "There have been some closed issues such as #78366 that are somewhat similar to this, but with a key difference: they assume local branch is not deleted. However, the problem is: when a remote branch is deleted and its local branch is deleted too, VSCode still does show **not-existing-anywhere** branches in branch checkout pull-down until Git: Fetch (Prune) is used. I have confirmed that those branches in checkout pulldown still persist after restarting vscode.\r\n\r\nWhile this may indeed be about git itself, since `Git: Fetch (Prune)` has been implemented in vscode; my suggestion is that it is only natural to add an option in settings such as `git.pruneOnFetch: True` to append the `--prune` flag to git fetch and pull operations, making this default behaviour if user so chooses. This will avoid the need to run Git: Fetch (Prune) once in a while, and will have the benefit of keeping the checkout pulldown clean.",
        "createdAt": "2019-12-12 11:13:20",
        "state": "open",
        "number": 86813
    },
    {
        "title": "editor incorrectly breaking in hovers",
        "description": "In Super Basic (which uses the Monaco editor) the provided hovers are incorrectly wrapping words by starting new lines in the middle of a word. You can see the [current discussion](https://github.com/sb/smallbasic-editor/issues/55#issuecomment-468789064) of  the issue in the [smallbasic-editor](https://github.com/sb/smallbasic-editor) repo.\r\n**Browser:** Chrome \r\n**OS:** macOS Mojave 10.14.3\r\n\r\n**Steps or JS usage snippet reproducing the issue:**\r\n**1.** Visit the [super basic](http://superbasic-v2.azurewebsites.net/) online editor.\r\n**2.** hover your mouse over any library or method name and inspect the hover menu.\r\n<img width=\"503\" alt=\"hover menu incorrectly wrapping\" src=\"https://user-images.githubusercontent.com/19309215/53855528-e01ff580-3f82-11e9-962e-a071b1cd0f43.png\">\r\n",
        "createdAt": "2019-03-06 04:17:54",
        "state": "open",
        "number": 86805
    },
    {
        "title": "Make css auto completion items overtype on semicolon",
        "description": "![gif](https://user-images.githubusercontent.com/35271042/70650616-49b0ec80-1c04-11ea-8e7f-e45a0c33244a.gif)\r\n\r\nNow that auto complete adds a `;` when selecting properties, it would be great if typing a `;` next to a semicolon would overtype so that I can quickly get to the end of the line and keep typing. I know that you can type `cmd/ctrl+enter` to start a new line, but typing a semicolon is a bit faster.\r\n",
        "createdAt": "2019-12-11 18:56:55",
        "state": "open",
        "number": 86768
    },
    {
        "title": "[scss] provide hover for scss functions",
        "description": "In SCSS, when hovering over a function, we should show its documentation. Currently it only shows the property name's documentation:\r\n\r\n![image](https://user-images.githubusercontent.com/4033249/70645122-351b2700-1bf9-11ea-98e5-f55ac1a813cd.png)\r\n\r\nDepends on #86764.",
        "createdAt": "2019-12-11 17:33:36",
        "state": "open",
        "number": 86765
    },
    {
        "title": "[css] hover for property values",
        "description": "There's completion details for property values:\r\n\r\n![image](https://user-images.githubusercontent.com/4033249/70645046-0a30d300-1bf9-11ea-8e2b-5b54c92356ef.png)\r\n\r\nBut no hover for them.\r\n",
        "createdAt": "2019-12-11 17:32:16",
        "state": "open",
        "number": 86764
    },
    {
        "title": "[scss] add parameter hints",
        "description": "Currently when we complete a function in SCSS, it completes all parameters:\r\n\r\n![image](https://user-images.githubusercontent.com/4033249/70644906-c342dd80-1bf8-11ea-9933-2be6dfb77bd7.png)\r\n\r\nI think a better experience would be to use parameter hints and do not show the parameter names.",
        "createdAt": "2019-12-11 17:30:12",
        "state": "open",
        "number": 86763
    },
    {
        "title": "Allow to configure symbol visibility in pickers that may show symbols",
        "description": "It's sometimes difficult to use \"Go To Symbol\" to go to a specific method of a class because the namespace of the palette is polluted with variable names. Personally, I have no need to use \"Go To Symbol\" to navigate to variables, so just like I can hide them in the outline, I'd like to be able to hide them from the palette.\r\n",
        "createdAt": "2019-12-11 17:20:15",
        "state": "open",
        "number": 86761
    },
    {
        "title": "Minimap doesnt render cursor wordmatch highlights",
        "description": "Place cursor on a symbol, notice occurences of that symbol appear in ruler, with different colors for read and write access. Those decorations should appear in the minimap as well, but dont.\r\n\r\nHere, the gray highlights in the ruler are occurences of the `meta` symbol.\r\n![image](https://user-images.githubusercontent.com/8586769/70635740-48be9180-1be9-11ea-83b7-529ed536a47e.png)\r\n  ",
        "createdAt": "2019-12-11 15:39:17",
        "state": "open",
        "number": 86750
    },
    {
        "title": "[Feature request] Gethering necessary info when program crashed or has memory leak",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nRecently, a number of people suffering from the memory leak. VS code or some plugin will eat all memory in a short time, and there is no chance to collect debug data for vs team. In addition, such kind of issue usually difficult to reproduce. our user surly has such kind of problem, but we don't know why and how to reproduce it.\r\n\r\nSo it would be nice that the vs code has a feature that gathering all necessary technical data and generating a report. Later our user can report such bugs, and make the vs team easier to fix them.",
        "createdAt": "2019-12-11 12:38:59",
        "state": "open",
        "number": 86746
    },
    {
        "title": "overwrite mode",
        "description": "Are there any plans for adding an overwrite mode (toggled by the insert key).\r\n\r\nMost editors do have them so I was quite surprised monaco (and thus VSCode) doesn't.",
        "createdAt": "2017-03-27 12:43:23",
        "state": "open",
        "number": 86671
    },
    {
        "title": "Support for RTL languages (such as Arabic / Hebrew / Persian etc.)",
        "description": "My name is Tomer Mahlin. I lead a development team in IBM named Bidi Development Lab. We are specializing (for more than 20 years) in development of support for languages with bidirectional scripts (or \"bidi lang.\" for short) . \r\n\r\nWe recently ran a sniff assessment on Monaco capabilities with respect to bidi lang. display. We believe there are several functional areas which require improvements (please see more details below). \r\nMy team can work on necessary modifications and suggest them via separate pull request, assuming community is interested in addressing the requirements detailed below. \r\n\r\n**Plain text editing**\r\n1. There should be a parameter through which it will be possible to communicated the default text direction for content being authored in specific instance of editor. This is a similar parameter to what is used in CKEditor: contentsLangDirection ( http://docs.ckeditor.com/#!/api/CKEDITOR.config-cfg-contentsLangDirection ).\r\nPossible values should be:\r\n- ltr (left-to-right),\r\n- rtl (right-to-left),\r\n- contextual (or auto as used in HTML)\r\n\r\n2. In addition to that, there should be explicit way for the end user to interactively change text direction for selected text (or for current paragraph in which cursor is positioned in case current selection is of zero length). This can be achieved via:\r\n - GUI buttons - similar to all rich text editors (i.e. http://ckeditor.com/addon/bidi)\r\nAND / OR (in case there is no toolbars for any new buttons)\r\n- Keyboard shortcuts (i.e. in Notepad it is Ctrl - <Left|Right-Shift>)  \r\n\r\n**Programming lang. editing**\r\n1. As opposed to plain text, programming lang has well defined syntax. Some part of this syntax is visualized via color schema used for coloring different elements (i..e comments vs variables etc.) of the language.  It is critical to enforce visual appearance associated with the syntax regardless of language used for different elements (i.e. comments, variables etc.). If this is not done, it becomes virtually impossible to work with the code when bidi text is used.  Simple English example: \r\na = b + c; // hello world \r\nIf bidi characters are used instead you would expect to see:\r\nA = B + C; // DLROW OLLEH\r\nInstead at the moment you see:\r\nDLROW OLLEH // ;C+B=A\r\nThe more complex example can be, less intuitive the display will become. \r\n\r\n2. Special case is the case of comments or/and constants. Those by all means usually include bidi characters (or at least much more frequently than variables names for example). It is thus preferable to display text in those contexts using natural text direction for bidi languages (which is RTL). We can't store text direction information with text (namely source code file is still a plain text file which can't include any meta information about text such as font size, color, direction etc.). Consequently we should be able to make a smart choice while displaying the text (relying just on the text itself). Most straightforward approach is to enforce auto (aka contextual or first strong) direction of text for each paragraph included in comments. \r\nFor example, currently the display of sample text is as follows:\r\nres = var1 + var2; // SI EMAN YM tomer !!!\r\nIf we enforce auto text direction on the comment we will see:\r\nres = var1 + var2; // !!! tomer SI EMAN YM\r\nNamely text of comment will appear with actual RTL direction which is a natural one for bidi lang. \r\nDisplay of text with natural text direction makes it considerably more readable and thus should greatly enhance user experience for bidi users.\r\n\r\n**Relevant requests**\r\nAt some point support for bidi lang. was requested in vscode via https://github.com/Microsoft/vscode/issues/4994\r\n\r\n",
        "createdAt": "2016-12-03 18:14:30",
        "state": "open",
        "number": 86667
    },
    {
        "title": "Cannot input with Chrome Extension Google Input Tool",
        "description": "**monaco-editor version:** 0.18.1\r\n**Browser:** Chrome / Edge \u03b2\r\n**OS:** Windows\r\n\r\n**Steps or JS usage snippet reproducing the issue:**\r\n\r\n<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/monaco-editor -->\r\nCannot input with [Chrome Extension Google Input Tool](https://chrome.google.com/webstore/detail/google-input-tools/mclkkofklkfljcocdinagocijmpgbhab).\r\nAlphabet can be entered.\r\nJapanese and Chinese etc are impossible\r\n\r\nInstall the extension and enter in Japanese or Chinese\r\n\r\n![image](https://user-images.githubusercontent.com/38714187/70307294-3260b080-184c-11ea-9f85-8dc969c326ae.png)\r\n\r\n",
        "createdAt": "2019-12-06 08:16:57",
        "state": "open",
        "number": 86650
    },
    {
        "title": "Git: LFS support for image diffing",
        "description": "**Steps to Reproduce:**\r\n\r\n1. In a repository with git LFS enabled (such as the VS Code docs repo)\r\n2. Open a modified image diff \r\n\r\n**Bug**\r\nLeft hand side shows an image load error. Here's the content for a git lfs file we get:\r\n\r\n```\r\nversion https://git-lfs.github.com/spec/v1\r\noid sha256:65ccfe99efef1afc4bbd0fade1397c620759d165d0af1f2394afce4f34570a5f\r\nsize 166430\r\n```\r\n\r\nThis works properly when not using git LFS\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2019-12-09 18:30:47",
        "state": "open",
        "number": 86611
    },
    {
        "title": "Support local paths in hover MarkdownString",
        "description": "Currently paths to images / links used in hover docs must be absolute, otherwise they will not work. Consider a file main.ts:\r\n```typescript\r\n/**\r\n * [link](main.ts)\r\n */\r\nfunction main() {\r\n}\r\n```\r\n\r\nIf you hover over main and click the link, it will attempt to open /main.ts file, which does not exist.\r\nI think it would be sensible if the behavior was exactly the same as with markdown preview.\r\nExample of file main.md:\r\n```markdown\r\n[link](main.ts)\r\n```\r\nHere, clicking the link would properly open the main.ts file, assuming that it's in the same directory.\r\n\r\nHere is a project with these two files:\r\n[project.zip](https://github.com/microsoft/vscode/files/3937151/project.zip)\r\n\r\n",
        "createdAt": "2019-12-08 21:01:46",
        "state": "open",
        "number": 86564
    },
    {
        "title": "#85320 Allow seeding find box with multi-line text",
        "description": "This PR fixes #85320\r\n\r\nInitially it wasn't working, it turns out that the in-editor find does not sanitize \\r\\n -> \\n, as the global search does.\r\n\r\nIt turns out that `ITextModel`'s getValueInRange comes with a EOL preference parameter, so I think the the global search should also use that instead of doing it itself.",
        "createdAt": "2019-12-07 21:49:18",
        "state": "open",
        "number": 86535
    },
    {
        "title": "[scss] references for all SASS functions/at-rules",
        "description": "Ref: https://github.com/microsoft/vscode/issues/85981\r\nRelated: https://github.com/microsoft/vscode/issues/86187\r\n\r\nI want to link all of them to official sass documentation.\r\nMake this data loaded from a JSON file and add `references` to all of them, so they show up in completion. With #86187 references would show up in hover as well.",
        "createdAt": "2019-12-06 19:17:59",
        "state": "open",
        "number": 86488
    },
    {
        "title": "Trailing comma-aware move line up/down",
        "description": "Some files like JSON or pre-ES6 JavaScript files don't allow trailing commas, so moving last line in a block up or moving other line to the bottom causes these files to be corrupted and in a need of manual editing.\r\n\r\n```json5\r\n{\r\n  \"someProperty\": 1,\r\n  \"otherProperty\": 2,\r\n  \"anotherProperty\": 3 /* <-- My cursor is in this line */\r\n}\r\n```\r\n\r\nNow, I press <kbd>option</kbd>+<kbd>\u2191</kbd> and...\r\n\r\n## Current behavior\r\n\r\n```json5\r\n{\r\n  \"someProperty\": 1,\r\n  \"anotherProperty\": 3\r\n  \"otherProperty\": 2,\r\n}\r\n```\r\n\r\n...oh no! two errors! \r\n\r\n* Expected comma json(514) [4, 3]\r\n* Trailing comma json(519) [4, 20]\r\n\r\n## Expected behavior\r\n\r\n```json5\r\n{\r\n  \"someProperty\": 1,\r\n  \"anotherProperty\": 3,\r\n  \"otherProperty\": 2\r\n}\r\n```\r\n\r\nEverything good!",
        "createdAt": "2019-12-06 11:03:09",
        "state": "open",
        "number": 86467
    },
    {
        "title": "Minimap size setting acces made available via F1",
        "description": "F1 and filtering on minimap to resize it instead of looking in settings and modify its value (1,2,3,...)\r\n\r\nThis could be interesting waiting for minimap resizable by drag with mouse, which is surely more resource consuming to be implemented (a request already exists for this  [https://www.github.com/microsoft/vscode/issues/84179](url) )\r\n\r\nResizable map is very useful as in open spaces often people changes desk from a day to another or during the same working day, so screens with different resolutions are used",
        "createdAt": "2019-12-06 09:12:19",
        "state": "open",
        "number": 86458
    },
    {
        "title": "Git: Stash Staged Changes",
        "description": "@joaomoreno: User wants a command to stash staged changes.\r\n\r\n---\r\n\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.40.2\r\n- OS Version: MacOS\r\n\r\nSteps to Reproduce:\r\n\r\n1. Slick Source Control -> three dots -> Stash\r\n2. It's stashing also \"untracked\" files\r\n3. It's working like \"Stash (Include untracked)\r\n\r\nFeature request: Rename button \"Drop Stash\" to \"Clear Stash\"\r\n\r\n<img width=\"278\" alt=\"Screenshot 2019-12-05 at 11 13 43\" src=\"https://user-images.githubusercontent.com/3521624/70226404-15938280-1751-11ea-978a-2a3f42db5fc0.png\">",
        "createdAt": "2019-12-05 10:20:18",
        "state": "open",
        "number": 86384
    },
    {
        "title": "Vim in Linux - middle button paste on search",
        "description": "When using VIM to search we use /\r\nIf I CTRL-SHIFT-C From a Linux terminal or CTRL C some text in VSCode I can CTRL-V into the context or the search /\r\nHowever in Linux there is another buffer which copies to the keyboard buffer when you just highlight some text.\r\nTherefore VSCode in VIM mode should take the Middle Mouse Button click as a paste when searching '/' in VIM mode\r\nThanks",
        "createdAt": "2019-12-05 02:57:35",
        "state": "open",
        "number": 86359
    },
    {
        "title": "Support `code --install-extension` on the remote",
        "description": "I am running WSL 2 (from the 20H1 Slow Ring, build 19033), and I have VS Code installed on the Windows side. I have noticed that adding `Remote - WSL` breaks some of the WSL-to-Windows communication paths, namely the ability to invoke `code --install-extension` from WSL and have it install the extension in Code for Windows.\r\n\r\nNote that this functionality works fine without \"Remote - WSL\" installed; it's only the installation of the remote extension inside of VS Code that breaks the communication.\r\n\r\n**Without WSL - Remote**: `code --install-extension` from WSL correctly installs the extension on the Windows side of VS Code (without any UI popup)\r\n\r\n**With WSL - Remote**: `code --install-extension` incorrectly pops up the VS Code UI (does not open any folder, just pops up the UI) and the extension is not installed.",
        "createdAt": "2019-12-02 17:00:34",
        "state": "open",
        "number": 86232
    },
    {
        "title": "Proxy configuration doesn't allow URLs with port number AND pac files",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.40.2 (user setup)\r\n- OS Version: Windows_NT x64 10.0.18362\r\n\r\nSteps to Reproduce:\r\n\r\n1.` File` -> `Preferences` -> `Settings`-> `Application`-> `Proxy`\r\n2. Under `Proxy` try entering URL `https://user:password@proxyurl.com:8080/file.pac`\r\n3. Error message appears: `Value must match regex `a regex`.\r\n\r\n![image](https://user-images.githubusercontent.com/4049421/70115911-2bd50c00-1687-11ea-807c-1a01c98e2a0d.png)\r\n4. Both PAC file `https://user:password@proxyurl.com/file.pac` and port `https://user:password@proxyurl.com:8080` work independently, but not together.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes/No\r\n\r\n",
        "createdAt": "2019-12-04 05:52:13",
        "state": "open",
        "number": 86223
    },
    {
        "title": "Move line up/down should keep the indentation",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nWhen I move the `echo $row->id;` line up, and down it again, it goes from : \r\n\r\n```\r\n        foreach ($expired_tiers as $key => $row) {\r\n            echo $row->account_id;\r\n        }\r\n```\r\n\r\nto \r\n\r\n```\r\n            foreach ($expired_tiers as $key => $row) {\r\n                echo $row->account_id;\r\n        }\r\n```\r\nAs you can see that the indentation is also changed.\r\n\r\nVS Code version: Code 1.40.2 (f359dd69833dd8800b54d458f6d37ab7c78df520, 2019-11-25T14:52:45.129Z)\r\nOS version: Darwin x64 17.7.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-12-04 04:59:29",
        "state": "open",
        "number": 86222
    },
    {
        "title": "#86176: Consider indenting with comments (that contain apostrophes)",
        "description": "This PR fixes #86176 \r\n\r\nI propose adding `(\\/\\/.*|\\/\\*.*?\\*\\/)?` to the increaseIndentPattern regex.\r\n\r\n(\r\n`\\/\\/.*` Allow for any // comment\r\n| or\r\n`\\/\\*.*?\\*\\/` Allow for any block comments that complete\r\n)\r\n`?` Optionally\r\n\r\nThis matches:\r\n`if () { // <Any comment with ' or \">`\r\nor\r\n`if () { /* <Any comment with ' or \"> */`\r\n\r\nBut not\r\n`if () {  /* <Any comment with ' or \"> (block comment does not finish)`\r\n\r\nThere may be edge cases that this does not consider that could cause issues?",
        "createdAt": "2019-12-04 01:29:07",
        "state": "open",
        "number": 86216
    },
    {
        "title": "Reduce files in vscode remote distro",
        "description": "The vscode remote distro currently has many small files, which causes unzipping the archive to be slow. Would it be possible to pack the dependencies into fewer files?\r\n",
        "createdAt": "2019-12-03 23:18:38",
        "state": "open",
        "number": 86204
    },
    {
        "title": "Make remote timeout configurable",
        "description": "We'd like to make the remote development timeout configurable to handle longer connection times. I believe it is currently configured to 20 seconds.",
        "createdAt": "2019-12-03 23:15:18",
        "state": "open",
        "number": 86202
    },
    {
        "title": "[scss] provide hover information for at-rules",
        "description": "Testing #85979\r\n\r\nHovering over any sass rules doesn't render any info even though we show that on completion.\r\n\r\n![image](https://user-images.githubusercontent.com/35271042/70094431-59627c80-15d7-11ea-867b-be1caed2d3c4.png)\r\n\r\n![image](https://user-images.githubusercontent.com/35271042/70094603-b8c08c80-15d7-11ea-922a-e961bcd0afd4.png)\r\n\r\nBut we do show additional info on other css properties:\r\n\r\n![image](https://user-images.githubusercontent.com/35271042/70094446-61bab780-15d7-11ea-81ba-4c8a238b6c17.png)\r\n",
        "createdAt": "2019-12-03 22:18:43",
        "state": "open",
        "number": 86187
    },
    {
        "title": "Suggest widget has greyscale rendering",
        "description": "Ref #85143 \r\n\r\nParameter hints doesn't have this issue, but hover and suggest widget suffer from it.\r\n\r\nTop to bottom are parameter hint, suggest and hover:\r\n\r\n![image](https://user-images.githubusercontent.com/4033249/70094049-82364200-15d6-11ea-95a9-a3eac4a81b77.png)\r\n\r\nVersion: 1.41.0-insider\r\nCommit: 97855786a014be2440751b038b373c3726e11fe8\r\nDate: 2019-12-03T05:31:49.954Z\r\nElectron: 6.1.5\r\nChrome: 76.0.3809.146\r\nNode.js: 12.4.0\r\nV8: 7.6.303.31-electron.0\r\nOS: Linux x64 4.15.0-55-generic",
        "createdAt": "2019-12-03 22:12:47",
        "state": "open",
        "number": 86184
    },
    {
        "title": "Custom editor webviews should not be recreated on rename",
        "description": "From #85991\r\n\r\n**Repo**\r\n1. Using the `.abc` editor from  https://github.com/mjbvz/vscode-experimental-webview-editor-extension/\r\n1. Create a file called `x.abc`. Open it\r\n1. With the custom editor for `x.abc` still open, rename `x.abc` file to `y.abc` in the VS Code file explorer\r\n\r\n**Bug**\r\nNotice that the editor's webview is destroyed and then recreated. It would be preferable in this webview were kept alive across the rename (although perhaps only if the editor capabilities implement a `rename` method)\r\n\r\nYou can better confirm this by putting some sort of state into the webview, such as a script consisting of:\r\n\r\n```js\r\nlet i = 0;\r\nsetInterval(() => console.log(++i), 1000);\r\n````",
        "createdAt": "2019-12-03 19:22:41",
        "state": "open",
        "number": 86146
    },
    {
        "title": "Add a SaveAll event for extensions to listen for",
        "description": "This was previously raised in #80868 but I don't believe the workarounds work. I thought the `onDidExecuteCommand` might help, but that's been pulled.\r\n\r\nThe use case is to support \"hot reload on save\". The user makes changes, hits Save, and we want to reload all the changes into a running application.\r\n\r\nThe problem with just doing this on-save, is that Save All will trigger multiple requests. The first one would start a hot reload, and the subsequent ones may fail, be rejected because on is in progress, or just waste resources causing multiple reloads (and in the case of hitting breakpoints, confusion for the user).\r\n\r\nThe workarounds mentioned  in #80868 appear to be:\r\n\r\n1. Use a counter to figure out when the last file is saved\r\n2. Enumerate files to see which are dirty\r\n\r\nMy current workaround 3 is to debounce Save events for a short period and only send the hot reload if 200ms pass without a save. The problems with all of these are:\r\n\r\nBoth of the workarounds seem to assume the user is pressing Save All and you want to wait for the last file to save. However this prevents firing when the user just saves one file (but has another dirty file). It shouldn't be required to always use Save All to hot reload, so this seems like a non-starter.\r\n\r\nThe issues with my current workaround (debounce for 200ms) are:\r\n\r\n- We add 200ms onto every hot reload. For a feature that should be as fast as possible (and knocking 200ms off its time is significant), this sucks\r\n- 200ms is a magic number and there's no good value\r\n  - if we make it too short we will have issues (either miss changes because they were rejected because a reload was in progress, or cause multiple reloads - which in case of having breakpoints - is confusing to uses\r\n  - if we make it too long, it feels slow and sluggish. We can easily spend more time in this timer than the actual hot reload takes\r\n\r\nI understand [the files aren't all saved in one go](https://github.com/microsoft/vscode/issues/80868#issuecomment-531296427), but it seems like there should be a convenient place after they've all finished saving (including formatting, etc.) that an event could fire.\r\n\r\nBased on the comments [here](https://github.com/microsoft/vscode/issues/78091#issuecomment-518545491) it seems like having specific commands is preferred over having `onDidExecuteCommand`. I'd like to submit that save events are significant enough for consideration.\r\n\r\nA slightly less-obvious requirement is that it should be possible to subscribe to SaveAll and Save (so we can hot reload on either) without firing both (eg. when doing SaveAll, we don't fire because of each Save immediately before SaveAll).",
        "createdAt": "2019-12-03 14:38:09",
        "state": "open",
        "number": 86087
    },
    {
        "title": "No activations event for file events",
        "description": "Testing https://github.com/microsoft/vscode/issues/85929\r\n\r\nWe should have activation events for the provided file events (e.g. `onWillRename`, ...)\r\n",
        "createdAt": "2019-12-03 13:19:12",
        "state": "open",
        "number": 86063
    },
    {
        "title": "In some places, allow to use URL in addition to URI",
        "description": "This is followup work from https://github.com/microsoft/vscode/issues/83645 and in essence it's about allowing to use the [`URL`](https://developer.mozilla.org/en-US/docs/Web/API/URL)-type when dealing with resources outside of VS Code. So far we have identified:\r\n\r\n* the `openExternal`-api\r\n* the `DocumentLinkProvider`-api",
        "createdAt": "2019-12-02 14:17:58",
        "state": "open",
        "number": 85930
    },
    {
        "title": "Allow for setting `enter` as a keyboard shortcut through the UI ",
        "description": "\r\nIssue Type: <b>Feature Request</b>\r\n\r\n## The Ask\r\nToday you can set all keyboard shortcuts throught the UI, except those whose last chord part is a sole `enter`. This includes the shortcut `enter`. This seems to be because enter submits the shortcut's setting dialog.\r\n\r\nMy feature request is for VS Code to allow these shortcuts to be configured from the UI.\r\n\r\n## My Use Case\r\nI'm an extension publisher and my extension has a REPL with a multiline prompt. Some users want to submit the prompt using `enter`, some  users want to create new lines using `enter`. My extension allows for this to be configured as a vscode keyboard shortcut. But the instructions I have to give to my users for configuring it involves finding the `keybindings.json` file and disable the default shortcuts and enable whatever shortcuts they want.\r\n\r\nI'd want to just instruct them to use the Keyboard Shortcuts UI for configuring this.\r\n\r\n## I'll Send a PR\r\n\r\nIf this is deemed something that the VS Code teams want to enable, I am willing to put in work to get it done.\r\n\r\nOne idea for how this could be allowed is the change the UI such that the user needs to click a submit button in order to set bindings. Then `enter` would be non-special. I think people are used to such UI:s today from various chat clients.\r\n\r\nVS Code version: Code 1.40.2 (f359dd69833dd8800b54d458f6d37ab7c78df520, 2019-11-25T14:52:45.129Z)\r\nOS version: Darwin x64 19.0.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-11-30 11:14:58",
        "state": "open",
        "number": 85850
    },
    {
        "title": "[css] Support for SVG 2 CSS Properties",
        "description": "SVG 2 introduces the possibility of setting SVG properties in CSS (see [CSS Tricks' post](https://css-tricks.com/svg-properties-and-css/) under \"Element-specific properties -> \"Positioning SVG elements\"). This means this example should be valid:\r\n\r\n```css\r\ncircle {\r\n  r: 2;\r\n  cx: 10;\r\n  cy: 100;\r\n}\r\n\r\npath {\r\n  d: 'L0 100';\r\n}\r\n```\r\n\r\nHowever, these properties trigger the `s?css(unknownProperties)` warning: \r\n\r\n![image](https://user-images.githubusercontent.com/9085189/69880828-5d3a8a00-12cb-11ea-83ea-1d50ff8ad34a.png)\r\n\r\n\r\nI'm not too familiar with VS Code's insides and what program checks for valid properties. If this belongs somewhere else, I'd be happy to re-issue there. \r\n\r\nThanks! \u2728",
        "createdAt": "2019-11-29 13:37:29",
        "state": "open",
        "number": 85828
    },
    {
        "title": "[folding] add command unfold block comments",
        "description": "On key bindings, the Fold Level 2 for me works great but it folds methods AND block comments.\r\n\r\nAs there's an option to \"Fold all block comments\" I think it would be useful to exist also an option for the unfolding of block comments.",
        "createdAt": "2019-11-28 19:11:08",
        "state": "open",
        "number": 85783
    },
    {
        "title": "Can `editorBracketMatch.foreground` theme colour be added please?",
        "description": "The following bracket match theme colours are available to be customised.\r\n\r\n* `editorBracketMatch.background`: Background color behind matching brackets.\r\n* `editorBracketMatch.border`: Color for matching brackets boxes.\r\n\r\nCan a further one be added: `editorBracketMatch.foreground` to theme the actual text of the bracket being matched. Thanks.",
        "createdAt": "2019-11-28 15:55:32",
        "state": "open",
        "number": 85775
    },
    {
        "title": "Debug, Explorer: make it easy to open the containing folder of the active file",
        "description": "As suggested by @alexandrudima \r\n\r\nWhen in purple VS Code we should make it easier to open the containing folder of the active file.\r\nWe shuold go up the parent chain until we hit the `.vscode` folder or a `.git` folder.\r\n\r\nThere should an action in the debug start view and the explorer start view for this.",
        "createdAt": "2019-11-28 13:31:15",
        "state": "open",
        "number": 85769
    },
    {
        "title": "Ability to Install Extensions Enabled in Current Workspace Only",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nAs a VSCode user, I have many different Workspaces that span many different projects that involve many, many different technologies. I frequently have 6-8 different Workspaces open at any given time.\r\n\r\nWhen I install a new extension, it is generally because I am looking for a solution for the **_current_** Workspace that I am in, and **_not_** something that I need globally, across all of my Workspaces. Disabling extensions that I am not actively using helps keep UI clutter to a minimum and, in certain circumstances, reduces startup time and other unnecessary processing.\r\n\r\nAs I install more extensions, I find myself following these steps:\r\n\r\n1. Install the extension.\r\n2. Disable the extension.\r\n3. Enable the extension (Workspace).\r\n\r\nI would very much prefer the **option** to simply Install the Extension and have it _**only**_ be enabled for my current Workspace.\r\n\r\nPossible solutions:\r\n\r\n- Change the \"Install\" button to read \"Install for Workspace\" when holding [`Alt`/`Option`] as is done in macOS for certain system menu options.\r\n- Add a \"gear\" menu to not-yet-installed extensions with standard options \"Install; Install Disabled; Install Enabled in Workspace; Copy Extension Information; etc.\"\r\n- Add a right-click menu (with options as outlined above).\r\n- Add a setting to have all extensions disabled by default when creating a new window or opening a new Workspace.\r\n\r\nThis would remove the extra hassle/headache of installing extensions and help me feel more comfortable trying out a new extension (especially when I have several Workspaces open at once).",
        "createdAt": "2019-11-28 01:58:49",
        "state": "open",
        "number": 85735
    },
    {
        "title": "Mirror Cursor for JSX",
        "description": "#47069 implements this for HTML.\r\n\r\nWe should look for a way to support this for JSX/TSX.",
        "createdAt": "2019-11-27 17:18:47",
        "state": "open",
        "number": 85707
    },
    {
        "title": "Api for editor insets",
        "description": "This issue track the API proposal for editor insets. The current proposal is this\r\n\r\nhttps://github.com/microsoft/vscode/blob/ffe3749d5afb046f289d04f915d8d4ade47c028e/src/vs/vscode.proposed.d.ts#L135-L147",
        "createdAt": "2019-11-27 11:34:51",
        "state": "open",
        "number": 85682
    },
    {
        "title": "TreeDataProvider: allow single click and double click to work the same way they do in the file exporer",
        "description": "I can add a command to activate when an item is selected, but I want the same behavior as the in-built explorer where single click opens the tab with the file (title in italics) and double click opens it permanently as a new tab. \r\n\r\nCan this be added to the TreeDataProvider interface?\r\n",
        "createdAt": "2019-11-26 22:24:34",
        "state": "open",
        "number": 85636
    },
    {
        "title": "\"Look up & data detectors\" feature not working on Mac OS with VS code",
        "description": "After research some existing issues, I found the closest description of this issue is #31047, however there are some difference.\r\nInstead of \"behaving strangely\", this feature now are not working at all.\r\nInstead of macOS Sierra, this issue happened to me with MacOS Catalina.\r\nI downloaded the insider version just now and still not working.\r\n\r\n**Mac OS version**\r\nmacOS Catalina 10.15\r\n\r\n**VS code version**\r\nVersion: 1.40.1\r\nElectron: 6.1.2\r\nChrome: 76.0.3809.146\r\nNode.js: 12.4.0\r\nV8: 7.6.303.31-electron.0\r\nOS: Darwin x64 19.0.0\r\n\r\n**Issue**\r\nLook up feature still not working with both \"Force click\" and \"3-fingers tab\".\r\nTried to reinstaill, still not working.\r\n![image](https://user-images.githubusercontent.com/8982712/69673960-80fe9580-1069-11ea-8ed7-9ee8ac933b9d.png)\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes, even when it's brand new\r\n",
        "createdAt": "2019-11-26 21:46:37",
        "state": "open",
        "number": 85632
    },
    {
        "title": "Highlight primary cursor differently than other cursors",
        "description": "With the addition of [auto selecting matching tags](https://github.com/microsoft/vscode/issues/47069#issuecomment-557644701) in HTML, it becomes harder to see which one is the active cursor:\r\n\r\n![auto-selection](https://user-images.githubusercontent.com/4033249/69450026-0e13b880-0d11-11ea-8505-9fbc2a8fc6ba.gif)\r\n\r\nI suggest adding a new color key so themes can show primary cursor differently than other cursors. This would make it possible to understand where the cursor would go to when you press ESC in a multi-cursor mode as well.",
        "createdAt": "2019-11-26 20:57:46",
        "state": "open",
        "number": 85630
    },
    {
        "title": "Git should be able to automatically track new files",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI can make changes to a file in VS Code and Git will track those changes (even though they are not immediately staged, I can stage them easily when committing by using `git commit -a`). Same thing goes for files that I delete. However, new files that I create are a different story; Git does not track them and thus they are not staged when I use `git commit -a`. I have used IDEs before that give the option to automatically run `git add` on a file when I create it. I would like to have the same option in VS Code.",
        "createdAt": "2019-11-25 23:51:16",
        "state": "open",
        "number": 85564
    },
    {
        "title": "vscode.d.ts missing \"interval\" TextEditorLineNumbersStyle",
        "description": "https://github.com/microsoft/vscode/blob/c0d41ffbf2bf3b308656632a07fd4505a836817c/src/vs/vscode.d.ts#L621 does not have TextEditorLineNumbersStyle.Interval\r\n\r\nThis means that extensions cannot use it without tsc complaining and as a result it also does not show on https://code.visualstudio.com/api/references/vscode-api",
        "createdAt": "2019-11-23 23:59:04",
        "state": "open",
        "number": 85471
    },
    {
        "title": "Change Start Debugging Extension Host on Running Extensions to not require a restart",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nCurrently if you click on _Start Debugging Extension Host_ from the _Running Extensions_ tab it will ask you to restart. This IMO defeats the main purpose of this feature, as the only times I want to do this, is when I am seeing an extension issue that I can't easily reproduce and when to debug it when it is happening.\r\n\r\nRelated -- it would be great to not attempt to attach in the same vscode instance and instead open a new vscode window to attach from. \r\n\r\nVS Code version: Code - Insiders 1.41.0-insider (599c076d91be1374cf51004cec610f3bcaf4c9cd, 2019-11-22T07:25:24.031Z)\r\nOS version: Windows_NT x64 10.0.19028\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz (8 x 4008)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>metal: disabled_off<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off<br>surface_control: disabled_off<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|31.93GB (16.39GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-11-23 00:00:35",
        "state": "open",
        "number": 85422
    },
    {
        "title": "Disable overview ruler entirely",
        "description": "Can you add an option to disable overview ruler entirely?\r\nIt's located underneath the right scrollbar, and I find it distracting, as there's symbols changing all the time.\r\n\r\nVersion: 1.40.1\r\nCommit: 8795a9889db74563ddd43eb0a897a2384129a619\r\nDate: 2019-11-15T10:46:02.883Z\r\nElectron: 6.1.2\r\nChrome: 76.0.3809.146\r\nNode.js: 12.4.0\r\nV8: 7.6.303.31-electron.0\r\nOS: Linux x64 4.15.0-70-generic\r\n\r\nI've consulted the link below, no effect:\r\nhttps://stackoverflow.com/questions/59002585/how-can-i-remove-symbols-on-right-scrollbar-of-vscode",
        "createdAt": "2019-11-22 23:08:05",
        "state": "open",
        "number": 85418
    },
    {
        "title": "[html] can't \"rename symbol\" within <script> tags",
        "description": "**Problem**\r\nIn an HTML file with <script> tags, the \"rename symbol\" command is unavailable.   \r\nVSCode 1.40.1\r\n\r\n**Workaround**\r\n\"find and replace,\" but that's always a bit scarier, because it requires vigilance to avoid renaming the wrong thing.  \r\n\r\n**Example**  \r\n`<p>catalog</p> ` \r\n`<script>`  \r\n`let cat = 'hiss';`  \r\n`cat = 'purr';`  \r\n`</script>` \r\n\r\n**Desired behavior:** \r\nselect `cat` --> **rename symbol** to \"feline\" --> should just replace the variable `cat` with `feline`, leaving \"catalog\" alone.  \r\n\r\nBut, this option is unavailable.  \r\n\r\nSo, the alternative is to find-and-replace all --> \"cat\" to \"feline\" --> \"felinealog\". \r\nOr need to go one-by-one and check, which can be tricky in a long file.  \r\nOf course, you can be clever searching for \" cat \" with spaces, but this is just a simple example.  \r\n\r\n**Possible solutions**\r\nIn an HTML file, the rename could either affect all so-named symbols in all <script> tags in the file, or local to the current <script> tag.  \r\n\r\nThanks for considering this!",
        "createdAt": "2019-11-22 19:21:31",
        "state": "open",
        "number": 85411
    },
    {
        "title": "Option to widen the command palette",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI have a number of files that are quite deep in the file structure and some of them share names at least partially. It's a common occurrence that I will search for a file, get several options, and be unable to discern which of the results are the exact one I'm looking for.\r\n\r\nI want to be able to\r\na) Make the width of the command palette increase automatically to include the full path\r\nb) Manually set a px width for the command palette\r\n\r\nPS. If there is a way to do either of these already, I have been unable to find it, and would appreciate being told how.",
        "createdAt": "2019-11-22 08:47:41",
        "state": "open",
        "number": 85374
    },
    {
        "title": "Selecting multiple lines and pressing Ctrl+H should autopopulate the Find box",
        "description": "- Select text that you want to replace throughout the file\r\n- Press Ctrl+H\r\n\r\n**Result**:\r\n- For text that doesn't span multiple lines, the Find box is prefilled with the text you selected.\r\n- For multi-line text, the Find box is not prefilled.\r\n\r\n**Expected**:\r\nFor consistency, the Find box should always be prefilled with the text you selected, whether single or multi-line. Note also that Ctrl+Shift+H for global find/replace also prefills the Find box.\r\n\r\n**Version**:\r\n\r\nVersion: 1.40.1 (system setup)\r\nCommit: 8795a9889db74563ddd43eb0a897a2384129a619\r\nDate: 2019-11-13T16:49:35.976Z",
        "createdAt": "2019-11-21 17:40:05",
        "state": "open",
        "number": 85320
    },
    {
        "title": "Allow debuggers to support StepBack without ReverseContinue",
        "description": "The \"ReverseContinue\" action is controlled by the same `supportsStepBack` flag that \"StepBack\" is. This means for any debugger than can support step back, but not reverse continue, there will be an extra button on the debug toolbar that won't function.\r\n\r\n![Screenshot 2019-11-20 at 3 02 29 pm](https://user-images.githubusercontent.com/1078012/69250012-cbce6800-0ba6-11ea-85d9-0ba8ed8a0b47.png)\r\n\r\n",
        "createdAt": "2019-11-20 15:03:39",
        "state": "open",
        "number": 85215
    },
    {
        "title": "Ability to ignore settings to sync from UI",
        "description": "Provide a way to ignore settings from Settings editor",
        "createdAt": "2019-11-20 14:28:37",
        "state": "open",
        "number": 85208
    },
    {
        "title": "LCD: greyscale rendering in editor hover",
        "description": "I tested this on Linux:\r\n\r\n![image](https://user-images.githubusercontent.com/900690/69236823-ab95ad80-0b94-11ea-91ae-ac7a071863c6.png)\r\n\r\nI am not sure if a fix is possible, but wanted to report it anyway.\r\n",
        "createdAt": "2019-11-20 11:53:08",
        "state": "open",
        "number": 85196
    },
    {
        "title": "git.autofetch on AC power only",
        "description": "Hi, \r\n\r\nI use VSCode mostly to manage infrastructure-as-a-code repositories and I have many of them opened simultaneously in one workspace. The problem starts when I use my laptop on battery as git.autofetch feature starts multiple processes that take a lot of CPU and causes quicker battery drain.\r\n\r\nI suggest adding some additional switch that disables that behavior, when laptop is on battery power.\r\n\r\nBest regards\r\n\r\n\u0141ukasz Tomaszkiewicz",
        "createdAt": "2019-11-20 11:15:42",
        "state": "open",
        "number": 85194
    },
    {
        "title": "Extend `vscode.extensions.getExtension()` API to work with disabled extensions",
        "description": "The `vscode.extensions.getExtension()` API, right now, only works for _enabled_ extensions. If you call it for a _disabled_ extension, it returns `undefined`. \r\n\r\nI would like to see two new features:\r\n\r\n* It should return the extension info, no matter if _enabled_ or _disabled_\r\n* Add `isEnabled` and `enable()` APIs\r\n\r\nThis request comes as an API alternative to #40239, because right now, the user can't define _extension templates_ for its workspaces. Using an API, extensions like my [Project Manager](https://github.com/alefragnani/vscode-project-manager) could be used to define this templates\r\n\r\nThank you \r\n",
        "createdAt": "2019-11-17 19:26:09",
        "state": "open",
        "number": 84997
    },
    {
        "title": "Allow detail option on task input pickString",
        "description": "Similar to what was recently implemented for tasks, it would be nice to be able to add a detail string to the input options of a task so that it can be explained what picking that option means for the task in cases where it may not be clear.",
        "createdAt": "2019-11-17 05:59:01",
        "state": "open",
        "number": 84982
    },
    {
        "title": "Support external diff algorithms in internal diff editor",
        "description": "Reopening closed feature request #30694\r\n\r\nOpenness, extensibility and customisability are the features that keep me coming back to VSCode. Being built upon an OSS core (Electron) was strong evidence of a change of culture at Microsoft. \r\n\r\nIn that spirit, would you please reconsider the original request from @myfairsyer. Different diffing algorithms produce [significantly different results][1] and are suited to different purposes. There is no one-size-fits-all solution.\r\n\r\nParaphrasing @myfairsyer, **please consider abstracting the diff functionality to allow different *hunk-list providers***. Respecting [the algorithm set in Git configuration][2] would be an ideal baseline.\r\n\r\nAs another example, **BeyondCompare** allows [significant customisation][3], including 2 of the 4 algorithms offered by Git.\r\n\r\n[1]: https://link.springer.com/article/10.1007/s10664-019-09772-z\r\n[2]: https://git-scm.com/docs/git-diff#Documentation/git-diff.txt---diff-algorithmpatienceminimalhistogrammyers\r\n[3]: https://www.scootersoftware.com/v4help/index.html?sessiontextalignment.html",
        "createdAt": "2019-11-17 04:43:45",
        "state": "open",
        "number": 84981
    },
    {
        "title": "Web: Support Extensions in hosted version",
        "description": "Support Extensions when running `yarn web`\r\n\r\n- https://github.com/microsoft/vscode/issues/84647\r\n- https://github.com/microsoft/vscode/issues/84894",
        "createdAt": "2019-11-15 08:41:51",
        "state": "open",
        "number": 84901
    },
    {
        "title": "Make registerDiffInformationCommand public",
        "description": "I see that the `registerDiffInformationCommand` has been propsed for a while. I was wondering if you have an eta for when it will be stable. The selected ranges functionality would be useful.\r\n",
        "createdAt": "2019-11-15 08:35:23",
        "state": "open",
        "number": 84899
    },
    {
        "title": "Allow \"Explorer: Incremental Naming\" to have Disabled option for Paste",
        "description": "Please add an option to **disable** incremental naming. By disabling ... the end effect should be to  effectively overwrite existing files when pasting.\r\n\r\nThe current options of `smart` and `simple` are helpful; however, not useful in my context. For myself and those users who commonly do file operations in the host OS file explorer, the expected behavior when copying files/folders in the VSCode explorer is to similarly have these overwritten.\r\n",
        "createdAt": "2019-11-14 19:52:28",
        "state": "open",
        "number": 84857
    },
    {
        "title": "env.asExternalUri rejects ws and wss schemes",
        "description": "If you call `asExternalUri` with a `ws:/` URI, you get an error:\r\n\r\n> Invalid scheme 'ws'\r\n\r\nIt seems like this should work. Even though VS Online doesn't support web sockets yet, this should fine in a container, so it should be possible to map those URLs without having to change the protocol (and change it back on the result).\r\n\r\nhttps://github.com/microsoft/vscode/blob/e904a5f646af4c5a667a12393351d47b806e885a/src/vs/workbench/api/common/extHostWindow.ts#L60",
        "createdAt": "2019-11-14 12:19:05",
        "state": "open",
        "number": 84819
    },
    {
        "title": "Make \"move line\" command to work contextually",
        "description": "VSCode \"move line\" command is a fantastic feature. But it would be way more productive if it works with multiline key-values in objects.\r\n\r\nFor example imagine the following object declaration:\r\n```js\r\nconst someObj = {\r\n  isValid: false,\r\n  position: {\r\n    top: 1,\r\n    bottom: 0,\r\n  },\r\n};\r\n```\r\nif we wanna move `position` including its value one line higher above `isValid`(either we have to select multiple lines or) it only moves the `position: {`.\r\n\r\nIt would be much more productive and ideal when the cursor is on the `position: {` line, the \"move up\" command moves the whole `position` key including its value (the nested object declaration) all together.\r\n\r\nThis would be the ideal result moving the `position` key only by one \"move up\" command:\r\n```js\r\nconst someObj = {\r\n  position: {\r\n    top: 1,\r\n    bottom: 0,\r\n  },\r\n  isValid: false,\r\n};\r\n```\r\ninstead of this:\r\n```js\r\nconst someObj = {\r\n  position: {\r\n  isValid: false,\r\n    top: 1,\r\n    bottom: 0,\r\n  },\r\n};\r\n```\r\n\r\nOf course this could be done as an extension but I thought first brainstorm this with the team.",
        "createdAt": "2019-11-14 03:13:19",
        "state": "open",
        "number": 84763
    },
    {
        "title": "Implement a policy-settings mechanism for approving/blocking extensions",
        "description": "Hello! We (Trail of Bits Engineering Team) have been asked by one of our clients to contribute a feature to Visual Studio Code, and before we even begin we wanted to introduce ourselves and our plan and get feedback on (or approval for) our plan from the core maintainers of this repo. The proposed changes are to how the editor interfaces with the Extensions Marketplace, so it will only be useful if the changes can be upstreamed. In fact, we may need to coordinate with the VSCode open-source maintainers to even _test_ builds that integrate the Extension Marketplace, present only in Microsoft builds of VSCode. We would appreciate your feedback on how/whether to proceed.\r\n\r\n### Feature Request\r\nEnhance VSCode with the basic features for extension management:\r\n- The ability to define an extension update policy\r\n  - The policy would include a setting whether to allow side-loading of extensions (as VSIX files)\r\n- With this policy, control whether VSCode can install, update, or load/run any given extension\r\n  - Blacklist by extension ID\r\n  - Whitelist by extension ID\r\n- Pinning an extension to a particular _version_, allowing its continued use or the installation of that version, but preventing an update\r\n- Prevent the use of extensions newer than some specified age (allowing for a \u201ccooling off period\u201d for new or untested extensions)\r\n\r\nWe plan to implement the extension management policy using an approach [modeled on the extension management policy features in Google Chrome](https://support.google.com/chrome/a/answer/7532015?hl=en) (and [later by Mozilla](https://support.mozilla.org/en-US/kb/customizing-firefox-using-policiesjson), who based the [extension management model of Firefox](https://github.com/mozilla/policy-templates/blob/master/README.md#extensions) heavily on the one in Chrome), but without (at this time) its concept of a per-extension permissions model.\r\n\r\nDeployment of the extension management policy to the managed systems would be handled out-of-band by the system's administrator, but it would be included within or referenced from the user's `settings.json` file. Right now we're not proposing to add any special controls to the settings editor UI of VSCode for editing this extension management policy. The policy will only be editable as JSON, as many other advanced features in VSCode are currently edited.\r\n\r\nWe acknowledge that, for the time being, this file is within control of the user. For now, we're going to ignore that (it is tracked in #27972)\r\n\r\n#### Proposed UI changes\r\n- Ensure that the VSCode extension UI elements presented to the user explain that an extension is blacklisted by their policy, and/or indicate such with a visual change. User should still be able to see blacklisted extensions in the marketplace, but just have their ability to install them blocked with a message (a configurable message also defined in the policy, with a clickable URL for more information and help), such as \u201cthis extension has been blocked by your policy; ask your admin.\u201d\r\n- Ensure that the VSCode extension marketplace UI indicates to the user when only certain versions of the extension are blocked. In this case, the installable version should be indicated, and a visual change in the UI should indicate the relevant release notes for that version.\r\n\r\n### Related Issues\r\n- [Feature Request: extension permissions, security sandboxing, and update management](https://github.com/microsoft/vscode/issues/52116)\r\n- #70736\r\n\r\n### Client sponsor\r\nOur client, who has agreed to participate in this discussion, is @zabicki-stripe ",
        "createdAt": "2019-11-14 02:01:17",
        "state": "open",
        "number": 84756
    },
    {
        "title": "Word navigation in QuickOpen",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n\r\n- VSCode Version:1.40.1\r\n- OS Version:window10\r\n\r\nSteps to Reproduce:\r\n\r\n1.By going to file snapshot (CTRL +P),Type the word aaa:BBB:XXX in the open box\r\n\r\n2.Then use the shortcut key CTRL + left or right head to move the cursor position\r\n\r\n\u4e0d\u5408\u7406\u73b0\u8c61:\u5149\u6807\u4e0d\u80fd\u4ee5\u5192\u53f7(:)\u4e3a\u57fa\u672c\u5355\u4f4d\u53bb\u79fb\u52a8\u4f4d\u7f6e\r\nUnreasonable: the cursor cannot be moved with a colon (:) as the basic unit\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\n",
        "createdAt": "2019-11-14 01:52:58",
        "state": "open",
        "number": 84755
    },
    {
        "title": "Enable breadcrumbs for unsaved files",
        "description": "Right now breadcrumbs for files (json, yaml, etc) only work if the file is saved. If I add a new file (File > New File), and set the language mode, the breadcrumbs should show the file structure without the file path part.",
        "createdAt": "2019-11-13 22:50:47",
        "state": "open",
        "number": 84746
    },
    {
        "title": "Finger imitation",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nPlease make it possible to scroll editor with mouse just like finger. For example I need to hold ctrl or alt key, then the mouse pointer turns to a hand and I can move my code around. It is not comfortable to use scroll bar most the time\r\n\r\nVS Code version: Code 1.40.0 (86405ea23e3937316009fc27c9361deee66ffbf5, 2019-11-06T17:02:13.381Z)\r\nOS version: Windows_NT x64 10.0.18362\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-11-13 02:51:09",
        "state": "open",
        "number": 84646
    },
    {
        "title": "Git Merge Resolve Dialog",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nThis is a request for the ability, when a user resolves all of the merge conflicts in a file, for VS Code to ask whether they would like to mark the entire file as resolved in Git.\r\n\r\nVS Code version: Code 1.36.1 (2213894ea0415ee8c85c5eea0d0ff81ecc191529, 2019-07-08T22:56:38.504Z)\r\nOS version: Darwin x64 19.0.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-11-12 19:57:09",
        "state": "open",
        "number": 84620
    },
    {
        "title": "Some emmet css abbreviations with \":n\" value don't work as expected",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nAbbreviations like list:n, bdt:n, bgi:n, q:n are expanded into properties with value of \"n\" instead of \"none\", bg:n expands into \"no-clip\" instead of \"none\". I haven't tested all abbreviations, so it's likely that there are more cases like these.\r\n\r\nVS Code version: Code - Insiders 1.41.0-insider (0d728c31ebdf03869d2687d9be0b017667c9ff37, 2019-11-12T05:39:58.193Z)\r\nOS version: Windows_NT x64 10.0.17134\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i5-4430 CPU @ 3.00GHz (4 x 2993)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>metal: disabled_off<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off<br>surface_control: disabled_off<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|11.96GB (6.75GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (7)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\ngodot-tools|gee|0.3.7\r\nbeautify|Hoo|1.5.0\r\nnim|kos|0.6.4\r\nvscode-language-pack-pt-BR|MS-|1.40.2\r\ncpptools|ms-|0.26.1\r\nLiveServer|rit|5.6.1\r\nvscode-icons|vsc|9.5.0\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-11-12 16:59:01",
        "state": "open",
        "number": 84608
    },
    {
        "title": "breadcrumb menu doesn't work right",
        "description": "This is on the Mac. I have a few issues with the breadcrumb menu that frustrate me.\r\n\r\n1. The breadcrumb function menu shows on mouse _up._ Mac popup menus are supposed to popup on mouse _down_. The delay adds unnecessary slowness to code navigation.\r\n2. The breadcrumb function popup uses a tiny amount of space on my large desktop monitor. One way to see the comic difference in size is to compare the breadcrumb function list in size to the context menu that popups up when you context-click in the editor. Furthermore, a Mac popup generally uses the full height of the screen. Also, you shouldn't have to use a scrollbar in a popup menu. ",
        "createdAt": "2019-11-11 23:02:23",
        "state": "open",
        "number": 84536
    },
    {
        "title": "Set current search match line color",
        "description": "When I use find, search, or problems, the line color of the current search/find match or problem line does not allow for the \"line of match\" highlight color to be customized (I would like it to work like the current cursor line color settings e.g. `editor.lineHighlightBackground` and `editor.lineHighlightBorder` colors).\r\n\r\nMy request is to either add a setting that allows these lines to have the same style as the \"cursor line\" style, or provide settings to customize what color is displayed for matches.",
        "createdAt": "2019-11-11 19:47:35",
        "state": "open",
        "number": 84522
    },
    {
        "title": "Add vscode.workspace.fs.createWriteStream().",
        "description": "(see #84175)\r\n\r\nFor the Python extension, we currently use node's fs.createWriteStream() for a variety of purposes:\r\n\r\n1. downloading multi-MB files (and tracking progress)\r\n   * calling into a third-party library that expects an `fs.WriteStream`\r\n2. writing generated data out to a file a chunk at a time\r\n3. writing log data out to a file, one entry at a time\r\n\r\nFor example:\r\n* https://github.com/microsoft/vscode-python/blob/master/src/client/debugger/extension/adapter/logging.ts#L55\r\n* https://github.com/microsoft/vscode-python/blob/master/src/client/common/net/fileDownloader.ts#L39\r\n\r\n@jrieken",
        "createdAt": "2019-11-11 19:14:54",
        "state": "open",
        "number": 84515
    },
    {
        "title": "Allow to configure a list of encoding-confidences to use when guessing",
        "description": "Since there were so many encodings issues,I plan to upgrade the code guessing workflow to V2. \r\n\r\n- First, jschardet will be upgraded and multiple results will be returned. For example,` [{encoding: 'UTF-8', confidence: 0.95}, {encoding: 'GBK', confidence: 0.95}]`.\r\n\r\n- Then, we will support the configuration of multiple sets of coding confidence in the settings.`files.encodingInitConfidences`\u3002\r\n`[{encoding:'utf-8',confidence:0.01},{encoding:'GBK',confidence:0.03}]\u3002`\r\n\r\n- Finally,add the two together to get the final result, because `GBK` has the highest confidence, so the file is recognized as `GBK`\r\n`[{encoding:'utf-8',confidence:0.06},{encoding:'GBK',confidence:0.08}]`\u3002",
        "createdAt": "2019-11-11 15:35:02",
        "state": "open",
        "number": 84503
    },
    {
        "title": "Suggestion: command to change theme",
        "description": "There is a command to open the theme prompt (`workbench.action.selectTheme`), however, I would like a command to change the theme (the name of which would be provided as an argument).\r\n\r\nThe reason I would like this is that I frequently switch between a dark and a light theme, depending on my mood, time of day, etc. Currently, I am forced to use the theme picker, but I would really like to create keyboard shortcuts to switch themes immediately.",
        "createdAt": "2019-11-11 12:30:47",
        "state": "open",
        "number": 84486
    },
    {
        "title": "Api request: Add `kind` to TextEditorVisibleRangesChangeEvent",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nSimilar to ```TextEditorSelectionChangeEvent```. It would be great if it'll be possible to distinguish source of this event, like scrolling, folding, viewport resize, commands (```editor.revealRange/revealLine-scroll commands``)`",
        "createdAt": "2019-11-09 05:39:36",
        "state": "open",
        "number": 84351
    },
    {
        "title": "Investigate a more organic integration between GitLens with the core SCM",
        "description": "I think that the first pass here would be to unify some of the underlying structures/api that both GitLens and the built-in Git extension implement themselves. Of which the first candidate would be adopting GitLens' `FileSystemProvider` into core and unify the `Uri` structure so that GitLens could avoid a separate implementation (as well as other Git extensions).\r\n\r\nRefs: https://github.com/microsoft/vscode/issues/55110",
        "createdAt": "2019-11-08 18:03:10",
        "state": "open",
        "number": 84300
    },
    {
        "title": "Allow individual status bar messages to clip instead of hide",
        "description": "- Create a status bar item with a message\r\n- If the message does not fit then the entry is hidden. Instead the message should be clipped.\r\n\r\nBackground: Supporting a feature to show current error in the status - https://github.com/microsoft/vscode/issues/20183",
        "createdAt": "2019-11-08 12:09:15",
        "state": "open",
        "number": 84258
    },
    {
        "title": "Support for non-integer minimap scales",
        "description": "> In the current implementation, the scale is actually the pixel width of each character in our minimap 'font'. Having them be constant values means that we don't need to deal with aliasing, we can copy prerendered pixel values straight from our buffer onto the canvas. Dealing with non-constant values would entail implementing some aliasing, which has a performance and complexity cost I didn't tackle in my initial PR. I'm open to investigating it some more though.",
        "createdAt": "2019-11-07 22:49:35",
        "state": "open",
        "number": 84168
    },
    {
        "title": "Get the workspace folder of the current file",
        "description": "I have a multi folder workspace.\r\nI have in launch.json with `\"cwd\": \"${workspaceFolder}\",`.\r\nHowever when I press f5 to start debugging, it often takes the workspaceFolder of another workspace.\r\n\r\nThere should be something like `\"${workspaceFolderOfCurrentFile}\".\r\nUsing mutli folder workspaces is still such a pain due to lack of flexibility / configuration.\r\n\r\n",
        "createdAt": "2019-11-07 22:01:17",
        "state": "open",
        "number": 84162
    },
    {
        "title": "Minimap - highlight all instances of selected word",
        "description": "When you doubleclick and select a word, all instances of this word should be highlighted, not just the selected word itself.\r\nRight now you'd have to press CTRL+F and use the search functionality, but the highlighting of other instances should show up in the minimap the moment you selected the word.\r\n\r\nAlready discussed in #20853 \r\n",
        "createdAt": "2019-11-07 19:25:19",
        "state": "open",
        "number": 84151
    },
    {
        "title": "Custom background image",
        "description": "Some setting or supported extension API for allowing a custom wallpaper or background image to the editor.\r\n\r\nI have searched and found a few duplicates, all one or more years old and closed. So this is just to ask if there's any news on this subject.\r\n\r\nThere is one plugin available, but from what I can understand it is a hack and does not always work really well.\r\n",
        "createdAt": "2019-11-07 10:28:43",
        "state": "open",
        "number": 84120
    },
    {
        "title": "Distinguish types of calls for call hierarchy?",
        "description": "For the call hierarchy, @rbuckton brought up that JavaScript and TypeScript has many different ways of actually invoking a function:\r\n\r\n- New `new Foo()`\r\n- Tagged templates: foo\\`bar\\`\r\n- Decorators `@foo`\r\n- Property/Element access to accessors `obj.foo`\r\n\r\nMy proposal is that TS should return call hierarchy items for all of these cases, but I wanted to check this with you @jrieken. Does that make sense? Should we consider having a way to distinguish different call types?",
        "createdAt": "2019-11-07 04:36:45",
        "state": "open",
        "number": 84100
    },
    {
        "title": "Allow viewing and editing commands with 'args' in the keybindings editor",
        "description": "**Scenario**\r\nWe support creating keybindings to trigger specific types of code actions or refactorings like so:\r\n\r\n```json\r\n\t{\r\n\t\t\"key\": \"shift+ctrl+e\",\r\n\t\t\"command\": \"editor.action.codeAction\",\r\n\t\t\"args\": {\r\n\t\t\t\"kind\": \"refactor.extract\",\r\n\t\t\t\"preferred\": true\r\n\t\t}\r\n\t}\r\n```\r\n\r\n #84033 added IntelliSense for creating keybindings like this in the json based keybindings editor. However at the moment, there is no way to properly view or create or edit keybindings that use `args` in the keybindings editor.\r\n\r\nThis is important because we are trying to make code actions (specifically refactorings) more discoverable. I believe that making it easier to setup keybindings for code actions would help with discoverability and also help push refactorings as a bigger part of user's workflows\r\n\r\n**Feature Request**\r\n* Show the `args` somewhere in the keybindings editor\r\n* Let users edit the `args` in some way (possibly with a UX similar to the settings editor)\r\n* Let users create new keybindings with `args`\r\n\r\n/cc @misolori Since this would likely require some UX work\r\n/cc @kieferrm For general refactoring discoverability",
        "createdAt": "2019-11-06 19:05:25",
        "state": "open",
        "number": 84072
    },
    {
        "title": "Watch Add Expression should auto-fill based on selected expression property (if there is one)",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nIf you right-click on an entry in the debug _Watch_ view and choose _Add Expression_, it should auto-fill the watch expression with the selected entry's property\r\n\r\nFor example below, I would like the input box to be auto-filled to `modes_1.LinkProviderRegistry._entries`\r\n![image](https://user-images.githubusercontent.com/641685/68236446-30000200-ffd3-11e9-885b-d3e0336e3b95.png)\r\n\r\nVS Code version: Code - Insiders 1.40.0-insider (515f496d9a7617caf07f38298f610920f60834d6, 2019-11-05T14:32:05.211Z)\r\nOS version: Windows_NT x64 10.0.19013",
        "createdAt": "2019-11-05 18:53:08",
        "state": "open",
        "number": 84008
    },
    {
        "title": "SCM: Support file history view",
        "description": "Right now each SCM extension is responsible to provide own file history, e.g. gitlens has https://github.com/eamodio/vscode-gitlens#file-history-view-. But others, like for Mercurial don't have it. Even if it would have it won't provide coherent UX. Would it be possible to have built-in file history view which can be enhanced by scm extensions?",
        "createdAt": "2019-11-05 15:31:26",
        "state": "open",
        "number": 83995
    },
    {
        "title": "[css] support css-variable completion in calc ",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nThe css variable doesn't auto complete in the calc function in the form of var(--css-variable), rather it just stay like this calc(--css-variable), but it is supposed to be like this calc(var(--css-variable)).\r\n\r\nThanks!\r\n\r\nVS Code version: Code 1.39.2 (6ab598523be7a800d7f3eb4d92d7ab9a66069390, 2019-10-15T15:35:18.241Z)\r\nOS version: Windows_NT x64 10.0.18362\r\n\r\n<details><summary>Extensions (19)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nng-template|Ang|0.802.3\r\nEditorConfig|Edi|0.14.2\r\nvscode-npm-script|eg2|0.3.9\r\nprettier-vscode|esb|2.3.0\r\nphp-intellisense|fel|2.3.12\r\nauto-rename-tag|for|0.1.1\r\nangular-essentials|joh|0.6.3\r\nAngular2|joh|8.1.1\r\nvscode-peacock|joh|3.1.6\r\nvscode-language-babel|mgm|0.0.25\r\nvscode-typescript-tslint-plugin|ms-|1.2.2\r\ndebugger-for-chrome|msj|4.12.1\r\nangular2-inline|nat|0.0.17\r\nincrementor|nms|0.1.0\r\nangular-console|nrw|8.1.2\r\nmaterial-icon-theme|PKi|3.9.1\r\nlive-sass|rit|3.0.0\r\nLiveServer|rit|5.6.1\r\nJavaScriptSnippets|xab|1.7.2\r\n\r\n(2 theme extensions excluded)\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-11-01 14:21:54",
        "state": "open",
        "number": 83835
    },
    {
        "title": "Debug: Provide hierarchy of debug targets for compound targets",
        "description": "Whenever I run the `Debug VS Code Main, Renderer & Extension Host` target, I want it to run \r\n\r\n- `Launch VS Code`\r\n- `Attach to Main Process`\r\n- `Attach to Extension Host`\r\n\r\nBut then the debug toolbar always shows me a random target:\r\n\r\n![image](https://user-images.githubusercontent.com/22350/68011183-e3d95880-fc86-11e9-859c-ebaef5d4a56c.png)\r\n\r\nI want the `Launch VS Code` target to be chosen by default, since that's the one that has the `stop` button that will stop all 3 targets.\r\n\r\n![image](https://user-images.githubusercontent.com/22350/68011207-f9e71900-fc86-11e9-87da-00a673103e08.png)\r\n\r\nI really don't ever care about detaching from the other two.\r\n\r\n---\r\n\r\nCompound targets are meant to address running N debug targets, which is very generic. But tackling our selfhost use case (I want to run 1 target which has 3 attach points) becomes suboptimal due to the generic nature of compounds.\r\n\r\ncc @weinand for thoughts",
        "createdAt": "2019-11-01 08:10:17",
        "state": "open",
        "number": 83810
    },
    {
        "title": "Show merge conflict indicators/highlight in minimap",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nI tried to look for settings/option that will allow this behaviour (show merge conflict indicator in the minimap) hovever, I could not find/figure it out.\r\nis this possible to see the merge conflict markers in the minimap?\r\nif this is not a current functionality in the minimap, I think it would be a good addition to the minimap component.\r\n\r\n\r\nVS Code version: Code - Insiders 1.40.0-insider (31f577ec88dc96ad2028699fb597b19022224b46, 2019-10-30T05:39:27.063Z)\r\nOS version: Windows_NT x64 10.0.17134\r\nRemote OS version: Linux x64 4.15.0-64-generic\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i5-4210U CPU @ 1.70GHz (4 x 2394)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>metal: disabled_off<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_renderer: disabled_off<br>surface_control: disabled_off<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|7.88GB (3.20GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n|Item|Value|\r\n|---|---|\r\n|Remote|SSH: angular_serve|\r\n|OS|Linux x64 4.15.0-64-generic|\r\n|CPUs|Intel Xeon E312xx (Sandy Bridge, IBRS update) (4 x 2399)|\r\n|Memory (System)|7.79GB (1.87GB free)|\r\n|VM|0%|\r\n</details><details><summary>Extensions (37)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nremote-containers|ms-|0.82.0\r\nremote-ssh|ms-|0.47.2\r\nremote-ssh-edit|ms-|0.47.2\r\nremote-wsl|ms-|0.40.0\r\nvscode-remote-extensionpack|ms-|0.17.0\r\ndebugger-for-chrome|msj|4.12.1\r\nscala|sca|0.3.8\r\nng-template|Ang|0.802.3\r\njshint|dba|0.10.21\r\nvscode-eslint|dba|1.9.1\r\ngitlens|eam|10.1.1\r\nEditorConfig|Edi|0.14.2\r\nprettier-vscode|esb|2.3.0\r\nvscode-postgresql|ms-|0.2.0\r\npython|ms-|2019.10.44104\r\ncpptools|ms-|0.26.1\r\ntypescript-javascript-grammar|ms-|0.0.53\r\nvscode-typescript-tslint-plugin|ms-|1.2.2\r\nvsliveshare|ms-|1.0.1122\r\nvsliveshare-audio|ms-|0.1.66\r\ncordova-tools|msj|1.9.0\r\nvscode-boot-dev-pack|Piv|0.0.8\r\nvscode-concourse|Piv|1.12.0\r\nvscode-manifest-yaml|Piv|1.12.0\r\nvscode-spring-boot|Piv|1.12.0\r\nfabric8-analytics|red|0.0.13\r\njava|red|0.52.0\r\nvscode-xml|red|0.9.1\r\nvscode-yaml|red|0.5.3\r\nvscodeintellicode|Vis|1.2.0\r\nvscode-java-debug|vsc|0.23.0\r\nvscode-java-dependency|vsc|0.6.0\r\nvscode-java-pack|vsc|0.8.0\r\nvscode-java-test|vsc|0.20.0\r\nvscode-maven|vsc|0.19.1\r\nvscode-spring-boot-dashboard|vsc|0.1.6\r\nvscode-spring-initializr|vsc|0.4.6\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-10-31 04:51:26",
        "state": "open",
        "number": 83733
    },
    {
        "title": "iPadOS: Support drag and drop via touch",
        "description": "#83296 \r\n\r\n* Run self hosting bits in iPadOS\r\n* Try to drag and drop in File Explorer or in the editor, no luck\r\n\r\nThis might be a duplicate of https://github.com/microsoft/vscode/issues/83719 but this one is talking about particular feature.",
        "createdAt": "2019-10-31 00:52:04",
        "state": "open",
        "number": 83720
    },
    {
        "title": "Add `clear` API to custom tree",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nI used \"Find All References\". After 10 mins or so i was in another file and used that again but the old results still showed for ~1 min before the actual results showed. It seems like a bug to me since it took me a second to realize the displayed results were form the old search and the blue progress bar was indicating things were loading. \r\n\r\nSeems pretty staight fowards to me, the bug is the results need to be cleared before the new search is conducted to avoid confusion. Thank you!  \ud83d\ude4f\r\n\r\nVS Code version: Code 1.39.2 (6ab598523be7a800d7f3eb4d92d7ab9a66069390, 2019-10-15T15:35:18.241Z)\r\nOS version: Windows_NT x64 10.0.18362\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-10-30 22:29:08",
        "state": "open",
        "number": 83699
    },
    {
        "title": "Problems for Data Breakpoint",
        "description": "- VSCode Version:\r\n```\r\nVersion: 1.40.0-insider (system setup)\r\nCommit: b7b21844e760e632f39bedf651da2bc93f54b0cc\r\nDate: 2019-10-29T06:48:38.866Z\r\nElectron: 6.1.2\r\nChrome: 76.0.3809.146\r\nNode.js: 12.4.0\r\nV8: 7.6.303.31-electron.0\r\nOS: Windows_NT x64 10.0.18363\r\n```\r\n- OS Version: Windows 10\r\n\r\nI try to enable data breakpoint for Java debugger, here are some problems i find.\r\n- VS Code didn't respect the `accessTypes` attribute of [DataBreakpointInfoResponse](https://microsoft.github.io/debug-adapter-protocol/specification#Requests_DataBreakpointInfo). When it returns an array `['read', 'write', 'readWrite']`, right click the variable, the menu only shows`Break When Value Changes`. \r\n- VS Code didn't respect the `canPersist` attribute of [DataBreakpointInfoResponse](https://microsoft.github.io/debug-adapter-protocol/specification#Requests_DataBreakpointInfo) well. When it is `true`, the BREAKPOINTS viewlet will keep it there after the debug session terminates. But when launching a new debug session, no `setDataBreakpoints` request are sent to debugger during initialization. The debugger has no chance to enable the persisted data breakpoints.\r\n- Cannot edit the attributes for the existed data breakpoint. For example, cannot change its access type, no UI to add `condition` and `hitCondition`.\r\n- Should distinct the data breakpoint for the same variable or type. Currently, i can add multiple duplicated Data Breakpoints for the same variable. It's better to disable this operation if there is a data breakpoint existed for the same variable. Maybe `dataId` can be used as the key to detect the duplication.\r\n- Add a simple way to enable data breakpoint. Currently, i must trigger a breakpoint first, then right click the target variable in the Variable view for that. In fact, Java debugger only supports enabling data breakpoint for the Field, so if the user can enable data breakpoint via clicking the Field declaration code line directly, feel like it's more convenient.\r\n",
        "createdAt": "2019-10-30 10:37:20",
        "state": "open",
        "number": 83649
    },
    {
        "title": "Process explorer with OS scrollbars instead of VSCode scrollbars",
        "description": "![image](https://user-images.githubusercontent.com/19306384/67798929-333f3f00-fa63-11e9-9def-3b73f1e27450.png)\r\n",
        "createdAt": "2019-10-29 18:46:27",
        "state": "open",
        "number": 83571
    },
    {
        "title": "Settings to disable or enable parts of the UI",
        "description": "Add settings in the user and workspace settings.json which allow us to enable or disable parts of the UI.\r\nFor example, if i don't want the \"Sync\" and \"Commit All\" commands in the Sourcecontrol menu i could add\r\n{ \"ui\": { \"sourcontrol.sync\" : false, \"sourcontrol.commitAll\" : false } }\r\n\r\nThis way we can customize our editor to only include the actions we need",
        "createdAt": "2019-10-29 18:15:02",
        "state": "open",
        "number": 83564
    },
    {
        "title": "[folding] Improve #region support: make it look like Visual Studio IDE",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nThe current VSCode region folding is OK (eg. in C# or JS), but it would be very nice to have a viewlet kinda like VS IDE to regions, so this request is purely visual.\r\n\r\n![imagen](https://user-images.githubusercontent.com/36938997/67703405-fa2aa000-f978-11e9-92fd-fe3e8bb3a272.png)\r\n\r\nSomething like the image above \u2b06 is what I'm talking about.\r\n\r\nTo be clearer: The name of the region wraps into that \"commentary style\"-like box, and on hover we have a peek of the code written in the region.",
        "createdAt": "2019-10-28 17:58:07",
        "state": "open",
        "number": 83458
    },
    {
        "title": "Welcome page experience for extensions",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nHi, it would be great if there was an \"onExtensionInstalled\" [activation event](https://code.visualstudio.com/api/references/activation-events) that would trigger when a VS Code extension is first installed.\r\n\r\nOur use case for this activation event, is that we would like to display a welcome page for our VS Code extension when the user first installs the extension.\r\n\r\n",
        "createdAt": "2019-10-28 16:28:24",
        "state": "open",
        "number": 83451
    },
    {
        "title": "Destination folder for downloaded files in remote",
        "description": "I'm currently working in remote using the awesome Remote-SSH connection. While downloading many files from the host, VS code asks me the destination folder for each file. Even more the destination folder is set to `/var/` (I use Linux) forgetting my last destination. Annoying with many files.\r\n\r\nMy suggestion is to:\r\n\r\n-  remember last destination path I've used to save downloaded files and open the save window on that path.\r\n\r\n**OR**\r\n\r\n- if I have selected many files would be nice to choose the destination path one time and download all the files/folders keeping the structure at the destination path on the host.\r\n",
        "createdAt": "2019-10-28 13:33:40",
        "state": "open",
        "number": 83433
    },
    {
        "title": "Expose QuickPick.matchOnLabel publicly",
        "description": "`matchOnLabel` already exists as an internal API. It makes sense to apply it externally too. It could maintain the same semantics and would allow users to have a better control over the display of quickpick results. This was already suggested in https://github.com/microsoft/vscode/issues/73904#issuecomment-506662578.",
        "createdAt": "2019-10-28 11:38:41",
        "state": "open",
        "number": 83425
    },
    {
        "title": "Add custom QuickPick highlighting",
        "description": "It would be nice to have a bit more control over highlighting in QuickPick. I'm using QuickPick as a search field using regex and the existing fuzzy matching doesn't make sense in this context. I'd like to be able to provide my own highlights for the detail field and avoid highlighting elsewhere, although for completion I think it makes sense to allow custom highlighting on all three fields.\r\n\r\nThe API could be similar to the proposed highlighted `TreeItemLabel` in #61482 for backward compatibility. A more general `HighlightedString` could be a good fit across the board. The implementation can then skip the fuzzy matching if the label type is `HighlightedString` and apply the highlights in there.\r\n\r\nI feel that this would complement #77297 nicely and make for a more versatile QuickPick API.",
        "createdAt": "2019-10-28 11:29:11",
        "state": "open",
        "number": 83424
    },
    {
        "title": "Turn off RTL for syntactical characters in bidi lines",
        "description": "I am editing a document that has English, Hebrew, and Arabic in it.  The cursor movement is based on the language the cursor is on so it jumps in different directions.  Inserting and appending text is also unpredictable.\r\n\r\nFor example, if a line is:\r\n`Peace | \u05e9\u05dc\u05d5\u05dd | `\r\nand I paste at the end of the line :\r\n`\u0633\u0644\u0627\u0645` \r\nIt will become:\r\n`Peace | \u05e9\u05dc\u05d5\u05dd | \u0633\u0644\u0627\u0645`\r\nI want it to be:\r\n`Peace | \u0633\u0644\u0627\u0645 | \u05e9\u05dc\u05d5\u05dd `\r\nEditing the line is also difficult.\r\n\r\nHere is a similar request on SO:\r\nhttps://stackoverflow.com/questions/54538844/disable-right-to-left-editing-in-vscode-in-mixed-language-files\r\n\r\nI'd like the ability to easily turn on and off RTL while I'm editing or have the ability to override RTL for the entire document.\r\n",
        "createdAt": "2019-10-26 23:15:44",
        "state": "open",
        "number": 83365
    },
    {
        "title": "Update code lens of inactive editors when typing in another editor",
        "description": "Little bug here with `codelens` and multiple `splitted window editor`.\r\ncodelens will auto update only if we nav between slots from the same window editor.\r\nBut if we toggle between 2 windows frames, codelens will not auto update.\r\n\r\nSo i alway need to switch between files in the same window to get codelens auto update.\r\nIt possible to add codelens update between toggle window editors ?\r\nit's a bit boring for productivity, i toggle a lot between editors groups.\r\n\r\n-----------------\r\n![codelends bug](https://user-images.githubusercontent.com/24865815/67626252-b1f36c80-f816-11e9-901c-3691b79b38f3.gif)\r\n\r\n\r\nYou can try with this setup and share reference between those files.\r\nThen with your mouse or keyboard toggle change `ctrl+p` *2 time. \r\ncodelens will not detect update.\r\n![image](https://user-images.githubusercontent.com/24865815/67626279-f848cb80-f816-11e9-9471-eac3b81dd81a.png)\r\n\r\n--------------\r\n**files0.js** ex: in bottom window editor frame\r\n```js\r\nclass test0 {\r\n    constructor() {\r\n \r\n    };\r\n};\r\n```\r\nfiles1.js ex: in upper window editor frame\r\n```js\r\nclass test1 {\r\n    constructor() {\r\n// add after created the 2 test files and toggle between files, codelens will not update!\r\n        console.log(test0);  \r\n    };\r\n};\r\n```\r\n---------------------\r\n**Possible solution?**\r\nMaybe add a update between toggle window ?!\r\n\r\n------------------\r\n**Version.**\r\nVersion\u00a0: 1.39.2 (user setup)\r\nValidation\u00a0: 6ab598523be7a800d7f3eb4d92d7ab9a66069390\r\nDate\u00a0: 2019-10-15T15:35:18.241Z\r\n\u00c9lectron\u00a0: 4.2.10\r\nChrome\u00a0: 69.0.3497.128\r\nNode.js\u00a0: 10.11.0\r\nV8\u00a0: 6.9.427.31-electron.0\r\nOS\u00a0: Windows_NT x64 10.0.18362\r\n",
        "createdAt": "2019-10-26 21:39:46",
        "state": "open",
        "number": 83363
    },
    {
        "title": "Web: allow to use Fira Code in editor (Safari)",
        "description": "Open web in Safari with `\"editor.fontFamily\": \"Fira Code\"`. the font is not being loaded it seems. Works fine in other browsers.\r\n\r\n![image](https://user-images.githubusercontent.com/900690/67565531-f3581f00-f725-11e9-878f-1b53ad9b4685.png)\r\n\r\nThe only workaround that helped as to directly import the font into the HTML (https://cdn.rawgit.com/tonsky/FiraCode/1.205/distr/fira_code.css). Maybe related to how they define a `src` for the font and we don't?\r\n",
        "createdAt": "2019-10-25 10:49:43",
        "state": "open",
        "number": 83294
    },
    {
        "title": "Additional Fallback Options for setting Workbench: Startup Editor to 'readme'",
        "description": "There is a setting, __Workbench: Startup Editor__, that controls which editor is shown at startup, if none are restored from the previous session. A possible value for this is `\"readme\"` which opens the `README` when opening a folder that contains one, falling back to `\"welcomePage\"` otherwise.\r\n\r\nI really like opening a `README` if it exists in a folder.  I really dislike opening the Welcome page.\r\n\r\nPlease add a feature so that the `\"readme\"` setting can instead fallback to any of the other behaviors for `\"workbench.startupEditor\"` and not just the Welcome page. \r\n\r\n---\r\nTo avert duplication:\r\n- No open issues labeled `feature-request` mentioned \"Startup Editor\"\r\n- Open issues labeled `feature-request` and mentioning \"readme\" do not address the same feature  ",
        "createdAt": "2019-10-24 19:30:54",
        "state": "open",
        "number": 83253
    },
    {
        "title": "[folding] Auto re-fold a region after the cursor leaves it.",
        "description": "Feature Request: Option to automatically re-fold a region after the cursor leaves it.\r\n\r\nSay if you're skipping through \"Find Next\" matches, it will unfold all the code it passes through. It's annoying to have to keep refolding stuff manually.",
        "createdAt": "2019-10-24 19:16:18",
        "state": "open",
        "number": 83250
    },
    {
        "title": "Enteraction appending text before the new line",
        "description": "[EnterAction](https://code.visualstudio.com/api/references/vscode-api#EnterAction) Should allow appending text before the new line as well.\r\n\r\nWhat I want to do is when a user press enter in the middle of a string to break it into two lines and concat the string with +\r\n\r\neg:\r\n\r\nconvert this,\r\n```ballerina\r\nstring s = \"Press enter here -> <- there\"\r\n```\r\n\r\nto\r\n```ballerina\r\nstring s = \"Press enter here ->\" \r\n    + \" <- there\"\r\n```\r\n\r\nBut I can only append `+ \"` to the string below. No way to add `\"` to the string above :(",
        "createdAt": "2019-10-24 01:14:42",
        "state": "open",
        "number": 83196
    },
    {
        "title": "Have an option to disable show local files on open dialog box",
        "description": "When you are using remote development an extension should be able to disable the `show local` files option when you are using the ` vscode.window.showOpenDialog` api. This is because there are cases when this is not appropriate",
        "createdAt": "2019-10-22 09:00:13",
        "state": "open",
        "number": 83046
    },
    {
        "title": "OS specific properties in Tasks.json to overwrite build shell doen't work",
        "description": "- VSCode Version: 1.39.2\r\n- OS Version: Windows 10\r\n\r\nSteps to Reproduce:\r\n\r\n1. Set default shell to `bash` so your build tasks fails as VSCode recently started passing incorrect build path to `bash`\r\n2. Set a build shell which is different than default as you want to build your TypeScript project. `powershell` works.\r\n```JSONC\r\n{\r\n    // See https://go.microsoft.com/fwlink/?LinkId=733558 \r\n    // for the documentation about the tasks.json format\r\n    \"version\": \"2.0.0\",\r\n    \"windows\": { // this is the only place where VSCode allows to add `windows`\r\n        \"options\": {\r\n            \"shell\": {\r\n                \"executable\": \"C:/Windows/System32/WindowsPowershell/v1.0/powershell.exe\"\r\n            }\r\n        }\r\n    },\r\n    \"tasks\": [\r\n```\r\n3. Run build and see that it is using original shell, not one defined in `.vscode\\tasks.json`\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\nOptions to add `windows:{options:shell:{executable:{\"......\"}}}` is available in VSCode for all Windows, OSX and Linux, however it doesn't affect build task on Windows:\r\n![image](https://user-images.githubusercontent.com/12078150/67441481-fdb1d600-f5ca-11e9-996d-ca89b077b9af.png)\r\n",
        "createdAt": "2019-10-21 23:08:12",
        "state": "open",
        "number": 83021
    },
    {
        "title": "[themes] Should color theme files be minimized? ",
        "description": "Similar to #78159 issue (Only file language is not `json` but `jsonc`). \r\n\r\nThemes shipped with vscode are not meant to be manually modified and thus could be compressed.",
        "createdAt": "2019-10-21 14:15:23",
        "state": "open",
        "number": 82987
    },
    {
        "title": "Minimap: Render overview ruler decorations (for extension support)",
        "description": "Originally mentioned in the comments here: https://github.com/microsoft/vscode/issues/20934\r\n\r\nRendering overview ruler decorations on the minimap would not only eventually allow the minimap to optionally replace the scrollbar by supporting the same decorations, but would also allow extensions to provide decorations on the minimap.",
        "createdAt": "2019-10-17 22:57:21",
        "state": "open",
        "number": 82808
    },
    {
        "title": "Provision trusted domains for enterprise setup",
        "description": "As referenced in https://github.com/microsoft/vscode/issues/80595#issuecomment-539794968, currently there's no way to pre-configure VS Code with a list of trusted domains. This is a common case in enterprise setup.",
        "createdAt": "2019-10-17 18:24:06",
        "state": "open",
        "number": 82794
    },
    {
        "title": "Letting user know which extension modified the line recently",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nWhen I work on Typescript some extension automatically modifies my import statements, while it is a good thing since I am anyways going to do it. But since I have a repritore of extensions installed, I sometimes have no clue which extension modfied the line. Because of which I have to disable bunch of extensions to see which one is the culprit.\r\n\r\n\r\nIt would be good to give user insight into which extensions modified a line, so that they can disable some setting if they want to. Also they can uninstall or disable the extension if it is interfering with their editing.\r\n\r\nI would love to implement this feature if accepted. \ud83d\ude04 \r\n\r\n\r\nVS Code version: Code 1.39.2 (6ab598523be7a800d7f3eb4d92d7ab9a66069390, 2019-10-15T15:33:40.634Z)\r\nOS version: Linux x64 5.0.0-31-generic\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-10-17 17:07:18",
        "state": "open",
        "number": 82788
    },
    {
        "title": "Allow Line Height to be Any number",
        "description": "I like to follow the golden ratio rule of design and calculate the exact line height required by a font face for it to look good. For that, `1.2 to 1.45` times the font size is the best size bracket.\r\n\r\nI currently use:\r\n\r\n```json\r\n\"editor.lineHeight\": 24.65,\r\n```\r\n\r\nMy claim is backed by some of the industry-leading typographers like Matthew Butterick [recommends line-height to be 120\u2013145% of the font size](https://practicaltypography.com/line-spacing.html).\r\n\r\n---\r\n\r\nBut I am currently having issues with it.\r\n\r\n![img](https://on.ahmda.ws/bd4c53/c)\r\n\r\nWhereas the debug console line-height still works as a non-integer.\r\n\r\n```json\r\n\"debug.console.lineHeight\": 24.65,\r\n```\r\n\r\n\r\nCan you folks allow any number value to be used for `\"editor.lineHeight\"` property as well?\r\n\r\nPeace! \u270c\ufe0f",
        "createdAt": "2019-10-17 14:50:03",
        "state": "open",
        "number": 82778
    },
    {
        "title": "How to restrict extensionDependencies version",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nHi, I would like to know how to restrict extensionDependencies version?\r\nI have a main extension A (Azure IoT Device Workbench), which has extension B (IoT Device Cube) as its dependent extension.\r\nIn extension A's package.json:\r\n```\r\n  \"extensionDependencies\": [\r\n    \"vsciot-vscode.vscode-iot-device-cube\"\r\n  ]\r\n```\r\n\r\nAt first, extension A `v1.2.3` will install latest `v0.0.1` extension B. Later extension B has **breaking change** and publish `v2.0.0`. To fix incomapability with the latest extension B, extension A publish a new release `v1.2.4` which works well with extension B `v2.0.0`. Problem is that user installing extension A old release `v1.2.3` will also install latest extension B `v2.0.0`, this is wrong. \r\n\r\nHow can I restrict extension Dependencies version so extension A `v1.2.3` can use `extensionB: ^0.0.1`. while extension A `v1.2.4` can use `extensionB: ^2.0.0`.",
        "createdAt": "2019-10-16 05:45:23",
        "state": "open",
        "number": 82655
    },
    {
        "title": "Web: Support complete preferences search",
        "description": "From @sandy081 \r\n\r\nIn web, Settings search currently support searching only registered settings. Enhance this support to use bing search like in desktop.",
        "createdAt": "2019-10-16 05:04:06",
        "state": "open",
        "number": 82651
    },
    {
        "title": "Web: Support for translations",
        "description": "Currently we do not support switching display language in the web.",
        "createdAt": "2019-10-15 13:24:34",
        "state": "open",
        "number": 82595
    },
    {
        "title": "Web: Keyboard layout registration",
        "description": "Currently we only bundle top 60 keyboard layouts across all platforms and allow users to upload keyboard layout in web companion themselves. Each keyboard layout out of top 60 accounts for less than 0.1% in overall but that's thousands of users. To provide a smooth on boarding experience for the long tail, we may want to build an extension which contributes popular keyboard layouts and encourage users to contribute to that extension to help us collect more variants of keyboard layouts. To some extent, it's similar to Code Snippet\r\n\r\nThe contribution schema can be simple as \r\n\r\n```json\r\n\"contributes\": {\r\n\t\t\"keyboardLayouts\": [\r\n\t\t\t{\r\n\t\t\t\t\"platform\": \"darwin\",\r\n\t\t\t\t\"path\": \"./dvorak.json\"\r\n\t\t\t}\r\n\t\t]\r\n}\r\n```\r\n\r\nThe keyboard layout file contains the content generated from command *Developer: Inspect Key Mappings (JSON) *\r\n\r\n```\r\n{\r\n\t\"layout\": {\r\n\t\t\"id\": \"com.apple.keylayout.Dvorak\",\r\n\t\t\"localizedName\": \"Dvorak\",\r\n\t\t\"lang\": \"en\"\r\n\t},\r\n\t\"rawMapping\": {\r\n\t\t\"KeyA\": {\r\n...\r\n}\r\n```\r\n\r\nOnce users install this type of extensions, we can do auto detection or let users to manually pick what keyboard layouts to use.\r\n\r\nConsidering the keyboard layout contributions might be pretty long, say hundreds to thousands, it would be slow to do auto detection every time when users press keys. We can have a quick keyboard layout detection process once we find that users' keyboard layout is not U.S., similar to how Ubuntu does keyboard layout detection\r\n\r\n1. ask users to press a list of keys\r\n2. ask users if their keyboard has some specific keys or not\r\n\r\n![image](https://user-images.githubusercontent.com/876920/60376370-61344a00-99c3-11e9-87d0-6d8524faa5e3.png)\r\n",
        "createdAt": "2019-10-15 13:22:40",
        "state": "open",
        "number": 82594
    },
    {
        "title": "\"files to include\" doesn't work with folder names containing glob characters",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\n1. Create a workspace add the following folder, plus couple of other folders\r\n\r\n```\r\n//...\r\n    {\r\n      \"path\": \"C:\\\\Users\\\\...\\\\folder1\",\r\n    },\r\n    {\r\n      \"path\": \"C:\\\\Users\\\\...\\\\folderNamed\",\r\n      \"name\": \"folderNamed (Special Folder)\"\r\n    },\r\n    {\r\n      \"path\": \"C:\\\\Users\\\\...\\\\folder2\",\r\n    }\r\n//...\r\n```\r\n2. go to explorer view tab\r\n3. create same file with `lorem-ipsum` text in all the folders\r\n4. right click on the `folderNamed (Special Folder)`\r\n5. click on `File in Folder...`\r\n6. ensure that **files to include** set as `./folderNamed (Special Folder)`\r\n7. type `lorem` in the folder into the **Search** box\r\n8. you will see that it retrieves from **folder1** and **folder2** too\r\n\r\nwhere it should only retrieve from `folderNamed (Special Folder)`.\r\nbehaviour works fine on `folder1` and `folder2` since they are not named.\r\n\r\nVS Code version: Code 1.39.1 (88f15d17dca836346e787762685a40bb5cce75a8, 2019-10-10T23:31:28.683Z)\r\nOS version: Windows_NT x64 10.0.18362\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i9-9900K CPU @ 3.60GHz (16 x 3600)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_deferred_display_list: disabled_off<br>skia_renderer: disabled_off<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>viz_display_compositor: disabled_off<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|63.81GB (39.06GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (86)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nbetter-comments|aar|2.0.5\r\nmarkdown-imsize|amo|0.0.2\r\nazds|azu|1.0.120191007\r\nemojisense|bie|0.5.3\r\nmarkdown-mermaid|bie|1.3.0\r\npath-intellisense|chr|1.4.2\r\nvscode-markdownlint|Dav|0.31.0\r\nvscode-eslint|dba|1.9.1\r\ngithistory|don|0.4.6\r\nxml|Dot|2.5.0\r\ngitlens|eam|10.1.1\r\nEditorConfig|Edi|0.14.1\r\nprettier-vscode|esb|2.3.0\r\nauto-close-tag|for|0.5.6\r\nauto-rename-tag|for|0.1.0\r\ndotnet-test-explorer|for|0.7.1\r\nvscode-pull-request-github|Git|0.12.0\r\nmdmath|goe|2.4.0\r\ncloudcode|goo|0.0.12\r\nasciidecorator|hel|0.2.0\r\nrest-client|hum|0.22.2\r\nftp-simple|hum|0.7.4\r\nreg|ion|1.0.1\r\nmarkdown-extended|jeb|1.0.13\r\nmarkdown-extension-pack|jeb|0.0.3\r\nplantuml|jeb|2.12.1\r\nsuper-replace|jeb|0.3.1\r\nsharppad|jma|1.1.0\r\nvscode-peacock|joh|3.1.5\r\nvscodeilviewer|jos|0.0.1\r\njq-syntax-highlighting|jq-|0.0.2\r\ndocomment|k--|0.1.8\r\nwordcounter|kir|1.9.3\r\nrainbow-csv|mec|1.3.1\r\nazure-pipelines|ms-|1.157.4\r\nvscode-apimanagement|ms-|0.1.1\r\nvscode-azureappservice|ms-|0.16.0\r\nvscode-azureeventgrid|ms-|0.1.1\r\nvscode-azurefunctions|ms-|0.18.1\r\nvscode-azurestorage|ms-|0.7.2\r\nvscode-cosmosdb|ms-|0.11.0\r\nvscode-docker|ms-|0.8.1\r\nvscode-logicapps|ms-|0.2.18\r\nvscode-kubernetes-tools|ms-|1.0.4\r\nmssql|ms-|1.6.0\r\nsqlops-debug|ms-|1.3.0\r\nvscode-postgresql|ms-|0.2.0\r\nremote-containers|ms-|0.81.0\r\nremote-ssh|ms-|0.47.1\r\nremote-ssh-edit|ms-|0.47.1\r\nremote-ssh-explorer|ms-|0.47.1\r\nremote-wsl|ms-|0.39.9\r\nvscode-remote-extensionpack|ms-|0.17.0\r\nautorest|ms-|2.0.1\r\nazure-account|ms-|0.8.6\r\nazurecli|ms-|0.4.6\r\ncsharp|ms-|1.21.4\r\ngithub-issues-prs|ms-|0.9.1\r\nGo|ms-|0.11.7\r\nmono-debug|ms-|0.15.8\r\npowershell|ms-|2019.9.0\r\nvscode-node-azure-pack|ms-|0.0.9\r\nvscode-typescript-tslint-plugin|ms-|1.2.2\r\nvsliveshare|ms-|1.0.950\r\nvsliveshare-audio|ms-|0.1.66\r\nteam|ms-|1.149.2\r\nazurerm-vscode-tools|msa|0.7.0\r\ndebugger-for-chrome|msj|4.12.0\r\ncolor-highlight|nau|2.3.0\r\nvscode-versionlens|pfl|0.24.0\r\nmaterial-icon-theme|PKi|3.9.1\r\nquicktype|qui|12.0.46\r\nvscode-yaml|red|0.5.3\r\nelastic|ria|0.13.3\r\nvscode-odata|sta|0.1.0\r\nvscode-markdown-paste-image|tel|0.12.3\r\nusql-vscode-ext|usq|0.2.15\r\nvscodeintellicode|Vis|1.1.9\r\napplication-insights|Vis|0.4.2\r\nvscode-redis|vit|1.2.0\r\nazure-iot-edge|vsc|1.17.0\r\nazure-iot-toolkit|vsc|2.10.0\r\nvscode-ansible|vsc|0.5.2\r\nWebTemplateStudio-dev-nightly|WAS|0.0.1925201\r\nvscode-todo-highlight|way|1.0.4\r\nt4-support|zbe|0.4.3\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-10-12 06:40:05",
        "state": "open",
        "number": 82415
    },
    {
        "title": "Enable natural language search in the settings.json file",
        "description": "It would be great if we could have natural language search for the settings.json file instead of only having it in the settings UI editor.",
        "createdAt": "2019-10-10 17:37:33",
        "state": "open",
        "number": 82270
    },
    {
        "title": "Completion should be able to retrigger completions when accepted",
        "description": "re https://github.com/microsoft/vscode/issues/74054\r\n\r\nHTML/CSS completion item sometimes retrigger completions upon insertion. We should make that an editor concept with (1) proper API and (2) a setting to enable/disable this.",
        "createdAt": "2019-10-10 10:33:37",
        "state": "open",
        "number": 82236
    },
    {
        "title": "Replacing inline adds cases to the replace dialog history",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.38.1\r\n- OS Version: Windows x64 10.0.17763\r\n\r\nSteps to Reproduce:\r\n\r\n1. Highlight a word in the editor\r\n2. Use command \"Add selection to next find match\"\r\n3. type to replace word\r\n4. Open the find and replace dialog\r\n5. In the find section the word that was just highlighted is current and any previous ones are bumped.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\nBug: Either the text that replaced the highlighted words should be in the replace field of the find and replace dialog or (preferably) this action has no effect on the find and replace or find dialog\r\n",
        "createdAt": "2019-10-08 21:24:25",
        "state": "open",
        "number": 82121
    },
    {
        "title": "Provide fs.openDir() API over fs.readDir() to scale better for large directory structures",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nNodeJS > 12.11.1 will have async readdir support Landed in cbd8d71 ( https://github.com/nodejs/node/commit/cbd8d715b2286e5726e6988921f5c870cbf74127 ) as fs{Promises}.opendir(), which returns an fs.Dir, which exposes an async iterator.\r\n\r\nThis will allow us to open big directorys without issues. \r\n\r\nfirst step would be identify all places that do the old readdir calls and refactor them to use iterators till we switch to node > 12.11.1 when we then have switched we can simply replace the function name and are ready.\r\n\r\n### Current State\r\n- Promoting change in existing module dependencys from 3th\r\n- Explore and create other Tickets here to use the new functionality, ",
        "createdAt": "2019-10-08 18:54:33",
        "state": "open",
        "number": 82116
    },
    {
        "title": "Support clickable links for input box descriptions",
        "description": "Similar to how links in notifications are clickable:\r\n![Screen Shot 2019-10-08 at 10 05 07 AM](https://user-images.githubusercontent.com/11282622/66416893-b664fc00-e9b3-11e9-9c49-b97bd16f9278.png)\r\n\r\nI'd like descriptions for input boxes to be clickable:\r\n![Screen Shot 2019-10-08 at 10 03 05 AM](https://user-images.githubusercontent.com/11282622/66416826-959ca680-e9b3-11e9-8c0a-f0f095e21132.png)\r\n![Screen Shot 2019-10-08 at 10 06 06 AM](https://user-images.githubusercontent.com/11282622/66417048-08a61d00-e9b4-11e9-9410-c862877dd2bf.png)\r\n\r\nVersion: 1.38.1\r\nCommit: b37e54c98e1a74ba89e03073e5a3761284e3ffb0\r\nDate: 2019-09-11T13:31:32.854Z\r\nElectron: 4.2.10\r\nChrome: 69.0.3497.128\r\nNode.js: 10.11.0\r\nV8: 6.9.427.31-electron.0\r\nOS: Darwin x64 18.7.0",
        "createdAt": "2019-10-08 17:13:35",
        "state": "open",
        "number": 82112
    },
    {
        "title": "Drag-and-drop indented blocks of code",
        "description": "Make it possible to move blocks of code by indentation levels, like so:\r\nhttps://wiki.mindey.com/shared/shots/0cbe7349349c0b14efabbbcd7-vscode-feature-request--moving-indented-blocks-with-mouse-to-other-levels-of-indentation.mp4\r\n\r\nRelated idea: https://www.halfbakery.com/idea/Software_20Development_20IDE_20as_20Lists_20Editor",
        "createdAt": "2019-10-08 07:28:49",
        "state": "open",
        "number": 82084
    },
    {
        "title": "Exclude folders from automatic task detection",
        "description": "I'd love it if we could have a setting like `tasks.autoDetection.exclude: [\"**/.history/**\"]` where we could insert directories to exclude automatic task detection from.\r\n\r\nI'm using the [local history extension](https://marketplace.visualstudio.com/items?itemName=xyz.local-history) until VS Code implements [that functionality natively](https://github.com/microsoft/vscode/issues/26339) and my `(Shift+Cmd+P) > Tasks > Configure Tasks` and `(Shift+Cmd+P) > Tasks > Run Tasks` [gets polluted](https://imgur.com/VitPIJh) by all the *.json files inside the .history directory.\r\n\r\n",
        "createdAt": "2019-10-07 10:07:54",
        "state": "open",
        "number": 82043
    },
    {
        "title": "Implement token-based language service",
        "description": "Go to Definition and Find All Reference are not 100% reliable in VsCode. The problem occur with VsCode itself for the langages it handle and with extensions for the others langages. VsCode (or the extensions) sometimes doesn't find any definition, or sometimes they don't find all references. That happen because the way of finding the definition and references is based on a certain level of \"understanding\" of the code. So when the code do something that make it hard to find definition and references you end up with something broken. \r\n\r\nI don't have any exemple for a language that VsCode handle but that not hard to find. I have one with Prestashop 1.6.1 source code with the extension Intelephense. If you try to go to definition of $product->addCombinationEntity in controllers/admin/AdminImportController.php it doesn't find any definition and if you try to find all references of $product->addCombinationEntity it doesn't find anything. It fail besause the way that Prestashop name and load Class (https://github.com/bmewburn/vscode-intelephense/issues/700).\r\n\r\nOn the other hand Go to definition and Find all references work 100% of the time in Sublime text and a lot of developers would love to have something similar in VsCode. It seem that Sublime just make a text search to show definition and reference. It's very basic since it show you everything it find even in other langage (ex: js whereas you are in a php file...) but it find everything and it's very reliable. If we can have the same thing in VsCode maybe even better if you limit the search to relevant code (same langage) it will be awesome. Maybe as a workspace option to activate only on project that need it.\r\n\r\nText search is far from perfect but it's far far better than having nothing or, worse, missing references for example when you need to modify all of them. I think a lot of developers rely on Go to definition and Find all reference to quickly navigate through code. A lot of developers use Sublime and love it whereas it have only a very basic text search based Go to definition and Find all reference but that work 100% of the time. Again, an optional text search in complement will make VsCode on par with Sublime for these features, and even better if you manage to limit the result to relevant code, and will fulfill the need of a lot of developers.\r\n\r\nWe need these features to be 100% reliable to use them professionally so, in my opinion, it's almost mandatory to include an optional text search in Go to definition and Find all references. Thanks !\r\n",
        "createdAt": "2019-10-06 10:59:33",
        "state": "open",
        "number": 82024
    },
    {
        "title": "Preserve the cursor-undo stack across edits",
        "description": "There is a command called `cursorUndo` (\"Soft Undo\"), which undo's cursor and selection movements.\r\n\r\n**The undo stack for cursor undo's seems to be deleted after text edits are made.**\r\n\r\nI request that the cursor undo stack will be saved in each text undo entry, and be loaded as the current cursor undo stack after undo/redo.\r\n\r\n#### Steps to Reproduce:\r\n1. Type <kbd>bar</kbd>\r\n2. Press <kbd>Home</kbd>\r\n3. Execute the `cursorUndo` command using <kbd>Ctrl</kbd>+<kbd>U</kbd>. the cursor will move back to *after* `bar`.\r\n4. Press <kbd>Home</kbd> again\r\n5. Type <kbd>foo</kbd>\r\n6. Press <kbd>Ctrl</kbd>+<kbd>Z</kbd> to undo. `foo` should be deleted and the cursor should be *before* `bar`.\r\n7. Execute the `cursorUndo` command again using <kbd>Ctrl</kbd>+<kbd>U</kbd>. Nothing happens.\r\n\r\n**Desired behavior:** The cursor should move to *after* `bar`, just like it did before we made an edit and undo'd it.\r\n\r\n#### System Info:\r\n\r\nVSCode Version: 1.38.1\r\nOS: Windows\r\n\r\n#### Similar Issues:\r\n\r\nI believe this is the intention of #45371, but I'm not sure. That issue is poorly worded and it is very unclear what the author intended. It is also very old and its author seems to not respond.\r\n\r\nThis is **NOT** the same as #34093, which is requesting that the undo stack and cursor undo stack be merged together into a single stack.\r\n",
        "createdAt": "2019-10-05 19:29:54",
        "state": "open",
        "number": 82011
    },
    {
        "title": "Support font transparency in minimap",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI don't know how feasible this is, but it would be great if the minimap used the same font transparency as the editor.\r\n\r\nFor instance:\r\n![image](https://user-images.githubusercontent.com/15098499/66222386-a9d06300-e696-11e9-9f52-71c0fd7fe474.png)\r\ncorresponds to \r\n![image](https://user-images.githubusercontent.com/15098499/66222406-b48af800-e696-11e9-9c13-6f2821d6adf6.png)\r\n\r\nIt gets very confusing when you have a lot of comments.\r\n![image](https://user-images.githubusercontent.com/15098499/66222541-029ffb80-e697-11e9-9b59-d96362a4a836.png)\r\n\r\nI'm sure you can tell the bottom right block are comments. But did you know the top block also are?\r\n\r\nYes, I know, I could pick a color that more closely resembles the grey I'm after without using transparency. And that works out great. But from a theme creators perspective, not being able to use font transparency really cuts down on your ability to easily tweak things and make scalable systems of color.",
        "createdAt": "2019-10-04 16:12:11",
        "state": "open",
        "number": 81971
    },
    {
        "title": "argument quoting in launch.json",
        "description": "In task.json it is possible to [specify the quoting of the argument](https://code.visualstudio.com/docs/editor/tasks#_custom-tasks).\r\n\r\n```\r\n  \"args\": [\r\n    {\r\n      \"value\": \"folder with spaces\",\r\n      \"quoting\": \"escape\"\r\n    }\r\n  ]\r\n```\r\n\r\nIn launch.json this is not accepted.\r\n\r\nQuoting is done automatic if the argument contains a space but I want to control it the same as in task.json because my argument does not contain a space but needs to be quoted or escaped.",
        "createdAt": "2019-10-04 09:26:45",
        "state": "open",
        "number": 81944
    },
    {
        "title": "editor.cursorSurroundingLines selection should respect drag direction",
        "description": "This happens in the current Insiders v1.39.0\r\n\r\n- VSCode Version: 1.39.0\r\n- OS Version: macOS 10.14.6\r\n\r\nSteps to Reproduce:\r\n\r\n1. Set `\"editor.cursorSurroundingLines\": 5`\r\n2. Click anywhere within the lower scroll off zone and slowly drag up\r\n3. Notice that your selection went down\r\n\r\nor\r\n\r\n2. Click anywhere within the upper scroll off zone and slowly drag down\r\n3. Notice that your selection went up\r\n\r\n[Demo](https://gph.is/g/4wPyG12)\r\n\r\nExpectation:\r\nWhen clicking the lower scroll off zone, the editor window should only scroll down if your selection moves down and when clicking the upper scroll off zone, the editor window should only scroll up if your selection moves up.\r\n\r\nRecommendation:\r\nCompletely disable the scroll off zone while clicking or dragging and let the editor behave as if `\"editor.cursorSurroundingLines\": 0` and re-enable it on mouse up.\r\n\r\nDoes this issue occur when all extensions are disabled? Yes\r\n",
        "createdAt": "2019-10-04 07:59:18",
        "state": "open",
        "number": 81940
    },
    {
        "title": "Problem with selection on tooltip ",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nWhen hovering over something that produces a tooltip, one might want to copy a portion of the text in the tooltip box. With my mousepointer I start selecting that bit of text, but as soon as my pointer leaves the tooltip area (while mousebutton still pressed) the tooltip box disappears, making me unable to copy the desired text.\r\n[![Image from Gyazo](https://i.gyazo.com/25d2d43bc4d5620a65bd8a271267c99b.gif)](https://gyazo.com/25d2d43bc4d5620a65bd8a271267c99b)\r\nDesired behavior:\r\nWhile in the \"selecting\" action (mousebutton still pressed) the tooltip should not disappear.\r\n\r\nVS Code version: Code 1.38.1 (b37e54c98e1a74ba89e03073e5a3761284e3ffb0, 2019-09-11T13:35:15.005Z)\r\nOS version: Windows_NT x64 10.0.17134\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-10-03 13:41:59",
        "state": "open",
        "number": 81904
    },
    {
        "title": "[json] JSON formatter does not allow vertical alignment",
        "description": "```\r\nVersion: 1.38.1\r\nCommit: b37e54c98e1a74ba89e03073e5a3761284e3ffb0\r\nDate: 2019-09-11T13:30:08.229Z\r\nElectron: 4.2.10\r\nChrome: 69.0.3497.128\r\nNode.js: 10.11.0\r\nV8: 6.9.427.31-electron.0\r\nOS: Linux x64 5.2.14-200.fc30.x86_64\r\n```\r\nAll whitespace formatting is lost:\r\n\r\n* vertical value alignment\r\n* value grouping (using an empty line)\r\n* single item lists are expanded to multiple lines\r\n\r\nSteps to Reproduce:\r\n\r\n1. Write a JSON file and whitespace align values:\r\n```\r\n{\r\n    \"foo\": {\r\n        \"foo1\":         \"var1\",\r\n        \"somelongname\": \"another value\",\r\n        \r\n        \"anothergroupofvariables\":  \"separated by an empty line\",\r\n        \"key\":                      \"value\",\r\n        \r\n        \"singlelistitem\": [ \"oneitem\" ]\r\n    }\r\n}\r\n```\r\n2. Format the document using `Ctrl + Shift + I`\r\n```\r\n{\r\n    \"foo\": {\r\n        \"foo1\": \"var1\",\r\n        \"somelongname\": \"another value\",\r\n        \"anothergroupofvariables\": \"separated by an empty line\",\r\n        \"key\": \"value\",\r\n        \"singlelistitem\": [\r\n            \"oneitem\"\r\n        ]\r\n    }\r\n}\r\n```\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\nAccording to the RFC7159 JSON standard whitespace alignment is allowed: https://www.rfc-editor.org/rfc/pdfrfc/rfc7159.txt.pdf.\r\n\r\nI'm reporting this here, since this is affecting the default JSON formatter. Please advise if I should report this elsewhere.\r\n\r\nI agree whitespace alignment makes no sense for JSON strings generated and read mainly by machines, but for JSON strings written and maintained by humans, whitespace alignment is essential for good readability and quick object identification.\r\n",
        "createdAt": "2019-10-03 08:35:40",
        "state": "open",
        "number": 81886
    },
    {
        "title": "Add a way to initializate debug extension before every new debug session",
        "description": "Version: 1.39.0-insider\r\nCommit: b0d714d2de2886060e0904bf0cc774e0d70667cd\r\nDate: 2019-09-26T09:05:41.420Z\r\nElectron: 6.0.9\r\nChrome: 76.0.3809.146\r\nNode.js: 12.4.0\r\nV8: 7.6.303.31-electron.0\r\nOS: Darwin x64 18.7.0\r\n\r\nSteps to Reproduce:\r\n\r\n1. open a powershell file with the PowerShell e x tension\r\n2. drop a breakpoint and F5\r\n3. Hit the restart button when the breakpoint is hit\r\n\r\nYou'll notice nothing happens... this is because `resolveDebugConfiguration` is not run for when the debug adapter is starting up again so it can't set up needed state on the client side.\r\n\r\nThe 'restart' command isn't supported so this is behavior should be shutting down and starting up the debug adapter again.\r\n\r\nIs this by design that it's not running `resolveDebugConfiguration` on restart? If so, any recs on how we can set up state in the extension host side before the debug adapter is launched?",
        "createdAt": "2019-10-01 23:28:20",
        "state": "open",
        "number": 81806
    },
    {
        "title": "[json] allow $ref in confiuguration schemas",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nSteps to Reproduce:\r\n\r\n1. Create a [\"definitions\"](https://json-schema.org/understanding-json-schema/structuring.html) member for a JSON schema, and put a subschema there.\r\n2. Attempt to refer to this subschema in `settings.json`.\r\n\r\n***\r\n\r\nI'm in a folder called \"json\" with a subfolder called \"schemas\" with the schemas, and a subfolder called \".vscode\" for the `settings.json`.\r\n\r\nHere is the definitions schema I am using:\r\n```\r\n{\r\n  \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",\r\n  \"type\": \"object\",\r\n  \"definitions\": {\r\n    \"items\": {\r\n      \"type\": \"array\",\r\n      \"items\": {\r\n        \"$ref\": \"items.json#\"\r\n      },\r\n      \"minItems\": 1\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIf I just make `items.json` into an array and use `\"url\": \"./schemas/items.json\"` works fine, but that isn't very conducive to my current work case. \r\n\r\n&nbsp;\r\n\r\nSo I tried using this:\r\n```\r\n\"schema\": {\r\n\t\"type\": \"array\",\r\n\t\"items\": {\r\n\t  \"$ref\": \"./schemas/items.json\"\r\n\t}\r\n  }\r\n```\r\n\r\nGot this error: \"Problems loading reference 'vscode://schemas/custom/schemas/items.json': Request vscode/content failed with message: cannot open vscode://schemas/custom/schemas/items.json. Detail: resource is not available\".\r\n\r\n&nbsp;\r\n\r\nTried using this:\r\n`\"url\": \"file:///C:/Users/BLATANT-DOXX-RISK/Source/Repos/json/schemas/types.json#/definitions/items\"`\r\n\r\nAnd it just used `types.json`, ignored the definitions part, and looked for nothing but a blank object.\r\n\r\n&nbsp;\r\n\r\nFinally, I tried using this: `\"url\": \"./schemas/types.json#/definitions/items\"`.\r\n\r\nGot this error: \"File not found (c:\\Users\\BLATANT-DOXX-RISK\\Source\\Repos\\json\\schemas\\types.json#\\definitions\\items))\".\r\n\r\n&nbsp;\r\n\r\n@aeschli came up a *lot* when looking through Github issues.\r\n\r\n***\r\n\r\nVS Code version: Code 1.38.1 (b37e54c98e1a74ba89e03073e5a3761284e3ffb0, 2019-09-11T13:35:15.005Z)\r\nOS version: Windows_NT x64 10.0.18362\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz (8 x 2592)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_deferred_display_list: disabled_off<br>skia_renderer: disabled_off<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>viz_display_compositor: disabled_off<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|15.80GB (7.40GB free)|\r\n|Process Argv|C:\\Users\\ZACH-GAMING\\Source\\Repos\\Cataclysm-DDA-Testing\\data\\json|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details>Extensions: none",
        "createdAt": "2019-10-01 17:31:40",
        "state": "open",
        "number": 81782
    },
    {
        "title": "API to toggle between flat tree (list) and tree for custom view",
        "description": "Context: https://github.com/microsoft/vscode-references-view/pull/54",
        "createdAt": "2019-10-01 14:35:51",
        "state": "open",
        "number": 81757
    },
    {
        "title": "SCM: Adding to .gitignore should put folder if folder is selected",
        "description": "Testing: #81233\r\n\r\nWhen right clicking on a folder in the SCM view and picking \"Add to .gitignore\" I think I would expect that folder to be added to the `.gitignore` file. Currently each file that is modified in that folder is being added. ",
        "createdAt": "2019-10-01 09:55:40",
        "state": "open",
        "number": 81724
    },
    {
        "title": "Switch to polling for watching changes on config files",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nhttps://github.com/microsoft/vscode/issues/81579 got answered by @sandy081 \r\n\r\n```\r\nThis is to watch changes for user configuration data in VS Code.\r\n\r\nSettings\r\nKeybindings\r\nSnippets\r\nIt's also to watch log files when output panel is opened.\r\n\r\nWe do not watch the whole user home directory, but code/User folder under user home directory. code/User folder is the one created by VS Code for storing above user data.\r\n```\r\n\r\nI Propose here to add a extra RTC Channel for Settings File Updates to call a reread of a settings file\r\nso on save of a settings file we simply emit a event to that channel and vscode will reread its configuration this saves a ton of filewatchers.\r\n\r\nwe should also add a reload vscode button.",
        "createdAt": "2019-10-01 05:04:22",
        "state": "open",
        "number": 81702
    },
    {
        "title": "Better Touch using",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nHello,\r\n\r\nI realised it is not easy to select text on a touch screen. This is, because all touch gestures are interpreted as scrolling and not as selecting.\r\n\r\nI looked what Notepad++ does. This is very interesting. Notepad++ works differently depending on what direction the touch swiping starts. If it starts vertically (up/down) then ist is scrolling and if it starte horizontally (left/right) it is selecting. - It should be noted, that even if you start moving the finger up or down for scrolling, if the scrolling has started you still can scroll left or right. If you are in selection mode (left/right movement) you can also select up and down. So the application looks how the movement started. This is a really cool and accassible way of using touch in this program.\r\n\r\nVisual Studio code should work in a similar way.\r\n\r\n(PS: This whole way of using with touch reminds me of the clever way Tiles worked Windows 8. Unfortunately Microsoft forgot about that, when they switched scrolling direction of Tiles in Windows 10.)\r\n\r\nVS Code version: Code 1.38.1 (b37e54c98e1a74ba89e03073e5a3761284e3ffb0, 2019-09-11T13:35:15.005Z)\r\nOS version: Windows_NT x64 10.0.18362\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-09-29 20:14:27",
        "state": "open",
        "number": 81616
    },
    {
        "title": "Increase the number of cursors from 10000",
        "description": "Hi Team\r\n\r\nI do a lot of work editing on text files with line more that 10000,editing of large file is limited due to the The number of cursors has been limited to 10000.\r\n\r\nPlease increase this limit to 100000 if possible ",
        "createdAt": "2019-09-28 20:19:44",
        "state": "open",
        "number": 81589
    },
    {
        "title": "Display license link for VSIX packages in Extensions View",
        "description": "You can see information such as download count, link to a repository, and a license link in the extensions view for items downloaded from the marketplace.\r\n\r\nMy company does not want to publish our extension in the marketplace and instead distribute a VSIX file.  I included license information in the package.json and created a VSIX files for testing.   I am able to see details in the extensions view after installing the VSIX package.  But,  a license link does not appear. I assume you must publish the extension to display the link.\r\n\r\nIf there is a way to display the license link in this scenario, it's not clear to me how to do it.  So the feature request would be to display a license link or document how to show it if that's already possible.\r\n",
        "createdAt": "2019-09-27 17:38:39",
        "state": "open",
        "number": 81563
    },
    {
        "title": "Autohide minimap for frames that already show all the code",
        "description": "Right now, the minimap is shown in every frame when it's enabled. I'd like for it to automatically hide when everything can be seen already, or alternatively to be able to disable it per-file instead of globally.",
        "createdAt": "2019-09-27 13:15:36",
        "state": "open",
        "number": 81550
    },
    {
        "title": "Show keyboard shortcuts inside integrated terminal in Screencast Mode",
        "description": "I really like the option of showing Only Keyboard Shortcuts in Screencast Mode.\r\n\r\n![image](https://user-images.githubusercontent.com/872762/65753993-bfd9a300-e12d-11e9-9ab1-f4a953ef093d.png)\r\n\r\nBut then, Inside the terminal it ignores the shortcuts (Screencast Mode). The shortcuts are showing inside terminal only when `Screencat Mode: Only Keyboard Shortcuts` is unchecked. \r\n\r\nAdd the ability to show keyboard shortcuts terminal when the `Screencat Mode: Only Keyboard Shortcuts` are checked.",
        "createdAt": "2019-09-27 08:23:31",
        "state": "open",
        "number": 81537
    },
    {
        "title": "Allow extensions to determine if a position is within a fold",
        "description": "This has been the most demanded feature of VSCodeVim: [VSCodeVim/Vim#1004](https://github.com/VSCodeVim/Vim/issues/1004) for over 3 years.\r\n\r\nThe main problem with Folds and Vim is that some motions will skip right over folded areas (like moving up/down). We need to know if we are in a folded area so we can iterate these motions until we are out of the fold.\r\n\r\nAn API like ``vscode.window.activeTextEditor.getAllFoldedRegions(): vscode.Range[]`` would be ideal.\r\n\r\nAn API like ``vscode.window.activeTextEditor.isPositionInFold(position: vscode.Position): boolean`` would also be great.\r\n\r\n* * *\r\n\r\nThis is technically a duplicate for [22276](https://github.com/microsoft/vscode/issues/22276), but that was closed because the roadmap at the time couldn't include this ticket.\r\n\r\nMaybe it's time to revisit this? It has been blocking the most demanded feature of one of the most popular plugins out there, for 3+ years.",
        "createdAt": "2019-09-26 15:21:17",
        "state": "open",
        "number": 81498
    },
    {
        "title": "Reduce file watching to files/folders that are in use",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nCan we have a lazy watcher? i.e. it only scans the files directly under the current dir and does not go recursively and it would be invoked to scan once we open a dir in file explorer.\r\n\r\nThe reason is that we usually have tons of file in a project and also soft-link to other projects that can potentially create loops. And I notice that file scanning really cause vscode to consume too much CPU and mem at the starting. \r\nHence, while I do NOT want to exclude those folders as I occasionally need to dig into them to see if things are alright, I really want to have an option to keep vscode from crazily scanning my file systems and from freezing the system every time vscode is started. ",
        "createdAt": "2019-09-26 09:46:13",
        "state": "open",
        "number": 81473
    },
    {
        "title": "Fade Minimap for unreachable code",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nAs currently, when unreachable code is detected, it fades particular section of code but in Minimap it remains as it is. So it would be better if we see this fading in Minimap also.",
        "createdAt": "2019-09-24 08:16:44",
        "state": "open",
        "number": 81359
    },
    {
        "title": "[html] Jump to after next opening HTML tag",
        "description": "It would be great if there were a keyboard shortcut which moved the cursor to within the next HTML element, right after the opening tag. This would be really useful, because Emmet is great for building out the structure, but then I have to type in the data and it's a lot of mouse clicking / arrow keys.\r\n\r\nFor example, say I am starting here:\r\n![image](https://user-images.githubusercontent.com/22269691/65483112-f1ade980-de4f-11e9-85f7-4ed96b9bd3f4.png)\r\n\r\nand I want to move the cursor here:\r\n![image](https://user-images.githubusercontent.com/22269691/65483182-2752d280-de50-11e9-8593-694d3883eca5.png)\r\n\r\nI'd like to do this with one keyboard shortcut instead of 5 arrow presses (I know Ctrl can be used with arrow keys to navigate between words but it is still an issue)",
        "createdAt": "2019-09-24 05:23:16",
        "state": "open",
        "number": 81352
    },
    {
        "title": "Insert Line After KeyBinding cannot be overridden",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\n**Issue**:\r\nIn VSCode version 1.38.1 when I tried to find and replace all in a file using \"Ctrl+Enter\" a message popped up saying \"Ctrl+Enter now inserts line break instead of replacing all.  You can modify the keybinding for editor.action.replaceAll to override this behavior.\" I went to keyboard shortcuts and modified `editor.action.replaceAll` to `Ctrl+Enter` and changed `Insert Line Below` to `Ctrl+Alt+Enter`, after this and after restarting VSCode pressing `Ctrl+Enter` on the flind and replace widget inserts a line break and replaces all, even though `Insert Line Below` has been set to `Ctrl+Alt+Enter`\r\n\r\n**Actual**:\r\n1. Change VSCode keybinding for `Insert Line Below` to something other than `Ctrl+Enter` and set `editor.action.replaceAll` to `Ctrl+Enter`\r\n2. Open a file and write a few lines\r\n3. Press `Ctrl+H` to open Flind and Replace\r\n4. Turn on regex search\r\n5. Find `\\n` and replace ` ` (single whitespace) this should have the effect of removing all newlines\r\n6. Press `Ctrl+Enter` this inserts a line break in the replace all box event and replaces all in the file\r\n\r\n**Expected**:\r\n1. Change VSCode keybinding for `Insert Line Below` to something other than `Ctrl+Enter` and set `editor.action.replaceAll` to `Ctrl+Enter`\r\n2. Open a file and write a few lines\r\n3. Press `Ctrl+H` to open Flind and Replace\r\n4. Turn on regex search\r\n5. Find `\\n` and replace ` ` (single whitespace) this should have the effect of removing all newlines\r\n6. Press `Ctrl+Enter` this replaces all in the file\r\n\r\nVS Code version: Code 1.38.1 (b37e54c98e1a74ba89e03073e5a3761284e3ffb0, 2019-09-11T13:35:15.005Z)\r\nOS version: Windows_NT x64 10.0.18990\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Xeon(R) CPU E5-1650 v4 @ 3.60GHz (12 x 3592)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_deferred_display_list: disabled_off<br>skia_renderer: disabled_off<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>viz_display_compositor: disabled_off<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|31.92GB (9.90GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (8)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\ntoml|be5|0.4.0\r\nbracket-pair-colorizer|Coe|1.0.61\r\ngitlens|eam|10.0.0\r\nremote-wsl|ms-|0.39.5\r\nazure-account|ms-|0.8.4\r\ncsharp|ms-|1.21.3\r\nGo|ms-|0.11.6\r\nsublime-keybindings|ms-|4.0.3\r\n\r\n(1 theme extensions excluded)\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-09-23 22:33:05",
        "state": "open",
        "number": 81337
    },
    {
        "title": "Folder structure in find references view",
        "description": "If a pretty large project is opened in vs.code, and references are found, they are displayed in a linear view. It would be nice to have an option to display them in a folder view, i.e. only relevant folders and files are shown, and usages are shown as children of file nodes.\r\n\r\nI think I am capable of implementing it myself. Do you think it's a useful thing to do? Can I expect some directions on this from somebody on the team?",
        "createdAt": "2019-09-19 17:21:49",
        "state": "open",
        "number": 81187
    },
    {
        "title": "Use Replace button in \"Find and Replace\" widthout jumping to next matching word",
        "description": "When i want to Find and Repalce some text i want to verify and update the whitespace to match the new text. \r\n\r\nEvery time i hit replace, the focus jumps to the next matching text, i have to scroll back manually to edit the whitespace (or step back and forth in history), it woult be better if the replace button did not automatically made the editor jump to the next word. Maybe add a setting that chan change the behaviour of the replace button?\r\n\r\nIn CODEO (eclipse) every other replace button click makes you replace code, or jump to next match, maybe do it like that?",
        "createdAt": "2019-09-18 07:10:55",
        "state": "open",
        "number": 81087
    },
    {
        "title": "[json] publish schema of the VS Code-specific JSON Schema extensions",
        "description": "Microsoft has extended JSON Schema 7.0 as part of VSCode. It would be great for Microsoft to publish a \"VSCode JSON Schema\" so that we can easily find all the available elements for our JSON Schemas.\r\n\r\nExample extension that Microsoft did:\r\n`defaultSnippets` as mentioned at the bottom of https://code.visualstudio.com/Docs/languages/json",
        "createdAt": "2019-09-18 03:39:50",
        "state": "open",
        "number": 81078
    },
    {
        "title": "SCM: Display current line length for source control commit message input",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nHI! I care a lot for 50/72 commit message rule and I depend a lot on VSCode's source control's commit message input.\r\nThe problem is that I always start to write, and I wait for the warning to appear, then if I'm in title, (first line), I try to change what I intended to say to contain only 50 chars; and if I'm in description (lines after the break after the first line) I write as much as I get the warning, and then I go back to before the current word and insert a new line there (press enter). This pattern is becoming so annoying. I want to observe how much I'm writing on the current line. A screen shot of what I have in mind:\r\n\r\n![Screenshot from 2019-09-17 11-14-52](https://user-images.githubusercontent.com/5755214/65018035-614a4300-d93d-11e9-9db9-7839d97c67d3.png)\r\n\r\n(note the small number in bottom right corner of the screen)",
        "createdAt": "2019-09-17 06:52:44",
        "state": "open",
        "number": 81029
    },
    {
        "title": "Enter in the middle of a line comment should create a new line comment",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nI'm using JavaScript but this is likely not language-specific:\r\n\r\n1. Start typing a comment\r\n`    // something like, if ( true ) `\r\n2. Type an opening brace \r\n`    // something like, if ( true ) {`\r\n3. Editor will insert a closing brace, cursor will be between braces\r\n`    // something like, if ( true ) {|}`\r\n4. Hit Enter / Return\r\n\r\n**Expected:**\r\n   Newline will automatically be in a commented-out line\r\n```\r\n    // something like, if ( true ) {\r\n    // }\r\n```\r\n**Actual:**\r\n   The comment is treated like code and an extra newline is inserted, introducing a hanging end-brace:\r\n```\r\n   // something like, if ( true ) {\r\n       \r\n   }      \r\n```\r\n\r\nVS Code version: Code 1.38.0 (3db7e09f3b61f915d03bbfa58e258d6eee843f35, 2019-09-03T21:47:00.464Z)\r\nOS version: Darwin x64 17.7.0\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz (8 x 2200)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: enabled<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_deferred_display_list: disabled_off<br>skia_renderer: disabled_off<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>viz_display_compositor: disabled_off<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|2, 2, 2|\r\n|Memory (System)|16.00GB (3.65GB free)|\r\n|Process Argv|-psn_0_3810210|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (8)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-css-formatter|aes|1.0.1\r\nxml|Dot|2.5.0\r\nmssql|ms-|1.6.0\r\ndebugger-for-chrome|msj|4.11.7\r\nvscode-code-outline|pat|0.2.1\r\njava|red|0.48.0\r\nvscodeintellicode|Vis|1.1.9\r\nvscode-java-debug|vsc|0.21.0\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-09-16 21:27:24",
        "state": "open",
        "number": 81010
    },
    {
        "title": "Reference / schema loading problem behind kerberos authenticated proxy",
        "description": "Hello,\r\n\r\nI have problem loadind JSON references / schemas behind corporate kerberos authenticated proxy.\r\n\r\nVS Code reports:\r\n\r\nProblems loading reference 'https://schemastore.azurewebsites.net/schemas/json/tsconfig.json'\r\nUnable to load schema from 'https://schemastore.azurewebsites.net/schemas/json/tsconfig.json'\r\n\r\nor\r\n\r\nUnable to load schema from 'http://json.schemastore.org/tslint'\r\n\r\n\r\nFollowed by the HTML error message returned by the proxy server itself: Authentication required\r\n\r\nThe rest of features of VSC are working fine (extension/market place browsing) so I think that some specific method is used to load references from the web and the Chromium proxy settings are not used.\r\n\r\nPlease note there is not fallback to NTLM or Basic authentication allowed on the proxy server, just kerberos.\r\n\r\nVersion: 1.38.1 (system/user),\r\nI notice the problem is there at least since 1.26.\r\n\r\nI didn't find any other related issue and I think this one is not covered by #79044 or by #74991.\r\n",
        "createdAt": "2019-09-16 18:04:36",
        "state": "open",
        "number": 81001
    },
    {
        "title": "Can't turn off IntelliSense explain mode - Poor UX",
        "description": "When I accidentally enter IntelliSense explain mode I'm unable to leave it unless I reload the workspace.\r\n\r\nRegarding to [this](https://github.com/microsoft/vscode/issues/75500#issuecomment-507172728) I should be able to toggle back with `Ctrl/Cmd+/` but it doesn't work. Maybe it's related to my German keyboard layout.\r\n\r\nNeither can I find a command in the command palette to toggle back nor can I find a setting to turn it off permanently.\r\nI think this feature should be disabled by default. Or it should at least provide a hint on how to go back to standard IntelliSense.\r\n\r\n",
        "createdAt": "2019-09-16 12:48:33",
        "state": "open",
        "number": 80983
    },
    {
        "title": "Add a system wide settings.json",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI think a system wide `settings.json` could be very useful. When code starts, it should load system wide settings, then user settings, and at the end workspace settings. So that workspace settings will have priority over user settings, and those over system settings.\r\n\r\nI think this could be useful for large deployments or multi-user systems managed by an administrator. In our case, we are trying to deploy vscode for around 100 computers and +1000 users for a University, in both Windows and GNU/Linux (Debian). I think a file in `/etc/` for windows could be great, and something similar for Windows.",
        "createdAt": "2019-09-16 09:55:43",
        "state": "open",
        "number": 80972
    },
    {
        "title": "Default Output Colorizer",
        "description": "The [Output Colorizer](https://marketplace.visualstudio.com/items?itemName=IBM.output-colorizer) extension adds syntax highlighting to the output panel.  However, other extensions (e.g. Code runner) can cause conflicts, removing the syntax highlighting.\r\n\r\nApparently [this is a limitation with VSCode](https://github.com/IBM-Cloud/vscode-log-output-colorizer/issues/19#issuecomment-392048256) itself. I'm not exactly sure what needs to be done here to get extensions to play nicely. I suppose we would need to be able to select a default colorizer?",
        "createdAt": "2019-09-15 18:54:31",
        "state": "open",
        "number": 80947
    },
    {
        "title": "MFA support for encrypting credentials in extensions (SSH accounts, etc.)",
        "description": "It would be pretty sweet if VSCode had a mechanism for extensions to encrypt saved credentials, using whatever the user's platform supports - Hello, Hello for Business, smart cards, FIDO, etc.",
        "createdAt": "2019-09-14 19:14:05",
        "state": "open",
        "number": 80929
    },
    {
        "title": "Ability to disable language features provided by extensions",
        "description": "Some languages are supported by multiple extensions that provide an overlapping set of language features.\r\n\r\nSeems like much effort has been done to support this use case. For some features, the provider's 'score' is used to select which provider to use (e.g. for formatting and syntax highlighting). For other features, results from all providers are merged (e.g. completion, hover, definition, problems, symbols).\r\n\r\nMy problem is that in some cases I would like to choose which features to use from which extension. For example, I have three extensions that provide overlapping language features for Python: Microsoft's Python, pyright, and mypy extensions. \r\n * For hovers, I only like the ones provided by the Python extension (it supports showing documentation while the others don't). Seeing hovers from all three extensions is distracting.\r\n * For error reporting, I would like to see only the ones from mypy. It is possible to filter the problems view, but it's annoying to filter every time, and filtering just for 'mypy' will ignore errors from other languages I have in my workspace. Without filtering, many duplicate errors are shown.\r\n * For 'go to definition' and code completion, I would like to use only pyright. By default, results from all three extensions are shown \u2013 this requires multiple clicks for every 'go to definition' call because results slightly differ between extensions, so they are shown side by side instead of immediately jumping to the definition.\r\n\r\nOne solution is to ask every extension author to provide options for disabling some features. This is already done by some extensions but AFAIK not by most. It can be solved centrally by allowing users to selectively disable language features provided by extensions. Something similar has [already been implemented](https://github.com/microsoft/vscode/issues/41882) for formatting, using a dedicated setting. I think it should be extended to other language features. \r\n\r\nSomething like:\r\n```json\r\n\"languageFeatures.[extension].goToDefinition.enabled\": false\r\n```\r\n\r\nBy default all features from all extensions would be enabled.",
        "createdAt": "2019-09-13 19:45:17",
        "state": "open",
        "number": 80889
    },
    {
        "title": "Support QuickDiffProvider without SourceControl",
        "description": "I have a requirement to show a quick diff on a document from a custom TextDocumentContentProvider. Currently the only way to do this is to create a new SourceControl which also affects the Source Control UI.\r\n\r\nIs it possible to expose a quickDiffProvider property on either a document or editor level so its possible to use without affecting the Source Control UI.",
        "createdAt": "2019-09-13 14:59:53",
        "state": "open",
        "number": 80870
    },
    {
        "title": "\"editor font zoom\" does not persist",
        "description": "- VSCode Version:1.38\r\n- OS Version:Win 10\r\n\r\n\"Editor font zoom in\" and \"out\" does not persist.  This is inconsistent with \"view zoom\" which does persist.  I understand that this is basically a shortcut to the \"editor.fontSize\" setting, but in that same vein, view zoom is just a shortcut to change the \"window.zoom level\" setting\r\n\r\nDuplicate\r\n1. \"editor: font zoom out\"\r\n2. close & restart\r\n3. font will have reverted pre-zoom size\r\n\r\nEdit: updated title and text to reflect correct command \"editor font zoom in/out\"",
        "createdAt": "2019-09-12 20:49:39",
        "state": "open",
        "number": 80820
    },
    {
        "title": "Windows Information Protection support as enlightened app",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nAdd support as enlightened app for Windows Information Protection on Windows 10 computers",
        "createdAt": "2019-09-11 12:08:16",
        "state": "open",
        "number": 80706
    },
    {
        "title": "removeSecondaryCursors should leave the cursor added last",
        "description": "`removeSecondaryCursors` (i.e. clicking \"Escape\" after selecting multiple cursors), should leave the cursor which was added last. This allows fast searching for other uses in the file (`ctrl-d ctrl-d esc` as opposed to `ctrl-d ctrl-c ctrl-f ctrl-v enter esc`).",
        "createdAt": "2019-09-10 02:31:57",
        "state": "open",
        "number": 80607
    },
    {
        "title": "Fix #20768: Don't seed search without selection",
        "description": "Fixes #20768. This makes CMD/CTRL+F consistent with other editors/IDEs (actually, almost all software on all platforms).\r\n\r\nWithout any text selected, the current behavior (with `seedSearchStringFromSelection` enabled) is to search for whatever word is under the cursor. This is unexpected because all (>99%) other software simply keeps the search field unchanged, so you can continue searching. Try it in some JetBrains IDE, Eclipse, NetBeans, Sublime, Notepad++, Firefox or Chrome in an input field, MS Word, or any other popular software. Nobody does that except for VS Code, so it breaks common user expectations and makes a very common use-case annoying (i.e. continuing from the last search).\r\n\r\nThat's why I have fully removed the old behavior. If you want to search for the word under the cursor you can simply select it before pressing CMD/CTRL+F like in almost every other application.",
        "createdAt": "2019-09-06 11:16:36",
        "state": "open",
        "number": 80477
    },
    {
        "title": "Use the launch configuration name as the terminal name",
        "description": "Currently when running or debugging a launch target, the default terminal names are generic and don't reflect the launch target.  \r\n\r\nThis makes it hard to know which terminal relates to which launch, particularly when you have 3 or more launches running.\r\n\r\nExample\r\n\r\na Java launch target named `Debug (Launch) - webapp` results in a terminal named `2: Java Debug Console`  .  I suggest that the terminal name becomes `Debug (Launch) - webapp` or alternatively support an override field in the launch.json to configure per launch target.\r\n\r\n",
        "createdAt": "2019-09-06 01:40:14",
        "state": "open",
        "number": 80442
    },
    {
        "title": "API: Allow extensions to provide file watching on file:// scheme",
        "description": "Context:\r\nI am working with a network-based filesystem mounted locally that does not support file watching through the builtin `diskFileSystemProvider`. Therefore I would like to provide watch() functionality through my extension.\r\n\r\nCurrently the only way an extension can provide file watching capability is through the FileSystemProvider API. Today, attempting to add a FileSystemProvider for the file:// URI scheme leads to an error: `a provider for the scheme 'file' is already registered`.\r\n\r\nProposal:\r\nI can picture a couple of ways to enable my use case:\r\n1) (I prefer this one) Lift the FileSystemProvider's restriction on the 'file' scheme. This would involve removing 'file' from the list of pre-registered schemas [here](https://github.com/microsoft/vscode/blob/b283b2978139ea12cee702164bd991f055e3fb92/src/vs/workbench/api/common/extHostFileSystem.ts#L168) on extHostFileSystem.ts. I believe the provider itself is registered  at `electron-main/app.ts`:\r\nhttps://github.com/microsoft/vscode/blob/b283b2978139ea12cee702164bd991f055e3fb92/src/vs/code/electron-main/app.ts#L430-L431\r\n\r\n2) Add a new 'registerFileWatcher' proposed API, similar to the existing textSearch/fileSearch proposals, to enable an extension to solely provide the file watching capability for a given scheme.\r\n\r\nTradeoffs:\r\nApproach 1 offers the most generic approach that I believe would be useful to other extension authors as well. However it requires an extension to implement all FileSystemProvider methods, even if it only needs to replace default behavior for a subset of them. It also could lead to the possibility of extensions conflicting and fighting to register the 'file' provider. Approach 2 lessens these downsides but it leads to ambiguity in resolving the watch capability, since it could be provided in 2 places in the API.\r\n\r\ncc @aeschli \r\n",
        "createdAt": "2019-09-05 20:38:51",
        "state": "open",
        "number": 80431
    },
    {
        "title": "Support file language detection by extension code",
        "description": "We've seen requests here on the topic of extension/plugin determination of language modes. They all seem to come back to a focus on known markers, whether file extensions, first lines or a similar premble, or the value of a schema spec. Ref other topics #10915, #11838, #13782, #73424, #53350, #69868. All of these discussions include the notion of an open API that allows an extension to determine the language for a file. But they all seem to conclude with a focus on specific languages, whether JS, JSON, PHP, or XML implementations, and the idea that new options will need to conform to existing processes.\r\n\r\nI'm a member of a non-relational DBMS industry that's been around for over 50 years, using several dialects of the original Dartmouth BASIC. Developers in this industry are slowly adopting VSCode for maintaining code and other documents and features of the environment. Pre-dating DOS and Unix, we have never required extensions on filenames. The first line of a program can be any valid statement, so using line 1 as a marker isn't valid either.\r\n\r\nI recommend merging all of the related repo issues and resolving them with a single, simple change:\r\n1) Run the routine that processes file.associations, as usual.\r\n2) Invoke a new hook which gives a registered extension an opportunity to reset the determined language. Might we be talking about a single line of code in the VSCode core?\r\n3) Then continue as normal to invoke the module that's registered to handle the language.\r\n\r\nThe extension chosen by the user will be FOSS, maintained, installed, and replaced like any other. No one will own the process for language mode selection anymore, and all of these discussions about new ways to choose the language mode go away.\r\n\r\nLike editor.defaultFormatter, there can only be one of these extensions registered. For users with a need for multiple extensions that determine the language mode (last one wins), a mechanism can be designed in the field to allow a cascade of handling, similar to the way linters process sets of rules. Or one extension might attempt to handle all such logic. Again, this is a detail to be shaken out in the field.\r\n\r\nIf required, I'll get into the code and attempt to submit a PR, but since others here are already familiar with this code, and since this one change will resolve a number of issues, I'm hoping that won't be necessary. :)\r\n\r\nIn summary, please don't hardcode rules as a way of providing more freedom to specific groups. We've all recognized the pattern in the referenced requests, and the proposals so far just defer the problem until a new request comes in. The solution to accommodating a wide variety of requests is to call out to external, user-provided functions that make choices which aren't possible with a general-purpose tool. Thanks.",
        "createdAt": "2019-09-04 08:03:19",
        "state": "open",
        "number": 80303
    },
    {
        "title": "Comment buttons/actions too far away on a wide screen",
        "description": "Thread-/comment-level commands and context buttons appear on the far right side of the comment. On a wide screen, this puts the buttons very far away from the context, making it difficult to use / inaccessible. Some kind of max-width or being resizable would be nice.\r\n\r\n<img width=\"1878\" alt=\"comment_api_too_wide\" src=\"https://user-images.githubusercontent.com/1762690/64196814-81f0a400-ce39-11e9-9712-a955b6650efe.png\">\r\nNotice that \"Reply\" and \"Unresolve\" are very far to the right. This is from a laptop, but the effect can be much worse depending on your monitor.\r\n",
        "createdAt": "2019-09-03 18:01:56",
        "state": "open",
        "number": 80276
    },
    {
        "title": "Dependent commands within launch.json",
        "description": "Enable a scenario like this one: \r\n```json\r\n{\r\n    \"name\": \".NET Core Docker Attach\",\r\n    \"type\": \"coreclr\",\r\n    \"request\": \"attach\",\r\n    \"processId\": \"${command:2:pickRemoteProcess}\",\r\n    \"pipeTransport\": {\r\n      \"pipeProgram\": \"docker\",\r\n      \"pipeArgs\": [\"exec\", \"-i\", \"${command:1:pickDockerContainer}\"],\r\n      \"debuggerPath\": \"/vsdbg/vsdbg\",\r\n      \"pipeCwd\": \"${workspaceRoot}\",\r\n      \"quoteArgs\": false\r\n    }\r\n}\r\n```\r\n\r\nThe ```pickRemoteProcess``` command uses the launch task config, but in this case ```pickDockerContainer``` requires to be fulfilled before ```pickRemoteProcess``` is invoked. The variable substitution syntax should allow for an order of execution and should fulfill (or update) configuration each time a substitution is handled.\r\n\r\nWould enable https://github.com/microsoft/vscode-docker/issues/1235 to work. \r\n",
        "createdAt": "2019-09-02 14:01:49",
        "state": "open",
        "number": 80219
    },
    {
        "title": "[Feature request] Persist find/replace history",
        "description": "Now, when You close VSCode, history for find/replace is lost.\r\nI would like to have persistent history for find/replace field.\r\n\r\n#### How to reproduce:\r\n- Open VSCode and some file, <kbd>CTRL+F</kbd> to find something, enter some text to find.\r\n- Close VSCode.\r\n- Re-open VSCode.\r\n- <kbd>CTRL+F</kbd> and try to use history keys to find history, but there is none...\r\n\r\nEdit: This is not similar to #66174 or #61918. It is about saving history somewhere to persist between run/close program.",
        "createdAt": "2019-09-02 13:45:25",
        "state": "open",
        "number": 80218
    },
    {
        "title": "Add chords to \"show same keybindings\"",
        "description": "Currently, to find conflicts caused by a chord, you need to search for the first sequence, without any quotes. This works, but since the search is global across all four columns of information for each keyboard rule, it brings up a variety of commands that you're not interested in. Additionally, it's probably not an obvious way to find conflicts for most VSCode users.\r\n\r\nI wonder if \"Show Same Keybindings\" should not only show the exact same keybindings, but also any keybindings where the first sequence of a chord matches. Alternatively, there could be a second option added to the context menu that does this.",
        "createdAt": "2019-09-01 19:01:43",
        "state": "open",
        "number": 80181
    },
    {
        "title": "VS-Code recommends PowerShell extension when 'PowerShell Preview' extension is installed",
        "description": "This is a follow up from the PR comment below of PR #77573 as changes need to be made outside this repository. cc @sandy081 @TylerLeonhardt \r\nhttps://github.com/microsoft/vscode/pull/77573#issuecomment-513157642\r\n",
        "createdAt": "2019-09-01 16:36:36",
        "state": "open",
        "number": 80178
    },
    {
        "title": "serverReadyAction debugWithEdge (chromium) missing",
        "description": "I tried the new serverReadyAction to start debugging a \"dotnet core + angular SPA\" but with the parameter \"action\": \"openExternally\" I did not find a way to debug angular typesctipt's code till I used these settings:\r\n\r\n\"action\": \"debugWithChrome\",\r\n\"webRoot\": \"${workspaceFolder}/ClientApp\"\r\n\r\n![image](https://user-images.githubusercontent.com/2786682/64078085-e47d5f00-ccd6-11e9-9d19-221231ab4b53.png)\r\n\r\nand I need to install Chrome again.\r\n\r\nPlease add full support to debug with Edge Chromium",
        "createdAt": "2019-09-01 14:38:39",
        "state": "open",
        "number": 80177
    },
    {
        "title": "Convert inline comment to block comment, and vice-versa",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nI have several JS lines commented out, like so:\r\n\r\n```js\r\n// This\r\n// is\r\n// a\r\n// test\r\n```\r\n\r\nWhen I select these lines, there should be a VSC command to convert the inline comments to one block comment. So that the result is:\r\n\r\n```js\r\n/**\r\n * This\r\n * is\r\n * a\r\n * test\r\n */\r\n```\r\n\r\nAnd then the opposite can be allowed, too, so that when I select the block comment, I can run a command to convert them to several inline comments.\r\n\r\nVS Code version: Code 1.37.1 (f06011ac164ae4dc8e753a3fe7f9549844d15e35, 2019-08-15T16:16:34.800Z)\r\nOS version: Darwin x64 18.7.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-08-31 19:46:53",
        "state": "open",
        "number": 80155
    },
    {
        "title": "Find in selection: Don't expand a multiline find scope to line start/end (#80008)",
        "description": "Re #80008.\r\n\r\n## Previous behavior\r\nWhen we had a multiline selection, it would automatically be expanded to the start of the first line / end of the last line before a \"Find in selection\" was attempted (same goes for a Replace).\r\n\r\nThis behavior may lead to confusion as to why results _outside_ the specified selection are found/replaced (imho, the use case presented in #80008 is entirely reasonable).\r\n\r\n## New behavior\r\nThe selection is taken as-is, without expansion. Thus, only results inside the selection range are found/replaced.\r\n\r\n## Notes\r\nThe previous behavior was introduced in https://github.com/microsoft/vscode/commit/1f0afd63edd445b74203a0bd445289e52fce04cf.\r\nMaybe @rebornix can take a look and chime in as to why this change was made in the first place?\r\nIn my testing, I have not come across any issues with this change, but I may miss something here.",
        "createdAt": "2019-08-28 22:48:01",
        "state": "open",
        "number": 80021
    },
    {
        "title": "Find in Selection expands to whole line",
        "description": "- VSCode Version: 1.37.1\r\n- OS Version: Windows 10\r\n\r\n**Steps to Reproduce:**\r\n\r\n1. Select text multiline (start of middle of line through end of middle of line)\r\n2. Do a find and replace on selection only\r\n\r\n**Expected Output:**\r\n\r\nThe text in only the selection gets replaced\r\n\r\n**Actual Output:**\r\n\r\nThe text in the selection is replaced along with the rest of the line outside of the selection.\r\n\r\n![Replace outside of selection](https://user-images.githubusercontent.com/1571806/63884254-7154af80-c99b-11e9-9de3-547847db3fe6.gif)\r\n",
        "createdAt": "2019-08-28 18:55:27",
        "state": "open",
        "number": 80008
    },
    {
        "title": "Perform preLaunchTask in same terminal",
        "description": "Is it already possible to perform the prelaunch task in the same terminal as in which the debugger is started? I am creating a ROS package, and I would like to source the `devel/setup.bash` file before debugging my python node. I currently created the following `launch.json` and 'tasks.json` files:\r\n\r\n**Launch.json**\r\n```\r\n{\r\n    // Use IntelliSense to learn about possible attributes.\r\n    // Hover to view descriptions of existing attributes.\r\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\r\n    \"version\": \"0.2.0\",\r\n    \"configurations\": [\r\n        {\r\n            \"name\": \"Python Experimental: Current File (Integrated Terminal)\",\r\n            \"type\": \"python\",\r\n            \"request\": \"launch\",\r\n            \"program\": \"${file}\",\r\n            \"console\": \"integratedTerminal\",\r\n            \"preLaunchTask\": \"prerun\"\r\n        },\r\n    ]\r\n```\r\n\r\n**Tasks.json**\r\n```\r\n{\r\n    \"version\": \"2.0.0\",\r\n    \"tasks\": [\r\n        {\r\n            \"label\": \"prerun\",\r\n            \"type\": \"shell\",\r\n            \"command\": \"source devel/setup.bash\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nI'm not 100% sure if this feature request belongs on this repository or the [python-extension repository](https://github.com/Microsoft/vscode-python). Feel free to correct me so I can move the issue.\r\n\r\n**Related questions**\r\n- [can-prelaunchtask-and-launch-start-within-the-same-terminal-in-vscode](https://stackoverflow.com/questions/57518183/can-prelaunchtask-and-launch-start-within-the-same-terminal-in-vscode)",
        "createdAt": "2019-08-27 18:02:36",
        "state": "open",
        "number": 79932
    },
    {
        "title": "Non-WSL paths should be linkified in WSL terminals",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.37.1\r\n- OS Version: Win10\r\n\r\nSteps to Reproduce:\r\n\r\n1. start WSL in a VS Code terminal\r\n2. echo \"C:\\\\a\\\\b\\\\c.txt:14\"\r\n3. Ctrl+Mouse hover over text, and it won't be noticed by VS Code \r\n\r\n-- steps to reproduce are incorrect. The text probably needs to go through standard error.\r\n\r\nAI initially started VS Code from the WSL command line. Option to reopen at startup look like \"Abc [WSL] /c\"\r\n\r\nI did just see this working via Start/search bar/code. \r\n\r\nIf you do the same from cmd.exe VS Code terminal window, VS Code will work as expected. Note: a path like /c/a/b/c.txt:14 will be recognised. The problem is that certain toolchains still know they're on windows, and will display errors with a back-slash+c: path style. It is nice to be able to work 100% in bash for consistency with target servers.\r\n\r\nIt's looking like only people using https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl will come across this issue.\r\n\r\n... if you run cmd.exe from VS Code session initiated by WSL, and then fire off said toolchain, path patterns still fail to be recognised.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes, but WSL compatibility caused the issue. ie. (guessing again) VS Code starts stores config / session / temporary data using subsystem conventions (in this case Ubuntu). I like that. It's just that this assumption is incorrect in the case above (a toolchain runs on WSL but errs towards Windows path conventions on standard error, 'cause it knows). \r\n",
        "createdAt": "2019-08-27 10:14:51",
        "state": "open",
        "number": 79881
    },
    {
        "title": "color picker doesn't update color in document immediately",
        "description": "- VSCode Version: 1.38.0-insider\r\n- OS Version: Ubuntu 18.10\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open Color picker \r\n2. Pick a color\r\n3. Text document only changes on mouseup but not while dragging\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2019-08-25 17:45:57",
        "state": "open",
        "number": 79769
    },
    {
        "title": "Change displayed language after unistalling it.",
        "description": "After uninstalling the language pack you are using, VS Code should show Command Palette to change displayed language.\r\n\r\nSorry for my poor English.",
        "createdAt": "2019-08-24 13:19:33",
        "state": "open",
        "number": 79741
    },
    {
        "title": "Preserve case replace not working well with regex",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nI was trying to use the new preserve case search/replace to preserve plural as well, but it seems there is a conflict between the two features:\r\n\r\nFile:\r\n```\r\nCat, cat, CAT. Cats, cats, CATS!\r\n```\r\n\r\nSearch: `cat(s)?`\r\nReplace all with: `dog$1`\r\n\r\nActual result:\r\n```\r\ndog, dog, dog. dogs, dogs, dogS!\r\n```\r\n\r\nOnly the `$1` case has been preserved here, while the rest of the replaces strings's case has been lost.\r\n\r\nExpected result:\r\n```\r\nDog, dog, DOG. Dogs, dogs, DOGS!\r\n```\r\n\r\nVS Code version: Code 1.37.1 (f06011ac164ae4dc8e753a3fe7f9549844d15e35, 2019-08-15T16:17:55.855Z)\r\nOS version: Windows_NT x64 10.0.18362\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-08-23 15:42:45",
        "state": "open",
        "number": 79713
    },
    {
        "title": "[Feature Request] Skip specific updates",
        "description": "#### BACKROUND\r\nWhen an extension is updated, I am notified in the sidebar. I always check the changelog before clicking \"update\".\r\n\r\nToo often I will waste time by updating to a newer version, which is buggy. So I often skip updates if they are not bugfixes. I want to code, not waste time.\r\n\r\n#### PROBLEM\r\nBut I still see the update notification, which makes it hard to remember which I ignored and which I should investigate.\r\n\r\n#### SOLUTION\r\nSo it would be nice to have a button called \"Ignore update until next version\", and if I click it, that update will be hidden, until the next version.",
        "createdAt": "2019-08-23 07:48:37",
        "state": "open",
        "number": 79689
    },
    {
        "title": "Middle click copy paste cross platform",
        "description": "I saw ways to disable click-middle copy-paste under linux, but I was looking for the possibility to emulate it under platforms like windows.\r\n\r\nThe feature would enable a click-middle copy paste behavior under platforms who don't support it natively, like [jedit](www.jedit.org) does...\r\n\r\n1. Any (newly) selected text will be placed into the clipboard\r\n2. A middle-click action will insert the text content from the clipboard into the editor (or terminal) and place the carret at the end of the pasted area\r\n3. Any subsequent middle-click should continue to paste the clipboard content\r\n\r\n",
        "createdAt": "2019-08-23 06:59:22",
        "state": "open",
        "number": 79684
    },
    {
        "title": "Extension configuration order",
        "description": "If I'm not mistaken, older versions of VSCode displayed configuration settings in the order they were specified in `package.json`. This is no longer the case and probably related to the switch to a visual config editor.\r\n\r\nHowever, ordering configuration settings alphabetically does not always make sense. I prefer grouping related properties and to logically guide a user through them.\r\n\r\n**Example:**\r\n\r\n```json\r\n\"configuration\": {\r\n  ...\r\n  \"properties\": {\r\n    \"nsis.pathToMakensis\": {\r\n      \"type\": \"string\",\r\n      \"default\": null,\r\n      \"description\": \"Specify the path to makensis\"\r\n    },\r\n    \"nsis.compilerArguments\": {\r\n      \"type\": \"array\",\r\n      \"items\": {\r\n        \"type\": \"string\"\r\n      },\r\n      \"default\": [],\r\n      \"description\": \"Specify custom compiler arguments\"\r\n    },\r\n    \"nsis.alwaysOpenBuildTask\": {\r\n      \"type\": \"boolean\",\r\n      \"default\": true,\r\n      \"description\": \"Specify whether to open the newly created build task\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThese options are now displayed in the following order:\r\n\r\n1. Always Open Build Task\r\n2. Compiler Arguments\r\n3. Path To Makensis\r\n\r\nSpecifying `pathToMakensis` is the most important setting in this example. Since the `compilerArguments` setting depends on a path to be specified, it would make more sense to have it after the `pathToMakensis` setting. Also in this example, there is the `alwaysOpenBuildTask` setting, which is a setting most people won't care about. Being less important, it makes no sense to have it displayed first.\r\n\r\nConfiguration settings for the Atom editor have a very similar format to that of VSCode. They allow specifying the `order` in which the settings appear.\r\n\r\n**Example:**\r\n\r\n```json\r\n\"configuration\": {\r\n  ...\r\n  \"properties\": {\r\n    \"nsis.pathToMakensis\": {\r\n      \"type\": \"string\",\r\n      \"default\": null,\r\n      \"description\": \"Specify the path to makensis\",\r\n      \"order\": 1\r\n    },\r\n    \"nsis.compilerArguments\": {\r\n      \"type\": \"array\",\r\n      \"items\": {\r\n        \"type\": \"string\"\r\n      },\r\n      \"default\": [],\r\n      \"description\": \"Specify custom compiler arguments\",\r\n      \"order\": 2\r\n    },\r\n    \"nsis.alwaysOpenBuildTask\": {\r\n      \"type\": \"boolean\",\r\n      \"default\": true,\r\n      \"description\": \"Specify whether to open the newly created build task\",\r\n      \"order\": 3\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIt would be useful, if VSCode had the same to specify the order!",
        "createdAt": "2019-08-22 20:11:32",
        "state": "open",
        "number": 79666
    },
    {
        "title": "Settings Need Multiline TextBox",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nThis is very similar to #39969, but for the new Settings UI.\r\n\r\nI use an extension (`vscode-journal`) that allows you to define a template (setting `journal.tpl-entry`) for creating new files, and these require the use of `\\n` characters to specify new lines, however the Settings UI won't let me enter `\\n` (it gets escaped), let alone an actual newline character.\r\n\r\nVS Code version: Code 1.37.1 (f06011ac164ae4dc8e753a3fe7f9549844d15e35, 2019-08-15T16:17:55.855Z)\r\nOS version: Windows_NT x64 10.0.17763\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-8650U CPU @ 1.90GHz (8 x 2112)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>oop_rasterization: disabled_off<br>protected_video_decode: enabled<br>rasterization: enabled<br>skia_deferred_display_list: disabled_off<br>skia_renderer: disabled_off<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>viz_display_compositor: disabled_off<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|15.81GB (5.67GB free)|\r\n|Process Argv|.|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (25)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nwhitespace-plus|dav|0.0.5\r\nxml|Dot|2.5.0\r\nEditorConfig|Edi|0.13.0\r\nprettier-vscode|esb|1.9.0\r\nmarkdown-table-formatter|fcr|1.4.3\r\ngc-excelviewer|Gra|2.1.32\r\nvscode-journal-view|Gru|0.0.25\r\nvscode-guid|hea|1.4.15\r\nvscode-peacock|joh|3.1.2\r\njson-escaper|jos|1.1.0\r\nchat|kar|0.21.0\r\nvscode-language-babel|mgm|0.0.23\r\nvscode-docker|ms-|0.7.0\r\nremote-wsl|ms-|0.39.2\r\ncsharp|ms-|1.21.0\r\npowershell|ms-|2019.5.0\r\nvsliveshare|ms-|1.0.721\r\nvsliveshare-audio|ms-|0.1.64\r\nvsliveshare-pack|ms-|0.3.3\r\ndebugger-for-chrome|msj|4.11.7\r\ndebugger-for-edge|msj|1.0.11\r\nvscode-journal|paj|0.9.1\r\nvscode-redis|vit|1.2.0\r\nmarkdown-pdf|yza|1.2.0\r\nmarkdown-all-in-one|yzh|2.4.2\r\n\r\n(1 theme extensions excluded)\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-08-21 12:53:48",
        "state": "open",
        "number": 79571
    },
    {
        "title": "Feature Request: Allow passing args inside entries of Npm Scripts Explorer",
        "description": "<!-- Describe the feature you'd like. -->\r\nIf you have an npm script that requires passing arguments to the binary being ran, normally the way you would pass args would be:\r\n` npm run script -- -a -b `\r\nHowever, running scripts through Npm Scripts Explorer would yield an error, since additional arguments are missing.\r\n\r\n## Suggestion\r\nMaybe we can have an additional action when right-clicking a script entry that will allow us to append args.\r\n![npm_args](https://user-images.githubusercontent.com/16144679/63351481-56e05d80-c32d-11e9-8060-ca257f16bc56.png)\r\n",
        "createdAt": "2019-08-20 13:32:38",
        "state": "open",
        "number": 79509
    },
    {
        "title": "Context menu for document link items",
        "description": "Currently there's no special context menu for document links:\r\n\r\n![image](https://user-images.githubusercontent.com/4033249/63289950-2ccb6480-c275-11e9-9258-2c10819bb99c.png)\r\n\r\nI think commands like \"Reveal in Finder/Explorer\", \"Copy path\", \"Copy absolute path\" would be very useful.",
        "createdAt": "2019-08-19 18:33:57",
        "state": "open",
        "number": 79464
    },
    {
        "title": "[css] code completion for gradient functions",
        "description": "There is no code hint when VSCode edits the `linear-gradient`, `radial-gradient` function of the CSS `background-image` property.\r\n\r\n- VSCode Version: 1.36.1\r\n- OS Version: Windows 10\r\n\r\nReproduce steps:\r\n\r\n1. Open a CSS file\r\n2. Edit the `background-image` property and write the `linear-gradient` function.\r\n3. Write code in parentheses only highlights without code hints\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\n![2019-08-19-17](https://user-images.githubusercontent.com/24560368/63252735-ee4c9e80-c2a2-11e9-97d5-a716bdecdf0e.gif)\r\n\r\n---\r\n\r\nThe above is Google Translate, the original is as follows\r\n\r\n# CSS background-image \u5c5e\u6027\u4ee3\u7801\u63d0\u793a\u6709\u70b9\u95ee\u9898\r\n\r\n\u5728 VSCode \u7f16\u8f91 CSS `background-image` \u5c5e\u6027\u7684 `linear-gradient`, `radial-gradient` \u51fd\u6570\u65f6\uff0c\u6ca1\u6709\u4efb\u4f55\u4ee3\u7801\u63d0\u793a\u3002\r\n\r\n- VSCode Version: 1.36.1\r\n- OS Version: Windows 10\r\n\r\n\u91cd\u73b0\u6b65\u9aa4:\r\n\r\n1. \u6253\u5f00\u4e00\u4e2a CSS \u6587\u4ef6\r\n2. \u7f16\u8f91 `background-image` \u5c5e\u6027\uff0c\u5199\u4e0a `linear-gradient` \u51fd\u6570\r\n3. \u5728\u62ec\u53f7\u5185\u5199\u4ee3\u7801\u53ea\u6709\u9ad8\u4eae\u800c\u6ca1\u6709\u4ee3\u7801\u63d0\u793a",
        "createdAt": "2019-08-19 09:03:16",
        "state": "open",
        "number": 79439
    },
    {
        "title": "Run terminal shell as admin",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nIs it possible that one can run a terminal as admin in the intergrated terminal and if one has done that then addons sutch as blender developer actuarly run as admin as well\r\n\r\nVS Code version: Code 1.37.1 (f06011ac164ae4dc8e753a3fe7f9549844d15e35, 2019-08-15T16:17:55.855Z)\r\nOS version: Windows_NT x64 10.0.17763\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-08-18 15:45:21",
        "state": "open",
        "number": 79397
    },
    {
        "title": "[html] Add support for `html.format.wrap_attributes_indent_size`",
        "description": "js-beautify has a config field for wrap_attributes_indent_size that doesn't appear to be supported in vscode.\r\n\r\nit seems it was added at one point and then removed?:\r\nhttps://github.com/microsoft/vscode/commit/9d3307317ef1541aec4ae00ecc3604c7d1173000",
        "createdAt": "2019-08-16 18:58:46",
        "state": "open",
        "number": 79334
    },
    {
        "title": "unlimited keyboard shortcut lengths",
        "description": "When setting up keyboard shortcuts, you are limited by a short pattern. it would be cool if you could set up your own combinations regardless of length (ctrl+alt+f s shift+alt+q). and that patterns recognize Enter as a key. ",
        "createdAt": "2019-08-16 18:49:10",
        "state": "open",
        "number": 79331
    },
    {
        "title": "Allow attaching/detaching from the debug targets",
        "description": "This request asks for a lightweight way of attaching/detaching the debugger UI to/from a debug target (in contrast to a heavyweight launch/attach that starts and ends a debug session).\r\n\r\nIf the debugger UI is detached (in the lightweight way), the debug session will continue to run and the debugger is still in control and can terminate the debuggee, but the debugger will not stop on breakpoints or exceptions because no debugging takes place.\r\n\r\nIn theory this could be implemented by means of DAP's \"attach\" and \"disconnect\" request: a DA is started and attaches to the debug target via the attach request. \"Lightweight\" detaching disconnects from the debug target via the disconnect request, but the debug adapter continues to run.\r\n\r\n@pavelfeldman does this correctly reflect the intent of your item?",
        "createdAt": "2019-08-16 14:13:06",
        "state": "open",
        "number": 79314
    },
    {
        "title": "Allow extensions control dimensions for existing terminals",
        "description": "Live Share has a feature where when a user starts a collaboration session as a host, all existing terminals are automatically shared. When other guests join, they'll see these shared terminals. \r\n\r\nThe problem is that guests' UI dimensions are different from the host, and such shared  terminals may not render correctly there.\r\n\r\nLive Share already solves this for `Pseudoterminal` that users can create via Live Share viewlet. Live Share uses `onDidOverrideDimensions` and `setDimensions` on `Pseudoterminal`. It needs VSCode support for regular `Terminal` objects.\r\n\r\nExisting terminals has read-only `dimensions` property on `Terminal` objects which we can use to get current terminal dimensions (maximum ones I assume), but nothing that we can use to change the dimensions, and no event that would tell us when UI changes and max dimensions change.\r\n\r\nSo the feature request is to expose `onDidOverrideDimensions` and `setDimensions` equivalent on `Terminal` objects that would allow to:\r\n1. Override current terminal dimensions\r\n2. Get current max dimensions as allowed by UI\r\n3. Know when max dimensions change (say when users resize UI).\r\n\r\ncc @lostintangent, @Tyriar ",
        "createdAt": "2019-08-15 21:16:10",
        "state": "open",
        "number": 79246
    },
    {
        "title": "Don\u2019t\u00a0recommend Debugger for\u00a0Chrome when Google\u00a0Chrome isn\u2019t\u00a0installed",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nVS Code version: Code 1.37.0 (036a6b1d3ac84e5ca96a17a44e63a87971f8fcc8, 2019-08-08T02:33:50.993Z)\r\nOS version: Windows_NT x64 10.0.18362\r\n\r\n## Steps to Reproduce:\r\n1. Don\u2019t have **Google&nbsp;Chrome** installed.\r\n2. Open a&nbsp;**JavaScript** project workspace.\r\n3. Go&nbsp;to&nbsp;the&nbsp;**Extensions** Views Container.\r\n\r\n## Expected behaviour:\r\n**Debugger for&nbsp;Chrome** isn\u2019t shown among recommended extensions.\r\n\r\nOptionally **Debugger for&nbsp;Firefox** is&nbsp;shown instead when&nbsp;**Mozilla&nbsp;Firefox** is&nbsp;installed.\r\n\r\n## Actual behaviour:\r\nRecommended extensions contain **Debugger for&nbsp;Chrome** (even&nbsp;though it&nbsp;can\u2019t&nbsp;be&nbsp;used because **Google&nbsp;Chrome** isn\u2019t&nbsp;installed).\r\n\r\n---\r\n\r\nDoes this issue occur when all extensions are disabled?: **Yes**\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-08-15 10:09:14",
        "state": "open",
        "number": 79192
    },
    {
        "title": "Consider adding isDefault to TaskGroup ",
        "description": "Currently users of `fetchTask` can see the task group, but not if it is a default for that group.",
        "createdAt": "2019-08-15 08:42:31",
        "state": "open",
        "number": 79188
    },
    {
        "title": "Caching/prefetching remote webview vscode-resources",
        "description": "We have some fairly large javascript bundles (~10-20 MB with sourcemaps added) which we include in some of our webviews. These views run remotely because they communicate with remote extensions (which perform things like file search and version control).\r\n\r\nHowever currently initial load takes a very noticeable amount of time when opening the webview. I traced code to find it's all spent on a remote filesystem read operation.\r\n\r\nRequest:\r\nI'd like for workspace extension to be able to either:\r\n\r\n1) (ideal) declare resources that should be pre-fetched when running remotely, so initial javascript load is instant\r\n2) have a mechanism to cache vscode-resources so they don't need to be re-downloaded on each open (e.g. by setting `?cache=true` on the URI)\r\n\r\nHere's an example patch that does a very simple caching and makes resource reloading much faster (option 2 above):\r\n```\r\ndiff --git a/src/vs/workbench/contrib/webview/common/resourceLoader.ts b/src/vs/workbench/contrib/webview/common/resourceLoader.ts\r\nindex ea33db2e26..74a905be71 100644\r\n--- a/src/vs/workbench/contrib/webview/common/resourceLoader.ts\r\n+++ b/src/vs/workbench/contrib/webview/common/resourceLoader.ts\r\n@@ -7,7 +7,7 @@ import { VSBuffer } from 'vs/base/common/buffer';\r\n import { sep } from 'vs/base/common/path';\r\n import { startsWith, endsWith } from 'vs/base/common/strings';\r\n import { URI } from 'vs/base/common/uri';\r\n-import { IFileService } from 'vs/platform/files/common/files';\r\n+import { IFileService, IFileContent } from 'vs/platform/files/common/files';\r\n import { REMOTE_HOST_SCHEME } from 'vs/platform/remote/common/remoteHosts';\r\n import { getWebviewContentMimeType } from 'vs/workbench/contrib/webview/common/mimeTypes';\r\n \r\n@@ -25,14 +25,20 @@ const AccessDenied = new class { readonly type = 'access-denied'; };\r\n \r\n type LocalResourceResponse = Success | typeof Failed | typeof AccessDenied;\r\n \r\n+const cache: Map<string, Promise<IFileContent>> = new Map();\r\n+\r\n async function resolveContent(\r\n \tfileService: IFileService,\r\n \tresource: URI,\r\n \tmime: string\r\n ): Promise<LocalResourceResponse> {\r\n \ttry {\r\n-\t\tconst contents = await fileService.readFile(resource);\r\n-\t\treturn new Success(contents.value, mime);\r\n+\t\tlet contentsPromise = cache.get(resource.toString());\r\n+\t\tif (contentsPromise === undefined) {\r\n+\t\t\tcontentsPromise = fileService.readFile(resource);\r\n+\t\t\tcache.set(resource.toString(), contentsPromise);\r\n+\t\t}\r\n+\t\treturn new Success((await contentsPromise).value, mime);\r\n \t} catch (err) {\r\n \t\tconsole.log(err);\r\n \t\treturn Failed;\r\n\r\n```",
        "createdAt": "2019-08-14 23:19:48",
        "state": "open",
        "number": 79147
    },
    {
        "title": "[css] Add support for CSS @supports selector() function",
        "description": "The **CSS\u00a0Conditional Rules Module Level\u00a04** adds [the\u00a0`selector()` function to\u00a0the\u00a0`@supports` at&#x2011;rule](https://drafts.csswg.org/css-conditional-4/#at-supports-ext), which\u00a0is\u00a0used to\u00a0test whether the\u00a0user agent [supports a\u00a0new\u00a0**CSS\u00a0Selectors** feature](https://drafts.csswg.org/css-conditional-4/#support-definition-ext) (e.g.\u00a0the\u00a0`:is(\u2026)`\u00a0pseudo&#x2011;class or\u00a0multi&#x2011;value `:not(\u2026)`).\r\n\r\n**Visual\u00a0Studio\u00a0Code** should provide syntax\u00a0highlighting and\u00a0auto&#x2011;completion for\u00a0this.",
        "createdAt": "2019-08-14 19:21:46",
        "state": "open",
        "number": 79141
    },
    {
        "title": "Keybindings with commands that don't exist should be faded instead of showing warnings",
        "description": "Same as the settings change for 1.37, I have this setting:\r\n\r\n```\r\n{ \"key\": \"ctrl+shift+o\",     \"command\": \"workbench.action.files.openFolder\", \"when\": \"!isMac\" },\r\n```\r\n\r\nOn mac you get a warning:\r\n\r\n<img width=\"970\" alt=\"Screen Shot 2019-08-14 at 9 06 57 AM\" src=\"https://user-images.githubusercontent.com/2193314/63036997-fb1c5d00-be72-11e9-9f85-7bb046926114.png\">\r\n\r\n(not sure who did it for settings)",
        "createdAt": "2019-08-14 16:08:11",
        "state": "open",
        "number": 79131
    },
    {
        "title": "macOS Text Selection: shift+left should expand selection",
        "description": "- VSCode Version: 1.37.0\r\n- OS Version: macOS Mojave 10.14.6\r\n\r\nOn macOS, the standard text selection behaviour is to expand the current selection when shift + the left arrow key is pressed:\r\n\r\n> Here is the **example** text with 'example' selected (e.g. by double-clicking the text)\r\n> Here is th**e example** text on macOS in most applications after pressing shift + the left arrow key twice.\r\n> Here is the **exampl**e text on macOS in Visual Studio code after the same action.\r\n\r\nTo be consistent with platform conventions, shift + the left arrow should ideally expand the selection. I believe the current behaviour matches the behaviour on Windows.\r\n\r\nIf there is already a configuration option that changes this behaviour, then I would suggest that the default on macOS be changed to the standard system behaviour.",
        "createdAt": "2019-08-14 09:59:04",
        "state": "open",
        "number": 79104
    },
    {
        "title": "Bring the \"track changes\" feature to VS Code",
        "description": "Anyone who has worked with Visual Studio is likely familiar with the \"track changes\" feature, which adds green/yellow bars to the side of the editor, as seen in the attached image.\r\n\r\n![TrackChangesIndicators](https://user-images.githubusercontent.com/36111895/62987162-7bf43e00-be0c-11e9-8fdd-f9ca3d2a9060.png)\r\nGreen bars are new lines added and saved since opening the file; yellow bars are unsaved lines.\r\n\r\nUnfortunately, this doesn't exist in VS Code.\r\nHowever, VS Code does have a very similar feature called \"gutter indicators\" as mentioned in [the documentation](https://code.visualstudio.com/docs/editor/versioncontrol#_gutter-indicators) but it only applies if you're using version control, whereas in Visual Studio, the feature works with locally stored projects/solutions as well.\r\n\r\nSince the functionality already exists in VS Code (for version control), are there any plans to extend it to also work with local files too, just like in Visual Studio?",
        "createdAt": "2019-08-14 01:08:53",
        "state": "open",
        "number": 79080
    },
    {
        "title": "Return of the swipeToNavigate setting",
        "description": "Apparently the swipe event has been fixed in Electron: https://github.com/electron/electron/pull/19319\r\n\r\nCan we have this setting again? It was really useful.\r\n\r\nRelated: https://github.com/microsoft/vscode/issues/57629.",
        "createdAt": "2019-08-14 00:35:47",
        "state": "open",
        "number": 79078
    },
    {
        "title": "Expose terminal scroll position and allow extension change it",
        "description": "Some of Live Share customers want to follow other participants in shared terminals (https://github.com/MicrosoftDocs/live-share/issues/2671). \r\nOne feature that is missing in VSCode is getting and controlling terminal scroll position. Can VSCode expose current scroll position and allow extension changed it in a given pseudo terminal window?\r\n\r\n\r\n",
        "createdAt": "2019-08-13 18:17:43",
        "state": "open",
        "number": 79063
    },
    {
        "title": "Ability to contribute context menu entries for Terminal",
        "description": "I want to contribute menu items for Terminal. Doesn't look like it's possible now:\r\n\r\nhttps://code.visualstudio.com/api/references/contribution-points#contributes.menus\r\n",
        "createdAt": "2019-08-13 12:12:31",
        "state": "open",
        "number": 79034
    },
    {
        "title": "Tree view doesn't programatically collapse Tree items",
        "description": "I'm developing custom VSCode extension and i want to have an option to quickly collapse some expanded tree view items. \r\nFor this purposes I've tried to trigger `onDidChangeTreeData` event and recreate TreeItem with desired collapsible state, but it din't have effect.\r\n\r\nThere is a pretty similar issue https://github.com/Microsoft/vscode/issues/44746 , but solution mentioned in there is only suitable for expanding tree items (I tried to call `reveal` with `expand: false` option, and it didn't work also).\r\n\r\nAlso `Collapse all` button is not suitable for my needs. \r\n\r\nI'm on Version 1.37.0",
        "createdAt": "2019-08-12 17:03:33",
        "state": "open",
        "number": 78970
    },
    {
        "title": "Emmet Tab Stops with Snippet Choices not working",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\nVersion: 1.37.0-insider\r\nCommit: 5e08ee01b7daee99cdda2456f19d77e715fb8762\r\nDate: 2019-08-05T21:25:08.801Z\r\nElectron: 4.2.7\r\nChrome: 69.0.3497.128\r\nNode.js: 10.11.0\r\nV8: 6.9.427.31-electron.0\r\nOS: Linux x64 4.15.0-30deepin-generic\r\n\r\nSteps to Reproduce:\r\n\r\n1. Add custom Emmet Snippet.JSON in Project Folder:\r\n\r\n```\r\n{\r\n  \"html\": {\r\n    \"snippets\": {\r\n      \"test\": \"title{${1|Hello,World|}}+id{${2|1,2|}}\"\r\n    }\r\n  }\r\n}\r\n```\r\n2. Open new HTML File and try to complete 'test' Emmet Snippet e.g. test*4\r\n3. Try to Tab through all Choice Selectors\r\n\r\nIt does not work, because if I choose one Option on the first Selector all my 4 elements get this Option, but i want to choose each individually\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2019-08-12 14:51:13",
        "state": "open",
        "number": 78960
    },
    {
        "title": "Can I make Ctrl-left arrow and Ctrl-right arrow symmetric?",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nIf I type ctrl-right arrow followed immediately by ctrl-left-arrow, the caret does not end up in the same place. This is unexpected for me, as it differs from every other text editor that I use.\r\n\r\nIs there a way that I can make VSCode behave \"symmetrically\" in the way that it skips forwards and backwards across word boundaries?\r\n\r\nVS Code version: Code 1.37.0 (036a6b1d3ac84e5ca96a17a44e63a87971f8fcc8, 2019-08-08T02:33:50.993Z)\r\nOS version: Windows_NT x64 10.0.17763\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-6700T CPU @ 2.80GHz (8 x 2808)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_deferred_display_list: disabled_off<br>skia_renderer: disabled_off<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>viz_display_compositor: disabled_off<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|31.95GB (19.21GB free)|\r\n|Process Argv|--folder-uri file:///d%3A/work/gml/serenity/0.2/src|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (10)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\ncode-gnu-global|aus|0.2.2\r\nnpm-intellisense|chr|1.3.0\r\nvscode-npm-script|eg2|0.3.8\r\nvscode-mocha-test-adapter|hbe|2.1.2\r\nvscode-test-explorer|hbe|2.14.1\r\nvs-color-picker|lih|1.0.0\r\ncpptools|ms-|0.24.1\r\ndebugger-for-chrome|msj|4.11.7\r\npsi-header|psi|1.7.4\r\nmarkdown-preview-enhanced|shd|0.4.3\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-08-11 19:27:42",
        "state": "open",
        "number": 78912
    },
    {
        "title": "Preserve search options / Allow default search options to be configured",
        "description": "When I search in VS Code, via for example `ctrl+d`, `ctrl+f`, I get this tiny menu with options like case-sensitive, regex, etc. I'd really like those options to stay the way I like them. But there are two problems with that:\r\n\r\n1. **VS Code forgets**  \r\nNot sure if it's after a certain amount of time, app reloads, project switching, or what causes VS Code to forget my choices, but annoyingly often when I press for example `ctrl+d`, the options are back to their application defaults: all `off`.\r\n\r\n2. **There's no way to configure the default**  \r\nOnly search option I find is something called `Smart Case`, which I'm not interested in. I find no way to configure the default search options to be what I want.\r\n\r\nAny chance of getting some settings where I can configure my preferred search options in my `settings.json`? And then initiate with those instead of everything `off` as it does now when I start a new search?\r\n\r\nIf I can configure the defaults I don't mind VS Code forgetting (would actually be preferred). But if that's not a possibility, an alternative would be that VS Code just always used my last options, instead of forgetting them as it does now. In other words, I'd like one of those solutions, but not both. \ud83d\ude1b\r\n\r\n---\r\n\r\n**VSCode Version:** `1.36.1`\r\n**OS Version:** `Windows_NT x64 10.0.17134`\r\n\r\n**Steps to Reproduce:**\r\n\r\n1. Press `ctrl+f`\r\n2. Change the search options\r\n3. ...\r\n4. Repeat 1 and check if they're the same",
        "createdAt": "2019-08-09 12:05:26",
        "state": "open",
        "number": 78793
    },
    {
        "title": "Keybindings: provide some guidance on when-clause support",
        "description": "I find `when` clauses are one of the most powerful features in VSCode keybinding story, but we have only very limited support for understanding it from the product itself. \r\n\r\nWe very likely have duplicates already for supporting intellisense etc. for contexts, but at the very minimum can we at least somehow link to https://code.visualstudio.com/docs/getstarted/keybindings#_when-clause-contexts from the keybindings editor? \r\n\r\n![image](https://user-images.githubusercontent.com/900690/62773448-78765500-baa2-11e9-814c-635a79131580.png)\r\n\r\n![image](https://user-images.githubusercontent.com/900690/62773459-7dd39f80-baa2-11e9-8ce9-7cfbb16ba9bd.png)\r\n\r\nMaybe with some link in the table and maybe with an extra menu item close to the entry for \"Change when expression\"?\r\n\r\n//cc @misolori @alexandrudima ",
        "createdAt": "2019-08-09 10:37:08",
        "state": "open",
        "number": 78782
    },
    {
        "title": "[themes] Show extension info in Preferences: Color Theme panel",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\nIn current `Preferences: Color Theme` panel, there is no extension info that lets users know which extension provided the themes. I'd like to purge some unwanted theme extensions, but I don't know which one I should uninstall.\r\n\r\n![image](https://user-images.githubusercontent.com/32427260/62754454-73190a80-baa2-11e9-8aba-a03202ccd79a.png)\r\n\r\nIt will be great if we can add the extension info at the right of theme name :) Something like the below picture.\r\n\r\n![ theme_panel](https://user-images.githubusercontent.com/32427260/62755539-03f1e500-baa7-11e9-919a-fbbcc378c48a.png)\r\n\r\n\r\n<!-- Describe the feature you'd like. -->\r\n",
        "createdAt": "2019-08-09 05:11:54",
        "state": "open",
        "number": 78758
    },
    {
        "title": "Better filter expressions for hiding derived resources",
        "description": "In a (Typescript) React project it is common to have both `.ts` files and `.tsx` files all result in `.js` files in the end. It is possible to exclude some of these, but to my search it did not seem possible to hide both these types of files. It would be nice to be able to hide derived resources (JS files in this case) based on more sophisticated expressions. \r\n\r\nOne solution would be to allow multiple patterns. It might look something like:\r\n\r\n    \"files.exclude\": {\r\n        \"**/*.js\": {\r\n            \"when\": [ \"$(basename).ts\", \"$(basename).tsx\" ]\r\n        }\r\n    },\r\n\r\nAnother way is to treat 'when' expression as regular expressions, like:\r\n\r\n    \"files.exclude\": {\r\n        \"**/*.js\": {\r\n            \"when\": \"$(basename).ts(x?)\"\r\n        }\r\n    },",
        "createdAt": "2019-08-07 18:35:31",
        "state": "open",
        "number": 78652
    },
    {
        "title": "Add a decoration render option to extend to edge of window but keep range",
        "description": "In\r\n\r\nhttps://code.visualstudio.com/api/references/vscode-api#DecorationRenderOptions\r\n\r\nthere is already a flag `isWholeLine` which extends the range across the full width of the window. It would be nice to have another similar option, which extends a multi-line range to the end of the window, but does not extend the start of the range to the beginning of the line, or the end of the range to the end of the line - just the intermediate lines.\r\n\r\ne.g.\r\n\r\nCurrent behaviour:\r\n```\r\n........{......................\r\n...............................\r\n........}......................\r\n```\r\n```\r\n........{.............}........\r\n```\r\n\r\nDesired behaviour:\r\n```\r\n        {......................\r\n...............................\r\n........}\r\n```\r\n```\r\n        {.............}\r\n```",
        "createdAt": "2019-08-07 16:03:19",
        "state": "open",
        "number": 78640
    },
    {
        "title": "Allow extensions to provide commands for their custom treeviews programatically",
        "description": "This is similar to https://github.com/microsoft/vscode/issues/9285, but that seems to be about letting the end user configure the context menu, whereas I want to provide context menu commands from my extension, but dynamically (such that they can't be in the package manifest).\r\n\r\nI know we've previously discussed something similar to this around making context menus *async*, but that's not required here - the context menus can be provided up-front (and periodically updated), but they are based on launch configs and therefore can't be in package.json.\r\n\r\nHere's a screenshot fo a new feature I added to my extension:\r\n\r\n![Screenshot 2019-08-06 at 5 23 29 pm](https://user-images.githubusercontent.com/1078012/62557457-ee927600-b86e-11e9-93ac-51d90680f946.png)\r\n\r\nThe \"Run\" and \"Debug\" code lens already existed - they're hard-coded. The other two are are user-defined - the user can configure additional launch configurations for launching tests. In `provideCodeLens` I read the launch configs, see if any are marked as templates, and include them in the result.\r\n\r\nI'd like to also add them to the context menu for the test tree here:\r\n\r\n![Screenshot 2019-08-06 at 5 41 28 pm](https://user-images.githubusercontent.com/1078012/62558721-74afbc00-b871-11e9-952f-48dd1838dc5a.png)\r\n\r\nHowever AFAIC these need to be pre-declared in the package.json - and of course I don't know what custom configs the users will add. I'd like to instead supply these commands (like I do in `provideCodeLens`) for each node (either at node creation time, on-demand, or just at extension startup + whenever the user modifies the launch configs).",
        "createdAt": "2019-08-06 16:43:13",
        "state": "open",
        "number": 78572
    },
    {
        "title": "Add `Clear search fields` button to Search widget",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n![obraz](https://user-images.githubusercontent.com/30685349/62556336-eb9a8400-b874-11e9-93e6-9b4198449bcd.png)\r\n",
        "createdAt": "2019-08-06 16:07:24",
        "state": "open",
        "number": 78569
    },
    {
        "title": "editor.Hover message box Position",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nI want the editor.hover  message could display under the variables it refers to. Because the message box blocks the code over the current line.\r\nThank you.\r\n\r\nVS Code version: Code 1.36.1 (2213894ea0415ee8c85c5eea0d0ff81ecc191529, 2019-07-08T22:59:35.033Z)\r\nOS version: Windows_NT x64 10.0.17134\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-08-06 13:21:53",
        "state": "open",
        "number": 78560
    },
    {
        "title": "Right click should offer remote variants of \"Open with Code\"",
        "description": "We have fully embraced remote WSL and remote containers. We have a have a large number of projects set up for this. We would save a lot of time if we had the option to launch a folder directly into WSL or a container, especially those of us who do a lot of context switching.\r\n\r\nRight now the flow for WSL is:\r\n* Right-click > 'Open with Code'\r\n* Wait for VS Code to open\r\n* F1 > Type 'remote' \r\n* Choose 'Remote-WSL: Reopen folder in WSL'\r\n* Wait for VS Code to reopen\r\n\r\nA more efficient workflow would be:\r\n* Right-click > 'Open with Code in WSL'\r\n* Wait for VS Code to open\r\n\r\n(An option for Remote-SSH should also be there, but we haven't used that yet)",
        "createdAt": "2019-08-05 10:52:53",
        "state": "open",
        "number": 78491
    },
    {
        "title": "stupidly large files",
        "description": "OK, don't ask why but I need to open a 16GB file to do some editing to and cant find a program that will let me so I thought I would try vscode, it obviously didn't work which is why I'm here so I was wondering if it would be possible (after at least 3 years of it being mentioned in other posts) to it being added in, my computer currently has 48GB of ram so plenty to open it even if it needed double the file size in ram but even when I do give the software the ram I still get an error saying \"cant open file is too large(16GB)\" if this is unable to be added in (ideally soon) does anyone know of a program that would allow me to open a file this large in a way that I can mess with the code?\r\nthe file is a .VNEM and .VMDK file, most other files I have needed to open have done so",
        "createdAt": "2019-08-02 16:45:21",
        "state": "open",
        "number": 78394
    },
    {
        "title": "Overlapping search results",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nWhen you search a string that is contained inside a match, that \"substring\" is not matched.\r\n\r\n![image](https://user-images.githubusercontent.com/10290593/62372623-544cce00-b50e-11e9-90ee-c2d2d30bfbe4.png)\r\nI this case, \"abcdefab\" is repeated 3 times, but only detect 2 of them.\r\n\r\nVS Code version: Code - Insiders 1.37.0-insider (d5900c642b359fe7a9eb1e3f9e2d0977f6e0905c, 2019-07-31T05:24:41.973Z)\r\nOS version: Windows_NT x64 10.0.17763\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz (8 x 3600)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: enabled<br>skia_deferred_display_list: disabled_off<br>skia_renderer: disabled_off<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>viz_display_compositor: disabled_off<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|15.96GB (8.11GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (32)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nbetter-comments|aar|2.0.5\r\nvscode-css-formatter|aes|1.0.1\r\nvscode-intelephense-client|bme|1.1.5\r\nlaravel-blade|cjh|1.1.2\r\nlaravel-goto-view|cod|1.3.2\r\ngithistory|don|0.4.6\r\nxml|Dot|2.5.0\r\nEditorConfig|Edi|0.13.0\r\napacheconf-snippets|eim|1.2.0\r\nphp-debug|fel|1.13.0\r\nphp-intellisense|fel|2.3.10\r\ncsharpfixformat|Leo|0.0.82\r\nangular-localization-helper|man|0.2.1\r\nrainbow-csv|mec|1.2.0\r\nphp-namespace-resolver|Meh|1.1.8\r\nformate|Mik|1.1.2\r\ndotenv|mik|1.0.1\r\nvscode-remote-workspace|mkl|0.42.0\r\nvscode-apache|mrm|1.2.0\r\nvscode-language-pack-es|MS-|1.37.4\r\npython|ms-|2019.6.24221\r\ncsharp|ms-|1.21.0\r\nvsliveshare|ms-|1.0.614\r\nlaravel-blade|one|1.20.0\r\nlaravel-extension-pack|one|0.6.1\r\nlaravel5-snippets|one|1.7.0\r\nvscode-sort-json|ric|1.14.0\r\nsass-indented|rob|1.5.1\r\nlaravel-artisan|rya|0.0.25\r\nvscode-scss-formatter|sib|1.4.1\r\nphp-formatter|Sop|0.2.4\r\nmarkdown-all-in-one|yzh|2.4.2\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-08-02 13:15:58",
        "state": "open",
        "number": 78382
    },
    {
        "title": "Expanding an object when it is the bottom of the scroll view should scroll with the expand",
        "description": "If I'm debugging and at the bottom of my current scroll view:\r\n\r\n![Screen Shot 2019-08-01 at 1 03 28 PM](https://user-images.githubusercontent.com/49038/62312711-e8f6f380-b45c-11e9-9d56-7876aa280ecd.png)\r\n\r\nClicking on `NodeObject` would ideally trigger a scroll down with it:\r\n![Screen Shot 2019-08-01 at 1 04 46 PM](https://user-images.githubusercontent.com/49038/62312752-0035e100-b45d-11e9-8c31-4606e44dfa71.png)\r\n",
        "createdAt": "2019-08-01 17:05:41",
        "state": "open",
        "number": 78336
    },
    {
        "title": "Support prompt for QuickPick as well as InputBox",
        "description": "I would like the createQuickPick and showQuickPick APIs to support a `prompt` field, the same way InputBox does, so I can show more information to the user that does not disappear when they begin to type.",
        "createdAt": "2019-08-01 17:02:27",
        "state": "open",
        "number": 78335
    },
    {
        "title": "Add predefined variable ${fileDirBasename}",
        "description": "Hello, I have some dotnet solutions opened as my root workspace.\r\n\r\nFor example:\r\n\r\n${workspaceFolder}:\r\n/home/username/dotnet-solution1\r\n\r\n${file}:\r\n/home/username/dotnet-solution1/project1/Program.cs\r\n/home/username/dotnet-solution1/project2/Program.cs\r\n/home/username/dotnet-solution1/project3/Program.cs\r\n/home/username/dotnet-solution1/project4/Program.cs\r\n\r\nWhen I open Program.cs or other cs file, I want press F5 to debug the corresponding project.\r\n\r\nSo I need this ${fileDirBasename} variable.\r\n\r\nthis is my expected lanunch config:\r\n\r\n```\r\n{\r\n    \"name\": \"Launch current project\",\r\n    \"type\": \"coreclr\",\r\n    \"request\": \"launch\",\r\n    \"preLaunchTask\": \"build\",\r\n    \"program\": \"${fileDirname}/bin/Debug/netcoreapp2.0/${fileDirBasename}.dll\",\r\n    \"args\": [],\r\n    \"cwd\": \"${fileDirname}\",\r\n    \"stopAtEntry\": false,\r\n    \"console\": \"internalConsole\"\r\n}\r\n```\r\n\r\nmy expected build task:\r\n\r\n```json\r\n{\r\n    \"label\": \"build\",\r\n    \"command\": \"dotnet\",\r\n    \"type\": \"process\",\r\n    \"args\": [\r\n        \"build\",\r\n        \"${fileDirname}/${fileDirBasename}.csproj\",\r\n        \"/property:GenerateFullPaths=true\",\r\n        \"/consoleloggerparameters:NoSummary\"\r\n    ],\r\n    \"problemMatcher\": \"$msCompile\"\r\n}\r\n```\r\n",
        "createdAt": "2019-08-01 08:57:14",
        "state": "open",
        "number": 78316
    },
    {
        "title": "Add a \"Toggle Word Wrap\" button to the Output window",
        "description": "Visual Studio's Output window has a \"Toggle Word Wrap\" button, but VS Code has word wrapping always (?) enabled. For certain scenarious like the pending \"C/C++ References\" output it is desirable for word wrapping to be disabled for the results to be more easily read. There is a \"View: Toggle Word Wrap\" command, but it applies to the active document only (and not the Output panel, even if it's active).\r\n\r\nAnd/or if the OutputChannel interface could add a toggleWordWrap capability, that would allow extensions to set an appropriate default for their particular Output channel.\r\n\r\nThis seems like a pretty basic feature that other Output channel providers would want, but I couldn't find an existing feature request on this.\r\n",
        "createdAt": "2019-07-31 02:13:33",
        "state": "open",
        "number": 78245
    },
    {
        "title": "Preserve case behaves unexpectedly, taking caps from both source and replace",
        "description": "#78133\r\n\r\nFor this:\r\n\r\n![image](https://user-images.githubusercontent.com/2193314/62153009-88c74c80-b2b8-11e9-8096-e097da9daca0.png)\r\n\r\nThe case of only the first capital from the search result is retained, not the second\r\n\r\n![image](https://user-images.githubusercontent.com/2193314/62153022-8fee5a80-b2b8-11e9-9167-4046a4919660.png)\r\n\r\n---\r\n\r\nFor this:\r\n\r\n![image](https://user-images.githubusercontent.com/2193314/62153120-c4faad00-b2b8-11e9-9fb1-88e72064a8c0.png)\r\n\r\nThe case of the first capital from the search result is retained, not the second. The cap in the replace term is retained, but not the lowercase first letter\r\n\r\n![image](https://user-images.githubusercontent.com/2193314/62153160-d348c900-b2b8-11e9-8ae2-0e9008f68844.png)\r\n\r\n---\r\n\r\nMaybe this isn't supported yet as per https://github.com/microsoft/vscode/issues/78133, it would be very confusing to people trying to use an incomplete feature though.",
        "createdAt": "2019-07-30 18:04:52",
        "state": "open",
        "number": 78204
    },
    {
        "title": "Reuse launchBrowser window tab",
        "description": "It is really nice that we can F5 debug and launch our web applications. A nice improvement would be to reuse the window if you debug more than once. Currently, a new duplicate tab will be created every time you launch.\r\n\r\nThe only current solution that I know of is a little silly and involves having two almost duplicate launch tasks, one to open the window and one to skip doing that. I still have to remember to refresh the tab when the building is complete.\r\n\r\nOther tools like react will reuse the same tab and refresh the content. This is a really nice developer feature and a productivity boost.\r\n\r\nCan we add this functionality?\r\n\r\nmoved from https://github.com/OmniSharp/omnisharp-vscode/issues/3152\r\n",
        "createdAt": "2019-07-30 15:56:47",
        "state": "open",
        "number": 78197
    },
    {
        "title": "Add an output panel for keybindings",
        "description": "Add a way for people to self-diagnose keybinding issues...",
        "createdAt": "2019-07-30 14:47:10",
        "state": "open",
        "number": 78191
    },
    {
        "title": "Add a shortcut or a button to restart extension host.",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nRight now if the extension host crashes we have to restart the editor , it would be awesome if we could add a button or shortcut for the same.",
        "createdAt": "2019-07-30 12:14:17",
        "state": "open",
        "number": 78166
    },
    {
        "title": "Few new commands for find/replace",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\n\r\nCommands like editor.action.addSelectionToNextFind/editor.action.replaceOne add cursors or show a find/replace panel. I need simpler commands which do not do those things. I would like to find or replace simply. I would like use these commands: \r\n\r\n1. editor.action.addSelectionToFindVariable, \r\n2. editor.action.addSelectionToReplaceVariable, \r\n3. editor.action.FindVariable, \r\n4. editor.action.replaceOneWithVariable\r\n5. editor.action.replaceAllWithVariable\r\n\r\nThe first one should copy a selected text in the editor to a find variable. The second one should copy a selected text in the editor to a replace variable. The third one should select each occurrence of a text equaled the find variable in the editor gradually. The fourth one should replace the selected text with the replace variable. The fifth one should replace all occurrences of a text equaled the find variable with the replace variable.\r\n\r\nI will assign keyboard shortcuts to the commands.\r\n\r\nVS Code version: Code 1.36.1 (2213894ea0415ee8c85c5eea0d0ff81ecc191529, 2019-07-08T22:59:35.033Z)\r\nOS version: Windows_NT x64 10.0.17134\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-07-28 09:33:43",
        "state": "open",
        "number": 78055
    },
    {
        "title": "more commands for different functions",
        "description": "Expose a command for every supported command. I can call outline.focus, but not outline.hide (even though you can right-click and select hide). You can also collapse in Outline panel, which is not supported as command. More toggle commands for panels.",
        "createdAt": "2019-07-27 00:19:28",
        "state": "open",
        "number": 78023
    },
    {
        "title": "[folding] When you cut a collapsed code block it should stays collapsed when you paste it.",
        "description": "I have searched the issues and requests and I don't see this one anywhere. And it seems like too good of an idea to pass up. \r\n\r\nWhile you can cut a collapsed code block and paste it elsewhere, when you paste it, it \"uncollapses.\" \r\n\r\nIt would be really cool and useful if the code remained collapsed after you pasted it. \r\n\r\nThanks. \r\n",
        "createdAt": "2019-07-26 16:55:14",
        "state": "open",
        "number": 78004
    },
    {
        "title": "Omit locations visited by incremental search from 'Go back' history",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nI often use <kbd>CTRL + F</kbd> to repeatedly jump between two or more locations in a file.\r\n\r\nI could be saved some typing if I could <kbd>CTRL+F</kbd> to the second location and then simply \"Go back\" (<kbd>ALT + Left Arrow</kbd>) to the first location. \r\n\r\nThis currently doesn't work with incremental search enabled, because many unrelated locations are visited in the file as each character is typed into the search dialog. Especially the first few characters.\r\n\r\n**I'd like to see a setting to omit locations visited as a result of incremental search from the 'Go back' history.**\r\n\r\nVS Code version: Code 1.36.1 (2213894ea0415ee8c85c5eea0d0ff81ecc191529, 2019-07-08T22:59:35.033Z)\r\nOS version: Windows_NT x64 10.0.17763\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-07-26 16:27:35",
        "state": "open",
        "number": 78000
    },
    {
        "title": "Make it more obvious to accept current or incoming changes for merge conflicts",
        "description": "Compare:\r\n\r\n![image](https://user-images.githubusercontent.com/490562/61944204-3e607a00-aff1-11e9-9cb5-efdc04a15865.png)\r\n\r\nvs\r\n\r\n![image](https://user-images.githubusercontent.com/490562/61944240-56d09480-aff1-11e9-8aa5-7696369f93b0.png)\r\n\r\nI find myself looking for the action button to accept one of the two code versions in VS Code a lot. Atom displays this really prominently, with an obvious button which are separated and placed strategically above and below the respective code, and also coloured to match the code.\r\n\r\nThis makes it so easy to see and hit the right button for what you want to merge.\r\n\r\nIn VS Code by contrast the buttons are not only tiny so that they are almost invisible, they are on the same line which makes it confusing as you have to remember each time what is the current change and what is the incoming change. \r\n\r\nIt'd be great if this bit of UX could get some attention in an upcoming release to make it more obvious what you're doing, and easier to quickly hit the right button.\r\n\r\nIt would make resolving multiple merge conflicts so much faster.\r\n\r\nThank you.\r\n",
        "createdAt": "2019-07-26 10:07:35",
        "state": "open",
        "number": 77985
    },
    {
        "title": "[html] support script type=\"text/html\"",
        "description": "- VSCode Version: 1.36.1\r\n- OS Version: MacOS\r\n\r\nSteps to Reproduce:\r\n\r\n1. create a file with extension .html file\r\n2. Include a script tag like the following\r\n`<script type=\"text/html\">`\r\n<p\r\n</script>\r\n3. No auto-complete for html tag names\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\n\r\nHTML inside a `<script type=\"text/html\">` tag is recognised as html with syntax color highlights ok, but there is no intellisense autocomplete for html tags like in normal html only files.\r\n\r\n\r\n\r\n",
        "createdAt": "2019-07-26 08:53:11",
        "state": "open",
        "number": 77977
    },
    {
        "title": "window.restoreWindow isn't honored",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nWhen using VSCode with remote WSL2 projects, the \"window.restoreWindows\" settings I have of \"none\" is ignored and editors for the previous session are restored. \r\n\r\nThis also applies when code is started with the `-n` option. It is ignored and the previous session is restored.\r\n\r\nThis behavior is not seen when not using the Remote - WSL extension.\r\n\r\nExtension version: 0.38.10\r\nVS Code version: Code 1.36.1 (2213894ea0415ee8c85c5eea0d0ff81ecc191529, 2019-07-08T22:59:35.033Z)\r\nOS version: Windows_NT x64 10.0.18941\r\nRemote OS version: Linux x64 4.19.43-microsoft-standard\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-8650U CPU @ 1.90GHz (8 x 2112)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>oop_rasterization: disabled_off<br>protected_video_decode: enabled<br>rasterization: enabled<br>skia_deferred_display_list: disabled_off<br>skia_renderer: disabled_off<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>viz_display_compositor: disabled_off<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|15.93GB (2.48GB free)|\r\n|Process Argv|--folder-uri=vscode-remote://wsl+Ubuntu-18.04/home/sean/code/ponylang/pony-stable --remote=wsl+Ubuntu-18.04|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n|Item|Value|\r\n|---|---|\r\n|Remote|WSL: Ubuntu-18.04|\r\n|OS|Linux x64 4.19.43-microsoft-standard|\r\n|CPUs|Intel(R) Core(TM) i7-8650U CPU @ 1.90GHz (8 x 2111)|\r\n|Memory (System)|14.58GB (14.37GB free)|\r\n|VM|0%|\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-07-24 13:16:29",
        "state": "open",
        "number": 77924
    },
    {
        "title": "[folding] Preserve folded ranges on revert",
        "description": "Editor losing folding status, when we doing git revert changes and scroll to top of the page\r\n\r\n![vscode2019-07-24 15-26](https://user-images.githubusercontent.com/4384874/61774890-6b166500-ae2a-11e9-9161-30552d0cfa11.gif)\r\n\r\n",
        "createdAt": "2019-07-24 07:48:13",
        "state": "open",
        "number": 77861
    },
    {
        "title": "Howto configure serverReadyAction debugwithchrome point to a specific config ",
        "description": "I have setup chrome debugger and specific settings for launch configurations, such as pathmappings, sourcemaps, etc.\r\n\r\nCan I configure the feature of \"serverReadyAction\" having an action: \"debugwithchrome\" to actually launch one of my existing 'chrome' launch configurations in my launch.json rather than start its own?\r\n\r\nI am not sure , does the feature launch a default debug configuration of chrome or can it use my configured launch configurations ? \r\nThere is no setting to define the name of chrome debug configuration.",
        "createdAt": "2019-07-24 01:58:38",
        "state": "open",
        "number": 77843
    },
    {
        "title": "Some of display name of config is not correct.",
        "description": "- OS Version:\r\n\r\nSteps to Reproduce:\r\n\r\n1. Install Azure IoT Hub Toolkit: https://github.com/microsoft/vscode-azure-iot-toolkit\r\n2. Got to VS Code settings\r\n\r\nActual: \r\n![image](https://user-images.githubusercontent.com/1050213/61683792-76459400-ad49-11e9-9193-2d0beb868068.png)\r\n\r\nExpected:\r\n**D2C** and **IoT** are one word, should not be truncated\r\n ",
        "createdAt": "2019-07-23 04:58:41",
        "state": "open",
        "number": 77794
    },
    {
        "title": "Expose Clipboard#read/write with data transfer",
        "description": "Can you provide HTML clipboard access which is available in [Electron](https://electronjs.org/docs/api/clipboard#clipboardreadhtmltype)? i.e. expose that in [extHostClipboard.ts](https://github.com/microsoft/vscode/blob/56693de122b1345d9df1c2c37fb2cb7a23705bf7/src/vs/workbench/api/common/extHostClipboard.ts)",
        "createdAt": "2019-07-23 00:43:43",
        "state": "open",
        "number": 77790
    },
    {
        "title": "Scrolling can be improved",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nwhen some of my file's size grows when I'm developing, then it becomes more and more hard to scroll. \r\nLittle scrolling drag shifts code in screen very large amount up or down, but sometimes I want it to shift only little bit. \r\nThis is convenient to do if file contains about under 2000 rows but becomes more and more inconvenient as rows amount grow.\r\n\r\nThere can be nice solution for that: if holding down Ctrl key while dragging scrollbar button with mouse, then code in screen moves more slowly.\r\nIt would be most nice when i move cursor with mouse about 200 pixels up while dragging.\r\nthen code in screen moves down about 30 rows. \r\n(Mouse cursor and scrollbar button doesn't need to stay in one place - when cursor moves\r\nexample 200px up, then scrollbar button can move example only 50px up)\r\n\r\nThank you :)\r\nI love this program :)\r\n\r\nVS Code version: Code 1.36.0 (0f3794b38477eea13fb47fbe15a42798e6129338, 2019-07-03T13:25:46.372Z)\r\nOS version: Windows_NT x64 6.1.7601\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-07-22 17:30:36",
        "state": "open",
        "number": 77769
    },
    {
        "title": "Consistency with the use of \"workspace\" ",
        "description": "### Problem\r\n\r\nDevelopers [don't know](https://stackoverflow.com/questions/44629890/what-is-a-workspace-in-vs-code) what a [workspace is](https://www.reddit.com/r/vscode/comments/9z1b34/totally_confused_by_workspaces_and_folders_in/). Here's [my recent attempt to clear up the confusion](https://stackoverflow.com/a/57134632/4500152).\r\n\r\n### Confusion\r\n\r\n- The [recent list widget](https://code.visualstudio.com/docs/editor/multi-root-workspaces#_opening-workspace-files) groups folder workspaces along with `.code-workspace` workspaces under a \"workspace\" heading, indicating that everything in that list is a workspace. Then it gives `.code-workspace` workspaces a \"Workspace\" suffix, contradicting the header, and indicating that only those workspaces that are associated with a `.code-workspace` file are true workspaces. \r\n\r\n- The first interaction with the term \"workspace\" for most developers is going to be the workspace settings. This is setting up users for confusion right off the bat. Because a folder's `.vscode` settings is initially referred to as \"Workspace\" settings. But when a `.code-workspace` file is created, `.vscode` settings becomes \"Folder\" settings, while the `.code-workspace` settings becomes the new \"Workspace\" settings.\r\n\r\n- \"Open Workspace\" is referring to a `.code-workspace` workspace (with the dialog only allowing a `.code-workspace` file to be selected). Same goes for \"Add Folder to Workspace...\" and \"Save Workspace As...\".\r\n\r\n- An extension's \"Disable (Workspace)\" option is referring to workspace as defined by my definition in the SO post.\r\n\r\n### Suggestion\r\n_**NOTE**: Suggestions will be updated as discussion in this thread evolves._\r\n\r\n- In the recent list widget, create two separate headings: \"Workspace\" and \"Folder\". Remove suffixes.\r\n- In settings editor, always refer to specific settings with the same reference. \"Workspace\" tab for `.code-workspace` settings. \"Folder\" tab for `.vscode` settings.\r\n- \"Open Workspace\", \"Add Folder to Workspace...\", and \"Save Workspace As...\" remain unchanged.\r\n- An extension's context menu will show \"Disable (Workspace)\" or \"Disable (Folder)\" depending on which is currently active.\r\n- Optionally, come up with another term when wanting to reference both definitions. Whether it's \"Project\" or something else. Then it would be acceptable to use \"Disable (Project)\" in the extension's context menu, for example.",
        "createdAt": "2019-07-21 15:55:04",
        "state": "open",
        "number": 77718
    },
    {
        "title": "support game controller so I can map buttons on it",
        "description": "for example I don't have a side scrolling mouse so it would be nice if I could use my game controller analog stick to scroll all directions. Use direction pad to go jump back/forward in code etc.. Is it possible to map mouse buttons to such things? Maybe add multiple mappings to the same thing first.",
        "createdAt": "2019-07-21 03:54:01",
        "state": "open",
        "number": 77710
    },
    {
        "title": "Option for find widget to have max width",
        "description": "If this is enabled, the find widget will always be the maximum size.\r\n\r\n----\r\n\r\nThe default width is so narrow, and I always end up having to resize it to be longer. There is no reason for it not to be as wide as possible, imo.",
        "createdAt": "2019-07-20 08:30:29",
        "state": "open",
        "number": 77688
    },
    {
        "title": "Pick up all WSL distributions in default shell selector",
        "description": "Currently we only check for wsl.exe, it would be nice if it exposed specific distros. This would also need to modify args which would be a change though.",
        "createdAt": "2019-07-19 16:01:01",
        "state": "open",
        "number": 77652
    },
    {
        "title": "[css][html] Publish language servers modules on npm",
        "description": "We'd like to reuse more easily language servers from VSCode (HTML, CSS, JSon...), On npm.js we can see the related \"languageservice\" which provide some part of the logic, but those don't talk LSP.\r\nCould the language server modules be published on npm.js for easier reuse? Or merged with the languageservice modules directly?",
        "createdAt": "2019-07-18 15:38:54",
        "state": "open",
        "number": 77582
    },
    {
        "title": "How can the Modifier keys be changed?",
        "description": "I would like to use a key combination like spacebar+g  spacebar+d and not Alt+g Alt+d. \r\nI figure, changing the modifier key to spacebar would do it. But couldn't find any reference on how to change that. Is there a way? Essentially,  I would like to use spacebar as the leader-key as I do in my vim. Thanks",
        "createdAt": "2019-07-17 08:25:22",
        "state": "open",
        "number": 77506
    },
    {
        "title": "If pasting over text containing TextEditorDecorations, they are retained",
        "description": "Version: 1.36.1 (user setup)\r\nCommit: 2213894ea0415ee8c85c5eea0d0ff81ecc191529\r\nDate: 2019-07-08T22:59:35.033Z\r\nElectron: 4.2.5\r\nChrome: 69.0.3497.128\r\nNode.js: 10.11.0\r\nV8: 6.9.427.31-electron.0\r\nOS: Windows_NT x64 10.0.18362\r\n\r\nIf pasting over text with TextEditorDecorations applied, they are applied to the new text.\r\n\r\n![image](https://user-images.githubusercontent.com/49173979/61338758-d1c6cd80-a7ef-11e9-9c38-511fadacb9d9.png)\r\n\r\nExpected: Text replaced by pasting should have decorators cleared/truncated.\r\n",
        "createdAt": "2019-07-17 00:35:43",
        "state": "open",
        "number": 77492
    },
    {
        "title": "[Settings GUI] String array: No help in filling enum values",
        "description": "#77427\r\n\r\n```json\r\n\"type\": \"array\",\r\n\"items\": {\r\n\t\"type\": \"string\",\r\n\t\"enum\": [\r\n\t\t\"error\",\r\n\t\t\"warning\",\r\n\t\t\"info\",\r\n\t\t\"hint\"\r\n\t]\r\n},\r\n```\r\n\r\n`settings.json`:\r\n\r\n![Screenshot (29)](https://user-images.githubusercontent.com/9638156/61283443-d1194180-a7c5-11e9-8ddb-5994a4a19c0c.png)\r\n\r\n`settings GUI`:\r\n\r\n![Screenshot (30)](https://user-images.githubusercontent.com/9638156/61283450-d4acc880-a7c5-11e9-8389-8b8eaf4531dc.png)",
        "createdAt": "2019-07-16 09:33:04",
        "state": "open",
        "number": 77458
    },
    {
        "title": "Add title property to QuickPickOptions (showQuickPick)",
        "description": "Currently, `title` can only be set when going through the more complex `createQuickPick` API. It would be great if the title could be set via `QuickPickOptions` when using the simpler `showQuickPick`.",
        "createdAt": "2019-07-15 19:31:48",
        "state": "open",
        "number": 77423
    },
    {
        "title": "Resolve resolveDebugConfiguration return values when debug type changes",
        "description": "# Request \r\n\r\nAs an extension developer, I'd like to be able to define a custom debug type / `DebugConfiguration`, and have `resolveDebugConfiguration` resolve to a different debug type. Currently, a custom `resolveDebugConfiguration` handler can return a `DebugConfiguration` object with a different type, but this configuration is not resolved through VS Code before it is run.\r\n\r\n(cc: @roblourens , @weinand )\r\n\r\n# Motivation\r\n\r\nI'm developing an extension that allows users to develop and debug serverless applications. I'd like to provide debug support using the Debug panel of VS Code. My thought is that users would set up launch.config to reference their application's serverless manifest file. The manifest file knows the details required to run the application (code location, function handler to launch, etc), as well as whether the application is written in node, python, or c#. My extension would resolve this information from the manifest, and launch the appropriate debugger for the serverless application.\r\n\r\n# Sample\r\n\r\nHere is a small example of a custom debug type that passes through a different config type\r\n\r\nIn extension activate:\r\n```\r\n    vscode.debug.registerDebugConfigurationProvider(\r\n        'mydebugtype',\r\n        new MyDebugConfigProvider(),\r\n    )\r\n```\r\n\r\nThe declarations:\r\n```\r\ninterface MyDebugConfig extends vscode.DebugConfiguration {\r\n    config: vscode.DebugConfiguration\r\n}\r\n\r\nclass MyDebugConfigProvider implements vscode.DebugConfigurationProvider {\r\n\r\n    public async resolveDebugConfiguration(\r\n        folder: vscode.WorkspaceFolder | undefined, \r\n        debugConfiguration: MyDebugConfig, \r\n        token?: vscode.CancellationToken\r\n    ): Promise<vscode.DebugConfiguration | undefined> {\r\n        return debugConfiguration.config\r\n    }\r\n}\r\n```\r\n\r\nIn launch.json:\r\n```\r\n        {\r\n            \"type\": \"mydebugtype\",\r\n            \"request\": \"launch\",\r\n            \"name\": \"My Sample Debug\",\r\n            \"config\": {\r\n                \"name\": \"My Sample Debug\",\r\n                \"type\": \"node\",\r\n                \"request\": \"launch\",\r\n                \"program\": \"${workspaceFolder}/app.js\",\r\n                \"protocol\": \"inspector\"\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"Regular Sample Debug\",\r\n            \"type\": \"node\",\r\n            \"request\": \"launch\",\r\n            \"program\": \"${workspaceFolder}/app.js\",\r\n            \"protocol\": \"inspector\"\r\n        }\r\n```\r\n\r\nIn this example, running `Regular Sample Debug` works as expected. `My Sample Debug` contains the same payload as `Regular Sample Debug` in the `config` property. When I run `My Sample Debug`, I would expect my configuration provider to launder the mydebugtype config into a valid node config, which looks and behaves exactly like `Regular Sample Debug` does. The actual result in Debug Console is:\r\n```\r\nC:\\Users\\<......>\\node.exe --nolazy --debug-brk=61651 app.js\r\n(node:13544) [DEP0062] DeprecationWarning: `node --debug` and `node --debug-brk` are invalid. Please use `node --inspect` or `node --inspect-brk` instead.\r\n```\r\n\r\n# Alternate Workarounds Considered\r\n\r\n1 - Register my configuration provider to first-class debug types of interest (such as 'node' and/or 'python).\r\n\r\nI tried to register `MyDebugConfigProvider` to debug type 'node'. In launch.config, I added a custom property \"X\" to the configuration, where I placed all of the fields of interest to `MyDebugConfigProvider`. In `resolveDebugConfiguration`, I check for the presence of \"X\". If it is not present, the configuration is returned without processing or modification. If \"X\" is present, I perform all necessary processing, and return a DebugConfiguration object of type 'node' that is configured to run the program of interest.\r\n\r\nPros\r\n* It works!\r\n\r\nCons\r\n* Unsure if this is a valid approach. Is it expected that several VS Code extensions would register `DebugConfigurationProvider`s against types like 'node' or 'python'?\r\n* When the extension is active, `MyDebugConfigProvider` runs against *all* user launch configurations for those types (eg: anything with a debug type of 'node'), even if they are debugging programs that aren't relevant to this extension (eg: even if the configuration does not contain \"X\"). That seems invasive.\r\n* `MyDebugConfigProvider` has to be explicitly registered against all of the different types it is supporting\r\n  * This appears to also require duplicate declarations in the package.json contribution points for each type, in `configurationAttributes`\r\n* When users of my extension are setting up launch configurations, they have to set the correct debug type themselves (instructing users to set the type to a single value like \"mydebugtype\" reduces confusion/chance of misconfiguration)\r\n\r\n2 - Register my configuration provider to custom type (\"mydebugtype\"), and explicitly call `vscode.debug.startDebugging`\r\n\r\nGiven `MyDebugConfig` from earlier, I have `resolveDebugConfiguration` call `vscode.debug.startDebugging` with the payload from `MyDebugConfig.config`. `resolveDebugConfiguration` then returns `undefined`.\r\n\r\nPros\r\n* It works!\r\n\r\nCons\r\n* This does not seem compatible with the spirit of `resolveDebugConfiguration`. We're halting the requested debug session from starting and spinning up an alternate one instead of taking the requested session and setting it up to run\r\n* Unsure if there are any side effects or constraints (like a timeout limit) that come with operating from within `resolveDebugConfiguration`\r\n\r\n",
        "createdAt": "2019-07-14 17:22:35",
        "state": "open",
        "number": 77365
    },
    {
        "title": "Add folding from end of region",
        "description": "This is a simple to understand enhancement: allow folding code from the end of a region.  A gif is worth a thousand words, so here's what it looks like in action:\r\n\r\n![Fold From End 1](https://user-images.githubusercontent.com/9710256/61186426-6d5f0f00-a633-11e9-995a-c427f230f3b9.gif)\r\n\r\nHigh-level details on the implementation:\r\n\r\n- Disabled by default\r\n- When region ends intersect, the outer-most region is collapsed on click\r\n- As you can see I chose to de-emphasize the end fold icon a bit\r\n\r\nI hope you will consider pulling in this change, as I quite like being able to fold up a large region when I'm at its end to give a better idea of context around it.  If you don't want to implement this or some form of it, I've at least enjoyed playing around in the code a bit. It was a nice night of fun.",
        "createdAt": "2019-07-14 16:38:14",
        "state": "open",
        "number": 77363
    },
    {
        "title": "Option for using system Color Picker instead of inbuilt",
        "description": "macOS has a great native color picker, which is extensible and integrated with external applications like [ColorWell](https://colorwell.sweetpproductions.com/) and [Skala Color](https://bjango.com/mac/skalacolor/). I'd much rather like to use that instead of the inbuilt non-native one. Windows has a native color picker too.\r\n\r\nAn option/preference to use the native system color picker would be great.\r\n\r\nHere's a relevant project that integrated the system color picker in Electron:\r\nhttps://github.com/mockingbot/electron-color-picker",
        "createdAt": "2019-07-13 22:16:29",
        "state": "open",
        "number": 77341
    },
    {
        "title": "Emmet balance not working with typed components",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.36.1\r\n- VSCode Insiders Version: 1.37.0-insider\r\n- OS Version: Ubuntu 18.04\r\n\r\nSteps to Reproduce:\r\n\r\n1. create typed FunctionComponent\r\nexample:\r\n```\r\nimport React, {FunctionComponent} from 'react'\r\n\r\ninterface IProps {\r\n}\r\n\r\nconst SomeComponent: FunctionComponent<IProps> = (props) => (\r\n  <ul>\r\n    <li>item</li>\r\n  </ul>\r\n)\r\n````\r\n2. put cursor on li tag\r\n3. run command Emmet: Balance (outward)\r\n\r\nCurrent behavior: nothing happening\r\nExpected behavior: li tag selected\r\n\r\nSame bug with  Emmet: Balance (inward).\r\n\r\nWithout `<IProps>` everything works well.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2019-07-12 11:40:53",
        "state": "open",
        "number": 77279
    },
    {
        "title": "Option to prevent deprecated things from showing up in intellisense suggestions",
        "description": "I'd like a setting to optionally prevent deprecated things from showing up in intellisense suggestions.\r\n\r\nFor example, I'd like a way to prevent `assert.equal` from being suggested here, so that I don't use it despite a non-deprecated version being available. \r\n\r\n![image](https://user-images.githubusercontent.com/6340825/61074459-c6396800-a3e5-11e9-82ec-0800689c1464.png)\r\n\r\nMy linter can catch it, but it'd be even nicer never to see the deprecated option.\r\n\r\nThere are several documentation systems that use the `@deprecated` tag:\r\n- JSDoc: https://jsdoc.app/tags-deprecated.html\r\n- TSDoc: https://github.com/microsoft/tsdoc/blob/c5279394fa17bd6aa20ae711563b7923d44f822d/tsdoc/src/details/StandardTags.ts#L54-L58\r\n- JavaDoc: https://docs.oracle.com/javase/7/docs/technotes/guides/javadoc/deprecation/deprecation.html#javadoc_tag\r\n- Yard (for Ruby): https://www.rubydoc.info/gems/yard/file/docs/Tags.md#deprecated\r\n\r\nOther systems use different, similar tags.\r\n\r\nI'm not sure if this is an issue for the VSCode core, or for something language-specific.",
        "createdAt": "2019-07-11 18:19:16",
        "state": "open",
        "number": 77239
    },
    {
        "title": "Git: Support for gitdir",
        "description": "I use two git repositories within project folder - one is `.git` and second is `.git_dev`. First is for project and second is to track my local config files. I used to work with second via alias `git dev` which stands for `git --git-dir=.git_dev`, but for now I explore ways to list changes within both repos in git sideview.\r\n\r\nWhat I did: \r\n1. I create folder aside the main project folder(consider it `project`) and call it `project_dev`\r\n2. Initialize new repo in new folder with `git init --separate-git-dir ../project/.git_dev`. It creates file `project_dev/.git` with related line.\r\n3. Then create new file within `project_dev` folder and open it in Code. Now I'm able to view changes for both repos, but one called `project_dev` tracks the `project_dev` folder, not the `project`\r\n4. So my next step is to add setting `worktree=/path/to/project` in `.git_dev/cofig`. Now git sideview perfectly represents current changes for `project_dev` aside to main `project`.\r\n\r\nAnd here I run into two issues:\r\n1. if I try to click on changed file in `project_dev` section of sideview, an error occurs with message: `Unable to open 'filename (Working Tree)': Unable to read file (Error: File not found (/path/to/project_dev/filename)).` like it doen't respect setting `worktree` at all.\r\n2. If I reload Code, even if I open file from `project_dev` folder, second repo is not shown. If I remove `worktree` setting, `project_dev` repo is shown again and I have to add `worktree` setting again to get changes properly.\r\n\r\nExample repo:\r\nhttps://github.com/deitry/vscode-two-git-repos-issues\r\n\r\n---\r\nSo, on the one hand I consider current behaviour as buggy. On the other hand, I make a request to add option to pass as many `--git-dir`s as I want by making it a list:\r\n```\r\n\"git.gitdirs: [ \".git\", \".git_dev\"]\r\n```",
        "createdAt": "2019-07-11 13:39:52",
        "state": "open",
        "number": 77215
    },
    {
        "title": "Have a command that clears all problems that are from tasks.",
        "description": "When a user makes a change to a task and re-runs it, they could end up accumulating problems since the modified task counts as a new task.\r\n\r\nOne idea is to  clear all problems when the task config changes: https://github.com/microsoft/vscode/issues/76108\r\nBut that seems too aggressive and we'd be removing problems without telling the user why.\r\n\r\nInstead, having a command to clear the task problems is clearer.",
        "createdAt": "2019-07-11 13:38:35",
        "state": "open",
        "number": 77214
    },
    {
        "title": "Tokenization overhaul",
        "description": "The current tokenisation story of VS Code is based on TM grammars, which are pretty powerful, but we are running into their limits if we want to do something more than a top-down scanner can do. Also, once you implement a TM interpreter, you realise how inefficient the way in which regular expressions must be evaluated is and how TM grammars were not meant to do much more than simple colouring using just a few rules... The fact that we now have these complex grammars than end up producing beautiful tokens is more of a testament to the amazing computing power available to us than to the design of the TM grammar semantics.\r\n\r\nAt the time when TM grammars were introduced and became popular there were no language servers available which understand the semantics of a language. Therefore, TM grammars were also used to colour semantic constructs. The introduction of LSP has brought us language servers for many languages and it we want to leverage this power to reduce the complexity of the tokenizer/classifier. There is already effort under way to specify how such API might look under LSP at https://github.com/microsoft/vscode-languageserver-node/pull/367\r\n\r\nIn any case, for smarter languages where we offer great extensions, such as for TypeScript or C++, we have noticed two different patterns emerge to try and compensate for these limitations.\r\n\r\n---\r\n\r\n#### Complex TM grammar approach (TypeScript)\r\nThis approach was taken by TypeScript, where we now have immense regular expressions, which are a testament to the smartness of the author, but which are potentially very slow to evaluate on the UI thread:\r\n![image](https://user-images.githubusercontent.com/5047891/62771189-eddf2700-ba9c-11e9-9263-604ad468deb2.png)\r\n\r\n--- \r\n\r\n#### Text Editor Decorations (C++)\r\nThis approach was taken by C++, where we now receive potentially unbounded amounts of text editor decorations used to represent semantic tokens which are pushed by the C++ extension to correct or enhance the TM grammar. The limits of text editor decorations start to show, I have collected some of the issues under [this query](https://github.com/microsoft/vscode/issues?q=is%3Aopen+is%3Aissue+label%3Asemantic-coloring). Due to their memory cost, complexity, and breadth of usage (i.e. cannot touch the editing logic around them at this point), text editor decorations are not the right tool for this job...\r\n\r\n---\r\n\r\nBoth approaches show that there is a real need for something more, and that folks which care can get really creative and smart in tackling this need even when we lack as a platform. This issue is about overhauling how tokenization works in VS Code and tries to address multiple goals at once:\r\n\r\n#### 1. Move tokenization off the UI thread\r\n\r\nToday, TM tokenization runs on the UI thread. Even more interesting, we have numerous features (such as typing a `}` or typing `(`, `'`, `\"`, etc) where we need to know synchronously, at the time we interpret the typed character if we are in a comment, in a string, in a regex, or somewhere else... So we have code paths were we end up tokenizing the current line synchronously given the line above is tokenized in order to find out what's the exact context that we are in and then we make a decision based on that.\r\n\r\nWe have looked into this and built a prototype where we removed the synchronous tokenization... Moving this kind of classification off the UI thread entirely would result in severe flakiness... In other words, *sometimes* pressing `'` would insert `'|'` and sometimes only `'|`, in the same file, in the same location, based purely on typing speed and the time it takes to send tokens over from the web worker. Having an editor where typing something does one thing 90% of the time and another thing 10% of the time based on typing speed would IMHO be completely unacceptable.\r\n\r\nAs a one-off approach, we have written a fast classifier for comments, strings or regexes for TS, in TS. We will experiment to see if this classifier could be used synchronously on the UI thread to determine what to do when typing these characters (`}`, `'`, etc). The challenge here lies with making it incremental (not start from the beginning of the file for each keystroke). Also, since these syntax constructs are \"rare\" relative to the entire body of text, a line based representation would not be a good one. Even more ideas are that perhaps we shouldn't store the location of strings, comments, etc. but only the save-points between them given the classifier would be fast enough to compute them again.\r\n\r\nAnother idea circulating was to enable writing monarch classifiers and contributing them from extensions. This would avoid some of the bad design choices of TM, but would still mean evaluating regexes written by extensions on the UI thread. Yet another idea was to have a \"fast\" TM grammar that only deals with strings, comments and regexes and another normal one for tokens -- again with the same problem of running regexes written by extension on the UI thread. Another idea was to build some base parser, with components such as C-style comments, C-style strings, etc which could be exercised by extensions (i.e. some kind of higher-order constructs than regexes). Or maybe we should just hand write parsers for the top 90% of our languages to detect strings, comments and regexes... We have not yet taken any clear decision as we still need to experiment in this area to learn more...\r\n\r\n#### 2. Accept tokens from the extension host (semantic tokenization)\r\n\r\nMoving TM grammars off the UI thread is good for reducing our freezes and crashes, but still does not address the fundamental limitations of TM. Here we need to add API such that semantic tokens can be pushed by the extension host. These tokens should very much behave similar to text editor decorations, but have a different implementation where we can represent them with a lot less memory (just 2 or 3 32bit numbers like we do with the other tokens). We should also tweak the way they are adjusted around typing to make most sense for tokens...\r\n\r\nThey also need to be updateable incrementally and only as needed. There are discussions of using the visible ranges APIs to prioritize the regions which should receive semantic tokens first. We have not yet began drafting an API nor a reference implementation.\r\n\r\n\r\n#### 3. (low priority) Enable the integration of other tokenization engines \r\n\r\nThis is just here to remind us to keep in mind that we might want to move away from the inefficient TM grammars completely at one point in the future. There is a lot of love for Tree-Sitter nowadays and we might want to investigate using it, or we might want to roll our own story, since we do actually have a lot of experience in this area...\r\n\r\n----\r\n\r\n#### Tasks\r\n- [x] write a fast TS classifier of comments, strings, regex (done [here](https://github.com/microsoft/vscode/blob/4e23501dfa0713c8b2ba5aabe360722509f16a2b/src/vs/editor/common/modes/tokenization/typescript.ts) with tests [here](https://github.com/microsoft/vscode/blob/4e23501dfa0713c8b2ba5aabe360722509f16a2b/src/vs/editor/test/node/classification/typescript-test.ts) )\r\n- [ ] integrate the fast TS classifier and use it for synchronous classification instead of the TM engine\r\n  - [ ] figure out how to manage checkpoints and produce classifications incrementally\r\n- [x] be able to run TM grammars on a web worker in the rich client\r\n- [ ] be able to run TM grammars on a web worker in the web ui\r\n- [ ] move the TS TM grammar on a web worker and send, in batches, tokens.\r\n- [ ] move the TS TM grammar on a web worker and implement greedy viewport tokenization on it.\r\n- [ ] once we have async TM tokens, it is not that big of a leap to have async semantic tokens, so explore pushing tokens from the extension host:\r\n  - [ ] should we write another tokens store that is not line based since these tokens should be more \"rare\"?\r\n  - [ ] how do we manage two tokens stores, one owned by TM, and one owned by the extension host, how do we merge them to give a consistent picture to the editor view?\r\n  - [ ] having TM running in a web worker works because we own both the UI side and the worker side of things, so we know to remember the last N edits, until they get confirmed by the web worker, and the web worker knows which lines to retokenize given it trusts the UI side to update tokens around editing in certain ways. How should we spec this? We need to spec how the editor adjusts tokens when editing and how we expect that the extension host pushes new tokens in the edited areas...",
        "createdAt": "2019-07-10 20:59:51",
        "state": "open",
        "number": 77140
    },
    {
        "title": "ability to get/set currently selected debug configuration",
        "description": "Currently, we can run `vscode.debug.startDebugging(workspaceFolder, configName)` to run the debugger from the extension. Is there a way to change currently selected debug configuration from the extension? Something like `vscode.debug.changeCurrentDebugger(workspaceFolder, configName)` would be very helpful.",
        "createdAt": "2019-07-10 20:52:49",
        "state": "open",
        "number": 77138
    },
    {
        "title": "Migrate away from HockeyApp by November 16, 2019",
        "description": "[HockeyApp will be shut down](https://www.hockeyapp.net/blog/2018/11/16/thanks-hockeyapp-app-center-will-take-it-from-here.html) on (after?) November 16, 2019, so it would probably be a good idea to migrate crash reporting to a different service soon.\r\n\r\nTheoretically, something called \"App Center\" is supposed to be taking over HockeyApp's responsibilities, but since the [Windows Transition Plan](https://github.com/microsoft/appcenter/blob/specs/specs/2019-04/Windows-Plan.md) indicates that they neither know of Win32 support in HockeyApp nor have any immediate plans to add any to App Center, I doubt if that's actually the best option here.\r\n\r\nStarting from electron's [crashReporter](https://electronjs.org/docs/api/crash-reporter>) docs, and cross-referencing with [Crashpad overview design](https://chromium.googlesource.com/crashpad/crashpad/+/HEAD/doc/overview_design.md) (since Electron uses crashpad for Mac), it looks like breakpad protocol is used in all cases.\r\n\r\nYou could self-host:\r\n\r\n* [mini-breakpad-server](https://github.com/electron/mini-breakpad-server)\r\n* [Sentry](https://docs.sentry.io/server/) \r\n* [socorro](https://github.com/mozilla/socorro) if you're feeling adventurous\r\n\r\nOr use a 3rd party hosted solution:\r\n\r\n* [Backtrace](https://backtrace.io/electron/)\r\n* [Sentry](https://docs.sentry.io/clients/electron)\r\n* [BugSplat](https://www.bugsplat.com/docs/platforms/electron)\r\n\r\n(I may have copied and pasted most of these bullets from the markdown source of https://electronjs.org/docs/api/crash-reporter.)\r\n\r\nI guess you'd also want to rename the `hockeyApp` property in [`poduct.ts`](https://github.com/Microsoft/vscode/blob/master/src/vs/platform/product/node/product.ts)/`product.json` to something more generic.",
        "createdAt": "2019-07-10 19:06:36",
        "state": "open",
        "number": 77128
    },
    {
        "title": "allow \u2318-` as \"quick switch window\" keybinding",
        "description": "This is a macOS-only concern.\r\n\r\nI run VSCode exclusively in native fullscreen mode.  _By default_ macOS' system-level \"shortcut\" for \"Move focus to next window\" is bound to \u2318-`:\r\n\r\n![image](https://user-images.githubusercontent.com/924465/60914950-7751ce00-a23f-11e9-8852-8799a2719b0a.png)\r\n\r\n\"Move focus to next window\" _does nothing_ when apps run in native fullscreen.  When focused on a fullscreen window, macOS will _not_ switch between \"spaces\" to access a different window (fullscreen or not) from the same app.  Each native fullscreen window is considered its own \"space.\"\r\n\r\nHowever, VSCode's \"quick switch window\" keybinding (`workbench.action.quickSwitchWindow`) does just that; it will switch between these native fullscreen windows.  But binding it to \u2318-` is disallowed by VSCode's \"keyboard shortcuts\"  GUI.  Hand-editing the JSON is possible--but it doesn't actually create the binding.\r\n\r\nI am not sure if there's a technical reason for this, or just a \"recommendation\" from Apple that apps don't allow binding to the shortcut.  I _do_ know that in JetBrains' IDEs, \u2318-` works akin to \"quick switch window\" with multiple native fullscreen windows, so there either a) isn't an OS-level embargo on using the shortcut, or b) JetBrains found some way to trick macOS into switching across spaces.\r\n\r\nIf a VSCode window is _not_ run in native fullscreen, and a user uses \u2318-` to switch windows, I would expect that VSCode would either a) override macOS' system-level shortcut, or b) delegate to it.  I don't know what's preferred, as long as VSCode exhibits the behavior expected by the user.\r\n\r\nPlease let me know if this is an Electron-specific issue; if so, please close this.\r\n",
        "createdAt": "2019-07-09 19:02:25",
        "state": "open",
        "number": 77013
    },
    {
        "title": "[css] Shorthand properties: show label for each value in hover",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI'd like to have VS Code showing _box-shadow,_ _text-shadow_, _margin_ and _padding_ **options to be filled** while we are using those features, like in Dreamweaver.\r\n\r\n![boxshadow](https://media.giphy.com/media/UsHL8NtaCBPpgd8mpW/giphy.gif)\r\n\r\n...\r\n![margin-padding](https://media.giphy.com/media/iemmdtJzMy9JF3xo8d/giphy.gif)\r\n",
        "createdAt": "2019-07-09 18:50:31",
        "state": "open",
        "number": 77011
    },
    {
        "title": "Hirerarchical multi-root layout",
        "description": "Currently, the 'folders' field of a `.code-workspace` configuration file is an array of items, each of them defining a folder. Then, all of these are shown as level-1 items in the default File Explorer. I suggest to support nesting 'folder' items with arrays, which will be layout as level-1, level-2, level-3, etc. For example:\r\n\r\n``` json\r\n{\r\n  \"folders\": [\r\n    {\r\n      \"name\": \"Project A\",\r\n      \"folders\": [\r\n        {\r\n          \"path\": \"prjA/dirA\",\r\n          \"name\": \"Dir A\"\r\n        },\r\n        {\r\n          \"path\": \"prjA/dirB\",\r\n          \"name\": \"Dir B\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"Project B\",\r\n      \"folders\": [\r\n        {\r\n          \"path\": \"prjB/frontend/src\",\r\n          \"name\": \"Frontend\"\r\n        }\r\n        {\r\n          \"name\": \"Backend\",\r\n          \"folders\": [\r\n            {\r\n              \"path\": \"prjB/api\",\r\n              \"name\": \"API\"\r\n            },\r\n            {\r\n              \"path\": \"prjB/lib/src\",\r\n              \"name\": \"Library\"\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"path\": \"common\",\r\n      \"name\": \"Common\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nwhich would translate to the following File Explorer structure:\r\n\r\n```\r\n- Project A\r\n  - Dir A (prjA/dirA)\r\n  - Dir B (prjA/dirB)\r\n- Project B\r\n  - Frontend (prjB/frontend/src)\r\n  - Backend\r\n    - API (prjB/api)\r\n    - Library (prjB/lib/src)\r\n- Common (common)\r\n```\r\n\r\n---\r\n\r\nRelated to #74229, I believe that the most straighforward integration with this feature would be an option in the settings to display each level-1 item in a separate File Explorer View.\r\n\r\nAlternatively, a `group` field can be added to each item defined in the multi-root configuration file (be it a folder or an array). All the items with the same `group` identifier belong to a separate TreeView.\r\n\r\nRef #76902.\r\n\r\n---\r\n\r\nRelated to #76399, the `group` concept above would translate to an Editor Group. Hence, the shown tabs in a given Editor Group will depend on the 'location' ('group') of the currently active document.\r\n\r\n---\r\n\r\nRef #31308.\r\nRef #43188.\r\nRef #73312.\r\nRef #76891.",
        "createdAt": "2019-07-08 17:53:28",
        "state": "open",
        "number": 76904
    },
    {
        "title": "Do not update disabled extensions",
        "description": "Today I noticed that VSCode updates and installs extensions even if they are disabled. In fact, I was reminded of a couple of extensions I no longer use by the hundreds of megabytes downloaded in the background.\r\n\r\nCould you consider adding this as a toggle in settings or disabling this behavior altogether?",
        "createdAt": "2019-07-08 13:16:34",
        "state": "open",
        "number": 76879
    },
    {
        "title": "PHP auto-closing HTML tags",
        "description": "When editing a plain HTML file typing `\"</\"` brings up closing tag suggestions popup\r\n\r\nWhen the file type is \"PHP\" though - this does not work. It would be a great addition.",
        "createdAt": "2019-07-07 14:22:04",
        "state": "open",
        "number": 76800
    },
    {
        "title": "The `cursorWordPart`* commands are limited to editor text, unlike the other `cursorWord`* commands",
        "description": "- VSCode Version: 1.36.0 (system setup)\r\n- OS Version: Windows_NT x64 10.0.18362\r\n\r\nSteps to Reproduce:\r\n\r\n1. Focus on a non-editor input text field (e.g. execute the command `workbench.action.quickOpen` or `actions.find`, inter alia)\r\n2. Insert the text of the multi-part word \"fooBar\".\r\n3. Move the cursor to the end of the multi-part word text.\r\n4. Enter your keybinding for the command `cursorWordPartLeft`.\r\n\r\nExpected behavior:\r\n\r\n* Cursor moves to between \"foo\" and \"Bar\", i.e. `foo|Bar`.\r\n\r\nActual behavior:\r\n\r\n* No effect.\r\n\r\nNotes:\r\n\r\n* This limitation appears in all `inputText` contexts other than the `editorText` context.\r\n* This limitation affects all the `cursorWordPart`* commands:\r\n  * `cursorWordPartLeft`\r\n  * `cursorWordPartLeftSelect`\r\n  * `cursorWordPartRight`\r\n  * `cursorWordPartRightSelect`\r\n  * `cursorWordPartStartLeft`\r\n  * `cursorWordPartStartLeftSelect`\r\n* The corresponding whole-word commands (those without the \"Part\" infix) are not limited, i.e. they function in `inputText` contexts other than the `editorText` context.\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2019-07-06 05:48:21",
        "state": "open",
        "number": 76762
    },
    {
        "title": "Show a warning when storing workspace within installation folder",
        "description": "While I was sitting, repairing some minor details on my website created as a proposal for the school of my campus, by simply closing the Visual Studio Code, there was an update of June 2019 (v 1.36), at the time I wanted to enter to finalize only 1 details of text size, all pages, styles, javascript, jquery and others, were removed by magic and I try to recover a project which depends on my approval of the course, thank you very much.",
        "createdAt": "2019-07-04 07:10:06",
        "state": "open",
        "number": 76567
    },
    {
        "title": "Hyper modifier is unknown",
        "description": "- VSCode Version: 1.35.1\r\n- OS Version: Ubuntu 18.04.0 LTS\r\n\r\nSteps to Reproduce:\r\n\r\n1. Rebind any key to Hyper (Mod3)\r\n2. Try to create shortcuts Hyper + Key\r\n\r\nI bind **Caps Lock** to be working as **Hyper** modifier (**Mod3**). And wanted to use that in VS Code shortcuts. But whenever I press **Caps Lock** in \"Change Keybinding\" dialog it is not recognized as modifier.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled? Yes\r\n",
        "createdAt": "2019-07-03 21:40:05",
        "state": "open",
        "number": 76545
    },
    {
        "title": "Taskbar Menu Item for Opening VSCode in Remote",
        "description": "This is a feature request. Would it be possible to add an item to the taskbar menu to open VSCode in remote mode.  Something like *New Window [WSL]*.\r\n\r\n![image](https://user-images.githubusercontent.com/4192839/60618532-0c923400-9df4-11e9-9cac-3836bc927528.png)\r\n",
        "createdAt": "2019-07-03 19:12:50",
        "state": "open",
        "number": 76535
    },
    {
        "title": "[json] format on save should remove last trailing comma in JSON with json-language-features",
        "description": "I am using `json-language-features` to autoformat my JSON/C files but sometimes I accidentally add a last trailing comma on some props or forget one while moving props around. `json-language-features` will print an error then but does not autoformat it and removes the last comma or adds a missing which IMO would be very helpful.\r\n\r\nPreviously I used prettier (`json-stringify`-parser) which removed missing commas and formatted it well, but I wanted to use build in extensions to do most of the things.\r\n\r\nInput:\r\n\r\n```json\r\n{\r\n  \"nyc\": {\r\n    \"extension\": [\r\n      \".ts\",\r\n      \".ts\"\r\n      \".ts\",\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nExpected:\r\n\r\n```json\r\n{\r\n  \"nyc\": {\r\n    \"extension\": [\r\n      \".ts\",\r\n      \".ts\",\r\n      \".ts\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nReality:\r\n\r\n```json\r\n{\r\n  \"nyc\": {\r\n    \"extension\": [\r\n      \".ts\",\r\n      \".ts\" <-- Expected comma\r\n      \".ts\", <-- Trailing comma\r\n    ]\r\n  }\r\n}\r\n```",
        "createdAt": "2019-07-03 07:40:34",
        "state": "open",
        "number": 76505
    },
    {
        "title": "Search doesn't follow symlinks in a Samba share on Linux",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n- VSCode Version: 1.35.1\r\n- Local OS Version: Windows 7\r\n- Remote OS Version: Centos 6.4\r\n- Remote Extension/Connection Type: SSH\r\n\r\nSteps to Reproduce:\r\n\r\n1. Connect to remote development via SSH\r\n2. Press ```ctrl+P```, followed by a filename that exists on remote server.\r\n3. The search does not show any results\r\n",
        "createdAt": "2019-06-20 13:33:10",
        "state": "open",
        "number": 76490
    },
    {
        "title": "Compare merge conflict",
        "description": "When looking at and resolving merge conflicts, you are presented with the option to 'Compare Changes'\r\n![image](https://user-images.githubusercontent.com/45887246/60472785-14e54600-9c1f-11e9-9290-c090aa04714b.png)\r\n\r\nThe resulting side-to-side split should allow you to resolve conflict by allowing you to select which side, left (current) or right (incoming) of the conflict you want to keep through the merge.",
        "createdAt": "2019-07-01 23:42:31",
        "state": "open",
        "number": 76439
    },
    {
        "title": "Allow for configuration files in .devcontainer",
        "description": "Currently I don't seem to know a good way to have container-specific settings, tasks, and launch configurations.\r\n\r\nThe closest thing to it is to set up settings.json, tasks.json, and launch.json in the workspace .vscode folder, but then it applies to the workspace when you open it normally.\r\n\r\nIt would be ideal if we could have those same files in the .devcontainer folder and have vscode pick them up from there when the folder is opened in the container.\r\n\r\nCurrently the closest thing to it is in .devcontainer/devcontainer.json, there is a settings key which is similar to having settings.json, but i don't see anything for tasks or launch.",
        "createdAt": "2019-07-01 16:20:41",
        "state": "open",
        "number": 76415
    },
    {
        "title": "Restart language server \u2013 a generic solution",
        "description": "Quite often, I encounter a situation where some language server misbehaves and I have to **Reload Window** as the only workaround. I don't like doing that, though, as it also stops all running tasks, restarts terminals, etc.\r\n\r\nI know some language servers implement their own \"restart language server\" command, for example, TypeScript has **Restart TS Server** and there are some third-party feature requests like https://github.com/Microsoft/vscode-cpptools/issues/1152 or https://github.com/Microsoft/vscode-go/issues/2324 but would there be a way to provide this as a VSCode-wide command that works across extensions?\r\n\r\nI can imagine that a new API would need to be proposed that the extensions would need to implement, and I'm not sure how that works, but from the user perspective I'd very much appreciate the feature.",
        "createdAt": "2019-07-01 12:21:12",
        "state": "open",
        "number": 76405
    },
    {
        "title": "Simple file picker: Investigate filtering the file/folder list",
        "description": "I think it is a key feature of many of the pickers we have in VS Code that the list filters based on the input text. It would make sense to apply that to the simple file picker and maybe have a setting to switch between the more OS file picker-like behavior and the VS Code picker-like behavior.\r\n\r\nFrom looking at how it currently works: The filtering would have to be done based on only the last segment of the path in the filter text box, which will require an addition on the QuickInput side.\r\n\r\nBackground: I find tab completion in zsh more powerful (and useful) than in bash because it not only matches on prefixes, but on all parts of the filename.",
        "createdAt": "2019-06-28 13:16:37",
        "state": "open",
        "number": 76295
    },
    {
        "title": "Chrome debugger: Use port forwarding to open URL when running with a remote",
        "description": "Testing https://github.com/microsoft/vscode-remote-release/issues/754\r\n\r\nWhen the launch config has a `url` and the window is connected to a remote, the URL should be opened with the same smarts as `openExternal()` has on the remote side. /cc @mjbvz ",
        "createdAt": "2019-06-26 12:20:49",
        "state": "open",
        "number": 76259
    },
    {
        "title": "Use extension UUIDs for recommendations",
        "description": "To check if a recommended extension is installed or not, we should start using UUID of extension so that recommendations work even if the extensions are renamed.",
        "createdAt": "2019-06-27 17:53:53",
        "state": "open",
        "number": 76258
    },
    {
        "title": "[themes] Offer a theme checker that reports missing theme keys",
        "description": "In this iteration we added `tree.indentGuidesStroke`. I had to open [an issue](https://github.com/arcticicestudio/nord-visual-studio-code/issues/145) for my fav theme, but there would be countless themes that's not updated.\r\n\r\nWe should have a theme checker that would report themes that's not specifying newly added keys.\r\n\r\n/cc @bpasero @Tyriar ",
        "createdAt": "2019-06-27 12:56:57",
        "state": "open",
        "number": 76243
    },
    {
        "title": "File/folder picker: Open in new window with Ctrl/Cmd",
        "description": "Open Recent and the Welcome page use the convention that a new window is opened when the user hold Ctrl/Cmd when clicking a file/folder / pressing Enter. (QuickOpen opens a new editor group.)\r\n\r\nEspecially for folders this is very convenient.",
        "createdAt": "2019-06-26 12:11:32",
        "state": "open",
        "number": 76173
    },
    {
        "title": "Git checkout panel: divider line after local, option to sort branches by remotes",
        "description": "Please add a divider after local branches on the checkout panel (maybe an option to turn it on/off). Something like on the command palette when you start typing there is a divider after recent commands.\r\nAn other great thing would be remote branches grouped by remotes also with dividers.\r\n\r\n",
        "createdAt": "2019-06-26 07:45:52",
        "state": "open",
        "number": 76156
    },
    {
        "title": "Unable to distinguish between instances on mission control",
        "description": "When you first open VSC it always displays the welcome window. Depending on your settings opening VSC could launch several instances. And here is where the problem lies, because all the instances are launched with the welcome window you are not able to distinguish which window is for which project on mission control, all windows show \"welcome\" when you hover the mouse over them. On the gif/screen record below you can see an example with just two windows. I usually work with more than 3 so you can imagine how inconvenient this could be.\r\n\r\n![Screen Recording 2019-06-25 at 12 54 PM](https://user-images.githubusercontent.com/2270425/60093199-232bf180-9749-11e9-89db-594eb1ae2e0e.gif)\r\n\r\n",
        "createdAt": "2019-06-25 11:11:48",
        "state": "open",
        "number": 76087
    },
    {
        "title": "When terminal.integrated.inheritEnv is false on macOS, the env should be fetched via a native node module",
        "description": "The [current solution](https://github.com/microsoft/vscode/blob/8c8f79dcefde77a5df7a09c22fd85d9309706ab1/src/vs/workbench/contrib/terminal/electron-browser/terminalInstanceService.ts#L131-L142) should work in most cases but it's not perfect, AFAICT it's impossible to get the root environment using JS APIs or CLIs outside of something like psutil from Python which we can't have a dependency on.",
        "createdAt": "2019-06-25 00:17:55",
        "state": "open",
        "number": 76052
    },
    {
        "title": "Snippets: Scope by specific file or pattern",
        "description": "Global snippets already support being scoped by language and language file snippets are naturally scoped.  I would like to expand that \"scoping\" logic to specific files by matching the filename, for example.\r\n\r\nA good use case for this, let's say I want to create snippets for travis.yml file. Right now what I do is to create the snippet scoped to YAML language. \r\n\r\nThe problem is that it will appear for every YAML file which will pollute the autocomplete with not very useful results if you have snippets for multiple kinds of files that have the same extension. (I don't want to see \"travis\"  related snippets in a \"gitlab-ci.yml\" file for example) as they are not applicable.\r\n\r\nI think this is most critical for configuration files where they have a very specific scope and that you can easily restrict by looking at the filename.\r\n\r\nGoing further, we could even expand this concept for other kinds of snippets. For example, I can have some project level snippets for building queries and I only want to enable them, in Repository classes and not in Controller classes. You could scope the files it applies using a regex pattern, for example.\r\n\r\nI guess this shouldn't be very hard to do and it would vastly improve the suggestions quality of the snippets.\r\n\r\nI see adding a new field similar to \"scope\" called \"context\" or something where you can specify a regex that will match to the filename.\r\n",
        "createdAt": "2019-06-23 11:31:43",
        "state": "open",
        "number": 75955
    },
    {
        "title": "vscode-node-debug assumes debug port open when --inspect-port is used for \"attach to process\"",
        "description": "[https://github.com/microsoft/vscode-node-debug says to file issues in this repo]\r\n\r\nIf you run a node process with `node --inspect-port=1234 sleep-forever.js`, the VSCode `${command:PickProcess}` command picker suggests to connect to the process using port 1234.\r\n\r\n![image](https://user-images.githubusercontent.com/60228/59865012-e0c77680-933c-11e9-956f-5047acf28821.png)\r\n\r\nHowever, because `--inspect` wasn't specified, the port isn't opened until a `kill -USR1 <pid>` is issued, so the picker doesn't work. A workaround is to kill the process.\r\n\r\nI suspect the issue is at https://github.com/microsoft/vscode-node-debug/blob/56dc3892885b3122385b785322b00a92d33fdded/src/node/extension/protocolDetection.ts#L233 where the regexp looking for `--inspect` is finding `--inspect-port` and assuming debugging is already \"open.\"\r\n\r\nIn my environment, I'm trying to setup distinct, different ports for my different node processes so that multiple can be debugged simultaneously, so I'm using `--inspect-port` to facilitate that, but I don't wish to have the debugging enabled by default. (I'm starting the processes outside of VSCode at the moment.)\r\n\r\nNote that if the node process updates `process.title` this picker fails in other interesting ways, but that's much more of an edge case.\r\n\r\nThis issue is similar to https://github.com/microsoft/vscode/issues/46664 but I think a slightly different workflow.\r\n\r\n- VSCode Version: 1.35.1 \r\n- OS Version: Mac OS 10.14.5 \r\n\r\nSteps to Reproduce:\r\n\r\n0. Install vscode-node-debug\r\n1. Start a node process with `--inspect-port`\r\n2. Create a debug configuration following \"Attach to Process\"\r\n3. Try to attach; observe that it tries to connect using the port rather than SIGUSR1.\r\n\r\nDoes this issue occur when all extensions are disabled?: n/a\r\n\r\n\r\n",
        "createdAt": "2019-06-20 16:29:29",
        "state": "open",
        "number": 75852
    },
    {
        "title": "Allow QuickPicks to show right-aligned text like \"recently opened\" in the command palette",
        "description": "Extensions can't currently render text like \"recently opened\" here, but it'd be nice if we could.\r\n\r\n<img width=\"659\" alt=\"Screenshot 2019-06-20 at 12 09 46 pm\" src=\"https://user-images.githubusercontent.com/1078012/59845114-77536200-9354-11e9-9d3f-c434b4820465.png\">\r\n\r\nThis was raised in https://github.com/microsoft/vscode/issues/75236 and taken as a feature request, but the OP closed it, so here's a new request (cc @chrmarti) :-)\r\n",
        "createdAt": "2019-06-20 11:11:47",
        "state": "open",
        "number": 75835
    },
    {
        "title": "[folding] Fold current level",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nAs I want to view the method summary of class, I expect that I can fold all methods of class. I found these Fold Commands.\r\n\r\n![fold commands](https://user-images.githubusercontent.com/5207331/54252925-c9753200-4572-11e9-94fb-1bfa880eaecb.png)\r\n\r\nI can use `Fold Level X` command to meet my needs. But some times it's boring to count the level correctly. I found an extension having the feature meet my needs in issue #20217. But I still hope that having a build-in command such as `Fold Current Level`  that can fold the code at current level (according to the cursor)\r\n\r\n![screen shot](https://user-images.githubusercontent.com/1400574/59828237-2439d900-936d-11e9-81bf-f0da2a24d9de.PNG)\r\n\r\n",
        "createdAt": "2019-06-20 07:13:00",
        "state": "open",
        "number": 75819
    },
    {
        "title": "Improve UX for organize imports on save failures / cancellations ",
        "description": "Version: 1.35.1 (user setup)\r\nCommit: c7d83e57cd18f18026a8162d042843bda1bcf21f\r\nDate: 2019-06-12T14:30:02.622Z\r\nElectron: 3.1.8\r\nChrome: 66.0.3359.181\r\nNode.js: 10.2.0\r\nV8: 6.6.346.32\r\nOS: Windows_NT x64 10.0.18362\r\n\r\nI'm trying to execute \"Organize imports\" and getting this in the console (the imports are not affected):\r\n\r\n[2019-06-19 12:48:30.689] [renderer1] [warning] Aborted codeActionsOnSave after 750ms\r\n\r\nQuestion is.. What is that? Should i increase this timeout somehow? Is there a way to find out why it times out?\r\n\r\nI also think it should not just fail silently like it does today (only producing a record in the console), leaving me wondering why my code is not getting formatted..",
        "createdAt": "2019-06-19 18:35:01",
        "state": "open",
        "number": 75792
    },
    {
        "title": "Extensions using the \"type\" command (for ex. Vim) have poor performance due to being single-threaded with other extensions",
        "description": "I don't know if this is a known/accepted issue, but I've had a number of users complain of poor performance in the editor when using my extension along with the Vim extension.\r\n\r\nThis appears to be because the Vim extension uses the `type` command to handle keypresses (in the extension host). This means if pressing a key triggers a command that blocks in another extension (for example the first character press can trigger code completion, which if the list is 20,000 items can block the thread for a little while while they're build + serialised) the typing in the editor is really sluggish.\r\n\r\nYou can easily reproduce this by making an extension that blocks for 1s when asked for completions:\r\n\r\n```ts\r\ncontext.subscriptions.push(vscode.languages.registerCompletionItemProvider({ scheme: \"file\" }, {\r\n\tprovideCompletionItems(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken, context: vscode.CompletionContext): vscode.ProviderResult<vscode.CompletionItem[] | vscode.CompletionList> {\r\n\t\tconsole.log('Completion request');\r\n\t\tvar start = Date.now();\r\n\t\tlet i = 0;\r\n\t\twhile (Date.now() < start + 10000) {\r\n\t\t\t// Block for a second...\r\n\t\t\ti++;\r\n\t\t}\r\n\t\treturn [new vscode.CompletionItem(`aaaItem (${i} iterations)`)];\r\n\t},\r\n}));\r\n```\r\n\r\nIf you run this and enabled the Vim plugin, when you start typing on a newline (which triggers completion), the characters you type won't appear for a while.\r\n\r\nOf course, extensions should try to avoid blocking the extension host as much as possible, but sometimes it's unavoidable (for ex. assembling and serialising a huge number of completion items). It's not clear where users should raise bugs, since in isolation neither extension is really doing anything wrong.\r\n\r\nI don't know what the fix is (separate extension host for type-handling extensions might work, but that might also be a huge task), but I couldn't find any issues discussing this and figured it was worth some discussion (even if only to have the information described in one place we can point people to that hit these issue).",
        "createdAt": "2019-06-17 10:08:19",
        "state": "open",
        "number": 75627
    },
    {
        "title": "Snippet Choice confirm choice should move to next placeholder",
        "description": "When I confirm choice on a Snippet Choice options, it just stay at current placeholder and need to hit `Tab` to move to next placeholder. For a better developer experience, I think it should move to the next placeholder automatically. It because I already confirmed the choice, there is no reason stay at current placeholder.",
        "createdAt": "2019-06-16 16:19:34",
        "state": "open",
        "number": 75594
    },
    {
        "title": "Builtin support for reading files from their zip archives",
        "description": "Rel: #17271\r\n\r\n## High-level\r\n\r\nIt would be useful for VSCode to be able to read files even when they're stored within zip archives. Opening `/foo/bar.zip/package.json` would succeed. Read-only is likely fine, at least for a first iteration.\r\n\r\n## Motivation\r\n\r\n- This feature isn't unheard of. Both vim and [emacs](https://www.gnu.org/software/emacs/manual/html_node/emacs/File-Archives.html) support reading files from zip archives (they even go a bit farther by allowing to also edit them, but we might not want to have to deal with the UI complexity for now).\r\n\r\n- Package managers are experimenting with virtual install folders. Being able to read third-party files from the archives that contain them will be important to provide a good developer experience (particularly for the \"ctrl+click on a symbol to go to its definition\" workflow). Zip will be used by Yarn because of its good random access properties.\r\n\r\n## Suggested Implementation\r\n\r\n- The Yarn project ships a [wasm build](https://github.com/yarnpkg/berry/tree/master/packages/berry-libzip) of the libzip as an external package. This would make it easy to use a battle-tested zip library at little cost.\r\n\r\n- The size cost would be around ~300KB for the Zip implementation (which could be reused for other purposes - there's a bunch of things that could use Zip support down the road).\r\n\r\n- You might actually already have a library able to do that?\r\n\r\n## Why not an extension\r\n\r\n- I've started working on an extension to help with that ([vscode-zipfs](https://github.com/yarnpkg/berry/tree/master/packages/vscode-zipfs)), but it cannot be integrated as well as I'd like. In particular, it doesn't work with the ctrl+click workflow I mentionned, and running `code /foo/bar.zip/package.json` cannot open the right file. I believe a builtin integration could provide a seamless integration, which would be beneficial to the users.\r\n",
        "createdAt": "2019-06-15 09:14:52",
        "state": "open",
        "number": 75559
    },
    {
        "title": "autoAttachChildProcesses for attach type debug",
        "description": "Hello,\r\n\r\nI've been using nodejs cluster mode for a while, the autoAttachChildProcesses feature is working very well. But know that I'm migrating to docker/kubernetes, thus I need to debug the process remotely using attach, it works fine for single processes.\r\n\r\nCurrently I'm using the vscode-kubernetes extension to debug the pods, but most of my pods uses node cluster internally, resulting on master and child processes.\r\n\r\nhttps://github.com/Azure/vscode-kubernetes-tools/blob/fbd9005afed7bcaa7b4b88b543928988a301c7d0/src/debug/nodejsDebugProvider.ts#L40\r\n\r\nThe code above is the debug provider for nodejs, basically we need to find check if the process has any child process, if yes, just create a debugguer for each child process too. Setting --inspec on the master process automatically adds --inpect on each child process, incrementing the port of the master process.\r\n\r\nMaster process\r\n![image](https://user-images.githubusercontent.com/16235598/59515936-a2dad600-8e96-11e9-86da-ee3efc1db6e6.png)\r\n\r\nWorker 1 (child process)\r\n![image](https://user-images.githubusercontent.com/16235598/59516425-b0449000-8e97-11e9-8104-8c97486bb857.png)\r\n![image](https://user-images.githubusercontent.com/16235598/59516018-cb62d000-8e96-11e9-88ec-40395a4e6f07.png)\r\n\r\nI think @weinand  is the creator of autoAttachChildProcesses feature. What you think is the best solution? Modify the extension to detect child process and start multiple remote debuggers, or add the same autoAttachChildProcesses for the attach debugger?\r\nhttps://github.com/microsoft/vscode/issues/40123\r\n\r\nThank you!",
        "createdAt": "2019-06-14 14:27:42",
        "state": "open",
        "number": 75513
    },
    {
        "title": "Multi Cursor issue",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nOn use of multi cursor, \"Page down\" key or \"Down arrow\" key doesn't work properly.\r\n\r\nVS Code version: Code 1.35.0 (553cfb2c2205db5f15f3ee8395bbd5cf066d357d, 2019-06-04T01:17:12.481Z)\r\nOS version: Windows_NT x64 10.0.17134\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-06-14 09:29:34",
        "state": "open",
        "number": 75496
    },
    {
        "title": "Allow ctr+click/ctrl+hover in other places",
        "description": "allow `ctrl+click/ctrl+hover`\r\nhere\r\n![image](https://user-images.githubusercontent.com/36124472/59453676-70db5c80-8e21-11e9-857d-988bb1829fed.png)\r\nhere\r\n![image](https://user-images.githubusercontent.com/36124472/59453812-c7e13180-8e21-11e9-8582-38476338202d.png)\r\nand here\r\n![image](https://user-images.githubusercontent.com/36124472/59453862-e6472d00-8e21-11e9-94bc-f3890a373fad.png)\r\n(where showing definition)\r\n",
        "createdAt": "2019-06-13 17:29:30",
        "state": "open",
        "number": 75439
    },
    {
        "title": "Show Release Notes before update",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\nWhen VSCode shows there is an update, it would nice to see what is being updated instead of just being told to restart, and then find out after the fact.\r\n<!-- Describe the feature you'd like. -->\r\n",
        "createdAt": "2019-06-13 13:29:01",
        "state": "open",
        "number": 75422
    },
    {
        "title": "Distinct appearance for (primary) cursor while in multiple mode",
        "description": "It would be beneficial to be able to quickly **distinguish whether there is single insertion point** (cursor) or if there are multiple of them. \r\n\r\n<small>(Yes, this information is currently present in the _Overview Ruler_ to some degree, but FMPoW user must actively look for it.)</small>\r\n\r\nUse case: after invoking (e.g.) _Select All Occurrences_ one can easily forget to <kbd>Esc</kbd> - cancel multi cursor before continuing to type at \"primary\" position, effectively overwriting places out of viewport.  Then it is necessary to undo those mistypes, cancel multi cursor and start over.\r\n\r\n<small>(I feel embarrassed to tell this happens to me on daily basis.)</small>\r\n\r\nRelated: #58287 - in this context it would be especially beneficial to have the **primary** (\"active\") cursor differentiated from regular.\r\n\r\nCurrent state:\r\n![current state, no visual distinction between single and multiple cursor](https://user-images.githubusercontent.com/1761395/59339454-8018b800-8d04-11e9-8d3f-c40273cdebca.png)\r\n\r\nMockup:\r\n![Mockup of proposed change - primary cursor is drawn in magenta color and secondary in light blue](https://user-images.githubusercontent.com/1761395/59340026-88bdbe00-8d05-11e9-9ed6-0143c02ccac4.png)\r\n\r\n<small>Personally I wouldn't mind even swapping `editor.cursorStyle`: e.g. from `line` to `block` for primary cursor and to `underline` for secondary while in multi cursor mode.</small>",
        "createdAt": "2019-06-12 09:44:16",
        "state": "open",
        "number": 75327
    },
    {
        "title": "Optimize handling of globs from extension searches",
        "description": "\r\nIssue Type: <b>Performance Issue</b>\r\n\r\nOpening project folders with vscode slows down\r\n\r\nVS Code version: Code 1.35.0 (553cfb2c2205db5f15f3ee8395bbd5cf066d357d, 2019-06-04T01:17:12.481Z)\r\nOS version: Windows_NT x64 10.0.17763\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i5-7500 CPU @ 3.40GHz (4 x 3408)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>rasterization: enabled<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|15.89GB (6.99GB free)|\r\n|Process Argv|C:\\Users\\jedi\\code\\Jedi\\OBG_clint|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details>\r\n<summary>Process Info</summary>\r\n\r\n```\r\nCPU %\tMem MB\t   PID\tProcess\r\n    4\t    96\t 13912\tcode main\r\n    1\t    68\t    76\t   window (\u95ee\u9898\u62a5\u544a\u7a0b\u5e8f)\r\n    0\t    58\t  1076\t   shared-process\r\n    0\t   177\t  1564\t   window (Login.vue - OBG_clint - Visual Studio Code)\r\n    0\t    10\t  6628\t     electron-crash-reporter\r\n    0\t    11\t  6976\t     watcherService \r\n    0\t     5\t 16980\t       console-window-host (Windows internal process)\r\n    0\t    38\t 13172\t     extensionHost\r\n    0\t   105\t  2960\t       electron_node vueServerMain.js \r\n    0\t    24\t  6472\t       electron_node tsserver.js \r\n    0\t    17\t 12056\t         electron_node typingsInstaller.js typesMap.js \r\n    0\t   174\t  7732\t   window (main.js - demo - Visual Studio Code)\r\n    0\t    11\t  2444\t     watcherService \r\n    0\t    11\t  7552\t       console-window-host (Windows internal process)\r\n    0\t    62\t 14956\t     extensionHost\r\n    0\t   117\t 15816\t       electron_node tsserver.js \r\n    0\t    56\t  5284\t         electron_node typingsInstaller.js typesMap.js \r\n    0\t   161\t 10872\t   gpu-process\r\n```\r\n\r\n</details>\r\n<details>\r\n<summary>Workspace Info</summary>\r\n\r\n```\r\n|  Window (Login.vue - OBG_clint - Visual Studio Code)\r\n|  Window (main.js - demo - Visual Studio Code)\r\n|    Folder (demo): 14 files\r\n|      File types: js(4) json(2) vue(2) browserslistrc(1) gitignore(1) md(1)\r\n|                  html(1) ico(1) png(1)\r\n|      Conf files: package.json(1)\r\n|    Folder (OBG_clint): 349 files\r\n|      File types: js(149) vue(83) css(49) less(16) html(10) svg(9) jpg(9)\r\n|                  png(5) json(3) ico(2)\r\n|      Conf files: package.json(1);\r\n```\r\n\r\n</details>\r\n<details><summary>Extensions (8)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nlaravel-blade-spacer|aus|1.0.3\r\nvscode-intelephense-client|bme|1.0.14\r\ndotenv|mik|1.0.1\r\nvscode-language-pack-zh-hans|MS-|1.35.1\r\nmssql|ms-|1.6.0\r\nvetur|oct|0.21.0\r\nlaravel-blade|one|1.20.0\r\nopen-html-in-browser|pea|1.2.0\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-06-12 05:30:29",
        "state": "open",
        "number": 75314
    },
    {
        "title": "Scroll amount depends on font size",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nHello, I like to use a big font size in the editor, but something I noticed recently is that the scrolled amount is fixed, so when you scroll down, if I have a big font size, scrolling a large file becomes much slower because the lines are taller\r\n\r\nIdeally a scroll click should scroll a fixed amount of lines independent of font size\r\n\r\nThank you\r\n\r\nVS Code version: Code 1.35.0 (553cfb2c2205db5f15f3ee8395bbd5cf066d357d, 2019-06-04T01:17:12.481Z)\r\nOS version: Windows_NT x64 10.0.18362\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i5-4430 CPU @ 3.00GHz (4 x 2993)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>rasterization: enabled<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|15.88GB (5.15GB free)|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (9)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-glsllint|CAD|0.0.5\r\ntortoise-svn|fan|0.1.1\r\nsvn-scm|joh|1.53.0\r\ncsharp|ms-|1.19.1\r\npowershell|ms-|2019.5.0\r\nglassit|s-n|0.1.5\r\nshader|sle|1.1.4\r\nunity-tools|Tob|1.1.1\r\nunity-debug|Uni|2.7.2\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-06-12 03:08:01",
        "state": "open",
        "number": 75309
    },
    {
        "title": "Global regex search with \"Not matching character\" doesn't match newline",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nI was trying to search for \r\n```\r\nPromise\\.all\\(\\[[^\\]]*await[^\\]]*\\]\\)\r\n```\r\nbut I had no way to turn on multiline support so that `^\\]` would match newlines too. So searching for below would not be found.\r\n```\r\nreturn await Promise.all([\r\n  await this.someFunction1(),\r\n  await this.someFunction2(),\r\n]);\r\n```\r\nI later put in the below and was happy to find that it suddely worked, but knew that it would only find if await was on the first line after the bracket, and also if there was no chars other than newline space or tab.\r\n```\r\nPromise\\.all\\(\\[[^\\]]*[\\n\\r \\t]await[^\\]]*\\]\\)\r\n```\r\nBut, I then started to find others that actually SHOULDN'T have worked.. \r\nIt was at this point, I realsed that `^\\]` was working as expected the first time, and was matching on newline chars.. (Perfect, I removed my tab/space hack).. To find, it stopped working again..\r\n\r\nIt seems I need atleast 1 `\\n` in the regex to make it work.\r\n\r\nMy quick fix was to add this at the very end as such\r\n```\r\nPromise\\.all\\(\\[[^\\]]*await[^\\]]*\\]\\)\\n{0}\r\n```\r\nBut this is obviously a dirty hack and not an obvious one, be far better to test for `Not Matching` and turn multiline back on, similar to what ever test you are doing for searching for `\\n` and turning on multiline\r\n\r\nVS Code version: Code 1.35.0 (553cfb2c2205db5f15f3ee8395bbd5cf066d357d, 2019-06-04T01:17:12.481Z)\r\nOS version: Windows_NT x64 10.0.10240\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Xeon(R) CPU E5-1620 v3 @ 3.50GHz (8 x 3492)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>rasterization: enabled<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|15.92GB (5.33GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n</details><details><summary>Extensions (19)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nmarkdown-preview-github-styles|bie|0.1.6\r\nnpm-intellisense|chr|1.3.0\r\nssh|chr|0.0.4\r\nvue-peek|dar|1.0.2\r\nvscode-eslint|dba|1.9.0\r\nvscode-ts-auto-return-type|ebr|1.0.1\r\ntslint|eg2|1.0.43\r\nRunOnSave|eme|0.0.18\r\nprettier-vscode|esb|1.9.0\r\ntodo-tree|Gru|0.0.134\r\nnode-module-intellisense|lei|1.5.0\r\ncamelcasenavigation|map|1.0.1\r\nrainbow-csv|mec|1.1.1\r\nnode-modules-resolve|nau|1.0.2\r\nuuid-generator|net|0.0.4\r\nvetur|oct|0.21.0\r\ngitconfig|sid|2.0.0\r\nopen-in-browser|tec|2.0.0\r\nsort-lines|Tyr|1.8.0\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-06-11 13:35:51",
        "state": "open",
        "number": 75265
    },
    {
        "title": "Add git status decorations to icons in sidebar",
        "description": "I like using monochrome icon themes, because otherwise the abundance of colours becomes too distracting.\r\n\r\nHowever, it would be great if the icons could take on the colour of the git decoration of the file.\r\n\r\nObserve this difference between VSCode and Atom:\r\n\r\n![image](https://user-images.githubusercontent.com/490562/59136605-f7360f80-89d7-11e9-911e-f52b3a428e25.png)\r\n\r\n![image](https://user-images.githubusercontent.com/490562/59136615-09b04900-89d8-11e9-820d-d92903e14583.png)\r\n\r\nBecause the icons are coloured as well, providing a larger area of contrasting colour, it becomes visually much more obvious which files are modified and which aren't. \r\n\r\nWould be great if VSCode could adopt this, or if an icon theme could somehow implement this.\r\n",
        "createdAt": "2019-06-07 22:29:34",
        "state": "open",
        "number": 75102
    },
    {
        "title": "Option for auto closing comments",
        "description": "This is an implementation of feature requested in #1966.\r\n\r\nThe option itself was added in a complete inspiration of `autoClosingBraces` and `autoClosingQuotes` and it's in a separate commit to ease review of actual feature implementation.\r\n\r\nNot entirely happy with the logic implementation, but there is already quite convoluted interaction between checks in `_isAutoClosingOpenCharType` and `_typeInterceptorElectricChar`.\r\n\r\nWend with a way which minimizes amount of changes between those two.\r\n\r\nThe biggest challenge fitting this new functionality into existing `_isAutoClosing*` functions is that they are currently designed to work with a single character pairs. While it's possible to make them aware of multi-character ones, it is still seems changes to `_typeInterceptorElectricChar()` are needed. And this is where some entanglement begins.\r\n\r\nReally looking forward having feedback from a core developers to find solution which fits design in a best possible way.",
        "createdAt": "2019-06-07 07:39:30",
        "state": "open",
        "number": 75053
    },
    {
        "title": "Save width of Explorer column (sidebar) in Workspace",
        "description": "When I open a one of my workspaces it consists of all short (few letters) filenames and then another I open has some very long filenames. Is there a way currently to save the positioning of that column? I switch back and forth all day.\r\nIf not I thought that (simple sounding) idea might be considered to be added to saved settings for the saved workspace. \r\nThanks for listening and your consideration and or help.\r\nNote: I tried to find a setting or reference but seem unable. Please forgive me if I missed it.\r\n\r\n\r\n<!-- Describe the feature you'd like. -->\r\n",
        "createdAt": "2019-06-06 18:54:01",
        "state": "open",
        "number": 75017
    },
    {
        "title": "Support aligned icons (octicons) in quickpicks",
        "description": "Using octicons in quick picks is rather ugly because the icons and text are not aligned. Is it possible to have some way to align these (for ex. by making the icon a real property that will always appear to the left and be consistent width for all items in the list)?\r\n\r\n![Screenshot 2019-06-06 at 4 55 59 pm](https://user-images.githubusercontent.com/1078012/59047584-0e5fea80-887c-11e9-8d70-be093a0f02d0.png)\r\n",
        "createdAt": "2019-06-06 15:58:19",
        "state": "open",
        "number": 75000
    },
    {
        "title": "Allow to show status bar entries with an id and name",
        "description": "This would allow us to hide/show individual entries from an extension to the status bar as opposed to hiding them all. \r\n\r\n**PS:** this concept may be useful also for notifications to allow fine grained filtering.",
        "createdAt": "2019-06-06 13:14:52",
        "state": "open",
        "number": 74972
    },
    {
        "title": "Extend Extension API with QuickPickSeparator Support",
        "description": "With #21244 QuickPick Controls got the support for separators. This functionality is currently not available through the extensions API. For a nice look and feel, it would be great to make the separators available for extensions.\r\n\r\nIt seams to be not to hard to implement and I'am willing to do it, but I'am not sure from an API standpoint. Would you accept such a change?\r\n\r\nThe API could be changed in to ways:\r\n- Add a property to the QuickPickItem to show a seperator above, add this seperator in the main thread.\r\n- Add a Interface QuickPickSeparator to the extension api and change all occurrences of `items` to `(T | QuickPickSeparator)[]` or `ReadonlyArray<T | QuickPickSeparator>`",
        "createdAt": "2019-06-06 12:54:54",
        "state": "open",
        "number": 74967
    },
    {
        "title": "[json] Override/disable json-schema for package.json",
        "description": "I would like to override the default json-schema used by VSCode on some files with my own json-schema (example: VSCode use a json-schema for the Node's \"package.json\", but I want to be able to override it), like when configuring any other json-schema in settings.json:\r\n```\r\n//settings.json - currently this doesn't work and VSCode keep applying the Node's package.json json-schema\r\n\"json.schemas\": [{\r\n\t\"fileMatch\": [\"*/package.json\"],\r\n\t\"url\": \"./schemas/package.json\"\r\n}]\r\n```\r\n\r\nReason is: I'm working on a project where there's a file called \"package.json\" which is not related to Node: it's something completely different and internal to the project, and it's not even in the root directory, but I can't rename it and VSCode wrongly use the Node's json-schema and everything become an error.",
        "createdAt": "2019-06-06 07:45:25",
        "state": "open",
        "number": 74943
    },
    {
        "title": "Allow to define the lifespan of an input variable value",
        "description": "Currently, every time you run a command from task or launch, if it have an input, it would ask. It maybe useful if you can configure the life of the input variable value. \r\n\r\nSomething like:\r\n\r\n```\r\n   {\r\n      \"id\": \"appName\",\r\n      \"type\": \"promptString\",\r\n      \"description\": \"The application or project name as defined in the angular.json file\",\r\n      \"ask\": [ALWAYS, ONCE, ONCE_PER_SESSION]\r\n    }\r\n```\r\n\r\n- ask: ALWAYS This would be the default, as it's the current behavior. The value is not saved anywhere.\r\n- ask: ONCE This would ask for the value just once, and then would store it somewhere in the working directory, or the active workspace.\r\n- ask ONCE PER SESSION. This would ask for the value once, every time the windows opens, would save the variable in RAM and won't ask again until the windows has been restarted. ",
        "createdAt": "2019-06-05 19:45:31",
        "state": "open",
        "number": 74911
    },
    {
        "title": "Expect minimap functionality and similar to xcode 11",
        "description": "### The function definition is all suspended, which can be located quickly.\r\n\r\n\r\n![](https://i.loli.net/2019/06/05/5cf7a892590b853392.png) \r\n\r\n\r\n",
        "createdAt": "2019-06-05 11:34:50",
        "state": "open",
        "number": 74891
    },
    {
        "title": "FreeBSD support - now that Electron is available",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nHello Devs,\r\n\r\nElectron 4 was added to FreeBSD ports and pkg on May 28. Is it possible now to port VSCode to FreeBSD? It would be very much appreciated as there are very few decent GUI code editors on FreeBSD right now.",
        "createdAt": "2019-06-04 21:38:47",
        "state": "open",
        "number": 74857
    },
    {
        "title": "Minimap: support // Mark meta comments to support custom rendering in the minimap",
        "description": "Take a look at the minimap of Xcode 11.\r\n![Screenshot 2019-06-04 at 14 42 13](https://user-images.githubusercontent.com/100233/58880328-ef285800-86d7-11e9-8d28-b92f98f3410a.png)\r\n\r\n- Nice and clean rectangles in the right size\r\n- Colors from the syntax highlighting\r\n- Titles/separators coming from `// MARK: UISceneSession Lifecycle` in this case, but it can be used in a bunch more languages",
        "createdAt": "2019-06-04 12:51:18",
        "state": "open",
        "number": 74843
    },
    {
        "title": "[json] Allow full glob filtering for fileMatch in json.schemas",
        "description": "This would be a variation on #44135\r\nCurrently in https://github.com/Azure/azure-rest-api-specs/blob/f58c2f349207bda6f5ca4c010dd7f56c38ddb70e/.vscode/settings.json\r\nAny of the example files match both the swagger\r\n```json\r\n        {\r\n            \"fileMatch\":[\r\n                \"/**/specification/*.json\"\r\n            ],\r\n            \"url\":\"https://raw.githubusercontent.com/Azure/autorest/master/schema/swagger-extensions.json\"\r\n        },\r\n```\r\nand the example file schema\r\n```json\r\n        {\r\n            \"fileMatch\":[\r\n                \"/**/examples/*.json\"\r\n            ],\r\n            \"url\":\"https://raw.githubusercontent.com/Azure/autorest/master/schema/example-schema.json\"\r\n        },\r\n```\r\nThe current matching doesn't allow both schemas to not collide.\r\nTried some things that should probably be possible if a full glob pattern match would work\r\n```json\r\n        {\r\n            \"fileMatch\":[\r\n                \"/**/specification/*/resource-manager/*/preview/*/*.json\",\r\n                \"/**/specification/*/resource-manager/*/stable/*/*.json\"\r\n            ],\r\n            \"url\":\"https://raw.githubusercontent.com/Azure/autorest/master/schema/swagger-extensions.json\"\r\n        },\r\n```\r\nSame issue trying for negation matches with `!` with the current parsing",
        "createdAt": "2019-06-02 08:37:10",
        "state": "open",
        "number": 74744
    },
    {
        "title": "Setting extensions path in settings.json",
        "description": "it can be useful with different workspaces",
        "createdAt": "2019-06-01 10:02:37",
        "state": "open",
        "number": 74718
    },
    {
        "title": "Support object types for `TreeItem.contextValue`",
        "description": "This is a duplicate of #46236. That issue has been auto-closed, apparently due to inactivity, but I have more information about the scenario and am willing to offer a pull request.\r\n\r\nI have an extension that contributes a treeview to the Test Explorer container. Each `TreeItem` represents a test, and different tests need different context menu items enabled based on properties of those tests. For example, some tests have expected output that can be compared with the actual output in a diff view, and some don't. Failed tests need an option to accept the new output as expected, but passed tests don't. The node for a test needs different options from the node for a test suite.\r\n\r\nToday, I can sort of make this work by giving each `TreeItem` a `contextValue` string with a space-separated list of tags, and using regular expressions in my `when` condition to look for the interesting tags or lack thereof.\r\n\r\nWhat I'd prefer is to specify an object as the value for `contextValue`, and be able to access individual properties of that object using `viewItem.propName`, similar to the existing support for `context.propName` that already exists.\r\n\r\nProposed changes:\r\n- Change the type of `TreeItem.contextValue` to `any` (or some suitably restricted type that allows an object type)\r\n- Within a `when` condition, `viewItem.propName` accesses the property named `propName` on `TreeItem.contextValue`, if `TreeItem.contextValue` is an object type.\r\n\r\nIf this sounds like a reasonable feature, I'm willing to contribute the PR to implement it.\r\n",
        "createdAt": "2019-05-31 22:22:00",
        "state": "open",
        "number": 74699
    },
    {
        "title": "Render extension icons in Settings GUI",
        "description": "Actual:\r\n\r\n![actual](https://user-images.githubusercontent.com/9638156/58733592-99189380-83fd-11e9-8b88-5dcf208948ef.png)\r\n\r\nExpected:\r\n\r\n![Expected](https://user-images.githubusercontent.com/9638156/58733610-a5045580-83fd-11e9-8ad1-a8a2757d2038.png)",
        "createdAt": "2019-05-31 20:42:40",
        "state": "open",
        "number": 74696
    },
    {
        "title": "Provide a way for the user to assign layering priorities on highlighters",
        "description": "When using let's say https://marketplace.visualstudio.com/items?itemName=evgeniypeshkov.syntax-highlighter and https://marketplace.visualstudio.com/items?itemName=fabiospampinato.vscode-highlight\r\n\r\nWe have a conflict one is overriding the other. \r\n\r\nCan we have a priority setting to defined which one override the others?",
        "createdAt": "2019-05-31 19:44:22",
        "state": "open",
        "number": 74692
    },
    {
        "title": "[css] Color picker for rgba() function in CSS",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\nVSCode Version: 1.34.0\r\nCommit: a622c65b2c713c890fcf4fbf07cf34049d5fe758\r\nDate: 2019-05-15T21:55:35.507Z\r\nElectron: 3.1.8\r\nChrome: 66.0.3359.181\r\nNode.js: 10.2.0\r\nV8: 6.6.346.32\r\nOS: Linux x64 4.18.0-20-generic\r\n\r\n\r\nSteps to Reproduce:\r\n\r\n1.From dropdown for any css/color element,  select rgba option.\r\n2.Hover to rgba for displaying color picker and choose color.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n![bug](https://user-images.githubusercontent.com/45101591/58687752-cffd9380-8382-11e9-92b4-561242590d38.gif)\r\n",
        "createdAt": "2019-05-31 07:06:03",
        "state": "open",
        "number": 74664
    },
    {
        "title": "Add warning if closing a terminal with a running process",
        "description": "I'm doing machine learning research, which often involves long running processes. If I run these in a bash shell (Ubuntu 18.04) and try and close the terminal I get a warning that I'm trying to close a terminal which contains a running process.\r\n\r\nI don't get the same warning when I run a process in the vscode terminal, and there's been a number of times when I've accidentally closed either a terminal, or the whole vscode app and lost work. It would be nice if a (perhaps enabled with an option) warning to prevent this.\r\n",
        "createdAt": "2019-05-30 23:16:47",
        "state": "open",
        "number": 74642
    },
    {
        "title": "Create a node-pty host process with flow control and event batching",
        "description": "As of around a year ago node-pty is launched directly from the renderer process, while this does mean ctrl+c is responsive it has several downsides:\r\n\r\n- node-pty crashes will take down the entire window (https://github.com/microsoft/vscode/issues/71966, https://github.com/microsoft/vscode/issues/71789, https://github.com/microsoft/vscode/issues/74181)\r\n- Data events from node-pty seems to be blocked by the event loop, I suspect this is main the reason conpty is slow, it may also be slowing down non-Windows data flow too\r\n- The remote case the connection can get overwhelmed by fast producing programs.\r\n- node-pty can freeze the window when a busy loop is run in the terminal https://github.com/microsoft/vscode/issues/106391\r\n\r\nMy proposal for these problems:\r\n\r\n- Reintroduce terminalProcess to host node-pty, calling it nodePtyHostProcess is probably a better name, this protects the extension host and renderer from crashes\r\n- Batch data events inside nodePtyHostProcess (https://github.com/microsoft/vscode/issues/54093), reducing the amount of total events in favor of larger ones\r\n- Introduce a flow control mechanism which ensures the pty does not get too far ahead of xterm.js. This is a little more tricky for the remote case, one idea is to send an ack every x bytes from the renderer and nodePtyHostProcess will pause if it hasn't received the yth last ack (x and y need to be experimented with and may depend on latency) (related https://github.com/xtermjs/xterm.js/pull/2122, https://github.com/microsoft/node-pty/pull/304)",
        "createdAt": "2019-05-30 15:58:04",
        "state": "open",
        "number": 74620
    },
    {
        "title": "Add support to distinguish between diagnostics created by a reconciler and a builder",
        "description": "Short summary: currently it is very hard to handle / merge diagnostics that come from to different source having the same owner. This either leads to stale problems or missing problems. For a lengthy discussion see https://github.com/Microsoft/vscode/issues/61140\r\n\r\nHaving support to distinguish between diagnostics create by a reconciler and a builder would help solve that problem. ",
        "createdAt": "2019-05-29 09:46:20",
        "state": "open",
        "number": 74524
    },
    {
        "title": "Emmet built-in plugin cheats start with @ not added in",
        "description": "@f \r\n```\r\n@font-face {\r\n    font-family:;\r\n    src:url(|);\r\n}\r\n\r\n```\r\n@f+\r\n```\r\n@font-face {\r\n    font-family: 'FontName';\r\n    src: url('FileName.eot');\r\n    src: url('FileName.eot?#iefix') format('embedded-opentype'),\r\n         url('FileName.woff') format('woff'),\r\n         url('FileName.ttf') format('truetype'),\r\n         url('FileName.svg#FontName') format('svg');\r\n    font-style: normal;\r\n    font-weight: normal;\r\n}\r\n```\r\n\r\n@i, @import\r\n\r\n`@import url();`\r\n\r\n@kf \r\n```\r\n@-webkit-keyframes identifier {\r\n    from {  }\r\n    to {  }\r\n}\r\n@-o-keyframes identifier {\r\n    from {  }\r\n    to {  }\r\n}\r\n@-moz-keyframes identifier {\r\n    from {  }\r\n    to {  }\r\n}\r\n@keyframes identifier {\r\n    from {  }\r\n    to {  }\r\n}\r\n```\r\n\r\n@m, @media\r\n```\r\n@media screen {\r\n    \r\n}\r\n```",
        "createdAt": "2019-05-29 01:47:42",
        "state": "open",
        "number": 74505
    },
    {
        "title": "Support fixed width terminal windows",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nFor the integrated terminal, please add an option to set a fixed _logical_ width, and a horizontal scroll bar when the terminal window is smaller than the logical width. Related to #46192 (but specific to the integrated terminal). \r\n\r\nSeems also likely that this is what #48897 was asking for.\r\n\r\nThanks.\r\n\r\nVS Code version: Code 1.34.0 (a622c65b2c713c890fcf4fbf07cf34049d5fe758, 2019-05-15T21:59:37.030Z)\r\nOS version: Windows_NT x64 10.0.16299\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-05-28 22:43:32",
        "state": "open",
        "number": 74501
    },
    {
        "title": "Notepad++ \"Define your Language\"",
        "description": "There is a feature in Notepad++ that allow me to customize the display information, colors and fonts for certain types of files.\r\n\r\nIE. I have  some .out files that show some logs that I've created in other applications. Those have certain structure, and I'd like to customize certain parts of the file so I easily can read a log while I program on other window.",
        "createdAt": "2019-05-27 22:15:01",
        "state": "open",
        "number": 74429
    },
    {
        "title": "[folding] Fold All in selection",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nCurrently the Fold All works like a Fold All In FIle. So it would be great to make the Fold All applied only to the selection if there is any.\r\n\r\nVS Code version: Code 1.30.1 (dea8705087adb1b5e5ae1d9123278e178656186a, 2018-12-18T18:12:07.165Z)\r\nOS version: Windows_NT x64 10.0.17134\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-05-26 16:47:53",
        "state": "open",
        "number": 74360
    },
    {
        "title": "Automatic Space in the end of line when saving a code",
        "description": "i write code PHP every single i save a code automatic blank space in the end of line, when i not change my code or undo the code and doing action ctrl+s it automatic blank space in end of line",
        "createdAt": "2019-05-26 05:54:24",
        "state": "open",
        "number": 74346
    },
    {
        "title": "[themes] Allow to set a background color for settings / webview editors",
        "description": "[Feature Request]\r\nSet background color for generic windows.\r\n\r\n[Suggestions]\r\nwindow.bgColor, settings.bgColor, extensions.bgColor\r\n\r\n[Reason]\r\nI love my background color and all, but it only goes well with code.. Because I'm extremely used to a certain color set, but I'd rather separate code and information.",
        "createdAt": "2019-05-26 03:19:36",
        "state": "open",
        "number": 74342
    },
    {
        "title": "Support configuring PagedScreenReaderStrategy._LINES_PER_PAGE",
        "description": "PagedScreenReaderStrategy._LINES_PER_PAGE is currently used to figure out how to pagenate the textarea within the editor. \r\n\r\nThis is used in monaco during native browser selection, and results in the native browser selection getting truncated text values. \r\n\r\nI'd be great to provide this as a configurable option",
        "createdAt": "2019-05-24 21:27:02",
        "state": "open",
        "number": 74303
    },
    {
        "title": "Add \"type\" to textDocument/references results (icon, filtering)",
        "description": "The C/C++ extension wants to be able to send back references of different types that users can determine what \"type\" of reference it is and filter out unwanted types -- in order to provide functionality equivalent to Visual Studio 2019. The types are\r\n\r\n1. Confirmed reference (i.e. passes semantic checking): reference icon\r\n2. Not a reference (i.e. has the same name, but fails semantic checking): cancel icon\r\n3. Reference in a comment: comment icon\r\n4. Reference in a string: string icon\r\n5. Reference in an inactive (preprocessor) region: ? icon (or a better one, since it conflicts with 7)\r\n6. Possible reference (Confirmation in progress): progress icon?\r\n7. Possible reference (Confirmation canceled): ? icon (or a better one, since it conflicts with 5 and 7) -- this \"type\" doesn't exist in VS, but it seems like it should (at least for us).\r\n8. Cannot confirm reference (due to some bug or \"by design\" limitation): ? icon\r\n\r\nThis is the screenshot from VS:\r\n\r\n![image](https://user-images.githubusercontent.com/19859882/58290846-02e6cc80-7d70-11e9-817a-073adcc50bfb.png)\r\n\r\nOur current \"workaround\" is to only send back Confirmed References (number 1), although we also plan to have some progress UI with a button that allows users to view the Confirmation in progress (number 6 items, merged in with number 1 items). We're currently implementing this for June: https://github.com/microsoft/vscode-cpptools/issues/15 .\r\n\r\nThe relevant LSP that would need to be changed is at\r\nhttps://microsoft.github.io/language-server-protocol/specification#textDocument_references\r\n",
        "createdAt": "2019-05-23 22:38:45",
        "state": "open",
        "number": 74237
    },
    {
        "title": "Indicate a setting is overridden by language overrides",
        "description": "When a setting for e.g., `\"editor.wordWrap` is overridden by language overrides, then it will be helpful if settings UI indicate it.\r\n",
        "createdAt": "2019-05-23 11:00:34",
        "state": "open",
        "number": 74195
    },
    {
        "title": "Whitespace characters render over the top of decorations",
        "description": "If you insert some \"floating\" text using a decorations `before`/`after` properties, it's rendered underneath the whitespace markers:\r\n\r\n```ts\r\ndecorations.push({\r\n\trange: new vs.Range(\r\n\t\tnew vs.Position(line, anchorPoint),\r\n\t\tnew vs.Position(line, anchorPoint),\r\n\t),\r\n\trenderOptions: {\r\n\t\tafter: {\r\n\t\t\tcolor: \"#6666ff\",\r\n\t\t\tcontentText: \"SOME TEXT\",\r\n\t\t\twidth: \"0\",\r\n\t\t},\r\n\t},\r\n});\r\n```\r\n\r\n![Screenshot 2019-05-23 at 8 58 16 am](https://user-images.githubusercontent.com/1078012/58235650-26daeb80-7d39-11e9-9eb0-f2739386a550.png)\r\n\r\nFor my real use case, I'm drawing markers between text so it appears like this:\r\n\r\n![Screenshot 2019-05-23 at 8 53 04 am](https://user-images.githubusercontent.com/1078012/58235797-73bec200-7d39-11e9-9179-5365cd68cb4e.png)\r\n\r\nI can imagine for some use cases this might be preferred (for ex. things like the indent rainbow extension), but I think it'd also be useful to be able to draw over the top.",
        "createdAt": "2019-05-23 08:02:48",
        "state": "open",
        "number": 74187
    },
    {
        "title": "Disable all extension recommendations besides manually defined extensions",
        "description": "### Feature request\r\nIt would be nice to have the possiblity to disable all extension recommendations besides the defined extensions from `extensions.json` or workspace settings.\r\n\r\nRight now it is only possible to define **specific** unwanted recommendations, which is not sufficient for a multi-root workspace which is used by several developers.\r\n\r\nThere should be an option for `unwantedRecommendations` like `\"all\"` as a counterpart to the array.\r\n\r\nFor example in `extensions.json`:\r\n```\r\n{\r\n  \"recommendations\": [\r\n      \"VisualStudioExptTeam.vscodeintellicode\",\r\n    ],\r\n    \"unwantedRecommendations\": \"all\"\r\n}\r\n```\r\nThe same goes for a multi-root project with a shared `*.code-workspace` , e. g.:\r\n\r\n```\r\n\"extensions\": {\r\n    \"recommendations\": [\r\n\t\"VisualStudioExptTeam.vscodeintellicode\",\r\n     ],\r\n     \"unwantedRecommendations\": \"all\"\r\n}\r\n```\r\n\r\n### Background\r\n\r\nWhen using multi-root project which is used by several developers it should be possible to define one workspace-configuration file which contains all parts necessary to setup your development environment. Defining your own extension recommendations and skip all \"automatic\" recommendations is part of this process, as this ensures that every developer uses the same technology stack.\r\n\r\n",
        "createdAt": "2019-05-22 13:11:20",
        "state": "open",
        "number": 74137
    },
    {
        "title": "TextEditorDecoration applied to incorrect range if racing with user edits",
        "description": "Version: 1.33.1 (user setup)\r\nCommit: 51b0b28134d51361cf996d2f0a1c698247aeabd8\r\nDate: 2019-04-11T08:27:14.102Z\r\nElectron: 3.1.6\r\nChrome: 66.0.3359.181\r\nNode.js: 10.2.0\r\nV8: 6.6.346.32\r\nOS: Windows_NT x64 10.0.18362\r\n\r\nThe wrong text gets decorated if the user is typing when the decoration is applied.\r\n\r\nSteps to Reproduce:\r\n\r\n1. Add the following to a didChangeTextDocument handler in an extension:\r\n\r\n```\r\n        let decoration: vscode.TextEditorDecorationType = vscode.window.createTextEditorDecorationType({\r\n            color: \"#FF00FF\"\r\n        });\r\n        let txt1: string = textDocumentChangeEvent.document.getText();\r\n        let editors: vscode.TextEditor[] = vscode.window.visibleTextEditors.filter(e => e.document.uri === textDocumentChangeEvent.document.uri);\r\n        for (let e of editors) {\r\n            e.setDecorations(decoration, [new vscode.Range(1, 1, 1,10)]);\r\n        }\r\n        let txt2: string = textDocumentChangeEvent.document.getText();\r\n```\r\n\r\n2. Prepare a file with some text i.e.: \r\n\r\n```\r\nXXXXXXXXXXXX\r\nXXXXXXXXXXXX\r\n```\r\n\r\n3. Put a breakpoint immediately after the first call to getText().\r\n4. When you hit that breakpoint, inspect txt1.  You will see the contents of the file.\r\n5. While remaining at the breakpoint, paste a couple lines to the start of the file.  For example, to make the file look like so:\r\n\r\n```\r\nYYYYYYYYYYYY\r\nYYYYYYYYYYYY\r\nXXXXXXXXXXXX\r\nXXXXXXXXXXXX\r\n```\r\n\r\n6. Step past the second call to getText().  You will see it retains the original content.  This is good (better then changing the state of the document out from under us, before delivering didChangeTextDocument with the new edits).  The intention here is to set a decoration within the second line of X's, and the apparent state of the document seems to imply this is what to expect.\r\n7. Continue, allowing the didChangeTextDocument handler to return.\r\n\r\nSeeing: The decoration is applied to the wrong text.\r\n\r\n<img width=\"167\" alt=\"Capture\" src=\"https://user-images.githubusercontent.com/49173979/58141199-64376000-7bf7-11e9-8c60-3e0a5d519dce.PNG\">\r\n\r\nExpected: The decoration range(s) should get adjusted based on the pending edits.",
        "createdAt": "2019-05-22 01:44:58",
        "state": "open",
        "number": 74094
    },
    {
        "title": "Expose command/context to allow using tab to autocomplete simple dialog",
        "description": "I want to use the simple dialog but I can't share my tab to auto complete paths habit from the terminal, I'd like to be able to customize this with a keybinding like:\r\n\r\n```json\r\n{\r\n  \"key\": \"tab\",\r\n  \"command\": \"...simpledialog.autocomplete\",\r\n  \"when\": \"simpleDialogFocus\"\r\n}\r\n```",
        "createdAt": "2019-05-20 23:33:15",
        "state": "open",
        "number": 74024
    },
    {
        "title": "Expose vscode remote reconnecting UI.",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nCan an API be exposed to extensions to re-use vscode \"Reconnecting\" UI? Outside of vscode remote scenario, some extensions like liveshare do communication with another instance of vscode over the network. Being able to reconnect due to spotty network connection via the extension is very similar to the vscode remote scenario. Blocking the UI here, like vscode does during reconnection makes the network reconnection problem for liveshare simpler, else we would have to deal with coediting and other editor operations being out of sync. It would be nice, if extensions like liveshare can use the reconnecting UI that vscode uses for its remote scenario.\r\n\r\ncc @lostintangent\r\n",
        "createdAt": "2019-05-20 18:33:02",
        "state": "open",
        "number": 74016
    },
    {
        "title": "Add New Project menu item and open it to extension developers to add project types",
        "description": "Add a new menu item called New Project and then allow extension authors the ability to register their own project type and handler for it.\r\n\r\nFor example, the Electron team can create an extension that creates an Election project. When selecting that option they then create the folders and projects and open that project. \r\n\r\nFile > New Project > \r\n   - Electron\r\n   - Angular\r\n   - React\r\n   - anything else\r\n\r\n\r\n\r\n<!-- Describe the feature you'd like. -->\r\n",
        "createdAt": "2019-05-20 17:57:43",
        "state": "open",
        "number": 74014
    },
    {
        "title": "Add option to skip sorting QuickPick items",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nSimilar to https://github.com/microsoft/vscode/issues/63050, I wish to avoid the final sort on the quick pick list. I am using the quickpick as a search field, and the `items` field I set is already sorted by my relevance metric, so I do not want to have VS Code sort the list again . Specifically, I want an option to skip this block: https://github.com/microsoft/vscode/blob/a69d0f8b218498e22b7c3a0f76926cc6322e6106/src/vs/workbench/browser/parts/quickinput/quickInputList.ts#L518-L523)\r\n",
        "createdAt": "2019-05-17 17:27:39",
        "state": "open",
        "number": 73904
    },
    {
        "title": "Feature Request: Close Output when there are no problems",
        "description": "I like the new revealProblems \"onProblem\" feature. It would be nice if there was also the opposite which would be to close the output window if there are no problems at the end of a task.",
        "createdAt": "2019-05-17 14:26:02",
        "state": "open",
        "number": 73892
    },
    {
        "title": "Terminal default font not useful if editor font is proportional",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nIf the editor is set to use a proportion font, Terminal tries to use it, which causes it to default to a some font with a really wide character spacing. It should default to something nice looking instead, such as Consolas. Additionally, when you change the terminal font manually, the layout is initially wrong.\r\n\r\nRepro:\r\n1. Set the editor font to Calibri.\r\n2. Open Terminal.\r\n3. Notice that it looks like this:\r\n> W i n do w s   P o w e r S h e l l\r\n4. Set the Terminal font to Consolas.\r\n5. Notice that the font looks good now, but the right margin is misplaced (about 2/3 of the way across).\r\n6. Delete the terminal and create a new one. It looks right now.\r\n\r\nVS Code version: Code 1.34.0 (a622c65b2c713c890fcf4fbf07cf34049d5fe758, 2019-05-15T21:59:37.030Z)\r\nOS version: Windows_NT x64 10.0.18362\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-4500U CPU @ 1.80GHz (4 x 2394)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>rasterization: enabled<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|undefined|\r\n|Memory (System)|7.91GB (1.89GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|67%|\r\n</details><details><summary>Extensions (6)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-markdownlint|Dav|0.26.0\r\ngithistory|don|0.4.6\r\ngitlens|eam|9.7.4\r\ngit-project-manager|fel|1.7.1\r\nginfuru-vscode-jekyll-syntax|gin|0.1.0\r\nvscode-jekyll-snippets|gin|0.9.1\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-05-17 10:46:18",
        "state": "open",
        "number": 73879
    },
    {
        "title": "New revealProblems property in task presentation options is missing from the API",
        "description": "A new `revealProblems` property is available in the `presentation` of tasks in `tasks.json` in current Insider's builds / the upcoming 1.34. However, this property [is absent from the `TaskPresentationOptions` API in `vscode.d.ts`](https://github.com/microsoft/vscode/blob/07ec42fb0070bd629c1a7fa8f17a8183d7ac4958/src/vs/vscode.d.ts#L4851-L4885), even though historically, new options were always added there. It also doesn't seem to be respected when you ignore the type declaration and set the property via the tasks API anyway.\r\n\r\nIs this intentional, or simply an oversight?",
        "createdAt": "2019-05-16 19:02:55",
        "state": "open",
        "number": 73840
    },
    {
        "title": "Add option to disable tasks terminal closing on key press.",
        "description": "* VSCode Version:\r\n```\r\n> code --version\r\n1.33.1\r\n51b0b28134d51361cf996d2f0a1c698247aeabd8\r\nx64\r\n```\r\n* OS Version:\r\n```\r\n> ver\r\nMicrosoft Windows [Version 10.0.17134.706]\r\n```\r\n\r\nThere already had such closed [request](https://github.com/Microsoft/vscode/issues/42066), but I'm not satisfied by the fix. Now the terminal is not being closed on `ctrl+c`, but it will be useful to has an option to completely disable terminal closing on key press, because sometimes it can be incidental and the output is being lost when this happens.\r\n\r\nOr maybe an option the output from the executed task to be redirected to the output window, instead to the terminal will be also appropriate? Frankly I don't see any benefit of using a terminal window, after no interaction is needed but only showing of the task output.\r\n",
        "createdAt": "2019-05-15 17:03:36",
        "state": "open",
        "number": 73782
    },
    {
        "title": "Add more flexible Decorations or editor overlays for extensions",
        "description": "Flutter in IntelliJ/Android Studio has this new feature that draws guide lines between parent/child widgets in the code editor:\r\n\r\n![ui guides](https://user-images.githubusercontent.com/1078012/57792130-399c6180-7736-11e9-9cc6-87b3760ab664.png)\r\n\r\nThe feedback has been great and many have asked for the same in VS Code (for ex. see https://twitter.com/brwngrldev/status/1128300139980959745).\r\n\r\nI've tried to implement this in VS Code using decorations, but it's been a struggle because the decorations API wasn't really designed for this. Some of the quirks I found while trying to implement this:\r\n\r\n- Blank lines will only render the first decoration\r\n- Decorations that span multiple lines are appear individually to each line (eg. a bottom border would appear on every line in the range, not just the bottom)\r\n- Unable to render a vertical line starting at the top of an editors line other than border (which has little control over positioning)\r\n- Images that fill the whole line height will cause some lines (usually the first in a block with the decoration) to grow by a few pixels (so you have some lines in the editor taller than others)\r\n- No way to render a horizontal line that will extend automatically with its range (borders seem like they'd work, but positioning them within lines is difficult).\r\n\r\nI also noticed there are other extensions that try to do similar things in the editor that have similar quirks (things like Indent Rainbow).\r\n\r\nI'm not very confident in shipping what I've built so far because it's very quirky, but it would be a shame for VS Code users to miss out on this feature. It would be great if we had a more flexible way of drawing in the editor (without affecting the layout/positioning of code). I don't know exactly what the API/feature to support this better might look like, but for example if we could draw to a canvas and had an API to get the coordinates/size of a given character/`Position` I think we could make this much more reliable.\r\n\r\nI did look up how VS Code draws its indent guides hoping for some inspiration, but it seems like it uses features/APIs unavailable to extensions (like its own custom CSS).\r\n\r\nHere's what I have now. There are gaps between lines because I'm using ascii characters to draw (if you reduce your line height, you can eliminate these, at the expense of your lines being crushed) and because of how we have to draw it, there's also a noticeable delay when code is moved around (https://github.com/microsoft/vscode/issues/54147 would also help with that).\r\n\r\n![May-15-2019 19-12-26](https://user-images.githubusercontent.com/1078012/57798960-e9c59680-7745-11e9-80dc-da7925f470ae.gif)\r\n\r\n",
        "createdAt": "2019-05-15 16:38:19",
        "state": "open",
        "number": 73780
    },
    {
        "title": "Be able disable task detection from tasks.json or override tasks execution",
        "description": "Currently VSCode uses `tasks.json` to detect the tasks. If there is a `FileSystemProvider` registered, it will use it to read `tasks.json`. The problem with that is the tasks may not make sense if they come from something else other than `file:/.../.vscode/tasks.json`. E.g. if the file system provider is of a remote kind (like fetching files from sftp or Live Share), tasks from `tasks.json` most likely won't work locally.\r\n\r\nTo deal with this scenario, VSCode may provide different options:\r\n1. An ability to override task execution for any tasks from `tasks.json`. This work may be merged into #33523. VSCode should pass along the URI of the original `tasks.json` to the extension code that overrides the task execution.\r\n1.  An ability to disable tasks detection from `tasks.json` based on the file scheme. This will be a new API. Alternatively, you can make VSCode respect `tasks.json` only from `file:` scheme and let the extensions opt in other schemes if they so chose.\r\n\r\n",
        "createdAt": "2019-05-14 22:49:22",
        "state": "open",
        "number": 73748
    },
    {
        "title": "Upper-case aware completion when opening folder with remote ssh",
        "description": "Hi,\r\n\r\nWhen opening folders or files while using remote access through ssh with VS Code insiders (thanks, it is working fantastic and as expected),  text completion seems oblivious to upper-case when suggesting files. Let me show you with an example.\r\n\r\nLet's say you want to open ./Axyz but . also contains folders abc.\r\nWhat happens usually is that one would press \"A\" and then tab, expecting it to get completed as Axyz. Instead, VS Code Insiders puts the prompt over the first choice in alphabetical order, abc. Thus, doing \"A\"+TAB complets as /abc/.\r\n\r\nIt is counter-intuitive with every other text completion that I know, including Intellisense, could you please change that or add an option ?\r\n\r\nIt is clearly more a nice-to-have than a must have, as it saves max 2 key press by completion, but we are all lazy.",
        "createdAt": "2019-05-13 09:02:23",
        "state": "open",
        "number": 73658
    },
    {
        "title": "Improve handling of extensions when workspaceContains times out",
        "description": "I had an issue raised by a user that say my extension activate spawn its language server while they were working on an unrelated (non-Dart) project (https://github.com/Dart-Code/Dart-Code/issues/1699).\r\n\r\nIt turns out that there is a hard-coded timeout of 7 seconds for `workspaceContains` activation events and this user hit that (possibly through a combination or large folder, and machine being busy, other extensions loading, running emulators etc.):\r\n\r\nhttps://github.com/microsoft/vscode/blob/b4cd3749542a0da6f9cf830d49fdc4bd9e9bc4f5/src/vs/workbench/api/node/extHostExtensionService.ts#L50\r\n\r\nThe behaviour when this timeout is hit is to pre-emptively activate the extensions in this case. I understand why this is done but it seems like it may trade one problem (searching the tree) for another (activating a bunch of unrelated extensions that may spawn language servers).\r\n\r\nI think there should be more control (for users or extensions) over this behaviour, for example:\r\n\r\n- Being able to configure the timeout\r\n- Being able to change the behaviour of whether to load extensions when this happens (or be prompted and warned)\r\n- Showing the activation reason in the \"Show Running Extensions\" section\r\n- Allowing extensions to control whether to activate when workspaceContains times out (in my case, it's fine not to - workspaceContains is for convenience so the user doesn't need to open a `.dart` file before we activate, but if no Dart or pubspec.yaml was found in 7 seconds, it would be preferable to wait for the user to open one (or one be discovered in the tree) before activating)\r\n- Telling the extension the activation reason (https://github.com/microsoft/vscode/issues/44711)\r\n\r\nOf course, the extension could scan the tree and not spawn the language server, but then it's just doing the work that VS Code specifically was trying to avoid, and if multiple extensions are all doing it, it'll be worse performing than if VS Code did it!",
        "createdAt": "2019-05-13 08:47:28",
        "state": "open",
        "number": 73656
    },
    {
        "title": "A snippet definition should not require a \"prefix\" property to be considered valid",
        "description": "Snippets are typically for things we use often, but they are also useful for things we use less often, but all the same want to automate.\r\n\r\nIn those cases, it's not worth having to come up with a `prefix` (a.k.a `tabTrigger` in TextMate/Sublime parlance) for autocompletions purposes, because we can just use VSC's `Insert Snippet` command to find and insert those snippets.\r\n\r\nUnfortunately, when defining snippets in a `.code-snippets` file, if we omit a `\"prefix\": \"foo\"` key/value, that snippet is considered invalid (gets a squiggly underline) and hence is not offered in the list shown by the `Insert Snippet` command.\r\n\r\nPlease make the `prefix` property optional.\r\n\r\nREF: https://code.visualstudio.com/docs/editor/userdefinedsnippets\r\n",
        "createdAt": "2019-05-12 12:42:43",
        "state": "open",
        "number": 73635
    },
    {
        "title": "Emmet does not expand c:ra to color:rgba()",
        "description": "- VSCode Version: VSC 1.33.1\r\n- OS Version: Windows 10 Home Single Language\r\n\r\n![captura](https://user-images.githubusercontent.com/46495310/57576396-9b9e5380-7424-11e9-8cc5-54efeac7a86f.png)\r\n\r\n\r\nSteps to Reproduce:\r\n\r\n1. When using emmet in css and trying to write c: ra should generate color: rgba (); but this is not the case since he writes color: ra; and it's really uncomfortable.\r\n2.  According to the emmet documentation this should not generate another code than the proposed one.\r\n3. I also look at the documentation offered by Microsoft for emmet but nothing solves this error.\r\n\r\n",
        "createdAt": "2019-05-12 00:46:25",
        "state": "open",
        "number": 73627
    },
    {
        "title": "Cannot set embedded language indentation rules",
        "description": "Related: https://github.com/vuejs/vetur/issues/534\r\n\r\nVetur extension defines two languages: `vue` and `vue-html`.\r\n\r\nI can only use `languages.setLanguageConfiguration` to set indentation rule of the outer language `vue` but not the embedded `vue-html`.\r\n\r\nWith this API call, here's what I see:\r\n\r\n```ts\r\nexport function registerLanguageConfigurations() {\r\n  // languages.setLanguageConfiguration('vue', {\r\n  //   indentationRules: {\r\n  // \t\tincreaseIndentPattern: /<(?!\\?|(?:area|base|br|col|frame|hr|html|img|input|link|meta|param)\\b|[^>]*\\/>)([-_\\.A-Za-z0-9]+)(?=\\s|>)\\b[^>]*>(?!.*<\\/\\1>)|<!--(?!.*-->)|\\{[^}\"']*$/,\r\n  // \t\tdecreaseIndentPattern: /^\\s*(<\\/(?!html)[-_\\.A-Za-z0-9]+\\b[^>]*>|-->|\\})/\r\n  //   },\r\n  // });\r\n  languages.setLanguageConfiguration('vue-html', {\r\n    indentationRules: {\r\n      increaseIndentPattern: /<(?!\\?|(?:area|base|br|col|frame|hr|html|img|input|link|meta|param)\\b|[^>]*\\/>)([-_\\.A-Za-z0-9]+)(?=\\s|>)\\b[^>]*>(?!.*<\\/\\1>)|<!--(?!.*-->)|\\{[^}\"']*$/,\r\n      decreaseIndentPattern: /^\\s*(<\\/(?!html)[-_\\.A-Za-z0-9]+\\b[^>]*>|-->|\\})/\r\n    }\r\n  });\r\n}\r\n```\r\n\r\n![bug](https://user-images.githubusercontent.com/4033249/57496844-e899f280-7289-11e9-94d0-7145034d56ca.gif)\r\n\r\nIf I remove the commented-out call to set `indentationRules` of `vue` language, then it seems to work. However, I'm worried it'll affect other non `vue-html` regions such as css/javascript.\r\n\r\nYou can repro by:\r\n\r\n- Checking out this branch of Vetur: https://github.com/vuejs/vetur/tree/embedded-indentation-rules\r\n- Compile with\r\n\r\n  ```bash\r\n  yarn\r\n  cd server && yarn && cd ..\r\n  yarn compile\r\n  ```\r\n- Run the `client` debug config to test it\r\n\r\nIn short:\r\n- In `vue-html` embedded in `vue`, I would expect setting `vue-html`'s indentation rules would affect move line up/down\r\n- I have to set both indentation rules for `vue` and `vue-html` to achieve this, which would have some side effect",
        "createdAt": "2019-05-10 01:46:01",
        "state": "open",
        "number": 73559
    },
    {
        "title": "Suggest install of recommended extensions after rebase",
        "description": "Currently our project is sharing a `.vscode/extensions.json`. This is a great way to keep users in a project in sync on what extensions are good to use.\r\n\r\nIf I add a new extension in this file and then push to master, and another users pull's in the change, it would be cool for them to directly get a notification to install the new recommended extensions.\r\n\r\nThis works fine if the user restarts/reloads the windows, but many of us keep VS Code open for weeks without closing it. If the user could get an immediate notification after a rebase it would make life simpler.",
        "createdAt": "2019-05-09 14:43:29",
        "state": "open",
        "number": 73533
    },
    {
        "title": "Stabilize FileSearchProvider API",
        "description": "@roblourens I created this issue in the hope `FileSearchProvider` is going to get finalized at some point. If yes, maybe add the api-finalization label here.\r\n\r\nIf I'm out of order creating this, or if I've overlooked another issue dealing with its finalization, please close.\r\n",
        "createdAt": "2019-05-09 10:10:29",
        "state": "open",
        "number": 73524
    },
    {
        "title": "Issue Reporter - link to wiki page about writing good reports",
        "description": "[This wiki page](https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions) contains good guidance but I have the feeling some folk find the Report Issue option on VSCode's Help menu without also finding that wiki page.\r\n\r\nI suggest the Issue Reporter dialog gets a link added to it.\r\n",
        "createdAt": "2019-05-09 06:17:01",
        "state": "open",
        "number": 73512
    },
    {
        "title": "Reload CSS when running out of sources",
        "description": "@misolori asked if we could reload the CSS if it changes on disk when running from source.\r\n\r\nthis would be a fun exercise",
        "createdAt": "2019-05-08 15:02:47",
        "state": "open",
        "number": 73475
    },
    {
        "title": "Splitview: support to exclude certain views from proportional resize when they are at their minimum",
        "description": "From #72969",
        "createdAt": "2019-05-08 08:53:43",
        "state": "open",
        "number": 73453
    },
    {
        "title": "Add shift+ctrl option to editor.multiCursorModifier setting",
        "description": "In Xcode multiple cursors is activated via shift+ctrl and clicking. Could that option (or just any recorded modifier combination) be added to the list of options for editor.multiCursorModifier?\r\n\r\nhttps://stackoverflow.com/questions/50696995/multi-cursor-editing-in-xcode-10",
        "createdAt": "2019-05-06 19:57:38",
        "state": "open",
        "number": 73367
    },
    {
        "title": "Upgrading a theme currently requires a window reload",
        "description": "If you publish an update to a theme, VS Code will download it automatically but not apply the changes until you do a full reload. There is also no button to reload the window in the extension viewlet.",
        "createdAt": "2019-05-05 17:43:14",
        "state": "open",
        "number": 73306
    },
    {
        "title": "Ability to download older extension version from Marketplace",
        "description": "At my current client I'm forced to develop on a Citrix VM that's blocked from Internet access.\r\n\r\nSo I need to download Visual Studio Code and all extensions on my local machine, copy them to the VM and install them from there.\r\n\r\nCurrently, the latest German Language Pack extension (v1.34.0) doesn't match the latest VS Code version (1.33.1), so I cannot install:\r\n\r\n![image](https://user-images.githubusercontent.com/9283914/57142561-1c25da00-6dbd-11e9-93f6-a006518ee163.png)\r\n\r\nSo, please add an option to Marketplace to allow for downloads of older extension versions.",
        "createdAt": "2019-05-03 14:05:32",
        "state": "open",
        "number": 73234
    },
    {
        "title": "Background tasks with activeOnStart:false shouldn't show problems if beginsPattern isn't matched",
        "description": "Currently, background tasks where `activeOnStart` is `false` emits problems into the Problems pane, even if `beginsPattern` is not matched by the output. If begin/end patterns do match, then problems are shown immediately after the matching line(s) is output. But if they begin pattern doesn't match, then problems are still shown-- albeit after a few-second delay.\r\n\r\nI assume that this behavior is intentional as a fallback if begin/end patterns are missing. But if begin/end pattens are preset but incorrect (which will often be the case when building or troubleshooting task configs) then this behavior makes is really hard to debug the begin/end patterns because you don't know if they're working or not.\r\n\r\nFurthermore, the problems that show up in this case cannot be removed until you close and re-open VSCode.  This means you can't tell the difference between a successful iteration of task config and left-over problems from the previous task run. If you're building a new task config, you might need 50+ iterations before getting the all the regexes right. Each iteration requires closing VSCode, reopening VSCode, re-opening the workspace, and re-running the task.  This is incredibly frustrating.\r\n\r\nInstead of the current behavior, I suggest that VSCode should not emit any problems if all the following conditions are satisfied:\r\n* `isBackground` is `true`\r\n* `activeOnStart` is `false`\r\n* `beginsPattern` is present (truthy)\r\n* `beginsPattern` is not matched by the task output\r\n\r\nChanging this behavior would make it clear whether a begin/end pattern pair is working or not, because if it's not working then no problems will show up in the problems pane.\r\n\r\nBTW if you want to see the current behavior with a test repo, here are repro steps: \r\n\r\n1. `git clone https://github.com/justingrant/problem-matcher-cra.git`\r\n2. `cd problem-matcher-cra`\r\n3. `npm install`\r\n4. break the `beginsPattern` in tasks.json, e.g. by replacing \"^\" with \"^xxxxx\" at the start of the `beginsPattern` regex and save the tasks.json file\r\n5. run the `npm start` task using the Debug->Run Task... menu\r\n\r\nExpected: no problems shown in the Problems pane (because `beginsPattern` doesn't match anything)\r\nActual: after a few-second delay, one problem is shown\r\n\r\n6. Now press CMD+C (or Ctrl+C on Windows) to quit the task. \r\n7. Break the `beginsPattern` in some other way, e.g. by changing \"xxxxx\" to \"yyyyy\". This simulates the normal, iterative process of building a problem matcher where you try different regxes until you get the right ones.\r\n8. Go to App.tsx and comment out this line of code: \r\n```typescript\r\nconst eslintWillComplain = 'foo';\r\n```\r\n9. Save that file, which will trigger a background recompilation. \r\n\r\nExpected: no errors shown in the Problems pane (because we just commented out the only line of code that was causing a problem) \r\nActual: the old problem persists, even though we've fixed the problem in code. \r\n\r\nOnce that persistent problem is shown, there's no way to get rid of it without closing and reopening VSCode or by running a working version of the task config, which you won't have because you generally only run into this problem when you don't (yet) have a working version of task config!",
        "createdAt": "2019-05-03 02:33:58",
        "state": "open",
        "number": 73202
    },
    {
        "title": "Splitting terminal opens default shell instead of current one",
        "description": "- VSCode Version: 1.33.1\r\n- OS Version: Microsoft Windows 10 1809\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open a terminal with a non-default shell - e.g. my default shell in VSCode is cmd, so I would open WSL.\r\n2. \"Split\" the terminal using the terminal menu bar icon, or the key shortcut (default is ctrl+\\)\r\n3. The default shell, rather than the current shell.\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\nIdeally the shell already in use in the terminal should be the one used for the split terminal.\r\nOn one level the current behaviour kind of makes sense, but is pretty unintuitive.\r\nAlso, with this issue in place, I'm actually not sure how else I can get a split terminal with non-default shell in any other than the first split?\r\n",
        "createdAt": "2019-05-02 21:30:42",
        "state": "open",
        "number": 73194
    },
    {
        "title": "Regex pattern to clear all problems of a task owner",
        "description": "Some compilers or build pipelines (e.g. create-react-app) emit different output if there are no errors vs. if there are 1+ errors or warnings.  This makes it difficult to build problem matchers because start/end patterns need to have both a \"errors\" and a \"no errors\" version inside the same regex.\r\n\r\nIt would be better if there were a new pattern in task config (e.g. `clearAllPattern`) that, if found, would clear all existing problems from the current owner.  \r\n\r\nFor non-background tasks this would be straightforward-- if the pattern is matched, then clear all problems from the owner and ignore all problems from the currently-executing task until the task exits.\r\n\r\nFor background tasks, it'd be a little more complicated: \r\n1) clear all problems from the owner\r\n2) reset the state if it's currently after a `beginsPattern` but before an `endsPattern`\r\n3) wait until the next `beginsPattern` before logging more problems.\r\n\r\nAs a side effect, this feature would provide an escape hatch for users who want to clear problems by running a task (#50448), because you could create a task with a `clearAllPattern` that always matches.",
        "createdAt": "2019-05-02 18:40:40",
        "state": "open",
        "number": 73186
    },
    {
        "title": "TextEditorDecorators should also be rendered in minimap",
        "description": "How about rendering text decorators in the minimap?  It looks like textmate colorization is applied, but decorators are not.\r\n\r\nWe'd like to colorize based on EDG parser results.  We're investigating doing colorization programmatically from our extension using text decorators. \r\n",
        "createdAt": "2019-05-01 19:38:14",
        "state": "open",
        "number": 73140
    },
    {
        "title": "Enable FileSystemProvider to stat a file as readonly",
        "description": "Currently a [`FileSystemProvider`](https://code.visualstudio.com/api/references/vscode-api#FileSystemProvider) can register as readonly, meaning that every file it provides is opened in a readonly editor. This is nice, but even better if the [`FileStat`](https://code.visualstudio.com/api/references/vscode-api#FileStat) it returns from its stat() method had an optional `readonly` property. Then I think [this line](https://github.com/Microsoft/vscode/blob/c1abf7978d59415dcfcf8cfcb15e0ee30c5e45a5/src/vs/workbench/services/files/common/fileService.ts#L206) could easily treat a true readonly value as a signal to set `isReadonly` true. @bpasero what do you think?",
        "createdAt": "2019-05-01 10:04:24",
        "state": "open",
        "number": 73122
    },
    {
        "title": "For long hovers, errors appear all the way at the bottom and require scrolling",
        "description": "I'm not sure if this is new, but I'm seeing it a lot lately. When I hover over some code with a red squiggle, if the hover/tooltip has a long description, I have to scroll all the way to the bottom to find the error.\r\n\r\n<img width=\"563\" alt=\"Screenshot 2019-05-01 at 9 41 21 am\" src=\"https://user-images.githubusercontent.com/1078012/57010602-74aa7b00-6bf5-11e9-83ef-2201f316084b.png\">\r\n<img width=\"594\" alt=\"Screenshot 2019-05-01 at 9 41 30 am\" src=\"https://user-images.githubusercontent.com/1078012/57010603-74aa7b00-6bf5-11e9-88ac-6d7578ce8266.png\">\r\n\r\nI think it would be better if errors/warnings were either at the top, or somehow docked at the bottom of the tooltip, so you don't have to scroll to get to them. Some tooltips a REALLY long and it's a pain. I'm aware of the F8 functionality, I just prefer the tooltips :-)",
        "createdAt": "2019-05-01 08:43:59",
        "state": "open",
        "number": 73120
    },
    {
        "title": "Make scroll bar opaque",
        "description": "Steps to Reproduce:\r\n\r\n1. Turn off Word Wrap. \r\n2. Disable Minimap.\r\n3. Write a long line.\r\n4. The line is visible under the scroll bar.\r\n\r\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2019-05-01 16 50 36](https://user-images.githubusercontent.com/10665499/57009477-cc66d780-6c31-11e9-87b8-9a9568da9100.png)\r\n\r\n",
        "createdAt": "2019-05-01 07:56:00",
        "state": "open",
        "number": 73117
    },
    {
        "title": "Add a button to open Find All References from Peek References",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nWhile I typically like to use Peek References (and want to keep it as the default for code lens), once it opens depending on the number of items, I'll then often want to \"upgrade\" the peek to a full Find All References, but it is not convenient to do so. It would be great if there were a button somewhere like below to run Find All References once the peek is open:\r\n\r\n![image](https://user-images.githubusercontent.com/641685/57004802-fa034080-6b9f-11e9-98da-6c1bbd83ec39.png)\r\n\r\n\r\nVS Code version: Code - Insiders 1.34.0-insider (473af338e1bd9ad4d9853933da1cd9d5d9e07dc9, 2019-05-01T00:22:05.899Z)\r\nOS version: Windows_NT x64 10.0.18362\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-05-01 03:33:28",
        "state": "open",
        "number": 73111
    },
    {
        "title": "Expose offline/online detection to extensions",
        "description": "Our Atlassian extension relies heavily on an internet connection and when the user goes offline, we need to disable some functionality and enable it when the user comes back online.\r\n\r\nCurrently, vscode doesn't expose offline/online events to extensions and so we have to use our own polling to do this which is not great.\r\n\r\nIt would be awesome if vscode allowed extensions to register to receive offline/online events.",
        "createdAt": "2019-04-30 17:35:49",
        "state": "open",
        "number": 73094
    },
    {
        "title": "Enumerable properties mixed with regular properties ",
        "description": "When you inspect an object the debugger shows enumerable properties in alphabetical order along with regular properties making no visual or practical distinction. \r\n\r\nSo this is a feature request to be like in Chromium browser's debugger which shows regular properties first, and then lists enumerable properties separtely - and also applies a nice 'grayed out effect' indicating they are enumerable. ",
        "createdAt": "2019-04-30 03:49:44",
        "state": "open",
        "number": 73061
    },
    {
        "title": "[folding] make max folding region limit configurable",
        "description": "- VSCode Version: 1.32.1\r\n- OS Version: Win7 x64\r\n\r\nSteps to Reproduce:\r\n\r\n1. Set in editor settings:\r\n`\"editor.folding\": true,\r\n\"editor.foldingStrategy\": \"indentation\"`\r\n\r\n2. Open the attached file and go to line 43914 where folding stopped working.\r\n\r\n[test_ident.zip](https://github.com/Microsoft/vscode/files/3124928/test_ident.zip)\r\n\r\n3. Delete couple of blocks of code - folding starts working again.\r\n\r\nDeveloper of folding extension \"Explicit Folding\" pointed out to me that there is a hard limit of 5000 foldings per file. If it is so than I guess this is not a bug report but a feature request for editor setting in order to increase this limit.  In my case, folding stopped working in file with about 35000 lines - which is not that many.\r\n\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\n\r\n\r\n",
        "createdAt": "2019-04-28 11:50:05",
        "state": "open",
        "number": 72994
    },
    {
        "title": "[folding] Support flags on folding.markers RegExps",
        "description": "A `language-configuration.json` file can supply a pair of regular expressions `start` and `end` [(doc)](https://code.visualstudio.com/api/language-extensions/language-configuration-guide#folding). At the moment there's no way to specify regexp flags, for example to make the matches case-insensitive.\r\n\r\nPrevious enhancements tackled a similar issue for `wordPattern` and `indentationRules` by allowing their regexps to be objects with `pattern` and `flags` properties.\r\n\r\nPlease enhance languageConfigurationExtensionPoint.ts [(code pointer)](https://github.com/Microsoft/vscode/blob/a47406b9c8aeed71e2b26ee41e0f275ead87da04/src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts#L313) to support `pattern` and `flags` on `start` and `end`. See also https://github.com/Microsoft/vscode/issues/27591#issuecomment-305175307\r\n\r\nIt'd also be good to augment [the doc](https://code.visualstudio.com/api/language-extensions/language-configuration-guide) , which currently doesn't mention the pattern+flags syntax.",
        "createdAt": "2019-04-28 06:10:09",
        "state": "open",
        "number": 72989
    },
    {
        "title": "Source Control: \"Accept All Incoming\" for \"deleted by them\" should delete the file from working copy and stage the change",
        "description": "When:\r\n![image](https://user-images.githubusercontent.com/611746/56856209-41c56600-691b-11e9-8e15-646bdd3c2820.png)\r\n\r\nActual:\r\n\r\n- warning message: No merge conflicts found in this file\r\n\r\n![image](https://user-images.githubusercontent.com/611746/56856211-4f7aeb80-691b-11e9-9711-d8506c000d03.png)\r\n\r\nExpected:\r\n\r\n- delete file from working copy\r\n- stage the change (`git add`)\r\n\r\nVS Code 1.33.1",
        "createdAt": "2019-04-27 23:37:16",
        "state": "open",
        "number": 72976
    },
    {
        "title": "[themes] Support for hue, saturation, lightness (HSL) color codes for theming",
        "description": "Support for hue, saturation, lightness (HSL) color codes for theme colors would allow for easier iteration in theme design by providing a more human readable format for color codes.\r\n\r\nI find it much easier to modify color values using HSL than it is with hex codes because the values being modified more closely model how humans think about color rather than how the computer renders color.\r\n\r\nExample:\r\n```jsonc\r\n{\r\n  \"colors\": {\r\n    \"editor.background\": \"hsla(301, 46%, 9%, 1)\", // #220c21,\r\n  }\r\n}\r\n```",
        "createdAt": "2019-04-27 02:18:04",
        "state": "open",
        "number": 72945
    },
    {
        "title": "Tabstops on the fly",
        "description": "Create tabstops like you would find in snippets by adding cursors around. Would be very helpful to navigate and type data with a pre-defined path.\r\n\r\n![image](https://user-images.githubusercontent.com/46059092/56820522-0a37ba80-6844-11e9-9f1f-78d7f85b9610.png)\r\n\r\n\r\nThe last one should be the equivalent of `$0` in snippets.  ",
        "createdAt": "2019-04-26 15:49:21",
        "state": "open",
        "number": 72926
    },
    {
        "title": "Provide a way for extensions to open the keybindngs editor with a query",
        "description": "Issue Type: **Feature Request**\r\n\r\nI'm a collaborator of [vscode-leetcode](https://github.com/jdneo/vscode-leetcode) extension, and frequently there are rookies asking how to bind 'test' or 'submit' command to a specific key binding, like [this issue](https://github.com/jdneo/vscode-leetcode/issues/262).\r\n\r\nIf we can show a message to tell them how to do it, and an option to guide them to a pre-filtered keybinding editor like this:\r\n![](https://user-images.githubusercontent.com/20227484/55670915-77e36d00-58bc-11e9-93b7-4dba00ff8348.png)\r\n\r\nThen the issues about it should be reduced.\r\n\r\nThe same goes for settings editor(solved in @rebornix 's [e5c1c22](https://github.com/Microsoft/vscode/commit/e5c1c2258e421db353c2a2ee1a04da31837a7e77#diff-dfd9031c00a144c2364595f331243744)), where our webview [uses built-in markdown preview settings](https://github.com/jdneo/vscode-leetcode/issues/246) to control its appearance. If we can open the settings editor with pre-filtered query 'markdown.preview', then users would find it  easy to modify the settings as they want.\r\n\r\nSome early investigations are covered in https://github.com/Microsoft/vscode/issues/72352#issuecomment-486619632, which might be of some help.\r\n",
        "createdAt": "2019-04-25 17:21:27",
        "state": "open",
        "number": 72878
    },
    {
        "title": "Emmet: Add support for 'css.color.short' Emmet preference",
        "description": "By default:\r\ncolor: #666666\r\n\r\nIs required:\r\ncolor: #666\r\n\r\nWhere this option?",
        "createdAt": "2019-04-23 06:13:53",
        "state": "open",
        "number": 72748
    },
    {
        "title": "Option for unified Search / Replace Bar",
        "description": "I like the way that sublime text has a unified search / replace bar for all open tabs. The search is executed on the tab with focus. Usually when I'm searching, I'm searching for the same text across multiple files. In VS Code, this happens:\r\n\r\n-> Search in one tab\r\n-> Switch to another, open search\r\n-> Realize I need the search term from the other tab\r\n-> Mouse over to the other tab. Select the search term, copy.\r\n-> Go back to my original tab.\r\n-> Paste and search again\r\n\r\nThis is tedious and interrupts my workflow. A \"Sync Search\" or \"Unified Search\" option would be very helpful.  That is to say, either a single search widget across all tabs to the replace the per-tab search widgets, or the ability to keep all search widgets in sync.",
        "createdAt": "2019-04-22 18:44:28",
        "state": "open",
        "number": 72725
    },
    {
        "title": "[folding] Option to show both fold/unfold controls on mouseover only",
        "description": "Like \"editor.showFoldingControls\": \"always\", \"mouseover\", \"mouseoverOnly\", \"never\"",
        "createdAt": "2019-04-21 17:38:05",
        "state": "open",
        "number": 72684
    },
    {
        "title": "Yank back killed text `ctrl+y` stopped working",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.33.1 ( Recent )\r\n- OS Version: Mac 10.14.4\r\n\r\nSteps to Reproduce:\r\n\r\n1. `ctrl+k` to kill text.\r\n2. `ctrl+y` to paste the kill text does not work.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\n\r\nWorks on all other program except vscode.",
        "createdAt": "2019-04-20 00:13:04",
        "state": "open",
        "number": 72630
    },
    {
        "title": "Emmet: Support css.color.short setting",
        "description": "\"emmet.preferences\": {\r\n\t\"css.color.short\": true\r\n}\r\nWhy not working?",
        "createdAt": "2019-04-19 05:09:50",
        "state": "open",
        "number": 72594
    },
    {
        "title": "index.js/index.ts file should show at top of file picker when searching for the name of the directory",
        "description": "- VSCode Version: Version 1.34.0-insider (1.34.0-insider) 6d5feae57959287fb116467f4eb6c7079571b466\r\n- OS Version: MacOS 10.14.4\r\n\r\n**Expected:** In TypeScript, index.js should show up at or near the top of the list, identically to if it was called `./MyComponent.ts`.  (Since index.ts is a shorthand for \"whatever this directory is\" - e.g. `MyComponent/index.ts` can be imported as just `./MyComponent`).\r\n\r\nNote that there is currently no clean and quick way to open such a file since typing \"index\" is highly general and may bring up a huge list, and the dev doesn't know to type both the component name and index because it's not clear by looking at the import line that the module is being imported from a file named \"index.ts\".\r\n\r\n**Actual:** File often appears well down the list of choices, including below items that are seldom if ever selected.  Example typing \"regi\" and wanting to open \"registerLoginRoutes/index.ts\":\r\n\r\n<img width=\"592\" alt=\"image\" src=\"https://user-images.githubusercontent.com/19214773/56315943-b24fd400-611e-11e9-9eb0-8d9c1047dd4a.png\">\r\n\r\n**Steps to Reproduce:**\r\n\r\n1. Create an index.ts file within a directory\r\n2. Cmd+p to open file search box\r\n3. Start typing the name of the directory\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2019-04-17 19:40:14",
        "state": "open",
        "number": 72514
    },
    {
        "title": "[folding] selecting first line of folded range does not select full folded range",
        "description": "Issue Type: <b>Bug</b>\r\n\r\n1. Create a variable with an array\r\n2. Collapse the array\r\n3. Mark the line with the array and copy it\r\n5. Paste below\r\n\r\n**Actual result:**\r\nthe only array name with open bracket is copied\r\n\r\n**Expected result:**\r\nwhole array is copied\r\n\r\n**PFA**\r\n\r\n\r\nVS Code version: Code 1.33.1 (51b0b28134d51361cf996d2f0a1c698247aeabd8, 2019-04-11T08:20:22.771Z)\r\nOS version: Linux x64 4.15.0-47-generic\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i5-4670 CPU @ 3.40GHz (4 x 3708)|\r\n|GPU Status|2d_canvas: disabled_software<br>checker_imaging: disabled_off<br>flash_3d: disabled_software<br>flash_stage3d: disabled_software<br>flash_stage3d_baseline: disabled_software<br>gpu_compositing: disabled_software<br>multiple_raster_threads: disabled_off<br>native_gpu_memory_buffers: disabled_software<br>rasterization: disabled_software<br>surface_synchronization: disabled_off<br>video_decode: disabled_software<br>webgl: disabled_off<br>webgl2: disabled_off|\r\n|Load (avg)|0, 1, 1|\r\n|Memory (System)|31.35GB (12.71GB free)|\r\n|Process Argv|--unity-launch|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (40)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\noutput-colorizer|IBM|0.1.2\r\npgformatter|bra|1.6.5\r\nbetter-toml|bun|0.3.2\r\nnpm-intellisense|chr|1.3.0\r\npath-intellisense|chr|1.4.2\r\nbracket-pair-colorizer|Coe|1.0.61\r\nsystemd-unit-file|coo|1.0.3\r\nvscode-markdownlint|Dav|0.26.0\r\nvscode-eslint|dba|1.8.2\r\npgsql|dou|0.1.3\r\ngitlens|eam|9.6.0\r\ntslint|eg2|1.0.43\r\nvscode-npm-script|eg2|0.3.5\r\nLogFileHighlighter|emi|2.4.3\r\nvsc-material-theme|Equ|2.8.2\r\nvscode-postman|eri|0.5.2\r\ngauge|get|0.0.3\r\ngc-excelviewer|Gra|2.1.32\r\nvscode-nginx-conf-hint|han|0.1.0\r\nbeautify|Hoo|1.4.11\r\njs-test-gen-vscode|jsT|0.5.0\r\nldif|jta|0.1.1\r\nvscode-regexp-preivew|le0|0.0.3\r\nterraform|mau|1.3.9\r\ngit-graph|mhu|1.4.5\r\nGo|ms-|0.9.2\r\nsqltools|mtx|0.17.15\r\nmakefiles-support-for-vscode|nae|0.0.3\r\nvscode-json-transform|oct|0.1.2\r\nvscode-docker|Pet|0.6.1\r\nvscode-versionlens|pfl|0.22.0\r\nvscode-yaml|red|0.4.0\r\nvscode-sort-json|ric|1.13.0\r\nvscode-statusbar-json-path|ric|1.2.0\r\nmonitor-file|rko|1.0.1\r\nsql-snippets|sad|0.0.4\r\nvscode-sql-beautify|sen|0.0.4\r\nslim|sia|0.1.2\r\nlanguage-stylus|sys|1.11.0\r\nvscode-ansible|vsc|0.5.2\r\n\r\n(3 theme extensions excluded)\r\n\r\n</details>\r\n<!-- generated by issue reporter -->\r\n[collapsed_array_issue-2019-04-16_18.06.33.mp4.zip](https://github.com/Microsoft/vscode/files/3085612/collapsed_array_issue-2019-04-16_18.06.33.mp4.zip)\r\n",
        "createdAt": "2019-04-16 15:27:00",
        "state": "open",
        "number": 72422
    },
    {
        "title": "Support serverReadyAction in tasks.json",
        "description": "`launch.json` added `serverReadyAction` which [automatically opens a browser tab based on a text match in the debug console or integrated terminal](https://code.visualstudio.com/updates/v1_33#_automatically-open-a-uri).\r\n\r\nIt would be great if we could use this same config in `tasks.json` tasks so when we say run a `npm: start` task for an express/angular/etc server a tab for it automatically opens.",
        "createdAt": "2019-04-15 22:48:38",
        "state": "open",
        "number": 72374
    },
    {
        "title": "Extension development: improve experience for testing extension APIs",
        "description": "I am working on adding an API to my extension, so that other extensions can build on top of what mine offers.  As part of this, I need to test the API and develop samples.\r\n\r\nMy current workflow for this is:\r\n\r\n* Update the API\r\n* Build a VSIX of my extension (the \"API provider\")\r\n* Uninstall any existing version of my extension\r\n* Reload or/and restart (because sometimes if I install the updated VSIX I get the old version instead unless I rev `package.json/version` every time)\r\n* Install the API provider extension from VSIX\r\n* Reload the window where I'm working on my test/sample project\r\n* Run my test/sample project in the extension development host\r\n\r\nAs you can imagine, this gets a bit slow and fiddly, as the install/uninstall/reload/install cycle can be a bit slow!  It's also a bit painful for debugging as I can't debug the installed-from-VSIX API provider extension; I have to add `console.log` statements and then do the rebuild/uninstall/reload/install dance again.\r\n\r\nCould you provide a way to load two extensions simultaneously into the Extension Development Host, so that I can run my API provider and API test/sample alongside each other?  Alternatively, could you make it so that if I debug my API provider in the Extension Development Host, and then _from within the EDH_ debug my API tester (launching a _second_ EDH), the API provider propagates to the second EDH?  Thanks!",
        "createdAt": "2019-04-15 00:47:18",
        "state": "open",
        "number": 72308
    },
    {
        "title": "[json] package.json: also show latest beta version",
        "description": "Current behaviour :\r\nin package.json file, IntelliSense just shows the dependencie's latest stable version : \r\n\r\n![vscode](https://user-images.githubusercontent.com/5154932/56071972-9a7cf680-5d92-11e9-8973-d4361f2936b8.png)\r\n\r\nIn my opinion, when I'm in -beta.X, I would prefer if the popover showed the latest version of that beta.\r\n\r\nAlternatively, IntelliSense could show all the dist-tags that the package currently has when the user types CTRL+SPACE.",
        "createdAt": "2019-04-13 00:22:40",
        "state": "open",
        "number": 72237
    },
    {
        "title": "Follow-on task following task completion or termination by user",
        "description": "Would be great to trigger a follow-on task (e.g. for clean-up) when current task is terminated by user or completes. This is the opposite of dependsOn property and might be called \"followedBy\". : )\r\n\r\nI have a task which starts SSH port forwarding and I want to run some setup when it starts and clean-up when it terminates. Setup is handled via \"dependsOn\" but clean-up is currently difficult....",
        "createdAt": "2019-04-12 21:55:11",
        "state": "open",
        "number": 72232
    },
    {
        "title": "customize name of workspace '.vscode' directory ",
        "description": "<!-- Describe the feature you'd like. -->\r\nUse case: I'm sharing the same source directory (via volume mount) on two machines (one on mac, one on linux). I'm usually developing on mac and then testing the same code in a VM on linux. This is a cmake/c++ project so the build artifacts are already separated by specifying different build directories (outside the source tree). The only issue I have is with the workspace .vscode directory - I'd like the linux box to use a different directory than .vscode - for example .vscode-linux. This way I can keep separate workspace settings, launch, intellisense, etc. The name of the .vscode directory should be saved in the users settings.json (so it's global for this user) - once configured vscode should always try to open workspace .vscode-linux on that machine. \r\n\r\nThe source tree would than look like this:\r\nmySrc/.vscode/*\r\nmySrc/.vscode-linux/*\r\nmySrc/src/\r\nmySrc/test/\r\n\r\nHopefully the workspace name '.vscode' is not hardcoded in a million places and is always obtained via a function call ;) \r\n\r\nThe workaround I have is using symlinks:\r\nmyLinkedSrc/.vscode/\r\nmyLinkedSrc/src@ -> ../mySrc/src\r\nmyLinkedSrc/test@ -> ../mySrc/test\r\nmyLinkedSrc/CMakeLists.txt@ -> ../mySrc/CMakeList.txt\r\n\r\nBut that would not work on windows. \r\n\r\nSorry if this is a duplicate of some other request - I did my best, but searching for \"vscode\", \".vscode\", \"workspace vscode\" is a bit challenging :)",
        "createdAt": "2019-04-12 08:18:40",
        "state": "open",
        "number": 72196
    },
    {
        "title": "auto closing pairs with conflicting patterns problems",
        "description": "```\r\nVersion: 1.33.1 (user setup)\r\nCommit: 51b0b28134d51361cf996d2f0a1c698247aeabd8\r\nDate: 2019-04-11T08:27:14.102Z\r\nElectron: 3.1.6\r\nChrome: 66.0.3359.181\r\nNode.js: 10.2.0\r\nV8: 6.6.346.32\r\nOS: Windows_NT x64 10.0.17763\r\n```\r\n\r\nSteps to Reproduce:\r\n\r\n1. Create two auto closing pairs in a language configuration file,\r\n```JSON\r\n\t\"autoClosingPairs\": [\r\n\t\t{\"open\": \"(\", \"close\": \")\"},\r\n\t\t{\"open\": \"(*\", \"close\": \"*)\",  \"notIn\": [\"string\"]},\r\n\t],\r\n```\r\n2. trying using the two character auto closing pair, `(*` and you will get `(**))`.\r\n\r\nOn the other hand, if you remove the ending ')' from the closing '*)' you almost get normal function, except that in cases where `(` doesn't auto close with `)`, you get `(**`.\r\n\r\nNote this condition exists in #57838, in a reference to the Structured Text Language, though it is not shown in the example on that feature request.  Reference the repository https://github.com/Serhioromano/vscode-st for some example.\r\n\r\nI think the Auto Closing logic needs to consider when auto closing pairs might conflict with each other.  In this case, '(**)' overlaps with '()'.\r\n",
        "createdAt": "2019-04-12 00:29:32",
        "state": "open",
        "number": 72177
    },
    {
        "title": "Tree: filter is not discoverable",
        "description": "I think that the tree filtering is not discoverable, especially in trees where people do not expect it to work. Like Call Stack, Watch...\r\nHere's what I propose:\r\n\r\n1. Render the orange filter widget with a minimal width when the tree has focus\r\n2. Hovering over the minimal width filter widget we show a message \"Start typing to filter\"\r\n3. When the user hides the minimal width widget, we no longer show it when empty for that tree.\r\n\r\n",
        "createdAt": "2019-04-11 08:59:11",
        "state": "open",
        "number": 72119
    },
    {
        "title": "Editor zooming (editor.mouseWheelZoom) is too sensitive",
        "description": "On a MacBook Pro, when I have `editor.mouseWheelZoom` enabled, the pinch-zooming is way too sensitive \u2013 I only move my fingers like 2-3 mm and the zoom ratio goes all the way up or down.\r\n\r\nFor scrolling, there's a setting `editor.mouseWheelScrollSensitivity` but I don't think anything similar exists for editor zooming; the default value is way too eager.\r\n\r\nTried on these versions:\r\n\r\n- Code 1.33.0 (0dd516dd412d42323fc3464531b1c715d51c4c1a, 2019-04-04T15:11:32.076Z)\r\n- Code - Insiders 1.34.0-insider (07d9e44f910223e7ab6d3e8bc02439f39213cd90, 2019-04-10T05:14:23.598Z)\r\n- OS version: Darwin x64 18.5.0\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2019-04-10 07:30:35",
        "state": "open",
        "number": 72050
    },
    {
        "title": "Disable hover but keep Ctrl+Hover",
        "description": "Hover can be very frustrating when selecting text etc. Longer delay (eg 1500ms) solves this but when you actually need the hover information it is frustrating to wait. \r\n\r\nHaving the full hover information by pressing control and hover the mouse on specific code is very nice. Please leave this functionality while let us disable the simple hover (the one without pressing Ctrl). In other words separate \"hover\" and \"ctrl+hover\" functionalities, with two seaparate options for turning them on/off.\r\n",
        "createdAt": "2019-04-09 21:30:49",
        "state": "open",
        "number": 72025
    },
    {
        "title": "Extension API: Different Syntax Highlight Schemes for Output Window",
        "description": "Currently the Output Pane syntax highlighting can be performed by having an extension register the text/x-code-output mime type ala https://marketplace.visualstudio.com/itemdetails?itemName=IBM.output-colorizer.\r\n\r\nThe problem is that there can be **only one** by **one extension** for **all output windows** and as soon as one extension does this it will conflict with others that try to do the same thing. There are multiple extensions (e.g. Azure Functions) that support streaming logs along with standard Git/Terraform/etc. output views, and being able to specify log highlighting on a per output window basis would go a long way to ensuring richer log views and more constant use of the Output Window.\r\n\r\n### Potential Implementations\r\n\r\n1. Add a feature flag to add the window name to the output window mime type. For example if my Window is named Git then its mime type would be text/x-code-output-Git, if my window is named Terraform than mime type would be text/x-code-output-Terraform. \r\n\r\nNow .tmlanguage highlighters can be registered on a per window name basis and different extensions can contribute different syntax highlighters for output windows rather than one \"Global\" one.\r\n\r\nThis would ensure broadest compatibility and probably least development effort, but more dynamic output window names may be tricky (perhaps allow wildcards in mime type definition for .tmlanguage)\r\n\r\n2. Make this more explicit, such as registering an output window handler contribution and having vscode handle it natively, or have the extension specify the handler or mime type for the output window to ensure consistency.\r\n\r\nBoth 1 and 2 can be implemented together to cover both explicit and implicit specification types.",
        "createdAt": "2019-04-09 20:36:26",
        "state": "open",
        "number": 72021
    },
    {
        "title": "Feature request: Option to not toggle open/close folder when clicking on folder name",
        "description": "This is a feature suggestion.\r\n\r\nI often get a bit taken back with how Visual Studio Code behaves when I click on a folder name in the explorer, since it toggles between open/close. In my mind, that is what the small arrow icon to the left of the folder name is for (ie clicking on it to open/close the folder). When I click on the folder name I expect that folder to be selected (ie get the focus), but nothing else.\r\n\r\nWould it maybe be possible to make this behavior configurable? If so, I would suggest the following configuration options:\r\n1. Toggle open/close when clicking folder name [Current behavior] [Default]\r\n2. Open closed folder when clicking folder name, but don't close an open folder\r\n3. Don't toggle open/close when clicking folder name\r\n\r\nP.S. I already know about issue 26400 being closed because this functionality is by design. But I'm asking for a simple configuration option for all us that prefer a different functionality.",
        "createdAt": "2019-04-09 12:41:51",
        "state": "open",
        "number": 71994
    },
    {
        "title": "Allow languages to specify autoClosingQuotes/autoClosingBrackets per quote or bracket pair",
        "description": "From #61070\r\n\r\n**Repo**\r\nOpen a js file:\r\n\r\n```js\r\nstyled.div|\r\n```\r\n\r\nand with cursor at the `|`, type `\r\n\r\n**Problem**\r\nBy default, this inserts a single backtick instead of auto closing the quote. Configuring `\"editor.autoClosingQuotes\": \"always\"` fixes this.\r\n\r\nFor JS/TS however, we'd like a way to specify that backtick should always be autoclosed (while perserving the existing behavior for `'` and `\"`). Something like adding an `\"auto\": \"always\"` to the language configuration:\r\n\r\n```json\r\n{\r\n\t\"autoClosingPairs\": [\r\n\t\t{ \"open\": \"`\", \"close\": \"`\", \"notIn\": [\"string\", \"comment\"], \"auto\": \"always\" },\r\n\t\t{ \"open\": \"\\\"\", \"close\": \"\\\"\", \"notIn\": [\"string\"] }\r\n\t]\r\n}\r\n```\r\n",
        "createdAt": "2019-04-09 00:42:12",
        "state": "open",
        "number": 71970
    },
    {
        "title": "Support to mark and extension as \"FREE TRIAL\" ",
        "description": "the vs code extension marketplace only supports extensions being marked as `FREE`:\r\n\r\n![free](https://user-images.githubusercontent.com/1487073/55763843-a593f780-5a1d-11e9-8151-b6b5b2e19bde.png)\r\n\r\nSome extensions however are actually `FREE TRIAL`, so it would be good to let an extension declare this so people get a clearer understanding of what they are installing.\r\n\r\nThe default should always be `FREE`, so this option (I assume in `package.json`) would be to let the publisher override this.",
        "createdAt": "2019-04-08 23:48:22",
        "state": "open",
        "number": 71968
    },
    {
        "title": "Ability to disable or configure Git change peek button next to line number",
        "description": "## Current Behavior\r\nIt is related to [this issue](https://github.com/Microsoft/vscode/issues/36642).\r\n\r\nAlthough it is no longer **_overlapping_**, \r\nbut it is really difficult to click especially it animates to a wider size. \r\n![image](https://i.stack.imgur.com/yNg0R.png)\r\n\r\nThe red indicates the area where the fold button is responsive:\r\n![image](https://user-images.githubusercontent.com/10471270/55762229-1257c380-5a17-11e9-89ac-f40096a38f97.png)\r\n![image](https://user-images.githubusercontent.com/10471270/55762329-6367b780-5a17-11e9-948d-a1c4d2104f63.png)\r\n\r\n## Problem:\r\n\r\n1. As an end-user perspective who uses code folding frequently, I should be able to click near by the fold button to fold code consistently. \r\n2. I do not want to accidentally click on other function. (Especially the peek because it messes with the layout expectation and creates frustration).\r\n3. When the git changes bar appears, I'm unable to click the fold consistently.\r\n    - About 33% of the fold button's original responsive area is taken by git changes bar\r\n    - The animation naturally makes a user clicks on it since it responds to location point on fold button.\r\n    - User may never use git change peek. I personally will open Working-tree instead of peek when I need to examine the git changes. \r\n4. There is no way to configure the git changes bar nor fold button. The only way to turn off git changes bar is to disable git. \r\n![image](https://i.stack.imgur.com/cfHH3.png)\r\n\r\n## Feature request\r\n1. User should be able to turn on and off of the git changes bar\r\n2. User should be able to disable the git changes bar's animation\r\n3. The interface should have a consistent margin between fold button and git changes bar when the bar animates\r\n4. User should be able to relocation change bar to other place, such as the break point area indicated in red:\r\n![image](https://user-images.githubusercontent.com/10471270/55763141-a1b2a600-5a1a-11e9-8aac-a06480dabc9b.png)\r\n5. User should be able change action on click line number, currently, click on it selects the line.\r\n    - I personally like to do triple click on the line to select line, it is easier and intuitive, enable user action on line number click can make user work more effectively. \r\n\r\n\r\n",
        "createdAt": "2019-04-08 23:30:44",
        "state": "open",
        "number": 71967
    },
    {
        "title": "SOCKS5 proxy worked but the regex verification only accept \"https\"",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.33.0\r\n- OS Version: Win10\r\n\r\nSteps to Reproduce:\r\n\r\n1. Go to `Settings` `User Settings` `Application` `Proxy` `proxy`\r\n2. Input a `SOCKS5` proxy like `socks5://127.0.0.1:8080`\r\n3. The SOCKS5 proxy actually worked.\r\n4. The problem is the regex verification only accept `https`\r\n\r\nRelated Issues: #58080 #27838 #9971\r\nThese Issues are locked and I can't make a  comment. This is really inconvenience.\r\n@joaomoreno \r\n",
        "createdAt": "2019-04-07 08:15:35",
        "state": "open",
        "number": 71877
    },
    {
        "title": "Default formatter selection should write to project specific settings rather than global.",
        "description": "The new Default formatter selection feature, while handy, is unusable for it's stated usecase.\r\n\r\nFrom the [updates page](https://code.visualstudio.com/updates/v1_33) \"Many of our users work on different projects and often different projects use different document formatters.\" Right now, the quick pick will write to the user settings.json, which means every project the particular user works on will share a formatter, and to use it for the usecase of *different* projects using *different* formatters you would have to manually move it to the project local `.vscode/settings.json` directory.\r\n\r\nIt should also do this for workspace specific settings.",
        "createdAt": "2019-04-05 01:38:54",
        "state": "open",
        "number": 71755
    },
    {
        "title": "[folding] Distinctly highlight corresponding `#endregion` for `#region X` comments",
        "description": "That would apply to all supported languages. But I considered it for Python only, and so may be missing something.\r\n\r\nIn python, standing on a `#region` marker highlights all `#region` tokens in the file, as is normal for other tokens in plain source and in comments.\r\n\r\n**Request**: Apply a different highlighting rule (perhaps \"line boxes\" as is applied to matching brackets/parentheses/braces) to the `#endregion` corresponding to the `#region` under the cursor, to make clear the region's boundary.",
        "createdAt": "2019-04-04 09:18:22",
        "state": "open",
        "number": 71712
    },
    {
        "title": "Join Lines Redesigned",
        "description": "This PR fixes https://github.com/Microsoft/vscode/issues/64655.\r\n\r\nIt redesigns multi-cursor Join Lines to allow for multiple lines to be merged in.\r\n\r\nBefore:\r\n![JoinLines-TheIssue](https://user-images.githubusercontent.com/16523071/55511227-127a4c80-562e-11e9-901d-67569c7051c1.gif)\r\n\r\nExamples:\r\n![JoinLines-3Cursor](https://user-images.githubusercontent.com/16523071/55745335-006d2500-5a05-11e9-8d7a-b2340dc88a20.gif)\r\n\r\n\r\n![JoinLines-1Cursor-3Select](https://user-images.githubusercontent.com/16523071/55745351-0b27ba00-5a05-11e9-8402-b9141efd6324.gif)\r\n\r\n\r\n![JoinLines-2Cursor-2Cursor](https://user-images.githubusercontent.com/16523071/55745535-796c7c80-5a05-11e9-881d-cd5e8f3ccb61.gif)\r\n\r\n\r\n![JoinLines-Merge-Merge](https://user-images.githubusercontent.com/16523071/55745543-7e313080-5a05-11e9-8fc7-e3c76deebe75.gif)\r\n\r\n\r\nAs a note, it will merge in adjacent selections.\r\n\r\n![JoinLines-MergeCon](https://user-images.githubusercontent.com/16523071/55745559-84271180-5a05-11e9-84b6-eb57db2fac3b.gif)\r\n\r\n",
        "createdAt": "2019-04-03 20:35:40",
        "state": "open",
        "number": 71678
    },
    {
        "title": "[Feature] Add support to filter scripts from the script explorer using regular expressions",
        "description": "Consider this `package.json`:\r\n\r\n````json\r\n\"scripts\": {\r\n  \"build-lib1\": \"cd libs/lib1 && build && foo && bar\",\r\n  \"build-lib2\": \"cd libs/lib2 && build && foo && bar\",\r\n  \"build\":      \"npm run build-lib1 && npm run build-lib2\"\r\n}\r\n````\r\n\r\nSometimes scripts like `build-lib1` and `build-lib2` are not meant to be used manually, they are just there to make the file easier to manage / less complex.\r\n\r\nIt would be nice if the npm scripts explorer (the tree in the sidebar) would hide such scripts.\r\n\r\nSo for example, if the script's name is one of these special patterns:\r\n- `#build-lib1`\r\n- `:build-lib1`\r\n- `-build-lib1`\r\n- etc...\r\n\r\n...then the explorer view won't show them.",
        "createdAt": "2019-04-03 07:14:53",
        "state": "open",
        "number": 71635
    },
    {
        "title": "Smart Backspace feature",
        "description": "There is a good example of how PHPStorm handles it, https://blog.jetbrains.com/phpstorm/2014/09/smart-backspace-in-phpstorm-8/ VSCode really lacks feature like this as it requires to delete all the spaces / tabs before the cursor when you want to go back to previous line end using backspace.\r\n",
        "createdAt": "2019-03-31 12:38:46",
        "state": "open",
        "number": 71506
    },
    {
        "title": "Automatically show changes side-by-side if there's only one group, otherwise show changes inline",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nPlease add an option to automatically show Git diff changes side-by-side, if there's only one group, and inline, if there's two or more groups. Since the side-by-side changes is too narrow if there are two or more groups, so I always manually change it anyway. But it would be very useful to have this automated.",
        "createdAt": "2019-03-31 03:05:59",
        "state": "open",
        "number": 71497
    },
    {
        "title": "Disable/Enable Emmet Command",
        "description": "I have Emmet enabled for more than html files and it gets in the way more often than not. It is always the top suggestion (as it should, I like that) in order to write custom tags. To only enable it when I am going to write html/pug/jsx.. code and maybe toggle it with a keyboard shortcut would be great.\r\n\r\n```\r\n\"emmet.includeLanguages\": {\r\n    \"javascript\": \"javascriptreact\",\r\n    \"vue\": \"jade\"\r\n  },",
        "createdAt": "2019-03-29 21:40:23",
        "state": "open",
        "number": 71472
    },
    {
        "title": "Task input parameters from showOpenDialog",
        "description": "It sure would be helpful if the task and launch input pickers implemented by #4758 were expanded to include one that wrapped the [`window.showOpenDialog` API](https://code.visualstudio.com/api/references/vscode-api#window) with its options for file vs. folder and filtering.\r\n\r\n\r\nThe [`window.showOpenDialog` API](https://code.visualstudio.com/api/references/vscode-api#window) offers to _extension authors_ the ability to offer the user a dialog to select a file (optionally with an extension filter) or a folder.\r\n\r\nThe feature available to _users_ is to be able to define  [input variables](https://code.visualstudio.com/docs/editor/variables-reference#_input-variables) for usage as task parameters. This user-facing feature only offers the ability to either select between preset strings (`pickString`) or accept a manually-typed input string (`promptString`), but offers no ability to present the user with a file or folder selection dialog.\r\n\r\nThis feature could be very helpful for users as well, not just extension authors. For example, I want to debug a program that supports command-line parameters for input files or directories, and I'd rather prompt the user to provide them differently for each session, than to have them hard-coded in a shared project tasks file.",
        "createdAt": "2019-03-29 18:18:04",
        "state": "open",
        "number": 71461
    },
    {
        "title": "Need keyboard shortcuts for buttons in custom dialog",
        "description": "In Mac OS you can press cmd+letter on many native prompts to select the option that starts with that letter. For example, I can press cmd+D to select \"Don't Save\". Would be great for my muscle memory to have this in the custom dialog too. Otherwise I have to count tabs carefully to hit the right button, or grab my mouse.\r\n\r\nSimilarly, some people will probably want the pneumonics that the windows native prompt has (like alt+n for \"Don't Save\").",
        "createdAt": "2019-03-29 02:28:34",
        "state": "open",
        "number": 71430
    },
    {
        "title": "Create new folder in simplified file dialog",
        "description": "Maybe you've already thought about this but it would be useful to be able to create a new folder in the simplified file dialog. This could be a button in the title bar or a confirmation step when a folder that doesn't exist was typed.\r\n\r\nCreating a folder and opening it, and creating a folder and saving a file in it, are common workflows so it would be useful to be able to do those in one step.",
        "createdAt": "2019-03-29 00:48:28",
        "state": "open",
        "number": 71425
    },
    {
        "title": "Verified extensions in marketplace",
        "description": "Feature request from inbound NPS surveys:\r\n\r\n> \"Flag officially supported plugins similar to DockerHub's images.\"\r\n\t\t\r\n> \"Some functionality which should be integrated into the IDE is left to support of extensions, some of which are buggy, MS should review highly requested categories, and extensions to be rebuilt and folded into what would then be a superior offering.\"\r\n\r\n**Inspiration:**\r\n- Docker Hub, https://docs.docker.com/docker-hub/publish/trustchain/\r\n",
        "createdAt": "2019-03-28 18:50:27",
        "state": "open",
        "number": 71409
    },
    {
        "title": "Remove single line / group from debug console",
        "description": "Hi all,\r\n\r\nIt would be very handy if I could take a line of debug console output and delete it.\r\n\r\nFor example, if you have lots of `log` / `printf` statements throughout an application to track how an object is manipulated from point to point (e.g. tracking changes in a Redux store or something similar), it would be very nice to be able to delete log lines pertaining to certain actions, or to remove them until you have a clear picture of what's going on.\r\n\r\nMaybe it can be buried in a right click action on the line in question?\r\n\r\nOther thoughts?",
        "createdAt": "2019-03-28 16:08:31",
        "state": "open",
        "number": 71396
    },
    {
        "title": "Centered layout should be stored globally not per workspace",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nI tend to switch a lot between workspaces (*File: Open Recent*). I also tend to switch a lot between monitors: the small laptop screen, and a separate ultrawide one. In the ultrawide monitor it feels much more comfortable to work in centered layout, while in the laptop monitor it's the contrary.\r\n\r\nIf I toggle the centered layout (*View: Toggle Centered Layout*) in a workspace, then that setting becomes attached to the workspace, meaning that:\r\n\r\n- Switching to another workspace may have that setting disabled.\r\n- Switching back to this workspace will have it enabled, no matter if I switched it otherwise in another workspace.\r\n\r\nI cannot be all the time thinking about this setting when I switch the workspace, so I end up not using the feature at all, which is a shame because the neck ends up hurting in the ultrawide monitor.\r\n\r\nIMHO this situation doesn't make sense. :roll_eyes:  The centered layout is a view setting, which one can change depending on the physical environment. It's like the theme: in the day, I use the light theme; in the night I use the dark one; but it doesn't make sense to have a different theme per workspace!\r\n\r\nSo, what I'm asking for is that the setting persists until I toggle it back again.\r\n\r\nThanks!",
        "createdAt": "2019-03-28 10:15:36",
        "state": "open",
        "number": 71361
    },
    {
        "title": "How can a FS provider determine the correct workspace folder root when it recevies a call",
        "description": "Consider a FS provider that wants to show the content of a zip file. It therefore registers a provider for a schema `zip`. It also allows to open a zip by using a folder uri `zip:///home/dbaeumer/myzip.zip`. \r\n\r\nWhen the FS provider receives the first call for an URI (which can look like `zip:///home/dbaeumer/myzip.zip/.vscode`) it needs to know which part of the URI is the root folder to open the zip. Searching for something like `name.zip` doesn't work since a folder could also be named `myDir.zip`. I see the following options:\r\n\r\n- we guaruntee that the first call is always a stat call with the root folder.\r\n- we guaruntee that the `workspace.workspaceFolders` is containing the root before the first call. We also guaruntee that:\r\n  - if a folder gets added a workspace folder add event is sent before the first call to the FS provider.\r\n  - if a folder gets removed it would be nice if no more calls to the FS provider are made. But an extensions could handle this gracefully knowing it has to.\r\n- we always pass in the root to the FS provider calls.\r\n- we add some `handle` & `unhandle` methods to the FS provider which are called if the provider should handle new roots or roots it handled disappear.\r\n- something else.\r\n\r\nI relied on the first one so far which actually was a false assumption. But to implement that correctly I need to know which assumptions I can make that hold.\r\n\r\nMy preference would either be the workspace folder array and event correctness or handle and unhandle on the FS provider.",
        "createdAt": "2019-03-28 08:10:49",
        "state": "open",
        "number": 71353
    },
    {
        "title": "Should maintain row focus after deleting a file",
        "description": "- Use the keyboard to focus a file in the explorer and delete it\r\n- Now the whole tree has focus\r\n- Press the down arrow key\r\n- The first item is selected\r\n\r\nI want to get back to where I was looking before. The search tree focuses the next item in the list when one is removed. I don't know whether the explorer did this previously with the old tree. But it would be nice for the explorer to do the same thing.",
        "createdAt": "2019-03-27 21:01:47",
        "state": "open",
        "number": 71315
    },
    {
        "title": "File Provider: support symbolic link operations",
        "description": "With the new file service we can support move/copy across file system providers for files and folders. However, if one of the items is a symbolic link, there is currently no way to re-create such a link on the target provider. \r\n\r\nIn node.js terms there is a method called [`symlink`](https://nodejs.org/docs/v10.2.0/api/fs.html#fs_fs_symlink_target_path_type_callback). \r\n\r\nI think conceptually we would need new API such as `link(source, target)` and then providers have to deal with the quirks.\r\n\r\nOn top of that we also need a way to resolve the target of the link, otherwise we cannot make a decision how to restore it.\r\n\r\nBottom line: I think it only makes sense to preserve symlinks if they are self contained in the data that is being moved/copied, not when pointing outside.",
        "createdAt": "2019-03-26 17:55:33",
        "state": "open",
        "number": 71204
    },
    {
        "title": "No clue that server ready action is running",
        "description": "re https://github.com/Microsoft/vscode/issues/71074\r\n\r\n* have a slow vm\r\n* configure service action to open external app\r\n* have firefox as default browser (which likely is slow starting or installing updates on start)\r\n* start debugging\r\n* nothing happens... firefox isn't showing UI, the debug output doesn't hint towards anything\r\n\r\nI would expect that the debug output/terminal shows a message like \"detected localhost:3000, starting default browser...\"",
        "createdAt": "2019-03-26 14:13:48",
        "state": "open",
        "number": 71177
    },
    {
        "title": "Debug: Server ready action pattern should have validation",
        "description": "Testing #71074\r\n\r\nWhen I input an invalid regex in the `serverReadyAction.pattern` field, there is no JSON validation or warning on debug start:\r\n\r\n![image](https://user-images.githubusercontent.com/22350/54987746-67c2b800-4fb5-11e9-9382-23625ff3cd8e.png)\r\n",
        "createdAt": "2019-03-26 09:54:20",
        "state": "open",
        "number": 71145
    },
    {
        "title": "[json] Provide support for highlighting the source of the error in json files rather than highlighting the entire file",
        "description": "In VSCode, I have a RunConfigurationSchema.json file and a runconfig.json file open. When I edit my runconfig.json file and I make an invalid change to a parameter (as seen for the 'framework' parameter in the picture attached); all the lines in the json file are highlighted and underlined with green squiggly lines. It is difficult to decipher where the actual error is stemming from unless the user hovers specifically over the parameter containing the error. Can we instead highlight the line that contains the error only?   \r\n\r\n![jsonschema](https://user-images.githubusercontent.com/43390034/54957622-7b681300-4f10-11e9-9013-8da260c9eea3.jpg)\r\n\r\n\r\n\r\n",
        "createdAt": "2019-03-25 22:17:03",
        "state": "open",
        "number": 71115
    },
    {
        "title": "Enabled Text-Highlighting and Copying in Playground",
        "description": "Enabled Text-Highlighting and Copying of documentation in Playground (_not_ talking about code samples)\r\n\r\nVS Code version: Code 1.32.3 (a3db5be, 2019-03-14T23:43:35.476Z)\r\nOS version: Windows_NT x64 10.0.17763",
        "createdAt": "2019-03-23 21:09:22",
        "state": "open",
        "number": 71025
    },
    {
        "title": "Setting to Disable Split Editor on Drag and Drop",
        "description": "I use drag and drop a lot to move files among different columns, but never to split the editor into more columns or rows. When moving quickly, I accidentally split the editor a lot, and it slows me down and takes me out of flow. I posit that there are other users that are like this as well.\r\n\r\nI would like a setting that disables the behavior of splitting of the panes completely. The behavior I'd like to disable is illustrated in this gif from [the docs](https://code.visualstudio.com/docs/getstarted/userinterface#_grid-editor-layout):\r\n\r\n![grid-dnd](https://user-images.githubusercontent.com/1935696/54869262-3b7d2080-4d96-11e9-98e3-c50b44b2bcbd.gif)\r\n\r\nKeywords for search:\r\n\r\npanes, panels, tabs, grid\r\n\r\nSimilar issues: #52063",
        "createdAt": "2019-03-23 17:12:39",
        "state": "open",
        "number": 71016
    },
    {
        "title": "Support moving between *sections* of the \"themes\" menu",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nOn macOS, search fields often have \u2018sections:\u2019\r\n\r\n<img width=\"792\" alt=\"Screen Shot 2019-03-20 at 16 05 36\" src=\"https://user-images.githubusercontent.com/200/54719102-0a98b380-4b2a-11e9-9f50-a67d0e5733a2.png\">\r\n\r\nMore importantly, in all such sections across the operating system, there's a consistent set of keybindings for *navigating* these sections. For instance, in the above interface, as an element within the `Other` section is highlighted, hitting <kbd>\u2318</kbd><kbd>\u2193</kbd> would \u2018leap\u2019 to the first item of the `Folders` section, regardless of *which* element in `Other` was currently selected.\r\n\r\nMeanwhile, in VScode, there are several such interfaces. Notably, for me, is the \"Themes\" interface:\r\n\r\n<img width=\"623\" alt=\"Screen Shot 2019-03-20 at 16 10 28\" src=\"https://user-images.githubusercontent.com/200/54719378-b510d680-4b2a-11e9-9746-4a92726c1c97.png\">\r\n\r\nUnfortunately, if my cursor is \u2018high up\u2019 in the `Light themes` section, moving to the `Dark themes` section is very costly to my eyes, and not quick at all \u2014 in fact, it's one of the *only* things I reliably use my mouse for, every single day!\r\n\r\ntl;dr: I'd love keybinds in the `list.*` category to jump to the first item in the (previous/next) section to the one that the cursor is currently inside. `(=`\r\n\r\nVS Code version: Code 1.32.3 (a3db5be9b5c6ba46bb7555ec5d60178ecc2eaae4, 2019-03-14T22:46:48.547Z)\r\nOS version: Darwin x64 18.2.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-03-20 21:13:09",
        "state": "open",
        "number": 70861
    },
    {
        "title": "Ability to vary completion item insertion (based on chosen commit character?)",
        "description": "`CompletionItem` allows setting a list of commit characters that can be used to select the item. However, what you can do with that in practice is limited, since the insertion will always be the same no matter which commit character was used.\r\n\r\nIt would be very powerful if the insertion could vary depending on which commit character was selected (`insertText`, `additionalTextEdits`).\r\n\r\nHere's an example of one of the use cases we wanted to support in the Haxe extension:\r\n\r\n- When inserting an unimported type, we have two options: generate an import via `additionalTextEdits`, or insert the fully qualified path instead. You don't always want the same behavior here, so it would be neat if you could for instance:\r\n    - use <kbd>Enter</kbd> to generate the import and insert the unqualified name\r\n    - use <kbd>Tab</kbd> to insert the fully qualified name\r\n- Right now, there's two workarounds:\r\n    - Duplicate each completion item, so you have one for auto-importing and one for inserting fully quallified names. However, this would make for a very messy completion list, so we don't do this in the Haxe extension.\r\n   - Have a setting that controls which behavior should be used. We _do_ have this in the Haxe extension, but as mentioned before, sometimes you want to decide which one to use \"in the moment\", without having to mess with settings.\r\n\r\nThere's precedent for this sort of behavior in other IDEs. For instance in IntelliJ (Java), you can use <kbd>Alt</kbd>+<kbd>Enter</kbd> to open a code action menu _on completion items_. There you can for instance choose to import a method statically:\r\n\r\n![](https://i.imgur.com/Udt5Ofp.png)\r\n\r\nPerhaps allowing \"code actions\" on completion items like that is better than basing it purely on which commit character was used, as it's much more explicit.\r\n\r\nThoughts?",
        "createdAt": "2019-03-20 12:30:46",
        "state": "open",
        "number": 70824
    },
    {
        "title": "[folding] custom folding text for folded ranges",
        "description": "Currently when you create custom folds using a FoldingRangeProvider, there is no option to edit the text that is displayed when the text is folded. The editor just displays the first line of the fold with a three dots symbol after it. \r\n\r\n`#region Some region description...`\r\n\r\nIt would be helpful if it was possible for `FoldingRangeProvider` instances to return ranges with a RangeDisplayName property that would be displayed when the folding range wass collapsed. I'd suggest that the display text would replace the ... symbol and the first line would no longer be displayed as per the behaviour in Visual Studio. \r\n",
        "createdAt": "2019-03-20 04:27:59",
        "state": "open",
        "number": 70794
    },
    {
        "title": "[Feature Request] - Save extension and themes as a Favorite",
        "description": "I would like to be able to set both extensions and Themes into a favorites list.\r\nand then be able to view that entire list \r\nA. Favorite Extensions List\r\nB. Favorite Themes List\r\n\r\nThis way people can their favorites , specially when it comes to themes,\r\nso people don't have the scroll through an entire list of themes but instead \r\nscroll through their favorites themes list and select the one they want that week or day to use  :D",
        "createdAt": "2019-03-19 08:43:00",
        "state": "open",
        "number": 70738
    },
    {
        "title": "[Feature Request] - Extension Dating & Timestamps of last updates.",
        "description": "I would like to see on every extension ever created (2) things\r\n1. - Data it was created\r\n2. - Data of last update\r\n\r\nI believe people should know if a extension has not been updated for a very long time.\r\nor if it was recently updated. Also people should know when the extension was first created.\r\nIt just basically keeps people informed.",
        "createdAt": "2019-03-19 08:35:43",
        "state": "open",
        "number": 70736
    },
    {
        "title": "Custom Variables Support In Workspace Settings",
        "description": "### Feature Request\r\nCustom variables support in workspace settings.\r\n\r\n### Example\r\n\r\n\r\n```\r\n{\r\n    \"workbench.customVariables\": {\r\n        \"themeColors\": {\r\n            \"darkColor\":  \"#121212\"\r\n        }\r\n    }\r\n\r\n    \"workbench.colorCustomizations\": {\r\n        \"[Monokai Light Theme]\": {\r\n            \"tab.activeBackground\": \"${themeColors.darkColor}\"\r\n        }\r\n    }\r\n}\r\n\r\n```",
        "createdAt": "2019-03-18 21:01:40",
        "state": "open",
        "number": 70710
    },
    {
        "title": "WebView doesn't close on extension (but not window) reload",
        "description": "### Summary\r\nSome actions can cause extensions to be reloaded without the whole window being reloaded. This results in WebViews opened by extensions to remain open. On its own not a problem, except should these use the message API to \"talk\" to their extension, since it got reloaded/terminated. Expected behavior is to close all WebViews, similar to what happens when the window is reloaded, e.g. using the `Developer: Reload Window` command.\r\n\r\n### Steps to reproduce on your own\r\n1. Have an extension launch a WebView\r\n2. Change the \"main workspace folder\" without triggering a window reload\r\nI discovered this by my extension using `updateWorkspaceFolders` to go from 0 to 1 folders.\r\nHaving a multi-folder workspace, rightclicking the first folder, and using `Remove Folder from Workspace` also triggers this effect. So does pressing `Reload` after installing a (new) .vsix for an already installed extension, but that results in an empty WebView?\r\n3. The WebView remains, working, but the extensions reloaded, \"breaking\" `onDidReceiveMessage`\r\n\r\n### With [example extension](https://drive.google.com/file/d/19O86YV-_IWptsLu-894k6fEfvWf-fHmK/view) to easily replicate\r\n*(source code available by opening the file as an archive, or doing step 4 below)*\r\n1. Open a new window (and install the extension if you haven't yet)\r\n2. Run the `ISSUE: Open a test WebView` command\r\n3. Click `Send message` and notice how you get a response from the extension\r\n4. Run the `ISSUE: Add/remove the first workspace folder to trigger the semi-reload` command\r\nIf you had folders in your workspace, the first one gets removed. If your workspace is empty, it'll add the extension's folder (with source code) as workspace folder.\r\n5. Click `Send message` and notice how you don't get a response anymore\r\n\r\n_____\r\n\r\n- VSCode versions tested: \r\n\t- 1.32.3 (user setup) (a3db5be9)\r\n\t- 1.33.0-insider (user setup) (5a88160c)\r\n- OS Version: Windows 10 Version 1803 (OS Build 17134.407)\r\n\r\n> If the first workspace folder is added, removed or changed, the currently executing extensions (including the one that called this method) will be terminated and restarted so that the (deprecated) rootPath property is updated to point to the first workspace folder.\r\n***From the documentation of vscode.workspace.updateWorkspaceFolders***\r\n",
        "createdAt": "2019-03-17 17:17:44",
        "state": "open",
        "number": 70656
    },
    {
        "title": "\"Normal\" filtering input for trees",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nhttps://code.visualstudio.com/updates/v1_31#_new-tree-widget\r\n\r\nIs it possible to replace current filtering feature with an ordinary input element?\r\n\r\n| normal input | filter on type |\r\n|---|:---:|\r\n|  \u2705 standard element | \u274c  |\r\n| \u2705 being able to have `simple` navigation and still filter items | \u274c |\r\n| \u2705 no clash with extension contributed keybindings | \u2705\u274c can be mitigated with `workbench.list.automaticKeyboardNavigation` & `list.toggleKeyboardNavigation`\r\n| \u2705 can paste text | \u274c  |\r\n| \u2705 can `undo` | \u274c |\r\n| \u2705 can select text| \u274c  |\r\n|  \u2705 good discoverability | \u274c  |\r\n| \u2705 preverve text on reload | \u274c |\r\n|  \u274c takes one row of space | \u2705 only visible while typing  |\r\n\r\n---\r\n\r\nfilter disappeared on outline view #70095\r\nPerforming a search on Outline #70640\r\nFilter box in Outline has dissapeared in Release 1.32.3 #70605\r\nSearch field in structure side panel #70575\r\nSearch input field missing in new outline in Code 1.32.1 #70038\r\n\r\nYeah, you can tell those people where to find the \"filter on type\" feature, but all the new users potentially would never even know that it exists.",
        "createdAt": "2019-03-17 11:03:40",
        "state": "open",
        "number": 70646
    },
    {
        "title": "Settings UI is overwhelming for extensions with lots of settings",
        "description": "Specifically for GitLens, I find the settings ui practically unusable -- mainly because GitLens has LOTS of settings, but also because there is no extension controlled order (alphabetic imo doesn't work well), no extension controlled grouping (other than alphabetic proximity), and more. And since the new settings ui became the default, I've seen an uptick in users running into many issues trying to find settings. \r\n\r\nTo combat this (and really this was long before there was even a settings ui), GitLens provides its own built-in settings editor which is highly tailored and interactive to help guide users. But users have a very hard time discovering it. And again since the settings ui became the default users think that the vscode settings ui is the same as GitLens' settings editor, even when I explicitly provide the command to be run from the palette.\r\n\r\nGiven the above, I would *really* love a way from the vscode settings ui, extension page, etc, to at least advertise (or better yet replace/block the built-in ui) and direct people to GitLens' settings editor. Maybe something like a mini-banner with a link or something to guide a user to a much better experience.\r\n\r\n/cc @roblourens \r\n\r\n",
        "createdAt": "2019-03-15 19:56:18",
        "state": "open",
        "number": 70589
    },
    {
        "title": "YouCompleteMe Style Tab Behavior",
        "description": "Hello Visual Studio Code developers! I love vscode! \r\n\r\nThe feature I am requesting is a tab behavior from Vim's YouCompleteMe plugin. This feature request is a complete duplicate of issue #34694 (@andreyorst). \r\n\r\nI am doing this here because #34694 was mistakenly marked as a duplicate of #28215 and closed. However, it is NOT. And because #34694 was closed, I couldn't comment on it or reopen it. So I am creating this new feature request. The feature was clearly described in #34694, and in #28215's comment from @andreyorst. I think it's OK to leave this feature request in low priority. And I really hope to have it in vscode one day. But at least it should not be mistakenly closed like #34694. ",
        "createdAt": "2019-03-15 02:35:38",
        "state": "open",
        "number": 70532
    },
    {
        "title": "TerminalOptions.waitOnExit API",
        "description": "```ts\r\nenum WaitOnExitType {\r\n    Never = 0,\r\n    NonZeroExitCode = 1,\r\n    Always = 2\r\n}\r\n\r\nexport interface TerminalOptions {\r\n    /**\r\n     * Whether the terminal panel should wait before closing when a terminal's process exits.\r\n     */\r\n    waitOnExit?: WaitOnExitType;\r\n}\r\n```\r\n\r\nwaitOnExit was originally proposed as a boolean in https://github.com/Microsoft/vscode/issues/15583",
        "createdAt": "2019-03-14 02:41:39",
        "state": "open",
        "number": 70444
    },
    {
        "title": "Recommendations: Allow specifying a content pattern",
        "description": "We'd like vscode to automatically recommend the azurerm-vscode-tools extension whenever it sees *.json or *.jsonc files that match the following somewhere in the contents of the file (it's okay if it only checks near the top):\r\n```regex\r\n\"\\$schema\"\\s*:\\s*\"https?:\\/\\/schema\\.management\\.azure\\.com\\/schemas\\/[^\"\\/]+\\/(deploymentTemplate|subscriptionDeploymentTemplate)\\.json#?\"\r\n```\r\nARM template files are .json files and generally look like this:\r\n{\r\n\"$schema\": \"http://schema.management.azure.com/schemas/xxxx-yy-zz/deploymentTemplate.json#\",\r\n\"contentVersion\": \"1.0.0.0\",\r\n\"parameters\": {\r\n\r\nThe $schema value is the key to knowing if it\u2019s an ARM template (technically it could be anywhere in the file although it\u2019s usually at the top like this).\r\n\r\nHere are some sample template files that should match the above regex:\r\n* https://github.com/Azure/azure-quickstart-templates/blob/master/101-storage-account-create/azuredeploy.json\r\n* https://github.com/Azure/azure-quickstart-templates/blob/master/subscription-level-deployments/subscription-role-assigment/azuredeploy.json\r\n* https://github.com/jeffpatton1971/AzureSqlDb/blob/6d98465a80f85994be5b7bbbf820864d735520a1/AzureSqlDb/DeployAzureSQL.json\r\n",
        "createdAt": "2019-03-14 01:32:00",
        "state": "open",
        "number": 70443
    },
    {
        "title": "Allow tabs to wrap to multi-line",
        "description": "I almost always have more tabs open than fit in the horizontal space provided. I have seen the thread on shrinking tabs to try to fit them in one line [#15048](https://github.com/Microsoft/vscode/issues/15048), and I've also seen this closed feature request for what I'm asking for - [#32836](https://github.com/Microsoft/vscode/issues/32836). That issue was closed saying there would be no changes for 6-12 months, and it has been around 15 months now so wanted to reopen discussion.\r\n\r\nJetBrains IDEs added this a few years ago - simple config option to wrap open tabs to multiple lines rather than extending indefinitely horizontally, forcing a horizontal scroll or use of the Open Editors section in the left bar. While the Open Editors block is a nice idea, I've spent so many years switching via tabs (and continue to do so in all my other editors) that I'm requesting a better solution.\r\n",
        "createdAt": "2019-03-13 17:11:20",
        "state": "open",
        "number": 70413
    },
    {
        "title": "feature request: API to set URL of WebView",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\nCurrently the webview API does not allow setting a URL to load content. Thus, if you want to load content from a remote/local server you need to set the webview's html to include an iframe. \r\n\r\nInserting an iframe inside of a webview breaks all keyboard shortcuts inside the webivew (so no copy / paste) and also outside of the webview (so you cannot open the command palatte)\r\n\r\n<!-- Describe the feature you'd like. -->\r\nThe bugs described above do not occur when an iframe is not inserted within a webview. If we could set the webview's url we would not need an iframe. Thus the feature request is an extension of the webview api to set a url to load content.",
        "createdAt": "2019-03-12 21:29:45",
        "state": "open",
        "number": 70339
    },
    {
        "title": "tasks.json \"dependsOn\" property does not resolve variables/commands",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nUsing the C/C++ extension.  The ${command:cpptools.activeConfigName}\" works fine when it is used within a \"command\".   However, the request is to be able to use this value in a compound task to select the specific task to run.\r\n\r\nWhen used as follows:\r\n\r\n{\r\n            \"label\": \"Build Active Configuration\",\r\n            \"dependsOn\": \"Build ${command:cpptools.activeConfigName}\",\r\n            \"problemMatcher\": []\r\n        }\r\n\r\nthis error is generated:\r\n\r\nCouldn't resolve dependent task 'Build ${command:cpptools.activeConfigName}' in workspace folder 'Source'\r\n\r\n\r\n\r\nVS Code version: Code 1.32.1 (05f146c7a8f7f78e80261aa3b2a2e642586f9eb3, 2019-03-08T00:51:49.278Z)\r\nOS version: Windows_NT x64 10.0.17763\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-03-12 17:55:16",
        "state": "open",
        "number": 70327
    },
    {
        "title": "Support using background tasks in dependsOn",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.32.1\r\n- OS Version: 18309\r\n\r\nSteps to Reproduce:\r\n\r\ncreate launch.json:\r\n```\r\n{\r\n    // Use IntelliSense to learn about possible attributes.\r\n    // Hover to view descriptions of existing attributes.\r\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\r\n    \"version\": \"0.2.0\",\r\n    \"configurations\": [        \r\n        {\r\n            \"type\": \"chrome\",\r\n            \"request\": \"launch\",\r\n            \"name\": \"Launch Chrome against localhost\",\r\n            \"url\": \"http://localhost:8080\",\r\n            \"webRoot\": \"${workspaceFolder}\\\\src\\\\FrontEnd\\\\build\",\r\n            \"preLaunchTask\": \"core\"\r\n        }\r\n    ]\r\n}\r\n```\r\n2. create task.json:\r\n```\r\n{\r\n    // See https://go.microsoft.com/fwlink/?LinkId=733558 \r\n    // for the documentation about the tasks.json format\r\n    \"version\": \"2.0.0\",\r\n    \"tasks\": [\r\n        {\r\n            \"label\": \"core\",            \r\n            \"type\": \"npm\",\r\n            \"script\": \"start\",\r\n            \"path\": \"src/FrontEnd/core/\",\r\n            \"isBackground\": true,\r\n            \"dependsOn\":[\"loss\"],\r\n            \"problemMatcher\":{\r\n                \"owner\": \"custom\",\r\n                \"pattern\":[\r\n                    {\r\n                        \"regexp\": \"something not exists\",\r\n                        \"file\": 1,\r\n                        \"location\": 2,\r\n                        \"message\": 3\r\n                    }\r\n                ],\r\n                \"background\": {\r\n                    \"activeOnStart\": true,\r\n                    \"beginsPattern\": \"core@1.0.0 start\",\r\n                    \"endsPattern\": \"created ..\\\\\\\\build\\\\\\\\vendor.js\"\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"label\": \"loss\",            \r\n            \"type\": \"npm\",\r\n            \"script\": \"watch\",\r\n            \"path\": \"src/FrontEnd/loss/\",\r\n            \"isBackground\": true,            \r\n            \"problemMatcher\":{\r\n                \"owner\": \"custom\",\r\n                \"pattern\":[\r\n                    {\r\n                        \"regexp\": \"something not exists\",\r\n                        \"file\": 1,\r\n                        \"location\": 2,\r\n                        \"message\": 3\r\n                    }\r\n                ],\r\n                \"background\": {\r\n                    \"activeOnStart\": true,\r\n                    \"beginsPattern\": \"loss@1.0.0 start\",\r\n                    \"endsPattern\": \"waiting for changes\"\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nI can use beginsPattern/endsPattern with no issue if I direct launched by preLaunchTask, but if I have DependsOn for same task, it will run the dependencies but can't detect it's status by using endsPattern, the task will hang there. it looks like a bug for me. \r\n\r\nI tried to use the new Terminal: \"terminal.integrated.windowsEnableConpty\": false/true, no difference. \r\nI tried to use presentation.panel:\"dedicated\", no difference. \r\n\r\nI think we have done a nice work on putting tasks running in background and launch, but not those tasks in DependsOn property. \r\n\r\n\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2019-03-12 05:01:14",
        "state": "open",
        "number": 70283
    },
    {
        "title": "Enabled Extension incorreclty flagged as recommended for use",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nI have the extension Debugger For Chrome v4.11.3 enabled. The extension manager flags it with the blue triangle/white star as \"This extension is recommended based on files you've previously opened\". Since I already have the extension enabled, this one should not be flagged.\r\n![image](https://user-images.githubusercontent.com/13438782/54152141-269da600-4402-11e9-9bd3-3f0e4805dc4d.png)\r\n\r\nVS Code version: Code 1.32.1 (05f146c7a8f7f78e80261aa3b2a2e642586f9eb3, 2019-03-08T00:51:49.278Z)\r\nOS version: Windows_NT x64 6.1.7601\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz (8 x 3392)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>rasterization: unavailable_off<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>webgl: enabled<br>webgl2: unavailable_off|\r\n|Memory (System)|11.91GB (7.05GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (42)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nbetter-comments|aar|2.0.3\r\naurelia|Aur|1.0.3\r\ncode-gnu-global|aus|0.2.2\r\nvscode-django|bat|0.19.0\r\nAurelia|beh|1.2.2\r\npath-intellisense|chr|1.4.2\r\ngitignore|cod|0.6.0\r\nsupersharp|cra|0.1.4\r\ndart-code|Dar|2.24.0\r\nflutter|Dar|2.24.0\r\nnetcore-extension-pack|dog|0.8.0\r\nnetcore-snippets|dog|0.2.2\r\nxml|Dot|2.4.0\r\nEditorConfig|Edi|0.13.0\r\ndotnet|for|0.0.4\r\nIonide-FAKE|Ion|1.2.3\r\nIonide-fsharp|Ion|3.34.0\r\nIonide-Paket|Ion|1.12.0\r\nmechanic|Ion|0.0.19\r\ncsharpextensions|jch|1.3.0\r\nvscode-nuget-package-manager|jmr|1.1.6\r\nAngular2|joh|7.0.1\r\nvscode-csharp-snippets|jor|0.3.1\r\ndocomment|k--|0.1.6\r\ncsharpfixformat|Leo|0.0.79\r\nMagicPython|mag|1.1.0\r\nAngular-BeastCode|Mik|7.2.5\r\nmssql|ms-|1.4.0\r\npython|ms-|2019.2.5558\r\ncpptools|ms-|0.21.0\r\ncsharp|ms-|1.17.1\r\ndebugger-for-chrome|msj|4.11.3\r\nvscode-versionlens|pfl|0.22.0\r\nview-in-browser|qin|0.0.5\r\nquicktype|qui|12.0.46\r\nCsharp-ASPNETCore|rah|1.0.5\r\naspnet-helper|sch|0.6.4\r\nautoimport|ste|1.5.3\r\nasp-net-core-vs-code-extension-pack|tem|1.0.3\r\nvscodeintellicode|Vis|1.1.4\r\nvscode-todo-highlight|way|1.0.4\r\njinja|who|0.0.8\r\n\r\n(1 theme extensions excluded)\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-03-11 19:31:39",
        "state": "open",
        "number": 70251
    },
    {
        "title": "Allow to disable cursor blinking in input boxes",
        "description": "Is there an option to disable cursor blinking in edit fields/input boxes? (such as Find box (ctrl+F), or Find in Files (ctrl+shift+F).\r\nCursor blinking is set to solid in my config, so the text in the file windows does not blink.\r\neditor.cursorBlinking is set to \"block\"\r\n\r\nHowever this setting is not applied to edit fields, and it's rather annoying and inconsistent behaviour.\r\nIs there an option to disable cursor blinking in edit fields, too?\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\nMy current config is:\r\n<!-- Use Help > Report Issue to prefill these. -->\r\nVersion: 1.33.0-insider (system setup)\r\nCommit: 9b849d9de7168eb4f685823bf9b9e27a0a8dae74\r\nDate: 2019-03-08T06:59:35.464Z\r\nElectron: [3.1.3]\r\nChrome: 66.0.3359.181\r\nNode.js: 10.2.0\r\nV8: 6.6.346.32\r\nOS: Windows_NT x64 10.0.17763\r\n\r\nSteps to Reproduce:\r\n\r\n1. Press ctrl+shift+f\r\n2. Type something. The cursor in the edit field will blink.\r\n\r\nSee image below.\r\n[https://imgur.com/a/wulP9oS](https://imgur.com/a/wulP9oS)\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2019-03-09 22:35:56",
        "state": "open",
        "number": 70137
    },
    {
        "title": "default run task",
        "description": "It would be nice if there was a default run task (build + execute), similar to the existing default build and test tasks.",
        "createdAt": "2019-03-09 10:39:28",
        "state": "open",
        "number": 70118
    },
    {
        "title": "\"Auto-Attach\" DebugSession name change after launch",
        "description": "I am currently implementing something akin to an \u00bbauto-attach\u00ab feature for `vscode-perl-debug`. When I call `vscode.debug.startDebugging` I do not have a good name for the debug session yet, but once a connection to the debugger is established, I can come up with a better one.\r\n\r\nUnfortunately the `DebugSession.name` property is `read-only` and there does not seem to be an alternative to set it post-launch. https://github.com/Microsoft/vscode-node-debug/blob/d490a306164fd086e7e792dec858b1d36a879871/src/node/extension/autoAttach.ts#L62 also uses an awkward name like `Auto attached (123)` it seems.\r\n\r\nI do have control over the thread name, but in case of Perl, there is only ever one thread, and I'd rather not have session name and also thread name in the user interface, https://github.com/Microsoft/vscode/issues/69752.\r\n\r\n(Some way to make vscode use the thread name of the single thread in place of the poorly auto-generated session name would work for me.)",
        "createdAt": "2019-03-09 01:51:25",
        "state": "open",
        "number": 70104
    },
    {
        "title": "Keybindings: Add when context for if an extension is enabled",
        "description": "I have different extensions enabled in different workspaces, and similar custom keybindings for those extensions. It would be nice to be able to enable keybindings only if an extension was enabled.\r\n\r\nMaybe something like:\r\nWhen `{extensionId}.enabled == true/false`",
        "createdAt": "2019-03-08 14:44:26",
        "state": "open",
        "number": 70068
    },
    {
        "title": "[html][css] [custom data] Extension contributes settings don't take effect until vscode restarted now",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version:1.32\r\n- OS Version: mac/windows\r\n\r\nSteps to Reproduce:\r\n\r\n1.  Get an extension that has the html customData contributes setting for html tag lookups:\r\nhttps://github.com/Microsoft/vscode/issues/68554\r\nDownload: https://github.com/Microsoft/vscode/files/2857364/svg-0.0.1.vsix.zip\r\n2. Install in 1.32.\r\nNotice the message says it installed fine.  In 1.31 it would say click \"reload\".\r\n3. Open up an html file\r\n4. Type <foreign  .  It should have offered you <foreignObject> but nothing happens.  The html editor's customData setting from the extension's contributes isn't working.  \r\n5. Restart VSCode.\r\n6. Repeat.  It works.\r\n\r\nThis is a regression in behavior from 1.31.  In 1.31, after installation of a vsix file, you would click on \"Reload\" button in message, and the settings would take effect.  Even doing a disable/enable on the extension doesn't work, you have to restart VSCode. 1.31 was much nicer, that you didn't have to do that.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes/No\r\n",
        "createdAt": "2019-03-07 23:33:08",
        "state": "open",
        "number": 70000
    },
    {
        "title": "Workspace-level enabled extensions",
        "description": "Hi there,\r\n\r\nI was wondering if there's a place where I can manage the extensions enabled on the Workspace level (instead of the general), if so will be brilliant if we can have **a collapsable block like the Disabled/Enabled/Recommended on the extensions panel**, something like Workspace.\r\n\r\nAlso now is a little bit frustrating the way that this feature is organised, I always do something like _Disable_ and then re-enable the extension just for the workspace, the _Enable (Workspace)_ option.",
        "createdAt": "2019-03-07 14:02:50",
        "state": "open",
        "number": 69958
    },
    {
        "title": "Support file language detection with more the first line",
        "description": "We need a way to associate ARM template files with a language ID separate from the current JSON language.  Unfortunately, the existing firstLine filter for languages doesn't suffice for ARM templates (or for any other sub-JSON support). ARM template files are .json files and generally look like this:\r\n \r\n{\r\n    \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\r\n    \"contentVersion\": \"1.0.0.0\",\r\n    \"parameters\": {\r\n \r\nThe $schema value is the key to knowing if it\u2019s an ARM template (technically it could be anywhere in the file although it\u2019s usually at the top like this).  So we need a way to check further into the file than the first line.  Thanks!",
        "createdAt": "2019-03-05 20:45:49",
        "state": "open",
        "number": 69868
    },
    {
        "title": "Add context to find if list item is collapsible",
        "description": "Trying to bind <kbd>Space</kbd> to do 2 things:\r\n\r\n* If the item is \ud83d\udcc2 - toggle the folder `list.toggleExpand`\r\n* If the item is not a folder - behave like <kbd>Enter</kbd> `list.select`\r\n\r\nI was able to do this for the `Explorer`:\r\n```json\r\n{\r\n\t\"key\": \"space\",\r\n\t\"command\": \"list.toggleExpand\",\r\n\t\"when\": \"explorerViewletFocus && explorerResourceIsFolder\"\r\n},\r\n{\r\n\t\"key\": \"space\",\r\n\t\"command\": \"list.select\",\r\n\t\"when\": \"explorerViewletFocus && !explorerResourceIsFolder\"\r\n},\r\n```\r\n\r\nHowever, I see no way to do that for `breadcrumbs`, Custom Views ...",
        "createdAt": "2019-03-05 12:05:16",
        "state": "open",
        "number": 69842
    },
    {
        "title": "Scrolling hover popup with keyboard",
        "description": "It's already possible to create a keyboard shortcut to trigger a hover popup window with keyboard.. But mouse is still required to scroll the windows.",
        "createdAt": "2019-03-05 11:23:46",
        "state": "open",
        "number": 69836
    },
    {
        "title": "Cannot bind hardware keyboard buttons  \"back\" and \"forward\"",
        "description": "Hello,\r\nI have keyboard: \"Microsoft Natural Ergonomic 4000\"\r\nI try to assign HW buttons \"Back\" and \"Forward\" to actions:\r\n\"workbench.action.navigateBack\" and \"workbench.action.navigateForward\"\r\n\r\nOn binding assignment dialog I press \"back\" or \"forward\" but VScode says that binding is \"unknown\"\r\n\r\nButtons are works prefectly on other IDE (QtCreator)\r\n\r\nOS: Ubuntu 18.04\r\nVSCode:\r\nVersion: 1.31.1\r\nCommit: 1b8e8302e405050205e69b59abb3559592bb9e60\r\nDate: 2019-02-12T02:19:29.629Z\r\nElectron: 3.1.2\r\nChrome: 66.0.3359.181\r\nNode.js: 10.2.0\r\nV8: 6.6.346.32\r\nOS: Linux x64 4.15.0-45-generic\r\n",
        "createdAt": "2019-03-05 07:45:06",
        "state": "open",
        "number": 69825
    },
    {
        "title": "Support cell-by-cell navigation to allow links to be keyboard accessible and more fine grained keyboard selection",
        "description": "Two potential solutions:\r\n\r\n- Allow navigating the buffer cell by cell and maybe enter to activate a link\r\n- Enter a \"link navigation mode\" which allows navigating through just links",
        "createdAt": "2019-03-04 17:41:58",
        "state": "open",
        "number": 69795
    },
    {
        "title": "How to delete to the indent?",
        "description": "Like <kbd>\u2318</kbd> <kbd>\u21e7</kbd> <kbd>\u232b</kbd> in Sublime Text:\r\n\r\n![delete-to-indent](https://user-images.githubusercontent.com/14685751/53708099-c7bdb700-3e6c-11e9-97c4-e80b82434f36.gif)\r\n",
        "createdAt": "2019-03-04 03:02:06",
        "state": "open",
        "number": 69758
    },
    {
        "title": "Allow to run extension tests through typescript files",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nWe currently use Mocha to run all of our tests through the out/ folder within our repository. We want to switch to using ts-node in conjunction with mocha so that we can run the tests and collect coverage information (with NYC) through the typescript files, rather than compiled javscript. This works fine for unit tests, but it doesn't seem to work with vscode-integration tests. I believe due to the way the extension development host is launched, it is looking specifically for a javascript extension so can't interpret our typescript files. \r\nIs it possible to change that so that we are able to also run vscode-integration tests through the typescript files? Thanks!",
        "createdAt": "2019-03-01 21:41:09",
        "state": "open",
        "number": 69674
    },
    {
        "title": "Show an obvious indicator that an updated extension requires a reload",
        "description": "When an extension has auto-updated it displays a reload required notice on the extension inside the extensions view. \r\n\r\nThis is only noticeable if you open the extensions view and on long running vscode sessions a user may not realise they should reload. This can result in users filing duplicate and/or previously resolved error reports on the extension repo. Could a more obvious notification be shown?\r\n\r\n![screenshot from 2019-03-01 09-18-51](https://user-images.githubusercontent.com/5885195/53602499-1c5df980-3c03-11e9-942e-0a976031334b.png)\r\n\r\n",
        "createdAt": "2019-02-28 22:19:52",
        "state": "open",
        "number": 69620
    },
    {
        "title": "[json] add colon automatically",
        "description": "# Test case\r\n\r\n![untitledb2](https://user-images.githubusercontent.com/382183/53503676-8731f800-3a7e-11e9-9d40-09695ccf41e6.gif)\r\n\r\n# Expected\r\n\r\nAfter typing `name` <kbd>TAB</kbd>, the editor should correct this to `\"name\":`.\r\n\r\n# Actual\r\n\r\nIt is corrected to `\"name\"` (without `:`).",
        "createdAt": "2019-02-27 15:59:03",
        "state": "open",
        "number": 69546
    },
    {
        "title": "[json] add commas automatically",
        "description": "# Test case\r\n\r\n![untitledb2](https://user-images.githubusercontent.com/382183/53503469-1b4f8f80-3a7e-11e9-9bf2-2193e8fe4419.gif)\r\n\r\n# Expected behavior\r\n\r\nAfter typing `age` <kbd>TAB</kbd>, the comma should be added to the end of the previous line.\r\n\r\n# Actual behavior\r\n\r\nThe autocomplete does not produce valid text.\r\n\r\n# Discussion\r\n\r\nIn general, the autocomplete should strive to produce output that is maximally valid in whatever language grammar it is using.",
        "createdAt": "2019-02-27 15:57:23",
        "state": "open",
        "number": 69545
    },
    {
        "title": "Alt+up should move up a folder in the simplified file picker",
        "description": "Not sure if we can do this or not, but it feels natural to do alt+up. Right now it behaves the same as up.",
        "createdAt": "2019-02-27 14:44:15",
        "state": "open",
        "number": 69541
    },
    {
        "title": "An option to manually set indent size in an editor",
        "description": "As a motivating example, consider the following source file:\r\n```python\r\nimport textwrap\r\n\r\ndef main():\r\n    print(textwrap.dedent('''\\\r\n    <!DOCTYPE HTML>\r\n    <html>\r\n      <head>\r\n        <title>hello world</title>\r\n      </head>\r\n      <body>\r\n        Hello, world!\r\n      </body>\r\n    </html>'''))\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\nOn one hand, it's Python code, so I want indent 4. On another, it's HTML and I want indent 2. Generally, I want to manually change indent size depending on what I'm editing at the moment.\r\n\r\nWhen I click on the indentation indicator in the status bar, the following actions are offered:\r\n![image](https://user-images.githubusercontent.com/302938/53472211-18ea3700-3a78-11e9-974a-b7aecd69a9a1.png)\r\n\r\nIt would be nice to also have a \"Set indent size to a specified number\" action.",
        "createdAt": "2019-02-27 07:16:34",
        "state": "open",
        "number": 69505
    },
    {
        "title": "If you can't upgrade an extension, tell why!",
        "description": "Now I know that if I can't install latest version of an extension, it may be because I don't run the latest version on VScode. I learned it [the hard way](https://github.com/eamodio/vscode-gitlens/issues/666), because  it was not obvious and didn't understand why VScode didn't offer to update GitLens from 8.54 to 9.51 on VScode v1.2.1\r\n\r\n- Please, in the marketplace, in the header of each extension could you indicate the VScode version needed to install it's latest version.\r\n- When installing an extension, could you alert the user when there is a newer version of the extension that requires a more recent version of VScode.",
        "createdAt": "2019-02-26 21:41:44",
        "state": "open",
        "number": 69482
    },
    {
        "title": "Support multiple serverReadyActions",
        "description": "Testing #69313\r\n\r\nWe should support declaring multiple serverReadyActions per launch config. \r\n\r\n```\r\n\"serverReadyActions\": [\r\n  { ... }\r\n]\r\n```",
        "createdAt": "2019-02-26 18:02:31",
        "state": "open",
        "number": 69472
    },
    {
        "title": "Tree: Support for automatically expanding parent nodes of filter matches",
        "description": "Testing #69299\r\n\r\n- enable filtering on type in the outline\r\n- collapse all nodes using collapse all\r\n- type a symbol that you know exists that but is collapsed\r\n \r\n-> the parent node is not expanded\r\n\r\nIn this example the symbol `type` exists, but it is not expanded:\r\n\r\n![image](https://user-images.githubusercontent.com/172399/53330746-97679d00-38ef-11e9-865f-de073f12d34f.png)\r\n\r\n![image](https://user-images.githubusercontent.com/172399/53330794-b49c6b80-38ef-11e9-862c-f1111f52cbea.png)\r\n\r\n",
        "createdAt": "2019-02-25 10:23:28",
        "state": "open",
        "number": 69352
    },
    {
        "title": "Parts of serverReadyAction should be contributed by chrome debug",
        "description": "Refs #69313\r\n\r\nIt feels like parts of the `serverReadyAction` are tightly coupled with the chrome debug extension.\r\nDue to that I feel like those attributes should be contributed from the chrome debug extension - since they do not really make sense if the chrome debug extension is not installed.\r\nAn example of such an attribute is `webRoot`.\r\nAnother is the `\"action\": \"debugWithChrome\"`\r\n\r\nIf we allow these attributes to be contributed by the chrome extension it should make it easier to integrate this for other browser debug extensions like firefox.",
        "createdAt": "2019-02-25 09:36:40",
        "state": "open",
        "number": 69339
    },
    {
        "title": "With ctrl+p, tab to auto-complete query",
        "description": "When opening file with control+P, allow tab-to-complete using the selected entry in dropdown. I would be happy to work on this feature if it's relevant!",
        "createdAt": "2019-02-23 02:05:15",
        "state": "open",
        "number": 69257
    },
    {
        "title": "Workspace-level environment variable *definitions*",
        "description": "Often I find myself wanting to associate a workspace with an environment variable (e.g. server domain name, development/production tag) but do not want to create a global system environment variable or pollute ```~/.bash_profile``` with such a variable. I would like such an environment variable to be associated only with the workspace \"namespace\" and be used for tasks, launch configs and integrated terminals started in that workspace.\r\n\r\nI would like to suggest adding an env section to the .code-workspace file format similar to that shown below. It is crucial that a ```.env``` file argument be supported to allow environment variables to be excluded from source control (e.g. non-source controlled variables could be placed in  ```.env``` file which is specified in ```.gitignore```). \r\n\r\nThen different \"flavours\" of the same workspace (each using different clones of the same repos) could be used on the same computer - great for side-by-side comparison debugging or temporarily experimenting with a different setup etc.\r\n\r\n```json\r\n{\r\n\t\"folders\": [\r\n\t\t{\r\n\t\t\t\"name\": \"Api\",\r\n\t\t\t\"path\": \"..\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Processing\",\r\n\t\t\t\"path\": \"../../client/Processing\"\r\n\t\t}\r\n\t],\r\n\t\"env\": {\r\n\t\t\"NODE_ENV\": \"development\",\r\n\t\t\"DOMAIN\": \"backend.example.com\"\r\n\t},\r\n\t\"launch\": {\r\n\t\t\"configurations\": [],\r\n\t\t\"compounds\": [\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"Api + Ws\",\r\n\t\t\t\t\"configurations\": [\r\n\t\t\t\t\t\"Api\",\r\n\t\t\t\t\t\"Ws\",\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}\r\n```\r\n\r\n \r\n\r\n",
        "createdAt": "2019-02-22 17:47:19",
        "state": "open",
        "number": 69233
    },
    {
        "title": "Allow keybindings commands to override \"top menu bar\" shortcuts",
        "description": "Hi,\r\n\r\nWe are developing an extension for VS Code. We have overridden `F5` and this works great using the command palette or pressing `F5`, but accessing it from the \"top level menu bar\" bypasses our custom command and directly calls our language server. It would be nice if the overriden command would execute instead.\r\n\r\nThis menu command skips our overriden implementation:\r\n![image](https://user-images.githubusercontent.com/43748198/53169196-ddb1b900-35dc-11e9-85d1-42a4309fd0d2.png)\r\n\r\nThanks,\r\n\r\nJohan\r\n",
        "createdAt": "2019-02-21 12:31:43",
        "state": "open",
        "number": 69137
    },
    {
        "title": "Use schemastore catalog to add schema associations for json files",
        "description": "Fixed #26289 \r\n\r\nThe code source provided in this PR is a modified version of the source code of the [yaml-language-server](https://github.com/redhat-developer/yaml-language-server/blob/master/src/server.ts#L256-L302)",
        "createdAt": "2019-02-21 11:03:04",
        "state": "open",
        "number": 69132
    },
    {
        "title": "Bottom Panel visibility",
        "description": "I'm writing an extension and I'm struggling with toggling the bottom panel though the API.\r\n\r\nI'm able to `hide()` or `show()` a terminal that leads to open and close the panel, but there is no `toggle()` feature or a way to test terminal or panel visibility to call either `hide` or `show`.\r\n\r\nI saw that the Panel object has a `visible` member, but I can't find a way to access the panel instance through the API.\r\n",
        "createdAt": "2019-02-20 20:21:37",
        "state": "open",
        "number": 69074
    },
    {
        "title": "Enable Hover: sticky on RGB Color picker only",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nAs of right now if you disable Hover: Sticky in the preferences, you lose the ability to select a color on the RGBA color picker pop-up.\r\n\r\nPlease enable Hover: sticky by default on the color picker pop up or let us click on the small colored square for a color selector window pop-up.\r\n\r\nThis is a must, because by default, Hover: sticky makes for some annoying tooltips and must be disabled.\r\n\r\nThank you, I really hope you consider this.\r\n\r\nVS Code version: Code 1.31.1 (1b8e8302e405050205e69b59abb3559592bb9e60, 2019-02-12T02:20:54.427Z)\r\nOS version: Windows_NT x64 6.1.7601\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-02-20 18:15:09",
        "state": "open",
        "number": 69066
    },
    {
        "title": "Emmet expansion not working for jsx tags inside other jsx tag prop",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.31.1 (1.31.1)\r\n- OS Version: 10.14.3\r\n\r\nExample:\r\n\r\n```jsx\r\n<SomeComponent\r\n  property={\r\n    <AnotherComponent />\r\n  }\r\n/>\r\n```\r\n`AnotherComponent` is not expandable with `Emmet: Expand Abbreviation`, nor are any further nested components inside `property`\r\n\r\nrelevant section from my settings:\r\n\r\n```json\r\n\"emmet.includeLanguages\": {\r\n  \"javascript\": \"javascriptreact\",\r\n  \"jsx\": \"javascriptreact\",\r\n  \"jsx-attr\": \"javascriptreact\",\r\n  \"css\": \"styled-css\",\r\n},\r\n```\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2019-02-20 11:40:11",
        "state": "open",
        "number": 69041
    },
    {
        "title": "Tree: option to show all descendants of a filtered match",
        "description": "#4338 Issue Type: <b>Bug</b>\r\n\r\n```json\r\n\"workbench.list.keyboardNavigation\": \"filter\"\r\n```\r\n\r\n* Output objects of objects into debug console.\r\n* Expand some of them (only 1 level)\r\n* Filter by typing\r\n* Try to expand filtered item property (object/array)\r\n\r\nVS Code version: Code - Insiders 1.32.0-insider (a75cf6e4b4317de0bf38284af255bdf0089deb68, 2019-02-19T06:18:01.215Z)\r\nOS version: Windows_NT x64 10.0.17763\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-02-20 00:27:57",
        "state": "open",
        "number": 69013
    },
    {
        "title": "Ability to re use a view across view containers",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nIn an extension, I have a tree view that is registered to one of two view containers based on a setting:\r\n\r\n```\r\n    \"viewsContainers\": {\r\n      \"activitybar\": [\r\n        {\r\n          \"id\": \"github-pull-requests\",\r\n          \"title\": \"GitHub Pull Requests\",\r\n          \"icon\": \"resources/icons/github.svg\"\r\n        }\r\n      ]\r\n    },\r\n    \"views\": {\r\n      \"github-pull-requests\": [\r\n        {\r\n          \"id\": \"pr\",\r\n          \"name\": \"GitHub Pull Requests\",\r\n          \"when\": \"!config.githubPullRequests.showInSCM && config.git.enabled && github:hasGitHubRemotes && workspaceFolderCount != 0\"\r\n        }\r\n      ],\r\n      \"scm\": [\r\n        {\r\n          \"id\": \"pr\",\r\n          \"name\": \"GitHub Pull Requests\",\r\n          \"when\": \"config.githubPullRequests.showInSCM && config.git.enabled && github:hasGitHubRemotes && workspaceFolderCount != 0\"\r\n        }\r\n      ]\r\n    },\r\n```\r\n\r\nWhen the setting is false, I get the error `Error: view descriptor pr not found` when trying to use the reveal API. Looks like when trying to get the view container, the `when` context isn't considered and the first match is used:\r\nhttps://github.com/Microsoft/vscode/blob/5076c35a534f9ee03a4fead0ad5b858fcaa260eb/src/vs/workbench/common/views.ts#L222-L230\r\n\r\n\r\nVS Code version: Code - Insiders 1.32.0-insider (a75cf6e4b4317de0bf38284af255bdf0089deb68, 2019-02-19T06:15:45.796Z)\r\nOS version: Darwin x64 18.2.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-02-19 20:52:32",
        "state": "open",
        "number": 69004
    },
    {
        "title": "Support running multiple tests suites at the same time",
        "description": "Integration tests for extensions can be kinda slow so it'd be great if we could spawn separate instances of Code to run different tests at the same time on CI services. Currently this happens:\r\n\r\n> Running extension tests from the command line is currently only supported if no other instance of Code is running.\r\n\r\nThe word **currently** in that message suggests that this may be a temporary limitation, though I couldn't find an existing issue about relaxing that restriction.\r\n\r\nIs it possible?",
        "createdAt": "2019-02-19 15:23:36",
        "state": "open",
        "number": 68988
    },
    {
        "title": "Find in Folder not working if the folder is excluded in setting",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.31.1\r\n- OS Version: mac\r\n\r\nSteps to Reproduce:\r\n\r\n1. Right click the `node_modules` folder in left sider bar and selct Find in Folder\r\n2. Search some text that existed in `node_modules` folders\r\n3. Be sure in settings.json, the `node_modules` need to be excluded\r\n4. can not search any result.\r\n\r\nThe version before 1.31.1, also exclude `node_modules`, but If use Find in Folder and select node_modules, It can search the correct result.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: No\r\n\r\n",
        "createdAt": "2019-02-19 10:55:23",
        "state": "open",
        "number": 68970
    },
    {
        "title": "Debugging should switch focus to new stopping thread after exec 'continue' command",
        "description": "Here is the vscode insider version where i tried java multiple threads program. It still has similar switching problem as the issue #55862 when exec `continue` operation.\r\n\r\n```\r\nCommit: 709bf352b12de8284683bef94cb5984129bfc776\r\nDate: 2019-02-08T14:53:26.555Z\r\nElectron: 3.1.3\r\nChrome: 66.0.3359.181\r\nNode.js: 10.2.0\r\nV8: 6.6.346.32\r\nOS: Windows_NT x64 10.0.17763\r\n```\r\n\r\nBelow is the java program ThreadTest.java i used. Add two breakpoints at line 14 and line 27. When exec `next`, it doesn't auto switch thread focus, this is expected. But when exec `continue`, the thread focus always stay on one thread, not auto jump to other suspend threads.\r\n\r\n <details><summary> ThreadTest.java</summary>\r\n<pre>\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\n\r\npublic class ThreadTest {\r\n    public static void main(String[] args) throws Exception {        \r\n        Object object = new Object();\r\n        AtomicInteger ai = new AtomicInteger();\r\n        Thread thread0 = new Thread(() -> {\r\n            for (;;) {\r\n                System.out.println(String.format(\"Print %d in thread 0\" , ai.incrementAndGet()));\r\n                synchronized(object) {\r\n                    object.notify();\r\n                }\r\n                try {\r\n                    Thread.sleep(1000);\r\n                } catch (InterruptedException e) {\r\n                    e.printStackTrace();\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n        Thread thread1 = new Thread(() -> {\r\n            for (;;) {\r\n                try {\r\n                    synchronized(object) {\r\n                        object.wait();\r\n                    }\r\n                    System.out.println(String.format(\"Print %d in thread 1\" , ai.incrementAndGet()));\r\n                } catch (InterruptedException e) {\r\n                    e.printStackTrace();\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n\r\n        thread0.start();\r\n        thread1.start();\r\n        thread0.join();\r\n        thread1.join();\r\n    }\r\n}\r\n</pre>\r\n</details>\r\nBelow are the reproduce steps in vscode-insider:\r\n\r\n1. Add two breakpoints at line 14 and line 27.\r\n2. Start java debug, there are two breakpoints hit at line 14 (thread-0) and 27 (thread-1).\r\n3. Select thread-0 to continue, line 14 will be hit again and the focus always stay on thread-0. The focus never switch to thread-1.  As comparison, try the same steps both in eclipse and intellij, click `continue` and it will switch back and forth between thread-0 and thread-1.  I think we should maintain a queue to store all suspend threads, every time when exec `continue`, pop one. And a new breakpoint event arrives, push it.\r\n\r\nThe focus switch problem is important because java supports Thread Level suspend, that means you can choose to `continue` one stopping thread, and keep other threads still on stopping state. Other languages, like nodejs, continue will resume the whole program, so it doesn't need care about the focus switch.\r\n",
        "createdAt": "2019-02-19 05:06:35",
        "state": "open",
        "number": 68955
    },
    {
        "title": "[json] word completions inside strings",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\nAutocomplete on JSON string\r\n<!-- Describe the feature you'd like. -->\r\nIt would be very useful if the autocomplete on json files would be triggered without the need of start a new string like happens in other different extension files.\r\n\r\nOther files:\r\n![captura de pantalla 2019-02-18 a la s 1 18 51 p m](https://user-images.githubusercontent.com/17170586/52969839-c9bd4b80-337f-11e9-91e1-f14f86cd44bb.png)\r\n\r\nJSON Files:\r\n![captura de pantalla 2019-02-18 a la s 1 19 03 p m](https://user-images.githubusercontent.com/17170586/52969840-c9bd4b80-337f-11e9-9908-68e02ac5905f.png)\r\n",
        "createdAt": "2019-02-18 18:21:17",
        "state": "open",
        "number": 68936
    },
    {
        "title": "Information for each extension in process explorer of vscode",
        "description": "Some extension may cause high CPU usage. But process explore shows:\r\n\r\n![image](https://user-images.githubusercontent.com/33171396/52931658-1f95f180-3388-11e9-93a5-cfa12d5fe0df.png)\r\n\r\nIt's unable to know which extension caused this",
        "createdAt": "2019-02-18 06:19:23",
        "state": "open",
        "number": 68897
    },
    {
        "title": "Place editor groups side-by-side with The Panel",
        "description": "I want to be able to split the window more freely. Specifically when using a small screen it gets hard to follow the output of some extension or task, or something in the terminal while editing a file and having  another file split open for reference. Here's what that can look like on a small screen:\r\n\r\n![image](https://user-images.githubusercontent.com/30010/52904508-bbf7b100-322d-11e9-9d91-1f127402e0a2.png)\r\n\r\nMoving the panel to the right does not really help:\r\n\r\n![image](https://user-images.githubusercontent.com/30010/52911600-29472880-32a6-11e9-891a-dacc636caaa6.png)\r\n\r\nIf I could move an editor group down side by side with the panel (or below or under it when it is placed to the right) this would save me a lot of moving around between tabs and groups.\r\n\r\nThis gets extra important with some extensions that contribute WebViews with much of their UI. They are sometimes more panel-like than editor-like.\r\n\r\nWith this feature added screen real estate could be used like so:\r\n\r\n![bitmap](https://user-images.githubusercontent.com/30010/52904570-08db8780-322e-11e9-96da-b3e0cffacce0.png)\r\n\r\nOr with the panel to the right:\r\n\r\n![bitmap](https://user-images.githubusercontent.com/30010/52904578-1bee5780-322e-11e9-8ecb-11f6c21c6d5f.png)\r\n\r\nI think that it could be made general so that also the explorer pane could participate in this sharing.\r\n\r\nLet me know if my suggestion is not clear enough, and I'll try to improve on it.",
        "createdAt": "2019-02-16 10:52:45",
        "state": "open",
        "number": 68831
    },
    {
        "title": "File System Providers vs Debug",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nWhen a debug session is started from a text editor bound to a file system provider like `vscode-sshfs`, the debugger is initialized with `DebugProtocol.InitializeRequestArguments.pathFormat` set to `path` (and vscode-debugadapter also does not support any other `pathFormat`). Perhaps as a consequence, e.g. `DebugProtocol.SetBreakpointsArguments` then also contain only the path component of the actual address.\r\n\r\nSince URI support is present in other APIs, say,\r\n\r\n```ts\r\n  let uri = vscode.Uri.parse('ssh://example.org/example/example.pl');\r\n  vscode.workspace.openTextDocument(uri).then(\r\n    doc => vscode.window.showTextDocument(doc)\r\n  );\r\n```\r\n\r\nIt would be nice if debugging features also had support for them, especially before users come to rely on the current broken behaviour.\r\n\r\nThe use case here is simplified remote debugging, I would like to connect a remote workspace folder using a file system provider like `vscode-sshfs` and then start a remote debug session without the need to configure elaborate path mappings and without the need to somehow synchronize local sources and remotely deployed code.\r\n\r\nVS Code version: Code 1.31.0 (7c66f58312b48ed8ca4e387ebd9ffe9605332caa, 2019-02-06T08:51:24.856Z)\r\nOS version: Linux x64 4.15.0-45-generic\r\n\r\n",
        "createdAt": "2019-02-15 21:32:11",
        "state": "open",
        "number": 68808
    },
    {
        "title": "Restart task fails if task already completed",
        "description": "We have writ\r\nIssue Type: <b>Bug</b>\r\n\r\nBuild tasks are often quite long (especially when building for embedded systems) and it's common for them to throw up intermediate errors before completion.  \r\n\r\nIn this case a typical pattern is ...\r\n- start build task\r\n- spot error report in early build output\r\n- edit offending file\r\n- run build task again \r\n\r\nAt this stage if the original build task is still running a dialog is presented giving the option to terminate/restart.  \r\n\r\nIf 'restart' is chosen but the task completed while the dialog was being presented, you get another error saying the task couldn't be terminated. (Although this may be technically correct, failing to terminate because the task has already closed doesn't really seem like something worth reporting.)\r\n\r\nReally the behaviour I want is for CTRL-B to just terminate any current build tasks and start a new one unconditionally.  Perhaps there is a way to customise preferences to get this behaviour?  (Goes off to explore options...)\r\n\r\nVS Code version: Code 1.31.1 (1b8e8302e405050205e69b59abb3559592bb9e60, 2019-02-12T02:20:54.427Z)\r\nOS version: Windows_NT x64 10.0.16299\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7 CPU         930  @ 2.80GHz (8 x 2806)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>rasterization: unavailable_off<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Memory (System)|5.99GB (1.01GB free)|\r\n|Process Argv|--folder-uri file:///j%3A/esp|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (17)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nBookmarks|ale|10.2.2\r\nnumbered-bookmarks|ale|6.1.0\r\ncomments|Ale|1.0.4\r\nvscode-markdownlint|Dav|0.24.0\r\nvscode-instant-markdown|dba|1.4.3\r\ngitlens|eam|9.5.1\r\njson-tools|eri|1.0.2\r\ngc-excelviewer|Gra|2.1.29\r\nmdhelper|jos|0.0.11\r\npython|ms-|2019.1.0\r\ncpptools|ms-|0.21.0\r\ncsharp|ms-|1.17.1\r\nPowerShell|ms-|1.11.0\r\nteam|ms-|1.144.1\r\nplatformio-ide|pla|1.6.0\r\npowerquerymlanguage|sea|1.0.0\r\nvscodeintellicode|Vis|1.1.3\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->ten the needed data into your clipboard because it was too large to send. Please paste.",
        "createdAt": "2019-02-15 10:30:04",
        "state": "open",
        "number": 68767
    },
    {
        "title": "Allow to specify task terminal group position",
        "description": "It is great that a terminal group can now be specified for a task (https://github.com/Microsoft/vscode/issues/47265, thanks!). But unfortunately if there are several tasks in a terminal group and you restart one it goes to the last position (bottom or rightmost) in the terminal after restarting.\r\n\r\nIt would be nice to be able to specify the position of a task in the terminal group (e.g. integer) such that terminals are always positioned in ascending 'position order' no matter order of starting or following restarting.",
        "createdAt": "2019-02-14 15:25:32",
        "state": "open",
        "number": 68714
    },
    {
        "title": "\"Recently Updated\" Pre-defined Extensions search filter",
        "description": "With the releases of Visual Studio Code 1.31 and the ability to install, remove, and disable _most_ extensions without needing to restart (which, by the way, is an awesome feature addition to Code!), it now becomes troublesome to know which extensions have been recently updated (if automatic updating of extensions is turned on). This could help in narrowing down what extensions _may_ be causing a problem with VS Code due to a recent update, especially for Insiders builds.\r\n\r\nTherefore, I propose a new pre-defined filter in the Extensions activity pane search box: **`@installed:recentlyupdated`**. What does \"recent\" mean? Good question. Perhaps a good starting point is somewhere between 1 - 2 weeks ago from the current date?\r\n",
        "createdAt": "2019-02-14 14:58:48",
        "state": "open",
        "number": 68711
    },
    {
        "title": "Recommend extension from extension tab",
        "description": "I'd like to add extensions to the extensions.json's \"recommendations\" array by the context menu of an extension.\r\n\r\n\"Add to recommendations\"\r\n\r\nIf it's already there change this to \"Remove from recommendations\"\r\n\r\n\r\nRight now it's quite cumbersome to add a recommendation as I have to copy the extensions name from the label (or by the url if I opened it) and manually copy it. And even then I don't know If I already added that to the recommendations or not.",
        "createdAt": "2019-02-14 12:48:18",
        "state": "open",
        "number": 68702
    },
    {
        "title": "Fixes #68694 moving multiple consequitive lines",
        "description": "Fixes #68694 moving multiple consequitive lines",
        "createdAt": "2019-02-14 10:36:28",
        "state": "open",
        "number": 68695
    },
    {
        "title": "Unable to move multiple lines",
        "description": "- VSCode Version: 1.32.0 Insider\r\n- OS Version: Win 10\r\n\r\nSteps to Reproduce:\r\n\r\n1. Select multiple consecutive lines and try to move them (default ALT + downarrow used), this will fail and selections goes away\r\n![moving_multiple_lines](https://user-images.githubusercontent.com/372362/52779973-8befb880-3049-11e9-89ff-e14ce59a1c2f.gif)\r\n\r\n2. Expected behaviour, fix coming in PR:\r\n![moving_multiple_lines_fixed](https://user-images.githubusercontent.com/372362/52780056-b3df1c00-3049-11e9-844f-6a90cefd5b0d.gif)\r\n",
        "createdAt": "2019-02-14 10:16:03",
        "state": "open",
        "number": 68694
    },
    {
        "title": "Allow dynamic location of textmate grammar",
        "description": "Ref: https://github.com/vuejs/vetur/issues/210\r\n\r\nIn Vue files you can have `<template>`, `<style>` and `<script>` tag.\r\n\r\nHowever, certain libraries can add top-level custom blocks that uses another language. For example:\r\n\r\n```vue\r\n<template></template>\r\n<script></script>\r\n<style></style>\r\n\r\n<docs>\r\n# This might be markdown or json, depending on user's build configuration\r\n</docs>\r\n```\r\n\r\nOur approach was:\r\n\r\n- Give a setting `vetur.grammar.customBlocks`\r\n- Register a command to recompile the TextMate grammar with the custom blocks\r\n- Write the file to extension directory, the same path as the one specified in `package.json`\r\n\r\n![vetur](https://user-images.githubusercontent.com/4033249/32684742-a9d5fa72-c63b-11e7-8742-ced7166b4ef4.gif)\r\n\r\nThis has been working, but I'm worried extension integrity check might kick in and ask for reinstall. Also @sandy081 mentioned updates remove the old folder, so it's bad to keep states in extension directory.\r\n\r\nWhat I need is a path that I can:\r\n- Statically determine in write-time (as the path is specified in `package.json`)\r\n- Have write permission\r\n\r\nSo the paths in `ExtensionContext` wouldn't work for me.\r\n\r\nAfter checking with @sandy081, we think offering an API like `languages.setGrammar` would be best. We considered allowing path interpolations like `${globalStoragePath}/grammars/vue.json` in `package.json`, but that means the best Vetur can do is to write to that path on first activation, so no coloring before first activation/reload.\r\n\r\nHowever, I'm not sure we should provide an API tied to TextMate grammar. Also the API means the dynamically generated TextMate grammar wouldn't be loaded until extension activation.\r\n\r\n@alexandrudima What do you think? ",
        "createdAt": "2019-02-13 19:21:05",
        "state": "open",
        "number": 68647
    },
    {
        "title": "Trusted Publisher Verification & Verified Publisher Filtering for Extensions",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\nWith a high volume of extensions available for VS Code, it would be great to know\r\nif extension publishers are both trusted and verified.  In addition to this, the ability to\r\nfilter extension searches to display verified trusted extension publishers only, would be\r\ngreat!  Ratings aren't enough, I personally would feel more comfortable downloading\r\nextensions verified by Microsoft using a process to ensure proper due diligence has \r\nbeen exercised to guarantee some level of quality and security.\r\n<!-- Describe the feature you'd like. -->\r\n",
        "createdAt": "2019-02-13 06:54:52",
        "state": "open",
        "number": 68590
    },
    {
        "title": "The second installed extension doesn't auto display in 'Installed Extension' view till reloading VS Code",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version:\r\n- OS Version: Mac & Windows10\r\n\r\nSteps to Reproduce:\r\n\r\n1.Install one extension--> prompt that installing is completed --> the installed extension auto displays.\r\n2. Install the second extension -->prompt that installing is completed --> check whether the extension auto displays or not.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes/No\r\n",
        "createdAt": "2019-02-13 03:21:39",
        "state": "open",
        "number": 68584
    },
    {
        "title": "Make `code --wait` return focus to the originating app after editor is closed",
        "description": "- VSCode Version: 1.31.1\r\n- OS Version: macOS 10.14.2 (Mojave)\r\n\r\nI've read through the other issues related to this ( e.g. #30717). `code --wait` behaves correctly in that it exits when I close the relevant VSCode editor. My issue is that the VSCode app remains in focus after I've closed the editor.\r\n\r\nWhat I expect is that once I close the editor, I should be switched back to the originating app e.g. iTerm. Currently I have to manually switch back e.g. by clicking the app window. I'm used to this working correctly in Sublime's `subl -w` command, so I often end up typing terminal commands into a random VSCode editor instead of in my terminal.",
        "createdAt": "2019-02-13 00:35:04",
        "state": "open",
        "number": 68579
    },
    {
        "title": "Warning for trailing spaces in folder names",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nMy colleague and I had an insanely embarassing and unforgetable experience today at work due to the lack of a feature involving trailing spaces in folder names.\r\n\r\nI was teaching my colleague how to use Redux with React Native when we got an error in the console. Something along the lines: \"Could not resolve module reducers. Path ./reducers not found.\"\r\n\r\nI had encountered this issue many times before with previous versions of Expo in which the Metro Bundler cache would not update correctly and it would not recognize the creation of a new folder. I believed the problem to be related to the cache and my colleague and I spent half a day researching the issue on Google and StackOverflow.\r\n\r\nEventually, we realized that my colleague had accidentally included a space at the end of the folder name as follows: \"reducers \". Not in the import statement, however.\r\n\r\nThere should undoubtedly be a feature in VSCode that enables a warning message by default for trailing spaces in both folder and file names.\r\n\r\nThough I will admit, the laugh we got out of this was well worth the loss of time.\r\n\r\nVS Code version: Code - OSS 1.30.2 (61122f88f0bf01e2ac16bdb9e1bc4571755f5bd8, 2019-01-08T23:10:56.746Z)\r\nOS version: Linux x64 4.20.6-arch1-1-ARCH\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-02-12 19:29:52",
        "state": "open",
        "number": 68555
    },
    {
        "title": "[html][css] [custom data] Give custom HTML tags/attributes and CSS properties higher completion rank",
        "description": "From https://github.com/Microsoft/vscode/issues/62976#issuecomment-462002568\r\n\r\nMaybe similar to https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.VSIntelliCode#review-details, we should show custom tags/attributes on top of others (with a `*`).",
        "createdAt": "2019-02-12 18:28:50",
        "state": "open",
        "number": 68548
    },
    {
        "title": "Allow multiple filters in extensions search input",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nCurrenly it doesn't support query of the sort:\r\n\r\n```\r\n@enabled @outdated\r\n```",
        "createdAt": "2019-02-12 15:48:50",
        "state": "open",
        "number": 68529
    },
    {
        "title": "Restore Ignore Recommendation",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nhi\r\nwhen i Ignore recommendation for some extensions , later i want to see them and install , i dont know witch them is recommendation , sorry for bad english , \r\n\r\nVS Code version: Code 1.31.0 (7c66f58312b48ed8ca4e387ebd9ffe9605332caa, 2019-02-06T08:51:24.856Z)\r\nOS version: Linux x64 4.15.0-45-generic\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-02-12 07:23:30",
        "state": "open",
        "number": 68496
    },
    {
        "title": "Different color for major semver update button",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nCurrently all buttons <kbd>Update to `a`.`b`.`c`</kbd> in extensions viewlet look the same.\r\n\r\nBut major update (`a`) usually comes with breaking changes and it would be handy to highlight those buttons differently.",
        "createdAt": "2019-02-11 21:28:54",
        "state": "open",
        "number": 68460
    },
    {
        "title": "Hide extension rating and downloads for installed extensions",
        "description": "I'm not seeing a lot of value of showing downloads and ratings for installed extensions, this is mostly helpful when browsing/searching. Would love to see us hide this info for installed extensions, proposal below:\r\n\r\n## Enabled\r\n<img width=\"509\" alt=\"image\" src=\"https://user-images.githubusercontent.com/35271042/52590114-5fdbf980-2df5-11e9-9c1f-722d9bc4f8d0.png\">\r\n\r\n## Search\r\n<img width=\"402\" alt=\"image\" src=\"https://user-images.githubusercontent.com/35271042/52590272-c3662700-2df5-11e9-863a-1b573215f252.png\">\r\n",
        "createdAt": "2019-02-11 20:09:08",
        "state": "open",
        "number": 68456
    },
    {
        "title": "Allow extensions to control default expanded state of contributed views",
        "description": "Currently, contributed views are always collapsed when inside core viewlets (explorer, SCM, debug, and extensions), and are expanded by default when inside custom view containers. Extensions being collapsed by default causes discoverability issues for some extensions and some extensions already try to work around this using `reveal` on the tree view.\r\n\r\nI propose adding an \"expanded\" property on the views contribution point that allows extensions to set the default behavior. If not set, the default behavior is the same as now. One thing to note is that if extensions opt-in to expanding, this will cause them to activate on startup if their containing viewlet is open.",
        "createdAt": "2019-02-11 16:16:48",
        "state": "open",
        "number": 68438
    },
    {
        "title": "Ability to update built in extensions",
        "description": "Ability to update built in extensions",
        "createdAt": "2019-02-11 11:41:07",
        "state": "open",
        "number": 68410
    },
    {
        "title": "More flexible input variables: Multiple values & labels",
        "description": "I love the new input variables feature and was eager to thin out the tasks lists of my projects. Unfortunately, I realized that the mechanism does not suffice for most cases. Items of the `options` array may be cryptic ids and often a choice represents a combination of variables. May I suggest that you support multiple values and, consequently, labels?\r\n\r\nExample:\r\n\r\n```json\r\n{\r\n  \"tasks\": [{\r\n    \"label\": \"\ud83d\udc33 Docker build\",\r\n    \"type\": \"shell\",\r\n    \"command\": \"docker\",\r\n    \"args\": [\"build\", \"-t\", \"${input:image.tag}\", \".\"],\r\n    \"options\": {\r\n      \"cwd\": \"${workspaceFolder}/${input:image.context}\"\r\n    },\r\n    \"problemMatcher\": []\r\n  }],\r\n  \"inputs\": [{\r\n    \"id\": \"image\",\r\n    \"type\": \"pickString\",\r\n    \"description\": \"Which image to build?\",\r\n    \"options\": [{\r\n      \"label\": \"\ud83d\udcb5 Billing\",\r\n      \"value\": {\r\n        \"tag\": \"my.azurecr.io/myshop-billing\",\r\n        \"context\": \"backend/services/billing\"\r\n      }\r\n    }]\r\n  }]\r\n}\r\n```\r\n\r\nValid values might be:\r\n\r\n```json\r\n{\r\n  \"options\": [\r\n    \"a string\",\r\n    { \"value\": \"with a\", \"label\": \":)\" },\r\n    { \"label\": \"with multiple\", \"value\": { \"s\": \"\" } }\r\n  ]\r\n}\r\n```\r\n\r\n\r\n\r\n",
        "createdAt": "2019-02-11 09:08:12",
        "state": "open",
        "number": 68397
    },
    {
        "title": "Draw the status bar's background in different colors (eg red, yellow) if the program has errors/warnings",
        "description": "Hi! I've just started using VS Code this week. I've done several searches for this feature or a similar feature request and haven't found anything, please let me know if I've missed something.\r\n\r\nI think that it should be possible for themes to affect the status bar's background color if the program has an error or warning. https://code.visualstudio.com/api/references/theme-color#status-bar-colors has a list of properties that can be used to affect the status bar's color, but as far as I can tell, none of these properties allow me to accomplish this.\r\n\r\nIf the program in the current editor window has an error, I want my theme to be able to color the status bar red. If the program has a warning, I want my theme to be able to color the status bar yellow. If there are both, I think that the error state should take priority, and so the status bar should use my red background color.\r\n\r\nDoes something like this exist and I've just missed it?\r\n\r\nThank you! :) ",
        "createdAt": "2019-02-10 21:31:34",
        "state": "open",
        "number": 68376
    },
    {
        "title": "allow global flag to have ALL new extensions be disabled by default",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nThis is mainly for multi-project (mult-workspace) polyglot development.\r\nI have workspaces that need 5 extensions, others 10 different others, etc.\r\nBeing esp. dev ops engineer you have to mess with code written in plethora of languages.\r\n\r\nI know a developer (selfless ;)) can make the extension disabled after installation, BUT Relying on extension developer be selfless, and to make the extension disabled by default is not going to work:\r\nas a developer I would WANT to enable the extension. I want it to be used.\r\n\r\nSo what we should have is a global flag \"enable installed extensions\".\r\n\r\nWhen user sets it to \"False\", the new extensions will not be enabled post installation.\r\n\r\nBenefits of this \"policy\" would be:\r\n1. snappy experience\r\n2. less extension A vs. extension B conflicts\r\n3. less meddling (it is easier to enable 7 extension for a new project than to disable 40)\r\n\r\nIF I am missing an existing feature, please tell me.\r\n\r\nThanks!\r\n",
        "createdAt": "2019-02-10 15:20:18",
        "state": "open",
        "number": 68364
    },
    {
        "title": "Reordering members through outline view",
        "description": "Hi,\r\n\r\nI would like to be able to drag and drop contents in the outline view. This would be useful for example to rearrange xml files or class methods.",
        "createdAt": "2019-02-10 12:14:52",
        "state": "open",
        "number": 68353
    },
    {
        "title": "Keyboard shortcut search results for \"focus terminal\" have odd ordering",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nVS Code version: Code 1.31.0 (7c66f58312b48ed8ca4e387ebd9ffe9605332caa, 2019-02-05T22:32:14.164Z)\r\nOS version: Darwin x64 18.2.0\r\n\r\n### Steps and results\r\n1. Open keyboard shortcuts settings\r\n2. Search for \"focus terminal\"\r\n\r\n**Expected:** The command called \"Terminal: Focus Terminal\" should be at/near the top of the list, since the command name contains an exact match for what I typed (and closely-related commands like \"Terminal: Focus _____\" should be soon after).\r\n\r\n**Actual:** It's waaayyyyy down at the bottom. Seems like an issue with the search ranking engine.\r\n\r\nEven if I search specifically for \"terminal: focus terminal\" the command which is an exact match is listed last.\r\n\r\n<details>\r\n<summary>Expand for screenshots of \"focus terminal\" search</summary>\r\n<img src=\"https://user-images.githubusercontent.com/5864305/52497050-e4c2db00-2b89-11e9-81aa-7843719c423f.png\"/>\r\n<img src=\"https://user-images.githubusercontent.com/5864305/52497194-4d11bc80-2b8a-11e9-8c9d-d0e34e9aba2b.png\"/>\r\n<img src=\"https://user-images.githubusercontent.com/5864305/52497144-2f445780-2b8a-11e9-9eda-d469d3195a95.png\"/>\r\n</details>\r\n\r\n<details>\r\n<summary>Expand for screenshots of \"terminal: focus terminal\" search</summary>\r\n<img src=\"https://user-images.githubusercontent.com/5864305/52497517-21db9d00-2b8b-11e9-9e03-c857adb7bdc2.png\"/>\r\n</details>\r\n\r\n### System details\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i5-8259U CPU @ 2.30GHz (8 x 2300)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: enabled<br>rasterization: enabled<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|1, 2, 2|\r\n|Memory (System)|16.00GB (0.09GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (10)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nformat-php|Kas|1.1.2\r\ngithistory|don|0.4.6\r\ntslint|eg2|1.0.42\r\nvscode-pull-request-github|Git|0.4.0\r\npython|ms-|2019.1.0\r\nvscode-docker|Pet|0.5.2\r\nannotator|ryu|0.11.0\r\npartial-diff|ryu|1.4.0\r\ngitblame|wad|2.6.3\r\nquokka-vscode|Wal|1.0.182\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-02-08 18:21:25",
        "state": "open",
        "number": 68271
    },
    {
        "title": "Search with non-standard encodings not supported",
        "description": "\r\n![screenshot_20190208_122607](https://user-images.githubusercontent.com/444063/52475741-c1555b80-2b9c-11e9-8482-2b9b6387f5f4.png)\r\nIssue Type: <b>Bug</b>\r\n\r\nSet worskpace encoding to cp437.\r\nDo a worskspace search for anything.\r\n\r\nThe search box is surrounded in red, a popup appears underneath it saying \"Unknown encoding: cp437\".\r\n\r\nI had the same problem once and found I had to unset the option search.useRipgrep to have it working. That worked. But now, I have a warning on this preference that says \"deprecated\" and to use  pcre (which doesn't work).\r\n\r\nThat's a regression.\r\n\r\nVS Code version: Code 1.31.0 (7c66f58312b48ed8ca4e387ebd9ffe9605332caa, 2019-02-06T08:51:24.856Z)\r\nOS version: Linux x64 4.15.0-1032-oem\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz (8 x 2874)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>rasterization: disabled_software<br>surface_synchronization: enabled_on<br>video_decode: unavailable_off<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|2, 3, 3|\r\n|Memory (System)|15.39GB (1.47GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (20)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nproject-manager|ale|10.3.2\r\nquitcontrol-vscode|art|3.0.0\r\nbetter-toml|bun|0.3.2\r\nwhitespace-plus|dav|0.0.5\r\nmustache|daw|1.1.1\r\ngitlens|eam|9.5.0\r\nEditorConfig|Edi|0.12.8\r\ngithd|hui|2.1.0\r\nrpm-spec|Lau|0.2.3\r\nvscode-duplicate|mrm|1.2.1\r\nindent-rainbow|ode|7.2.4\r\nvscode-subword-navigation|ow|1.2.0\r\nvscode-docker|Pet|0.5.2\r\nrust|rus|0.5.3\r\nwhitespace|san|0.0.5\r\ncrates|ser|0.3.6\r\ncode-settings-sync|Sha|3.2.4\r\nlocal-history|xyz|1.7.0\r\nplsql-language|xyz|1.7.0\r\nmarkdown-all-in-one|yzh|2.0.1\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-02-08 11:26:31",
        "state": "open",
        "number": 68237
    },
    {
        "title": "Support comments in UI editors (settings and keyboard shortcuts)",
        "description": "I prefer using the UI editor for both settings and keyboard shortcuts. However, I often find myself automatically going into the JSON files because they're packed with comments \u2014 for both modified and unmodified settings/keyboard rules (example shown below).\r\n\r\n### Feature Request\r\n\r\n- Support ability to add comments to the UI editors, possibly with an icon next to the setting/keyboard rule (if it has a comment), allowing the comment to be viewed by hovering over the icon.\r\n- Add additional tags that would allow you to further filter the results (e.g. `@commented`, `@modified @commented`, `@unmodified @commented`).\r\n\r\n### Note\r\n\r\nThis would also solve a bug where comments in the JSON file are removed (without any indication) when making changes in the UI editor. See #75599.\r\n\r\n### Example\r\n\r\nHere's an example `settings.json` file that has comments for both modified and unmodified settings:\r\n\r\n```jsonc\r\n{\r\n  // Disabling validation prevents errors on syntax constructs that aren't supported by the language\r\n  // service (e.g. proposed features such as the pipeline operator). It also prevents duplicate\r\n  // linting errors (from both ts and eslint). However, it also prevents the editor.showUnused\r\n  // (fading of unused variables) option from working.\r\n  // https://github.com/Microsoft/TypeScript/issues/29293)\r\n  // https://github.com/Microsoft/TypeScript/issues/13408\r\n  \"javascript.validate.enable\": false,\r\n  \"typescript.validate.enable\": false,\r\n\r\n  // Good for disabling annoying tooltips, but nice for eslint error details.\r\n  // Waiting for ability to customize tooltips or place the tooltips at top/bottom.\r\n  // https://github.com/Microsoft/vscode/issues/65996\r\n  // \"editor.hover.enabled\": false,\r\n}\r\n```",
        "createdAt": "2019-02-08 01:11:22",
        "state": "open",
        "number": 68184
    },
    {
        "title": "Tab press in search panel should navigate to next text field",
        "description": "When pressing tab in the search panel with CTRL+SHIFT+F, I should be able to:\r\n\r\n1. enter some text in the 'search' field\r\n2. press tab\r\n3. enter some text in the 'files to include' field\r\n4. press enter.\r\n\r\nBut it is necessary to press tab 5(!) times to get from the 'search' field to the 'files to include' field.\r\n\r\nAccording to #34676 this was fixed in 1.25, but I'm running version 1.31.0 and I still see the issue.",
        "createdAt": "2019-02-07 20:39:15",
        "state": "open",
        "number": 68166
    },
    {
        "title": "Enlarge scroll bar button when mouse near by",
        "description": "This issue is for a feature request - that the scroll bar button scales to 2.0 or so whenever the mouse button gets near it. Currently I have Visual Studio Code set to Zoom out the entire interface so I can fit more on the screen. The only problem with that is that the scroll bars also zoom and become tiny and hard to grab.\r\n\r\nIt would be great if the scroll bar got big whenever the mouse got near. I think this can be done with `transform: scale` but there may need to be more work done because the button goes past the top and bottom.\r\n\r\nI have included a screenshot of what it might look like:\r\n\r\n![vscode-enlarge-scrollbar](https://user-images.githubusercontent.com/1364432/52440317-9999c100-2ad2-11e9-820a-5f0db91ca4dd.gif)\r\n\r\n",
        "createdAt": "2019-02-07 20:19:34",
        "state": "open",
        "number": 68164
    },
    {
        "title": "Git: Support git worktrees in workspace",
        "description": "```\r\n$ mkdir repro\r\n$ cd repro\r\n$ mkdir example1\r\n$ cd example1\r\n$ git init; echo \"hello\" > world.txt; git add world.txt; git commit -m \"init\";\r\n$ git worktree add ../example1branchA\r\n$ git worktree add ../example1branchB\r\n$ cd ..\r\n\r\n$ mkdir example2\r\n$ cd example2\r\n$ git init; echo \"hello\" > world.txt; git add world.txt; git commit -m \"init\";\r\n$ cd ..\r\n```\r\nScenario:\r\n1. Open `repro` directory in VS Code\r\n2. Go to Git tab.\r\n\r\n**Expected:** \"Source Control Providers\" lists Git repos.\r\n  * `example1`\r\n  * `example1branchA`\r\n  * `example1branchB`\r\n  * `example2`\r\n\r\n**Actual:** \"Source Control Providers\" lists Git repos.\r\n * `example1`\r\n * `example2`\r\n\r\nI sometimes will have lots of branches checked out in parallel on huge repos that I can't afford to clone multiple times. I would also like to be able to use VS Code's source control functionality with these checkouts all the same.\r\n\r\nThanks! and thanks for Code!",
        "createdAt": "2019-02-07 04:24:09",
        "state": "open",
        "number": 68038
    },
    {
        "title": "SCM: Allow individual horizontal scrolling setting",
        "description": "Issue Type: <b>Bug</b>\r\n\r\n1. Save a change to a file with a decently long name in a git-enabled project.\r\n2. Open the source control side panel.\r\n3. Hover over \"Changes\" header and notice that buttons to stage or discard all changes are hidden unless the sidebar is expanded.\r\n\r\nIn previous version, buttons were visible no matter the sidebar width:\r\n![old version](https://i.imgur.com/FaNak8r.png)\r\n\r\nIn version 1.31.0, the buttons are hidden when file name or path is long:\r\n![narrow sidebar - 1.31.0](https://i.imgur.com/SzKnRkp.png)\r\n\r\nThe buttons become visible again when the sidebar is expanded:\r\n![expanded sidebar - 1.31.0](https://i.imgur.com/7D7CrHz.png)\r\n\r\n\r\nVS Code version: Code 1.31.0 (7c66f58312b48ed8ca4e387ebd9ffe9605332caa, 2019-02-05T22:32:14.164Z)\r\nOS version: Darwin x64 16.7.0\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i5-3210M CPU @ 2.50GHz (4 x 2500)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: enabled<br>rasterization: enabled<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|2, 4, 4|\r\n|Memory (System)|8.00GB (1.56GB free)|\r\n|Process Argv|-psn_0_294984|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details>Extensions: none\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-02-07 02:47:54",
        "state": "open",
        "number": 68027
    },
    {
        "title": "New explorer: allow to filter by path",
        "description": "This would be an amazing feature to have: allow to type a path (relative) which makes the file explorer narrow down by exactly that path, e.g.:\r\n\r\n![image](https://user-images.githubusercontent.com/900690/52353886-b4672980-2a2f-11e9-96b2-9ce10741df45.png)\r\n\r\nMaybe trees should be allowed to opt into this behaviour which is, when you type a `/` or `\\` as part of the filter, it also respects the resource path of the element if it has any.\r\n\r\n//cc @joaomoreno ",
        "createdAt": "2019-02-06 15:54:07",
        "state": "open",
        "number": 67988
    },
    {
        "title": "Global extension directory and easier way to deploy extensions",
        "description": "Problem:\r\nVSCode can be installed with a switch for silent installations. It offers a simple API that allows the installation of Extensions via the command line, but those extensions are only installed into the current users profile directory. This brings the problem that every user on the systems (= a Terminal Server) needs to install the extensions for him/herself. Moreover - in my scenario - this system is air-gapped (not connected to the internet). Therefore it is impossible for the user to download extensions and I do not want every user to hassle with the installation of Extensions.\r\n\r\nFeature Request:\r\nIt would be nice if not only VSCode offers silent installation but also either an API that allows the installation of plugins into a central folder (not the user profile; e.g. %VSCodeInstallDir%\\extensions or ...data\\extensions) which then holds extensions or - even better - just a folder where an .visx-file can be extracted without the need for an vscode.exe API call and that then every instance of VScode automatically loads (and maybe additionally the extensions residing in the users' profile, with newer extensions taking priority over old ones).\r\n\r\nThis would make the deployment (e.g. via SaltStack) of VSCode and it's extensions especially in air-gapped multi-user environments much easier.",
        "createdAt": "2019-02-06 14:02:36",
        "state": "open",
        "number": 67985
    },
    {
        "title": "Start installation of multiple .vsix files simultaneously",
        "description": "#### Version of VS Code\r\n1.29.1\r\n\r\n#### Your operating system\r\nUbuntu MATE 16.04\r\n\r\n#### List of extensions that you have installed:\r\nNone\r\n\r\n#### Reproducible steps (1... 2... 3...) that cause the issue\r\n1. File->Preferences->Extensions\r\n2. Click ellipsis button (...)\r\n3. Click \"Install from VSIX...\"\r\n4. Try to choose multiple .vsix files, e.g. with Shift+click or Ctrl+click. It is not possible.\r\n\r\n#### What you expected to see, versus what you actually saw:\r\nI expect to be able to choose multiple .vsix files and install them all simultaneously. Instead I had to click \"Install from VSIX...\" once for each extension.\r\n",
        "createdAt": "2019-02-05 07:38:30",
        "state": "open",
        "number": 67905
    },
    {
        "title": "Show number of matching occurrences",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nWhen selecting some text, all matching occurrences are highlighted. The matches can be fine-tuned using for example `Alt+W` (Match Whole Word) and `Alt+C` (Match Case), but I can't see the number of matching occurrences anywhere.\r\n\r\nThe number of matching occurrences would be particularly useful to know when using `Ctrl+F2` to change all the occurrences.\r\n\r\nVS Code version: Code 1.30.2 (61122f88f0bf01e2ac16bdb9e1bc4571755f5bd8, 2019-01-07T22:54:13.295Z)\r\nOS version: Windows_NT x64 10.0.17134\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-02-04 11:02:44",
        "state": "open",
        "number": 67841
    },
    {
        "title": "[json] emphasize default setting in label",
        "description": "Currently, Visual Studio Code JSON IntelliSense does not highlight (or in any other way emphasize) default values:\r\n\r\n![IntelliSense doesn't highlight defaults](https://user-images.githubusercontent.com/9283914/52182923-e182c480-2802-11e9-9dd8-4c5e14fea8cf.png?classes=shadow)\r\n_(`es3` in this example)_\r\n\r\nI'd like to suggest to highlight default values, so the programmer is aided in what values will be used when (s)he lints (probably large) configuration files for redundant entries.",
        "createdAt": "2019-02-03 21:37:08",
        "state": "open",
        "number": 67820
    },
    {
        "title": "[html][css] [custom data] Reload custom data on user setting change or JSON file changes ",
        "description": "- listen to file changes on the configuration files and set a `cutomdatachange` event to the css/html language services\r\n- listen to extension changes\r\n\r\n- show information in the HTML/CSS language server logs which files have been read",
        "createdAt": "2019-02-01 14:50:27",
        "state": "open",
        "number": 67750
    },
    {
        "title": "Reveal in sidebar by double-click breadcrumb",
        "description": "I've set the `explorer.autoReveal: false` in my settings.\r\nIt would be great, if i am double-click the file or folder in the breadcrumbs it would be reveal in sidebar/explorer.",
        "createdAt": "2019-02-01 08:38:49",
        "state": "open",
        "number": 67711
    },
    {
        "title": "VS Code theme style is added to text copied to the clipboard as rich text instead of plain text. ",
        "description": "Issue Type: <b>Bug</b>\r\n\r\n1. Copy text, paste into Word or GMail or any other rich-text editor. \r\n2. Result: White on Black text in the font of VS Code's interface. (Or whatever the current theme is)\r\n\r\nExpected: plain text pasted only.\r\n\r\nAlso opened before by @alex-jitbit\r\nhttps://github.com/Microsoft/vscode/issues/63154\r\nReported as a \"feature\" that can be turned off by @rebornix, and indeed it can be turned off with \"Editor: Copy With Syntax Highlighting\"\r\n\r\nHOWEVER, I believe that this should NOT be default behavior, and at the least believe that the \"text background\" should NOT be copied along with it, and the un-highlighted text be turned to black when copied as rich-text in the clipboard. \r\n\r\nPlatform: Windows\r\n\r\nVS Code version: Code 1.30.2 (61122f88f0bf01e2ac16bdb9e1bc4571755f5bd8, 2019-01-07T22:54:13.295Z)\r\nOS version: Windows_NT x64 10.0.17134\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-6650U CPU @ 2.20GHz (4 x 2208)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>rasterization: enabled<br>video_decode: enabled<br>video_encode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Memory (System)|15.93GB (6.61GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (1)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-autohotkey|sle|0.2.2\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-02-01 06:18:11",
        "state": "open",
        "number": 67702
    },
    {
        "title": "Auto-indent on closing brace",
        "description": "VSCode Version: Code 1.30.2\r\nOS Version: Windows_NT x64 10.0.17763\r\nExtensions: Extensions are enabled\r\n![image](https://user-images.githubusercontent.com/28403336/52084629-5500a980-2557-11e9-9175-8a91ef3efaf0.png)\r\n\r\non typing the closing brace. Meaning VSCode should take the current tab indentation size in account and auto-indent the code-block when typing the closing brace.",
        "createdAt": "2019-01-31 20:54:47",
        "state": "open",
        "number": 67678
    },
    {
        "title": "Investigate SIGUSR1 usage",
        "description": "It seems `SIGUSR1` can be used with electron 3.x (see https://github.com/electron/electron/issues/11287). We should see if that's true and iff so adopt it where needed. ",
        "createdAt": "2019-01-31 16:30:43",
        "state": "open",
        "number": 67655
    },
    {
        "title": "Extension should show up in the installed extensions list as soon as it's installed",
        "description": "#66931\r\n\r\n- Find extension, click to open its readme\r\n- Clear extension query\r\n- Click \"Install\" in the readme\r\n- The extension should show up in the enabled list immediately if it doesn't require a reload",
        "createdAt": "2019-01-31 01:33:11",
        "state": "open",
        "number": 67603
    },
    {
        "title": "Welcome page extension suggestions should not be hardcoded into our source code",
        "description": "Issue Type: <b>Bug</b>\r\n\r\n**Bug**\r\nOn the welcome page, we hardcode some recommended extensions for the `Tools and languages` section.\r\n\r\n**Request**\r\nPull these recommendations from the `product.json` instead\r\n\r\nVS Code version: Code - Insiders 1.31.0-insider (9606490e26f8cbe4d615305389d45e9b144ded7c, 2019-01-30T15:15:08.172Z)\r\nOS version: Darwin x64 18.2.0\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz (8 x 2200)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: enabled<br>rasterization: enabled<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|3, 3, 3|\r\n|Memory (System)|16.00GB (0.30GB free)|\r\n|Process Argv|-psn_0_20636589|\r\n|Screen Reader|no|\r\n|VM|22%|\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-01-31 00:25:32",
        "state": "open",
        "number": 67600
    },
    {
        "title": "[folding] Show tooltip on hovering collapse markers",
        "description": "It would be nice to be able to hover the `\u229e` and `\u229f` symbols in the left gutter of the editor and see a tooltip saying what will happen if they're clicked\\*, and showing which keyboard shortcut (if any) is assigned to the action, thus making the UI behavior more discoverable.\r\n\r\n<sub>\\* This may sound superfluous, but IMO it would help with promoting consistent nomenclature throughout the interface, e.g. \"collapse\"/\"expand\" vs. \"fold\"/\"unfold\" vs. \"hide\"/\"show\", etc.</sub>",
        "createdAt": "2019-01-29 09:56:45",
        "state": "open",
        "number": 67340
    },
    {
        "title": "Show breadcrumbs in peek view",
        "description": "Would be great if we could see the breadcrumbs in the peek view title when doing Find All References. Otherwise I am scrolling around to figure out which class/method the reference is in.\r\n\r\n![image](https://user-images.githubusercontent.com/323878/51859220-79f0e480-22eb-11e9-9c3c-0ebd16d8fd7f.png)\r\n\r\nvs\r\n\r\n![image](https://user-images.githubusercontent.com/323878/51859235-81b08900-22eb-11e9-949c-1bbdadb392ff.png)\r\n",
        "createdAt": "2019-01-28 18:57:58",
        "state": "open",
        "number": 67268
    },
    {
        "title": "Feature Request: Global override of indentationRules",
        "description": "Hello,\r\n\r\nI am wondering if it would be at all possible and worth the effort to add a feature that allows you to override any and every language, or a particular language's indentation rules such as increaseIndentPattern and decreaseIndentPattern outside of their respective language-configuration files.\r\n\r\nSomething along the lines of:\r\n\r\n```json\r\n\"[typescript]\": {\r\n    \"indentationRules\": {\r\n        \"decreaseIndentPattern\": \"<some regex here>\",\r\n        \"increaseIndentPattern\": \"<some regex here>\"\r\n    }\r\n}\r\n```\r\n\r\nand of course the language-nonspecific version would be:\r\n\r\n```json\r\n\"indentationRules\": {\r\n    \"decreaseIndentPattern\": \"<regex>\",\r\n    \"increaseIndentPattern\": \"<regex>\"\r\n}\r\n```\r\n\r\nI know a couple of users requested some time ago that auto indent = false disables the increaseIndentPattern behavior, but offering this amount of granularity over when it happens exactly seems much more sensible.",
        "createdAt": "2019-01-27 10:52:09",
        "state": "open",
        "number": 67174
    },
    {
        "title": "show the time comsumed by a task",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nwhen a task finish, show the time elapsed at the bottom\r\n\r\nVS Code version: Code 1.30.2 (61122f88f0bf01e2ac16bdb9e1bc4571755f5bd8, 2019-01-07T22:54:13.295Z)\r\nOS version: Windows_NT x64 10.0.17763\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-01-25 02:38:42",
        "state": "open",
        "number": 67094
    },
    {
        "title": "Exclude files by right clicking result in search panel",
        "description": "Right now we can dismiss files and folders in the search result, but it would be a nice shortcut to be able to add them to the excluded files by right-clicking the file or folder in the results:\r\n\r\n![screenshot from 2019-01-24 12 24 37](https://user-images.githubusercontent.com/7832163/51704494-73eec100-1fd6-11e9-86af-f7d6cfdeb397.png)\r\n\r\nThat way you could easily exclude them to let you tweak your search string and ignore any results that you don't want. This would be especially helpful for large projects or multi-folder workspaces.",
        "createdAt": "2019-01-24 19:49:39",
        "state": "open",
        "number": 67079
    },
    {
        "title": "Find in files in non-existent folder highlights wrong input field on error",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nIf I mistakenly enter a folder that does not exist in the \"files to include\" box for Find in Files and hit enter to search, the red error highlight ends up on the search expression input, not on the files to include input.  As a side effect, the actual error message (\"No folder in the workspace with name: ...\") only shows up when the input focus is on the search expression field, not the files to include field that has the error.\r\n\r\nVerified this still happens with all extensions disabled.\r\n\r\nExample:\r\n![image](https://user-images.githubusercontent.com/41014492/51690837-89102380-1fc7-11e9-971c-7e4a295671d6.png)\r\n\r\nVS Code version: Code 1.30.2 (61122f88f0bf01e2ac16bdb9e1bc4571755f5bd8, 2019-01-07T22:49:48.319Z)\r\nOS version: Linux x64 4.19.0-1-amd64\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz (8 x 2809)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>rasterization: disabled_software<br>video_decode: unavailable_software<br>video_encode: unavailable_software<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|4, 4, 3|\r\n|Memory (System)|15.55GB (0.15GB free)|\r\n|Process Argv|--unity-launch|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (24)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nBookmarks|ale|10.2.0\r\nng-template|Ang|0.1.11\r\nmarkdown-preview-github-styles|bie|0.1.4\r\nbracket-pair-colorizer-2|Coe|0.0.25\r\nvscode-markdownlint|Dav|0.23.0\r\nvscode-eslint|dba|1.8.0\r\ngitlens|eam|9.4.1\r\nEditorConfig|Edi|0.12.6\r\ntslint|eg2|1.0.42\r\nvscode-npm-script|eg2|0.3.5\r\nprettier-vscode|esb|1.7.3\r\nvscode-pull-request-github|Git|0.3.2\r\nbeautify|Hoo|1.4.7\r\nbash-ide-vscode|mad|1.3.3\r\nterraform|mau|1.3.7\r\nGo|ms-|0.8.0\r\ndebugger-for-chrome|msj|4.11.1\r\nvscode-docker|Pet|0.5.1\r\nbash-debug|rog|0.3.3\r\nvscode-coverage-gutters|rya|2.3.0\r\nvscode-nginx|sha|0.6.0\r\nhtml-preview-vscode|tht|0.2.5\r\nreflow-paragraph|Tro|1.3.0\r\nvscode-proto3|zxh|0.2.2\r\n\r\n(1 theme extensions excluded)\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-01-24 16:03:15",
        "state": "open",
        "number": 67068
    },
    {
        "title": "Clear all problems in the 'Problems' pane with a button",
        "description": "Please add a button in the `Problems` pane that allows the developer to clear all items in there.\r\n\r\n**Following discussions from #15524, #29169, #66343 and #50448.**\r\n\r\nCurrently we see problems from different sources (linters, tasks, etc) and they sometimes stay there after the problem or the source file is gone, e.g. problems in an unsaved buffer, in files that were renamed, or files removed when we switch Git branches.\r\n\r\nMore often than not I have a bunch of problems and the only way to clear that pane is to restart the entire editor.",
        "createdAt": "2019-01-23 11:58:46",
        "state": "open",
        "number": 66982
    },
    {
        "title": "Explorer: resolve all folders before filtering",
        "description": "Recently, support for filtering in Explorer by typing parts of a file or folder name was added (#66497). There are two modes:\r\n\r\nThe default mode simply highlights all matches in currently expanded folders and scrolls to the first found match. Works perfectly, nicely engineered.\r\n\r\nBy activating the \"Filter on Type\" mode, the tree gets pruned to only those elements that match the filter. However, this pruning currently removes all folders which had not been expanded at least once before-hand, no matter if they contain a match or not.\r\n\r\nIn my opinion, the behavior of the Filter on Type mode is counterintuitive as the results shouldn't depend on how the developer has interacted with the tree in advance. At least then there should be some indication on which folders were not considered in the search. In my case, I commonly want to filter on specific file types, and since there is no \"Expand All\" feature in the Explorer, the current work-around would be to manually expand all folders upfront and then use the new filter feature so that I can be sure that no entries are missing.\r\n\r\nI'm assuming this is related to the fact that folder nodes are lazily resolved since they might be remote resources. On the other hand, the normal search functionality seems to have no problem with these scenarios, probably because the expectation is that it's OK to wait a bit until you get the results, whereas here you more or less want it immediately. Maybe a hybrid would be a good solution: do the quick filtering as it is and display that immediately, and in the background start a regular filename search backed by (still experimental) [search provider API](https://code.visualstudio.com/updates/v1_24#_search-provider-api). Then merge these when the results come in.\r\n\r\n@isidorn ",
        "createdAt": "2019-01-23 10:01:09",
        "state": "open",
        "number": 66971
    },
    {
        "title": "Add \"accept theirs\", \"accept ours\" git commands/context menu actions",
        "description": "I'm not sure how much this is due to me not being familiar with merging conflicts in vscode but I'm finding it next to impossible to use. For files with conflicts which vscode recognises (i.e. .py files) when I open the conflicted file it displays a bar at the top allow me to select the incoming changes or local changes. For all other files there doesn't seem to be any way to accept / reject changes even at the file level (i.e. accept/reject all incoming changes)\r\n\r\ni.e. I have an ipynb file with conflicts. Under MERGE CHANGES it has a C beside it. If I open the file it doesn't present and options to diff or merge the files. I have `nbdime` installed but not sure how to configure it with vscode. But the issue also occurs for .log files etc.\r\n\r\nIf I right click on the files under MERGE CHANGES, there are options to 'Accept All Current' or 'Accept All Incoming'. Neither of these appear to do anything, there's no change to the indicators - the C icon is still displayed, and trying to stage continues to presents the warning \"are you sure you want to stage xyz.ipynb with merge conflicts\"\r\n\r\nI'm having to resort to command line merging.\r\n",
        "createdAt": "2019-01-22 22:03:50",
        "state": "open",
        "number": 66950
    },
    {
        "title": "VS Code not straight ruler",
        "description": "Hi everyone.\r\n\r\nI have a linter that checks for lines of size 100, and I was looking for a way to create a ruler of also size 100 that guides me whenever I surpassed that value. That was easy.\r\n\r\nThe thing is, inside the linter options, a tab is considered as 1 character when it visually takes 4 spaces long.\r\n\r\nI think it could be good to take into consideration a variable tab size option for rulers; Although It will not look like a straight line, you'd get an idea at what moment your code surpasses the linter limit.",
        "createdAt": "2019-01-22 17:44:51",
        "state": "open",
        "number": 66935
    },
    {
        "title": "List highlight filter: Support other filters",
        "description": "It would be nice to have option to disable fuzzy match on folders/files.\r\nUse case:\r\nI'm looking for Webpack loaders inside `node_modules`. If I type `load` or even `loade` I will have a lot of matchings like `global-modules-path`, `load-json-file`, `lodash.clonedeep` and several files inside opened `src` and `test` folders.\r\nIn particular case I can search for `loader` ant it will still match `babel-plugin-transform-es2015-shorthand-properties`, `src/utils/check-local-folder.ts` etc.\r\n\r\nAbility to disable fuzzy much for similar cases will drastically reduce number of matches that are not relevant.\r\n\r\nAs mentioned in #66912 it might be added to added to List filter widget, same panel as \"Filter on type\" toggle.",
        "createdAt": "2019-01-22 11:34:45",
        "state": "open",
        "number": 66913
    },
    {
        "title": "List highlight filter: Toggle to highlight/step only on in same folder",
        "description": "List highlight filter (I hope I correctly name this feature) is awesome feature that I have been waiting for! Thank you! \ud83d\ude4c \r\n\r\nCurrently it navigates user across all visible folders/files that has fuzzy match.\r\nIn case when I want to find some folder inside of long `node_modules` I will be still navigated through all visible filse/folders.\r\n\r\nSo if I'm typing `lo` inside of `node_modules` (when folder inside of `node_modules` highlighted) I will still have match on `package-lock.json`, `yarn.lock`, and `src/locales`.\r\n\r\nWould be nice to have ability to limit match only inside parent folder(node).\r\nSo when I have `axios` folder selected inside `node_modules` and type `lo` - it will only highglight `babel-loader`, `lodash`, and `loglevel` package folders, but **not** `package-lock.json`, `yarn.lock`, and `src/locales`.\r\n\r\nIt might be added to List filter widget, same panel as \"Filter on type\" toggle.",
        "createdAt": "2019-01-22 11:21:08",
        "state": "open",
        "number": 66912
    },
    {
        "title": "Is there an event like preClose for web view?",
        "description": "I created an extension, it will create some web views, I wonder is there an event like preCloseWebView? Because I have to check the data in the web views is legal or not. The web view cannot be closed if any data is illegal.  Much appreciate if any help.",
        "createdAt": "2019-01-21 09:51:24",
        "state": "open",
        "number": 66842
    },
    {
        "title": "Windows uninstaller should have option to also remove user data dir and extensions dir",
        "description": "I tried to uninstall / Reinstall `Code Insider` because of a recurring Error/Crash at \"startup/reloaded\" (Update / Reboot / proper exit), disabling extensions and remove all custom settings did not fixed it\r\nBefore re-installing i wanted to be sure i has no crap left that code have hurted `Code Insiders` .... surprise surprise ....\r\n\r\n- VSCode Version: Latest of `Code` and `Code Insider`\r\n- OS Version: `Windows 10`\r\n\r\nSteps to Reproduce:\r\n\r\n1. Install it\r\n2. Add extensions\r\n3. Change settings\r\n4. Use it\r\n5. Update it\r\n6. Uninstall it\r\n7. Be curious on what's left\r\n\r\n![image](https://user-images.githubusercontent.com/2266487/51462007-dd18cf00-1d5f-11e9-80ac-51fd683e7752.png)\r\n\r\n\r\nOn top of that, i uninstalled extensions long time ago and they were still on disk, here is what `code-insiders --list-extensions` output :\r\n\r\n```\r\nAngular.ng-template\r\nbierner.markdown-preview-github-styles\r\neamodio.gitlens\r\nEditorConfig.EditorConfig\r\neg2.tslint\r\nformulahendry.dotnet-test-explorer\r\nGitHub.vscode-pull-request-github\r\nhumao.rest-client\r\nicsharpcode.ilspy-vscode\r\nIonide.Ionide-fsharp\r\nmitchdenny.ecdc\r\nms-azuretools.vscode-azurefunctions\r\nms-vscode.azure-account\r\nms-vscode.cpptools\r\nms-vscode.csharp\r\nms-vscode.PowerShell\r\nms-vsts.team\r\nmsjsdiag.debugger-for-chrome\r\nPeterJausovec.vscode-docker\r\nryanluker.vscode-coverage-gutters\r\nTyriar.sort-lines\r\nVisualStudioExptTeam.vscodeintellicode\r\n```",
        "createdAt": "2019-01-21 08:37:45",
        "state": "open",
        "number": 66837
    },
    {
        "title": "Allow editor.tokenColorCustomizations inside language specific",
        "description": "Currently you can edit the user settings and add `editor.tokenColorCustomizations` to modify certain colors without creating or editing an entire theme.\r\n\r\nHowever, `editor.tokenColorCustomizations` does not work with the scope of language-specific settings... i.e.\r\n\r\n```\r\n\"[language]\": {\r\n    \"editor.tokenColorCustomizations\": {\r\n    }\r\n}\r\n```\r\n\r\nThis would be a huge benefit to syntax extension developers. Currently I'm developing an extension for CNC G-Code and I'd like to add a configuration option to add _typical_ cnc g-code editor colors. I can update the user settings directly from the extension but that involves a lot of additional coding to store any current customizations that the user may have put in there already.",
        "createdAt": "2019-01-18 14:50:35",
        "state": "open",
        "number": 66729
    },
    {
        "title": "[css] support IE10 repeat syntax",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.23.1\r\n- OS Version: Windows 8\r\n\r\nSteps to Reproduce:\r\n\r\n1. View the following code in IE; https://s.codepen.io/fizzbuzz791/debug/EGBxdq/XBkGRZQpnRNA\r\n2. Confirm that it's valid syntax and displays a grid with 3 columns\r\n3. Open a CSS file in VS Code, copy the CSS from codepen and view the following error;\r\n \r\n![image](https://user-images.githubusercontent.com/2747764/51363652-f594a980-1b13-11e9-9fec-90ca52d26e3b.png)\r\n\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2019-01-18 03:29:30",
        "state": "open",
        "number": 66703
    },
    {
        "title": "Support numeric input variables",
        "description": "I'd like to be able to use [input variables](https://code.visualstudio.com/docs/editor/variables-reference#_settings-command-variables-and-input-variables) to select the port to attach to in my (NodeJS debugging) launch configuration.\r\n\r\n```json\r\n        \"inputs\": [\r\n            {\r\n                \"id\": \"debugPort\",\r\n                \"description\": \"Which port do you want to attach to?\",\r\n                \"default\": 9229,\r\n                \"type\": \"pickString\",\r\n                \"options\": [ 9229, 9230, 9239, 9329, 5870 ]\r\n            }\r\n        ]\r\n```\r\n\r\nIt seems quite likely that substituting a numeric value will be difficult/impossible, so it might be necessary to accept strings for \"port\" property of launch configurations.\r\n\r\nIn a perfect world, I'd also be able to alias the ports in the combo box: \"default\" for 9229, \"VS Code Extension\" for 5870, etc.",
        "createdAt": "2019-01-18 01:40:38",
        "state": "open",
        "number": 66697
    },
    {
        "title": "Disable Multiple Cursors",
        "description": "I don't use the 'multiple cursors' feature, and there doesn't appear to be any way to turn it off. \r\n\r\nYou can change the key binding between ctrl and alt, but there's no way to prevent multiple cursors from being created altogether. If you use these modifiers for other things, it's easy to accidentally create multiple cursors in random places and end up with text in areas you don't expect. \r\n\r\nBeing able to set this key binding to 'none' would probably be sufficient. \r\n",
        "createdAt": "2019-01-16 23:37:57",
        "state": "open",
        "number": 66634
    },
    {
        "title": "Zero length diagnostic at end of line is rendered over multi-character identifier",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.31.0-insider\r\n- OS Version: macOS 10.14.2 (18C54)\r\n\r\nSteps to Reproduce:\r\n\r\n- Implement language server and publish diagnostic with zero length at the end of a line\r\n```json\r\n{\r\n        \"range\": {\r\n          \"start\": {\r\n            \"line\": 8,\r\n            \"character\": 11\r\n          },\r\n          \"end\": {\r\n            \"line\": 8,\r\n            \"character\": 11\r\n          }\r\n        },\r\n        \"message\": \"max value\"\r\n      }\r\n```\r\n- The red squiggle renders over the last identifier on the line, which can be multiple characters. On every keystroke, the language server is publshing a new diagnostic where `character` is the last column of that line (== int max value).\r\n![2019-01-14 14 56 28](https://user-images.githubusercontent.com/1408093/51117043-ed372880-180c-11e9-9069-b8a3caa7d63a.gif)\r\n\r\n- I ideally expect the diagnostic to render as a single character as below (there is no space at end of the line). Alternatively, I would expect the zero-length diagnostic to render at most over\u00a0one character at the end of the line and not the full identifier.\r\n![screenshot 2019-01-14 at 14 48 01](https://user-images.githubusercontent.com/1408093/51117102-15268c00-180d-11e9-8854-94f9ab377c16.png)\r\n\r\nPossibly related comment https://github.com/Microsoft/vscode/issues/24711#issuecomment-304665290\r\n\r\n> Errors and Warnings now get artificially inflated such that they are visible even in the collapsed case.\r\n\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes, I can reproduce with latest Insider but I had to install one extension for my language server to publish diagnostics https://marketplace.visualstudio.com/items?itemName=scalameta.metals",
        "createdAt": "2019-01-14 14:03:11",
        "state": "open",
        "number": 66482
    },
    {
        "title": "Shrink empty lines",
        "description": "Visual Studio has a nice extension called \"**Shrink Empty Lines**\" which enables the user to have empty lines and/or lines without alphanumeric characters shrunk in the editor to a specific extent. This way users can have more vertical space for their actual code.\r\n\r\nhttps://marketplace.visualstudio.com/items?itemName=VisualStudioPlatformTeam.SyntacticLineCompression\r\n\r\n![image](https://user-images.githubusercontent.com/5047891/67569604-98c3c080-f72f-11e9-9712-4554ffc54ddd.png)\r\n\r\n\r\nIt would be very nice to have this feature on VS Code, maybe with an extra setting to specify shrinking percentage (or just an enumeration). I would have made an extension but this is clearly something not achievable through the current Extension API.",
        "createdAt": "2019-01-14 08:16:12",
        "state": "open",
        "number": 66468
    },
    {
        "title": "Update user agent for selected language",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.30.2\r\n- OS Version: Windows 10 (Version 1809)\r\n\r\nSteps to Reproduce:\r\n\r\n1. Type \"\u8aa4\u89e3\" with Japanese IME.\r\n2. It is displayed in Chinese shapes.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes (No extensions are installed)\r\n\r\nThe default system language is English, but I have also added Japanese (with supplemental fonts) in the language settings. Chinese ARE NOT added, because I do not understand it.\r\n\r\nI have tested it with VS Code, Notepad++, and Notepad. The font is set to \"Consola\" for all of them. Notepad++ and Notepad display correct Japanese Kanji, but VS Code displays wrong letters (Chinese version of the same letter). See the first letter \"\u8aa4\" in the screenshot below. It looks different.\r\n\r\n<img width=\"531\" alt=\"capture\" src=\"https://user-images.githubusercontent.com/10900489/50992373-462b6600-155a-11e9-98b8-9a75ce710690.PNG\">\r\n\r\n\r\n\r\n",
        "createdAt": "2019-01-10 19:35:13",
        "state": "open",
        "number": 66361
    },
    {
        "title": "Allow extensions to contribute default task types",
        "description": "![Build Task Templates](https://user-images.githubusercontent.com/1646875/50937778-38cf8800-1443-11e9-9d61-83d699f987cb.png)\r\n\r\nCurrently, when I press Ctrl+Shift+B and click \"Configure Build Task...\" then \"Create tasks.json from template\", the only options are `MSBuild`, `maven`, `.NET Core`, and `Others`. \r\n\r\nI would like to be able to easily create a build task template for my Mono projects. .NET Core does not have the full feature-set of Mono or .NET Framework yet, and even if it did, I still have existing projects using Mono that I'd like to edit with VS Code. Please add this feature!\r\n\r\n",
        "createdAt": "2019-01-10 00:22:10",
        "state": "open",
        "number": 66308
    },
    {
        "title": "Let NPM extension warn when git changes package.json",
        "description": "Something that happens to me and people I've worked with very often is that I change a branch or pull some changes, which changes `package.json`. Often when this happens, it goes unnoticed until some compilation error. It would be extremely helpful if the `Npm support for VS Code` built-in extension could notice when `dependencies`/`devDependencies` in a `package.json` file is changed. It could then display a helpful notification with a \"Run install\" button.\r\n\r\nI think most of the logic for this should already be in place, since the npm extension finds tasks in the workspace already. Adding dependencies as fields it will monitor would hopefully be simple. The main thing would be to monitor when they change as a result of a git operation instead of when the user themselves add packages (manually or via `npm install x`).\r\n\r\n- The notification could be configured on/off via user settings\r\n- The button \"Run install\" could open `npm install` as a task\r\n\r\n--------------------------------------------------\r\n\r\n* Is this something that could be considered for the built-in npm extension, or should this be left to a regular extension?  \r\n* If this can be considered for the built-in npm extension, would PR's be welcome?\r\n",
        "createdAt": "2019-01-09 15:14:43",
        "state": "open",
        "number": 66288
    },
    {
        "title": "Feature Request: generate imports when copying code between files",
        "description": "In eclipse Java editing, copying a code snippet from a class to another also automatically copies the imports required by the copied code.\r\nWould be nice to have this in VS Code for typescript as well. Currently when I copy some code, I have to manually resolve the imports afterwards.",
        "createdAt": "2019-01-08 22:26:04",
        "state": "open",
        "number": 66236
    },
    {
        "title": "Allow more powerful onEnterRules for cursor alignment",
        "description": "In the Python extension, we'd like to add support for variable-length indents on enter to better support PEP8 formatting (Microsoft/vscode-python#481 and others). For example:\r\n\r\n```python\r\ndef func(a,\r\n         |\r\n```\r\n\r\nHitting enter on the first line should stick the cursor where `|` is, not just a single indent. In this second case, it should do a single indent:\r\n\r\n```python\r\ndef func(\r\n    |\r\n```\r\n\r\nThere appears to only be two ways to handle this:\r\n\r\n- `onEnterRules`\r\n- On-type formatting\r\n\r\nWe'd like to avoid the latter, as we currently support both Jedi and our own language server, which means implementing on-type formatting in two different places (since a single language cannot have multiple on-type formatting providers). Plus, on-type formatting is not enabled by default nor is very popular (and enables a slew of formatting rules other than cursor alignment), so forcing users to enable on-type formatting as a whole would be good to avoid.\r\n\r\nThe other candidate is `onEnterRules`, but it's not powerful enough to be able to do something like this, as:\r\n\r\n- The \"actions\" work in terms of indents, whereas these cursor positions may not be a round multiple of an indent, meaning `appendText` would be required, but...\r\n- `appendText` is only allowed to be a static string, and cannot be generated on the fly.\r\n- Rules are applied using regex to deduce context, which gets unweildy, and even more difficult without #50952.\r\n- Even with something like #17281, there wouldn't be a way to convert a capture group to \"whitespace of the same length of the capture group\" (plus the issue of tab indents).\r\n\r\n\r\nMy initial thought was to allow a function to be provided in `onEnterRules` instead of just specifying `appendText`. For example, something like:\r\n\r\n```ts\r\n{\r\n    beforeText: /\\s+def\\s+\\w+\\(\\w+/,  /* not the real regex */\r\n    action: {\r\n        indentAction: IndentAction.None,\r\n        appendText: (document, position, formatOptions, ... /* something */) => calculateIndent(...) // returns a string\r\n    }\r\n}\r\n```\r\n\r\nHowever, on closer inspection of how `onEnterRules` works, it appears that it needs to be serializable, so I'm not sure it'd be able to have a callback like the above.\r\n\r\nIs there something that can be added to allow more powerful rules on-enter? Or, is there something that already exists that we've missed?",
        "createdAt": "2019-01-08 22:20:07",
        "state": "open",
        "number": 66235
    },
    {
        "title": "Let me theme diff editor's inserted text background differently in the scroll bar",
        "description": "Currently `diffEditor.insertedTextBackground` and `diffEditor.removedTextBackground` are used to color both the background in the editor and the decorations in the scrollbar. The problem is in order to make the text contrast good enough so that I can read the text, that make the color in the scroll bar unreadable.\r\n\r\nBefore (good scroll bar, bad editor):\r\n\r\n![image](https://user-images.githubusercontent.com/2193314/50852617-e86a0480-1334-11e9-924e-9c5b1b140fcd.png)\r\n\r\nAfter (bad scroll bar, good editor):\r\n\r\n![image](https://user-images.githubusercontent.com/2193314/50852440-5f52cd80-1334-11e9-8e89-520c590246e9.png)\r\n\r\nAnother way to fix this problem which is probably even better is to allow the background to only apply to the gutter and not the text, that way I can use a vibrant diff color and not worry about it clashing with every possible text color.\r\n\r\nThis is also a bit of an accessibility issue with the default theme:\r\n\r\n![image](https://user-images.githubusercontent.com/2193314/50852831-81991b00-1335-11e9-9417-95b8f9cfb3c7.png)\r\n",
        "createdAt": "2019-01-08 19:07:25",
        "state": "open",
        "number": 66223
    },
    {
        "title": "Find usages (find all file references / find all folder references)",
        "description": "If you search the issues here on GitHub and on StackOverflow, you'll find that there is a ton of fragmentation around this feature for a few reasons:\r\n\r\n- Everyone is referring to different subsets of the feature\r\n- Everyone is calling it by different names (users coming from WebStorm will refer to it as \"Find Usages\")\r\n- VSCode actually already has this partially implemented, but it's hidden and not documented well.\r\n\r\nThis feature refers to three subsets of finding references:\r\n\r\n**1. Find all references of a symbol**\r\n\r\nVSCode has this already.\r\n\r\n**2. Find all references of a file**\r\n\r\nVSCode has this already, but few know about it, and the process for getting to it is unnecessary. Currently you need to use the \"find all references\" command on an import path that includes the file.\r\n\r\nThis is a very useful feature, and should be made available in the file explorer, for a file's context menu when right clicking it, [as explained here](https://github.com/Microsoft/vscode/issues/66150). Additionally, there should be a command, `References: Find All References of File` as [explained here](https://github.com/Microsoft/vscode/issues/41681).\r\n\r\n**3. Find all references of a folder**\r\n\r\nVSCode does not yet have this feature. When using this on a folder (made available in the context menu), it should show the references for all files inside that folder. A command might be useful here as well (`References: Find All References of Folder`).\r\n\r\n**Note:**\r\n\r\nI've already submitted [a feature request](https://github.com/Microsoft/vscode/issues/52845) mentioning this in the past, which was closed and suggested as an extension. However, it looks like I wasn't clear on what my request was, because VSCode has since implemented a lot of this functionality. And it's also clear that there's a lot of confusion around this among VSCode users.\r\n\r\n\r\n",
        "createdAt": "2019-01-07 18:27:23",
        "state": "open",
        "number": 66162
    },
    {
        "title": "Extension recommendation should consult disabled extensions first",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nOpening file like `.vue` with `vetur` disabled results in showing notification:\r\n\r\n> The Marketplace has extensions that can help with '.vue' files\r\n> <kbd>Search Marketplace</kbd>  <kbd>Don't Show Again for '.vue' files\r\n\r\nIt should be able to detect if I have disabled extensions that provide `.vue` language support and create notification of the sort:\r\n\r\n> Would you like to enable `vetur` extension in this workspace?\r\n> <kbd>Yes</kbd>  <kbd>No</kbd>\r\n\r\nVS Code version: Code 1.30.1 (dea8705087adb1b5e5ae1d9123278e178656186a, 2018-12-18T18:12:07.165Z)\r\nOS version: Windows_NT x64 10.0.17763\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-01-07 18:23:36",
        "state": "open",
        "number": 66161
    },
    {
        "title": "Context menu 'Find all references'  on files from file explorer.",
        "description": "There was an issue, but its status is unclear.\r\n\r\nhttps://github.com/Microsoft/vscode/issues/6625\r\nI am surprised why there are so little likes %)\r\n\r\nCases:\r\n* Node.js/JavaScript - all places where the current file is required by `require`.\r\nBTW: if I use \"Find all references\" on `require('./some-file.js') - VS Code does show me them. So the ability itself is already supported but there is no interface in file explorer.\r\n\r\n* Node.js/TypeScript - all places where the current file is imported.\r\n* C++ - all places where the file is included.\r\n* Which HTML uses the current JS file.\r\n* Etc.\r\n\r\nFor many years I used WebStorm which supports this. But in VS Code I have no idea how to find the place where some file is used but global searching it by some regexp. I was looking for some plugins and workarounds for 2 hours and found nothing %).\r\n\r\nI tried to bind shortcut:\r\n```json\r\n  {\r\n    \"key\": \"f12\",\r\n    \"command\": \"references-view.find\",\r\n    \"when\": \"filesExplorerFocus\"\r\n  }\r\n```\r\nbut it runs last references search and not search for current file.\r\n\r\nThere is a question on SO, but no answer:\r\nhttps://stackoverflow.com/questions/53267307/how-to-find-all-references-of-a-selected-module-in-vs-code",
        "createdAt": "2019-01-07 14:38:36",
        "state": "open",
        "number": 66150
    },
    {
        "title": "[html] code complete for href anchors",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: Version: 1.30.1 (user setup)\r\nCommit: dea8705087adb1b5e5ae1d9123278e178656186a\r\nDate: 2018-12-18T18:12:07.165Z\r\nElectron: 2.0.12\r\nChrome: 61.0.3163.100\r\nNode.js: 8.9.3\r\nV8: 6.1.534.41\r\n- OS Version: Windows_NT x64 10.0.17134\r\n\r\nSteps to Reproduce:\r\n\r\n1. Create html file and some elements with their own id like so: `<div id=\"TEXTHERE\">`\r\n2. Create an `<a>` tag with href like this: `<a href=\"#TEXTHERE>content</a>`\r\n3. You will see no autocompletion for the href. If you reload VSCode fresh the autocompletion works for a few secs (via word autocompletion) but stops to work when VSCode has completed all startup processes.\r\n\r\nUse-case: You have a static HTML file with a lot of elements with IDs and want to check while typing in an anchor link if that ID exists.\r\n\r\nI tried three different autocompletion plugins, none of them could give me this functionality.\r\n\r\nThis works flawlessly in Atom, though.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: **Yes**",
        "createdAt": "2019-01-07 13:53:56",
        "state": "open",
        "number": 66148
    },
    {
        "title": "autoclosing markdown preview when closing md file",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nWhen editing markdown file, it is quite convenient to have the preview in a aplit view. However, when I switch to another opened file (or closing the md file), the preview of markdown and the split is still there. This is annoying because I can only use half of the window for the new file. \r\n\r\nVS Code version: Code 1.30.1 (dea8705087adb1b5e5ae1d9123278e178656186a, 2018-12-18T18:05:00.654Z)\r\nOS version: Darwin x64 18.2.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2019-01-07 08:19:14",
        "state": "open",
        "number": 66132
    },
    {
        "title": "Emmet expansion with React components",
        "description": "There are currently two ways to expand a React component.\r\n\r\n1. Type in the opening bracket, begin typing in the component name, accept the suggestion, type in the closing bracket, and then let VSCode's auto closing tag feature do the rest.\r\n\r\n2. Enable the following setting: `\"emmet.triggerExpansionOnTab\": true,`.  After which we can then just start typing the component name, accept either the word or symbol suggestion, and then `tab` again to have Emmet complete the tag.\r\n\r\n**Feature Request**\r\n\r\nI believe option 2 is probably preferable to most. However, I wonder if it'd be possible to remove the requirements of that second `tab`, making it behave more like a normal html tag would in emmet (i.e. accept suggestion and done). In other words, if the accepted suggestion is an imported React component, it will automatically expand the tag without having to trigger it.\r\n\r\n**Side Note**\r\n\r\nThe only reason why we are able to select imported React components at all times from the suggestion list is because of the following setting: `\"editor.wordBasedSuggestions\": true`. Without it, you would only be able to use this when the symbol suggestion appears, which is limited, as [described here](https://github.com/Microsoft/vscode/issues/43266). This is an unnecessary limitation, because an imported component is almost never noise (the [reason given in the docs](https://code.visualstudio.com/docs/editor/emmet#_custom-tags-do-not-get-expanded-in-the-suggestion-list) for why VSCode might ignore suggestions), and should always appear as a suggestion when editing JSX.",
        "createdAt": "2019-01-06 09:41:21",
        "state": "open",
        "number": 66107
    },
    {
        "title": "[json] Auto detect JSON schema when located next to the file",
        "description": "It\u2019s a somewhat common practice when having repositories with many JSON data files to keep a JSON schema with the same basename but with a `.schema.json` extension, eg.:\r\n\r\n```\r\n<basename>.json -> <basename>.schema.json\r\n\r\nexample.json -> example.schema.json\r\n```\r\n\r\nVSCode currently requires all these mappings to be defined in the folder settings.json, which can quickly grow pretty large in packages like [mdn-data](https://github.com/mdn/data).",
        "createdAt": "2019-01-06 04:58:04",
        "state": "open",
        "number": 66102
    },
    {
        "title": "[css][html] SVG language support",
        "description": "Currently, we have no SVG support:\r\n\r\n- In HTML, SVG tags don't receive auto completion\r\n- In CSS, SVG attributes don't receive auto completion\r\n- Syntax highlighting are problematic for both SVG tags/attributes in HTML/CSS\r\n- Emmet do not get SVG completions\r\n\r\nHowever, with custom tag/property support in HTML/CSS, we should be able to trivially write a SVG package that describes the set of tags/attributes for SVG, and let HTML/CSS language services do the support work.\r\n\r\n- https://github.com/Microsoft/vscode/issues/62976\r\n- https://github.com/Microsoft/vscode/issues/64164",
        "createdAt": "2019-01-04 19:53:34",
        "state": "open",
        "number": 66053
    },
    {
        "title": "Intellisense's 'Suggest selection' should keep working when you have typed something",
        "description": "VSCode has a feature that remembers recent completions the user has selected and then automatically choosen those completions for them the next time. \r\nThe problem is that it behaves quite oddly, and here is an example that illustrates why:\r\n\r\n- Create a new Typescript file.\r\n- Type `console.` vscode will suggest all of the available methods of `console`.\r\n - Choose `exception`.\r\n- Type `console.` again. Vscode will immediately suggest `exception`, as expected.\r\nAnd now here is the weird part: Type `e`, and instead of still suggesting `exception`, it will suggest `error`!\r\n\r\nThe problem here is that once you type anything after the suggestion came, vscode will completely disregard your completion history and will just give you the best match lexicographically. Even if in the example you have completed `exception` by typing an `e` and then having it complete it, the same thing will occur.\r\nMy suggestion is that when you have already typed something, the 'suggest selection' will just be filtered by what you have typed, instead of stop working. So in the example, after you have typed `e`, it will still suggest `exception`.\r\n\r\n_\"Switch the Suggest Selection settings to \"recentlyUsedByPrefix\" and it will work!\"_\r\nYes it does make it sometimes work but overall it makes the situation much worse. For example if you type just `console.` it won't suggest exception no matter what you have done before. \r\n\r\n\r\n",
        "createdAt": "2019-01-04 09:52:36",
        "state": "open",
        "number": 66019
    },
    {
        "title": "Scroll bar visibility should be configurable",
        "description": "### VSCode Version\r\n\r\n![vs code version](https://user-images.githubusercontent.com/9283914/50669766-7194da80-0fc7-11e9-929a-6181fcc45f62.png)\r\n\r\n### Steps to Reproduce\r\n\r\n1. Open Visual Studio code and open a large text file\r\n\r\n### Current Behaviour\r\n\r\nIn Visual Studio Code, editors' scroll bars auto hide, thereby thwarting targeting the scroll bar handle when moving the mouse.\r\n\r\n### Expected Behaviour\r\n\r\nVisual Studio Code should follow the Windows system setting `Settings > Ease of Access > Display > Automatically hide scrollbar in Windows`\r\n\r\n![scrollbar-always-visible-windows10](https://user-images.githubusercontent.com/9283914/50670087-6b9ff900-0fc9-11e9-91ac-b2d1e032ddfe.jpg)\r\n\r\n### Does this issue occur when all extensions are disabled?\r\n- [x] Yes\r\n- [ ] No\r\n",
        "createdAt": "2019-01-04 01:35:49",
        "state": "open",
        "number": 66000
    },
    {
        "title": "Cannot resize Keyboard Shortcuts column sizes -> Add column resize handle bars and horizontal scroll bar",
        "description": "### Visual Studio Code Version\r\n![vs code version](https://user-images.githubusercontent.com/9283914/50669483-be77b180-0fc5-11e9-983a-d59cdde245c6.png)\r\n\r\n### Steps to Reproduce:\r\n\r\n1. Open Visual Studio Code with default window size.\r\n2. Create two editor groups horizontally.\r\n3. Open Keyboards Shortcuts editor and resize editor group so the editor's content won't fit.\r\n\r\nDoes this issue occur when all extensions are disabled?\r\n- [x] Yes\r\n- [ ] No\r\n\r\n### Screenshot\r\n\r\n![vs code key bindings](https://user-images.githubusercontent.com/9283914/50669579-41990780-0fc6-11e9-9da7-1f520c685454.png)\r\n\r\n### Current Result\r\n\r\nYou are not able to read the columns' contents or get to read the currently selected keyboard shortcut.\r\n\r\n### Expected Result\r\n\r\n1. Column handle bars should provide for resizing each of the columns. Double-clicking a column's right border should resize the column to optimum width.\r\n2. A horizontal scrollbar should provide for scrolling through the Keyboards Shortcuts table horizontally if the horizontal size of the table exceeds the editor panel's width.",
        "createdAt": "2019-01-04 01:17:25",
        "state": "open",
        "number": 65999
    },
    {
        "title": "Auto-run task on folder close in addition to open",
        "description": "Thanks very much for adding \"run on folder open\" to tasks. I wish to request a \"run on folder close\" to complement this to e.g. stop services that are started on folder open.\r\n\r\nI describe my use case in this comment: #54775 (comment).\r\n\r\nAnother use case is process clean-up. For instance, when using Debug Start with nodemon-hosted Node JS processes, if you quit VSCode \"node\" processes are left orphaned (and consuming CPU) as shown in Activity Monitor. I would like to do process clean-up in a folder-close task rather than manually in Activity Monitor after quitting VS Code. ",
        "createdAt": "2019-01-03 17:35:52",
        "state": "open",
        "number": 65986
    },
    {
        "title": "Hotkey to get type information for the selected expression",
        "description": "Intellij has a very useful feature called \"[show type info](https://www.jetbrains.com/help/idea/edit-scala-code.html)\" that shows type information for the selected expression. For example, consider the following code:\r\n\r\n``` typescript\r\nfunction fn(count: number, str: string) {\r\n\treturn str + count;\r\n}\r\n```\r\n\r\nIn Intellij IDEA it is possible to select `str + count` expression and press `alt + =` and get the result type of the selected expression (`string` in the example).\r\n\r\nI think this feature would be very beneficial specially in the languages that type inference is very important. Although I am not sure this repository is the right place to ask for this feature.",
        "createdAt": "2019-01-01 21:19:03",
        "state": "open",
        "number": 65890
    },
    {
        "title": "Executing user defined actions, one off extensions",
        "description": "### Search Terms\r\nmacro , userscripts , greasemonkey\r\n\r\n### Requirement\r\nAllow executing user defined javascript functions on code base, just like snippets\r\nSome repeated tasks can be automated using some small scripts, example advanced search/replace for refactoring\r\n\r\nAPI can be a function which takes a `context` object and returns a list of  `Operation` requests, then `vscode` internals can execute that operation.\r\nTo keep implementation robust and simple user action cannot have any side effects. Only way to make any changes is returning some `operation` request. \r\n\r\n#### API\r\n```ts\r\ndeclare function userAction(context: Context): (Promise<Operation>|Operation)[];\r\n\r\ninterface Context {\r\n    readonly openedFile: string;\r\n    readonly selectedText: string | undefined;\r\n    readonly cursorLine: number;\r\n    readonly cursorColumn: number;\r\n}\r\n\r\ntype Operation = OperationAddText | OperationOpenFiles | OperationCloseFiles;\r\n\r\ninterface OperationBase {\r\n    operationType: OperationType\r\n}\r\n\r\nconst enum OperationType {\r\n    AddText,\r\n    OpenFiles,\r\n    CloseFiles,\r\n}\r\n\r\ninterface OperationAddText extends OperationBase {\r\n    // adds new text at cusror, If some text is selected then selected text is replaced\r\n    operationType: OperationType.AddText;\r\n    text: string;\r\n}\r\n\r\ninterface OperationOpenFiles extends OperationBase {\r\n    operationType: OperationType.OpenFiles;\r\n    files: string[];\r\n}\r\n\r\ninterface OperationCloseFiles extends OperationBase {\r\n    operationType: OperationType.CloseFiles;\r\n    text: string[];\r\n}\r\n\r\n```\r\n\r\n\r\n### Use case\r\ncurrently we are refactoring a very large code base. While refactoring we encounter same kind of changes, with slightly different syntax, we could write some javascript/typescript to automate this.\r\n\r\n#Related Issue\r\n\r\n|issue| diffrence|\r\n|------|--------|\r\n| #4490 | this issue is about recording user actions, current issue is about implementing programmatic actions|\r\n",
        "createdAt": "2018-12-31 14:41:14",
        "state": "open",
        "number": 65864
    },
    {
        "title": " ctrl + shift - not aligning text to rtl/ltr",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nwhen clicking:\r\nleft  ctrl + left  shift  - the text should be aligned to the left\r\nright ctrl + right  shift  - the text should be aligned to the right\r\n\r\nthis is realy important to rtl people as some time its easier to edit text in this way and switch back to coding...\r\n\r\n\r\n\r\n\r\n\r\nVS Code version: Code 1.30.1 (dea8705087adb1b5e5ae1d9123278e178656186a, 2018-12-18T18:12:19.495Z)\r\nOS version: Windows_NT ia32 10.0.17134\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-12-31 11:04:12",
        "state": "open",
        "number": 65855
    },
    {
        "title": "Cannot enable brackets matching for .log files even when \"editor.matchBrackets\": true is set for that language",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\nVersion: 1.30.1 (user setup)\r\nCommit: dea8705087adb1b5e5ae1d9123278e178656186a\r\nDate: 2018-12-18T18:12:07.165Z\r\nElectron: 2.0.12\r\nChrome: 61.0.3163.100\r\nNode.js: 8.9.3\r\nV8: 6.1.534.41\r\nOS: Windows_NT x64 10.0.17134\r\n\r\nSteps to Reproduce:\r\n\r\n1.  Open/create any .log file \r\n2. type `(xxxx)` or find a matching pair of brackets, and put the cursor at one bracket\r\n3. No mark of matching brackets can be seen (a pair of transparent frames around the matching brackets are expected)\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\nMaybe it's not a bug but a feature, and if that is the case, then how can I enable brackets matching for .log files?\r\n",
        "createdAt": "2018-12-27 09:01:17",
        "state": "open",
        "number": 65725
    },
    {
        "title": "Font ligatures for hints/tooltips, debug console, output and problems",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nEnabling font ligatures is currently only possible for text in the main text editor. It would be great if there are additional settings for enabling this feature for hints/tooltips, terminal, debug console, output and problems panels. \r\n\r\n`=>` with font ligatures enabled (editor):\r\n![image](https://user-images.githubusercontent.com/36337818/50427086-b8cfec80-089e-11e9-9f23-05f872f2a557.png)\r\n\r\nFont ligatures missing:\r\n![image](https://user-images.githubusercontent.com/36337818/50427096-efa60280-089e-11e9-8c2c-cc0fda6a042a.png)\r\n\r\n\r\nVS Code version: Code - Insiders 1.31.0-insider (e02e44464c02d617b98d0a3265bf5efef7794436, 2018-12-21T06:20:35.852Z)\r\nOS version: Windows_NT x64 10.0.17134\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-12-25 22:46:57",
        "state": "open",
        "number": 65677
    },
    {
        "title": "Temporarily Set Configuration For Save Operation",
        "description": "I'm maintaining the [EditorConfig](https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig) extension and am in dire need of a feature that would eliminate some issues with respect to the following settings and potentially more in the future (e.g., end of line setting):\r\n\r\n- `files.insertFinalNewline`\r\n- `files.trimFinalNewlines`\r\n- `files.trimTrailingWhitespace`\r\n\r\nSpecifically, I need a way to short-circuit / override these settings temporarily for a file-save operation, because allowing vscode to perform any kind of trimming is destructive and either irreversible or extremely hacky to fix. It's like asking me to unpunch someone.\r\n\r\nBasically, I need a way to change the way that vscode does a built-in save operation on a per-file basis (which is how EditorConfig works). Pre-save TextEdits are not good enough, because whatever I do before a save could potentially be wiped out with vscode's destructive trimming after the fact.\r\n\r\nAnother option, of course, would be to make EditorConfig a built-in feature of vscode, which I think makes all the sense in the world.\r\n\r\n_Note: these issues only surfaced after vscode introduced these editor settings, because now we have 2 things trying to do the same thing._\r\n\r\n### Related issues\r\n- https://github.com/editorconfig/editorconfig-vscode/issues/153\r\n- https://github.com/editorconfig/editorconfig-vscode/issues/208\r\n- https://github.com/editorconfig/editorconfig-vscode/issues/209\r\n- https://stackoverflow.com/questions/46069467/vs-code-does-not-insert-final-new-line-even-if-files-insertfinalnewline-is-set",
        "createdAt": "2018-12-25 09:11:03",
        "state": "open",
        "number": 65663
    },
    {
        "title": "RTL layout for paragraphs starting with ",
        "description": "#11770 is so vague that I can't even understand what is the requested feature... a clear and achievable change to VSCode for RTL is I believe starts from this, please make a paragraph RTL if it starts with RTL text.\r\n\r\nSteps to reproduce:\r\nPut this on gedit:\r\n```\r\n\u0645\u062a\u0646\r\n\u0645\u062a\u0646\r\n\u0645\u062a\u0646\r\n\u0645\u062a\u0646\r\ntext\r\ntext\r\ntext\r\ntext\r\n```\r\n![image](https://user-images.githubusercontent.com/833473/50404768-23125f80-07c1-11e9-973e-7a477690be5b.png)\r\n\r\nNow try the same with VSCode\r\n\r\n![image](https://user-images.githubusercontent.com/833473/50404780-44734b80-07c1-11e9-92b1-04a457bf90a0.png)\r\n\r\nExpected:\r\nEasily achievable by adding `dir=auto` to div element and remove `dir=ltr` from the span, I just did it for the first line\r\n\r\n![image](https://user-images.githubusercontent.com/833473/50404833-da0edb00-07c1-11e9-9294-86bda463d797.png)\r\n\r\nAlternatively, you can put a switch (toggle-able with command switch, something like > Toggle Direction) and apply document direction switch to whole document and detect whether a document needs RTL direction behind the scene, if you don't like per paragraph direction setting. ",
        "createdAt": "2018-12-24 17:54:01",
        "state": "open",
        "number": 65648
    },
    {
        "title": "Allow to reference WebAssembly modules in extension",
        "description": "I would like to write extensions that use libraries written in languages that compile to native code (e.g. Go, Rust, C). Today the only practical way to do this is to use a separate binary compiled for each platform supported by VS Code, either via LSP or directly invoked subprocesses. This has substantial drawbacks for performance, user experience (\"please download a bunch of tools\"), and extension update cadence.\r\n\r\nMany of these languages also support WebAssembly as an output target, which means in theory I could bundle a .wasm into the extension and run it on any architecture supported by V8. In practice it doesn't work as of VS Code v1.30.1 -- the `WebAssembly` namespace isn't available to extensions.\r\n\r\nWould it be possible to offer the upstream `WebAssembly` API (or something similar)? Then the extension could look like this:\r\n\r\n```typescript\r\n// extension.ts\r\nexport function activate(ctx: vscode.ExtensionContext) {\r\n\tconst serverPath = context.asAbsolutePath(path.join(\"server/out/server.js\"));\r\n\tconst implPath = context.asAbsolutePath(path.join(\"server/out/impl.wasm\"));\r\n\r\n\tlet serverOptions: ServerOptions = {\r\n\t\tmodule: serverPath,\r\n\t\ttransport: TransportKind.ipc,\r\n\t\targs: [\"--impl-path=\" + implPath],\r\n\t};\r\n\t// ...\r\n}\r\n\r\n// server.ts\r\nimport * as fs from \"fs\";\r\nconst implBuf = new Uint8Array(fs.readFileSync(implPathFromArgs));\r\nlet impl: any;\r\nWebAssembly.instantiate(implBuf, {}).then(result => {\r\n  impl = result.instance;\r\n});\r\n// LSP methods can invoke methods of `impl` to tokenize, search parse tree, etc\r\n```\r\n\r\nReferences:\r\n* [`WebAssembly.compile()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compile)\r\n* [`WebAssembly.instantiate()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate)\r\n* [`WebAssembly.instantiateStreaming()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming)",
        "createdAt": "2018-12-21 16:36:44",
        "state": "open",
        "number": 65559
    },
    {
        "title": "Emmet CSS # character",
        "description": "- VSCode Version: 1.30.1\r\n- OS Version: Windows 10 Pro x64\r\n\r\nEmmet doesn't works correct after trying to type character **#**.\r\n\r\nSteps to Reproduce:\r\n\r\n1. Type `bd1#s`.\r\n2. Press **Tab**.\r\n\r\nEmmet must type `border: 1px #000 solid;`, but it doesn't.\r\n\r\n![emmet-css](https://user-images.githubusercontent.com/17758812/50274390-d38d0600-0445-11e9-90c3-26dfe9b137e8.png)\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2018-12-20 08:56:59",
        "state": "open",
        "number": 65464
    },
    {
        "title": "Microsoft Surface Precision Mouse - \"Accelerated Vertical Scrolling\" breaks smooth scroll",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.30.1\r\n- OS Version: Win 10 1809\r\n\r\nSteps to Reproduce:\r\n\r\n1. Use a Microsoft Surface Precision Mouse (I used it in bluetooth mode).\r\n2. Activate `Accelerated Vertical Scrolling` in the *Microsoft  Mouse and Keyboard Cente* (it's enabled by default).\r\n3. Scroll in vscode is not smooth anymore. Other applications like chrome are still smooth however.\r\n\r\n![image](https://user-images.githubusercontent.com/9069888/50219991-438d8480-0391-11e9-9b3f-8da1c825d89d.png)\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: **Yes**\r\n",
        "createdAt": "2018-12-19 12:24:09",
        "state": "open",
        "number": 65388
    },
    {
        "title": "Prevent Find/Replace bar from returning after Next Match (F3)",
        "description": "In regular Visual Studio, when you press Ctrl+F to find, you type your search text and press Enter.  Because the Find/Replace \"dialog\" does not automatically go away, I've learned to immediately press Esc to get rid of it.  At that point, I can press F3 to repeat search (next match) or Shift+F3 for previous match and the dialog remains hidden.\r\n\r\nThis is not true in Visual Studio Code -- even after pressing Esc to make the Find/Replace bar go away, it reappears after every F3, which is maddening.  I've already given the dialog everything it needs.  Please make it possible for it to remain hidden until summoned again with Ctrl+F.\r\n",
        "createdAt": "2018-12-19 09:56:52",
        "state": "open",
        "number": 65369
    },
    {
        "title": "configurable automatic indentation",
        "description": "I think that, in a modern IDE as the otherwise excellent vs code is, you should be able to have the configurable but most importantly automatic indentation functionality of other IDEs like eclipse, not to mention emacs and vim in C and C++. The current situation where you have to tab your way to the desired position from the left edge is untenable. But the positioning of the cursor after opening paren's and braces should be automatic.\r\n\r\nWhen opening an argument list in a function call, the ability to align on the first parameter if so desired or an offset to the first column. When opening a scope with { the indentation should be automatically incremented and subsequently decremented, the possibility to indent case within a switch and so on... \r\n\r\nVS Code is otherwise an amazing IDE with some fantastic extensions especially with regards to git integration, but this feels like a  basic piece of functionality is missing.\r\n",
        "createdAt": "2018-12-19 09:40:10",
        "state": "open",
        "number": 65366
    },
    {
        "title": "\"Single Panel Mode\" for sections in side bar (similar to lightroom, gif included)",
        "description": "Please add a right click option to all panels in the side bar to enable a \"Solo Mode\" for side panels. The idea is simple: opening one panel closes all the others, making sure only 1 is open at a time. This is especially useful when you frequently need to switch between Outline panel and Explore File Tree view. \r\n\r\n![lr](https://user-images.githubusercontent.com/1671695/50209434-01a21580-0374-11e9-933c-def9b4ba84a9.gif)\r\n\r\nI have VScode 1.30.1 installed.\r\n",
        "createdAt": "2018-12-19 08:58:14",
        "state": "open",
        "number": 65361
    },
    {
        "title": "Support minimal context menu for text selected within extension README",
        "description": "The README for my extension includes several text fragments designed for copying into settings.json. But when I highlight the text and right-click on it, no context menu appears.\r\n\r\nIt turns out that the usual Ctrl+C key sequence (I'm testing on Windows) *does* copy the selection to the clipboard. But I wish the right-click would offer a context menu with a 'Copy' option.",
        "createdAt": "2018-12-18 16:24:06",
        "state": "open",
        "number": 65310
    },
    {
        "title": "preview markdown file, image can not reload when modified with other tool",
        "description": "Issue Type: <b>Bug</b>\r\n\r\npreview a markdown file which contains png image, when I modify the image file with mspaint., the preview window does not refresh to show the new picture, even if I set another name and set back.\r\n\r\nVS Code version: Code 1.30.0 (c6e592b2b5770e40a98cb9c2715a8ef89aec3d74, 2018-12-11T22:29:11.253Z)\r\nOS version: Windows_NT x64 10.0.10240\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i5-6500 CPU @ 3.20GHz (4 x 3192)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>rasterization: enabled<br>video_decode: enabled<br>video_encode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Memory (System)|7.89GB (1.41GB free)|\r\n|Process Argv|C:\\Users\\xxxx\\Desktop\\test-docs\\README.md|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (1)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-language-pack-zh-hans|MS-|1.30.2\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-12-18 07:05:06",
        "state": "open",
        "number": 65258
    },
    {
        "title": "Allow to add secondary actions to notifications",
        "description": "Notifications have primary and secondary actions. Secondary actions are behind the gear dropdown and typically include an action to \"Never show again\".\r\n\r\nThe workbench can leverage secondary actions, however extensions can not. This often means that extensions have to pollute the notification with lots of buttons such as:\r\n\r\n![image](https://user-images.githubusercontent.com/900690/50101337-c80dc500-0222-11e9-83c1-e30aa5f2ddb6.png)\r\n\r\n/cc @chrisdias @brettcannon",
        "createdAt": "2018-12-17 16:40:06",
        "state": "open",
        "number": 65218
    },
    {
        "title": "Select all on hover selects stuff from global search",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nTrying to do https://github.com/Microsoft/vscode/issues/63296#issuecomment-439553039\r\n\r\n1. Open global search viewlet and execute search\r\n1. Put cursor inside editor in place where hover is available\r\n1. `editor.action.showHover`\r\n1. `editor.action.selectAll`\r\n1. \ud83d\udc1b The text from search results and tab titles and even some opened editor text is selected\r\n\r\nVS Code version: Code 1.30.0 (c6e592b2b5770e40a98cb9c2715a8ef89aec3d74, 2018-12-11T22:29:11.253Z)\r\nOS version: Windows_NT x64 10.0.17763\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-12-16 21:51:24",
        "state": "open",
        "number": 65174
    },
    {
        "title": "Add ability to read outputChannel text.",
        "description": "I believe this is what #6208 was asking but I disagree that it was a duplicate of the linked issue.\r\n\r\nBasically, I'm building an issue reporter that captures log output to make filing issues easier for my extension. For my own logger this is easy because I can just save the data that should have been logged to a variable. However, my extension relies on OmniSharp and they have their own log. It'd be valuable to capture that as well.",
        "createdAt": "2018-12-14 20:29:19",
        "state": "open",
        "number": 65108
    },
    {
        "title": "Add a \"recenty used input\" to user inputs for tasks.",
        "description": "### Rationale:\r\n\r\nThe \"Task: Run Task\" picker puts the most recently used task as the first one in the list (with other recently used tasks), which makes it easy to re-run the same task without typing.\r\n\r\nThe same behavior is not present for the input pickers (both `\"pickString\"` and `\"promptString\"` pickers), which makes it harder to re-run the same task if the arguments were not the default ones.\r\n\r\n### Details:\r\n\r\nConsider the following tasks.json file:\r\n```\r\n{\r\n\t\"version\": \"2.0.0\",\r\n\t\"tasks\": [\r\n\t\t{\r\n\t\t\t\"label\": \"echo free\",\r\n\t\t\t\"type\": \"shell\",\r\n\t\t\t\"command\": \"echo ${input:any}\",\r\n\t\t\t\"problemMatcher\": []\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"label\": \"echo list\",\r\n\t\t\t\"type\": \"shell\",\r\n\t\t\t\"command\": \"echo ${input:list}\",\r\n\t\t\t\"problemMatcher\": []\r\n\t\t}\r\n\t],\r\n\t\"inputs\": [\r\n\t\t{\r\n\t\t\t\"id\": \"list\",\r\n\t\t\t\"description\": \"arguments in a list\",\r\n\t\t\t\"default\": \"a\",\r\n\t\t\t\"type\": \"pickString\",\r\n\t\t\t\"options\": [ \"a\", \"b\", \"c\" ]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"id\": \"any\",\r\n\t\t\t\"description\": \"any arg\",\r\n\t\t\t\"default\": \"\",\r\n\t\t\t\"type\": \"promptString\"\r\n\t\t}\r\n\t]\r\n}\r\n```\r\n\r\nIf my development workflow requires me to run \"echo list\" with argument \"c\" frequently (i.e. building a specific module in a big project), I can quickly find the right task (it is likely at the top of the recently used tasks inside the Run Task picker), but I will still have to lookup or type the argument (and in my real-life use case, the argument is not a single letter, and the list has ~150 elements). Having a \"recenty used input\" list would be helpful for this.\r\n\r\nThe same goes for a \"echo free\"-like task (I have this case passing custom arguments to a build system script, as I would do in a shell, but with a problemMatcher parsing the output), but as the arguments are not selected from a list, the number of \"recently used inputs\" would probably have to be limited to a sane level.\r\n",
        "createdAt": "2018-12-14 09:37:05",
        "state": "open",
        "number": 65066
    },
    {
        "title": "[pug] add auto indent",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.30.0\r\n- OS Version: Windows 10 x64 (1803)\r\n\r\nThe auto indentation when using pug is not working. Here is an example of **VSCode** (1.30.0) vs **Sublime Text** (3.1.1) and **Atom** (1.33.0) showing the expected behavior:\r\n![example_plug_image](https://user-images.githubusercontent.com/45812155/49979590-75848e00-ff2e-11e8-96cc-a0039fe3b94b.png)\r\n\r\nAnd here a gif showing what happen in each one while typing (the **tab** and **space** keys **were not used**):\r\n![example_pug-2-3](https://user-images.githubusercontent.com/45812155/49979598-787f7e80-ff2e-11e8-9d1d-5d82b6644a43.gif)\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open a tab and select Pug syntax\r\n2. Type some tags like the next example **without** using **tab** or **space** keys:\r\n```\r\nh1 test\r\n.example\r\n    ul\r\n        li\r\n```\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n<details>\r\n  <summary>Extensions enabled:</summary>\r\n  \r\n- advanced-new-file\r\n- Bookmarks\r\n- Bracket Pair Colorizer\r\n- Code Spell Checker\r\n- colorize\r\n- Identical Sublime Monokai C# theme and colorizer\r\n- Path Autocomplete\r\n- Relative Path\r\n- Sublime Text Keymap and Settings Importer\r\n</details>",
        "createdAt": "2018-12-14 02:32:52",
        "state": "open",
        "number": 65044
    },
    {
        "title": "Support lazy resolving of SignatureInformation#documentation",
        "description": "If signature help returns lots of signatures and each have an documentation associated with it resolving the whole signature help can be time costly. Since we only show the documentation on user interaction lazy resolving this information would be beneficial. ",
        "createdAt": "2018-12-13 14:17:19",
        "state": "open",
        "number": 65003
    },
    {
        "title": "Eager evaluation feature like Chrome debugger",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nOne amazing feature provided chrome debugger, is eager evaluation, see this for more details: https://developers.google.com/web/updates/2018/05/devtools#eagerevaluation\r\n\r\nI am not sure if it is easy to support, but it is the main feature I missed from Chrome debugger",
        "createdAt": "2018-12-13 04:14:14",
        "state": "open",
        "number": 64949
    },
    {
        "title": "[folding] Preview folded content on hover",
        "description": "Found no existing issues\r\n\r\nIt would be cool to preview folded content without actual unfolding it, using peek\r\n\r\nFor example, how it's done in WebStorm:\r\n\r\n<details><summary>small gif</summary><img src=\"https://user-images.githubusercontent.com/599439/49730695-38986d00-fc8a-11e8-88b7-c07fffb9b45b.gif\" /></details>\r\n\r\nvideo: https://streamable.com/i8z3u\r\n\r\nI think it should be in core. Or a plugin which distributes with vscode. What do you think?\r\n\r\nrefs for code:\r\n\r\ncss: https://github.com/Microsoft/vscode/blob/cb66c137e0279693a8fcea3ed481d1d2db7512c7/src/vs/editor/contrib/folding/folding.css\r\n\r\nts: https://github.com/Microsoft/vscode/blob/4e4e6f9b44dd9e6a53d1f08565c52b8ea9f61a5e/src/vs/editor/contrib/folding/foldingDecorations.ts",
        "createdAt": "2018-12-10 11:46:41",
        "state": "open",
        "number": 64721
    },
    {
        "title": "Add \"Never pause here\" option to breakpoint context menu",
        "description": "Please see [this article](http://www.mattzeunert.com/2016/03/17/devtools-never-pause-here.html) for context. This feature is very useful when you want to use \"Pause on all exceptions\" and then ignore the caught errors that you're not interested in.\r\n\r\n`vscode v1.29.1`",
        "createdAt": "2018-12-09 19:09:13",
        "state": "open",
        "number": 64696
    },
    {
        "title": "Allow to configure cursor keys for input fields",
        "description": "Version 1.29.1 Linux 64 bit\r\n\r\nConsistency issue.\r\n\r\nSteps to Reproduce:\r\n\r\n1. Configure anything (e.g. Ctrl+B) for cursorLeft (Global)\r\n2. Find all other conflicting key bindsings and remove them.\r\n3. Observe that key works in an editor.\r\n3. Open Search Bar (for example) or Find Widget (for another example) or search boxes.\r\n4. Observe cursorLeft does not work in text boxes.\r\n\r\nOnly a finite subset of (generic named e.g cursor*, delete*) shortcuts are required if this is to be fixed. I do realise that sometimes these things can be tricky, especially if using stock widgets for these.\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2018-12-09 19:10:56",
        "state": "open",
        "number": 64694
    },
    {
        "title": "Slow syntax highlighting",
        "description": "- VSCode Version: Insider 1.30\r\n- OS Version: Windows 10 1607 LTSB x64\r\n\r\nSteps to Reproduce:\r\n\r\n1. Load large C++ file (60k LOC)\r\n2. Observe the slowness. Takes like 10s to highlight the code.\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2018-12-09 09:36:43",
        "state": "open",
        "number": 64681
    },
    {
        "title": "Extension Pack: Enabled/Disabled list: Show depending extensions as subitems",
        "description": "It would be great to distinguish top-level extensions such as Extension Pack and \"flat\" extension, which is not included in any pack.\r\nThe idea is to have list grouped by features. e.g.:\r\n\r\nEnabled [V]\r\n+ \"Java language Pack\"\r\n   - \"Debuger for Java\"\r\n+ \"Python language Pack\"\r\n- \"Some small extention\"\r\n\r\nDisabled [V]\r\n+ \"Java language Pack\"\r\n   - \"Maven for Java\"\r\n- \"Fortran support\"\r\n\r\nThere are some possible solutions:\r\n1. Show extensions list as tree.\r\n2. Add possibility to hide dependent extensions",
        "createdAt": "2018-12-08 22:10:20",
        "state": "open",
        "number": 64671
    },
    {
        "title": "Extensions search bar is emptied when reloading window",
        "description": "Issue Type: <b>Bug</b>\r\n\r\n1.  Open Extensions in Side Bar\r\n2.  Type something in search bar (e.g. `@installed javascript`)\r\n3.  Reload window (<kbd>F1</kbd>+`reload window`+<kbd>Enter</kbd>)\r\n4.  Extensions search bar is now empty.\r\n\r\nIt would be helpful if the search bar in the Extensions Side Bar maintained its value when reloading the window.  Frequently when I don't know which extension is causing adverse behavior, I make a guess at which extensions it might be (e.g. `@installed css`), disable one, click Reload, check whether it worked or not, and repeat.  I find it frustrating that I have to type `@installed css` each time.\r\n\r\nVS Code version: Code 1.29.1 (bc24f98b5f70467bc689abf41cc5550ca637088e, 2018-11-15T19:13:36.375Z)\r\nOS version: Windows_NT x64 10.0.17134\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i5-8400 CPU @ 2.80GHz (6 x 2808)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>rasterization: enabled<br>video_decode: enabled<br>video_encode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Memory (System)|15.94GB (9.24GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-12-08 19:40:50",
        "state": "open",
        "number": 64669
    },
    {
        "title": "Support multiple lineComments in a language config to allow \"Remove Line Comment\" to work more reliably",
        "description": "In some languages, there may be multiple single-line comment markers, like `//` and `///`. However the language configs can only provide a single lineComment setting which is used by the `Remove Line Comment` command. This makes it hard to uncomment. For example, take this C# code:\r\n\r\n```cs\r\n/// <summary>\r\n/// The GetZero method.\r\n/// </summary>\r\n/// <example> \r\n/// This sample shows how to call the <see cref=\"GetZero\"/> method.\r\n/// <code>\r\n/// class TestClass \r\n/// {\r\n///     static int Main() \r\n///     {\r\n///         return GetZero();\r\n///     }\r\n/// }\r\n/// </code>\r\n/// </example>\r\npublic static int GetZero()\r\n{\r\n\treturn 0;\r\n}\r\n```\r\n\r\nIf you copy/pasted the code from the `<example>` section and tried to remove the comment using `Remove Line Comment` you end up with this:\r\n\r\n```cs\r\n/ class TestClass \r\n/ {\r\n/     static int Main() \r\n/     {\r\n/         return GetZero();\r\n/     }\r\n/ }\r\n```\r\n\r\nWe have a similar issue in Dart - we use both `//` and `///`. There are things like [DocFX](https://dotnet.github.io/docfx/spec/triple_slash_comments_spec.html) that encourage triple-slashes too.\r\n\r\nAlthough `Add Line Comment` would only be able to use the first, it'd be nice if in the language declaration we could provide multiple `lineComments` so that removing could handle this case better (it can use the longest comment first when trying to remove the markers):\r\n\r\n```js\r\n{\r\n\"comments\": {\r\n\t\"lineComment\": [ \"//\", \"///\" ],\r\n\t\"blockComment\": [ \"/*\", \"*/\" ]\r\n},\r\n}\r\n```\r\n\r\nOr:\r\n\r\n```js\r\n{\r\n\"comments\": {\r\n\t\"lineComment\": \"//\",\r\n\t\"additionalLineComments\": [ \"///\" ],\r\n\t\"blockComment\": [ \"/*\", \"*/\" ]\r\n},\r\n}\r\n```",
        "createdAt": "2018-12-08 08:58:43",
        "state": "open",
        "number": 64659
    },
    {
        "title": "Way to Re-enter Context of the Placeholder Tab Progression While Using Snippets",
        "description": "When going through tab progression of a long snippet with many different placeholder values to enter, it can be possible to accidentally click a mouse or hit a wrong key that exits from the snippet context altogether. In ST3, if you hit ctr+z, you are taken back within the context of the snippet's tab progression to the place where it was when the last edit was made, and you can then finish the snippet. I think it would be nice if this were the same in VS Code. I don't know how common it is, but I have some very long and complex snippets, and I'm worried about sometimes needing to restart one half way through if I switch from ST3 to VS Code.",
        "createdAt": "2018-12-08 06:15:14",
        "state": "open",
        "number": 64657
    },
    {
        "title": "Joining with multiple cursors on contiguous lines doesn't work as expected",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nSelect several rows of text, convert selection into multiple lines (ctrl+shift-L on my machine).\r\n\r\nJoin the lines (ctrl+J on my machine).\r\n\r\nI expect the lines to be collapsed into a single line, with the mutltipe cursors positioned throughout the lline at the end of what was formerly the end of each line.\r\n\r\nWhat happens in VS Code is you end up with half the lines joining, and some bits becoming selected and some not.  I can see no rhyme or reason to the selection.  If you press ctrl+j again to try to further join the lines, you get an error message.\r\n\r\nThis works as expected in Sublime Text; try it there if you have that handy.\r\n\r\nVS Code version: Code 1.29.1 (bc24f98b5f70467bc689abf41cc5550ca637088e, 2018-11-15T19:13:36.375Z)\r\nOS version: Windows_NT x64 10.0.16299\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i5-7300HQ CPU @ 2.50GHz (4 x 2496)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>rasterization: enabled<br>video_decode: enabled<br>video_encode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Memory (System)|7.83GB (0.88GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (18)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nincrement-selection|alb|0.0.3\r\nBookmarks|ale|10.0.0\r\nquote-flipper|all|0.0.1\r\nbracket-pair-colorizer|Coe|1.0.61\r\nxml|Dot|2.3.2\r\nvscode-open-in-github|fab|1.1.3\r\ncode-runner|for|0.9.5\r\nrainbow-csv|mec|0.8.0\r\npython|ms-|2018.11.0\r\ncpptools|ms-|0.20.1\r\nsublime-keybindings|ms-|4.0.0\r\nvsliveshare|ms-|0.3.1013\r\ncode-settings-sync|Sha|3.2.2\r\nwhiteviz|spy|0.6.0\r\nvscode-arduino|vsc|0.2.23\r\ndebug|web|0.22.0\r\nbetter-align|wwm|1.1.6\r\ncursor-align|yo1|1.0.4\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-12-08 04:40:09",
        "state": "open",
        "number": 64655
    },
    {
        "title": "Consider improving the allow/disallow automatic task actions",
        "description": "With https://github.com/Microsoft/vscode/issues/64613 we introduced simple allow/disallow actions that mimic what we do for terminal shell configuration. This approach as several disadvantages:\r\n- the actions show up on empty windows (no open folder)\r\n- it's unclear what the current state is\r\n- user doesn't see the tasks that are (supposed to be) running automatically\r\n\r\nA more sophisticated QuickPick based UI could provide the user with this information.",
        "createdAt": "2018-12-07 18:09:59",
        "state": "open",
        "number": 64618
    },
    {
        "title": "Using OS user name / git user name inside code snippets",
        "description": "I'd like to add the following code snippet and share it with the whole team:\r\n\r\n```json\r\n{\r\n  \"Comment todo\": {\r\n    \"prefix\": \"//\",\r\n    \"body\": [\r\n        \"// TODO (${MY_NAME}) [${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}]: $1\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nThis should produce `// TODO (Alexander Kachkaev) [2018-12-07]: ...` on my computer and `// TODO (John Smith) [2018-12-07]: ...` on John Smith's.\r\n\r\nLooking at [VSCode snippet docs](https://code.visualstudio.com/docs/editor/userdefinedsnippets#_variables) and [VSCode variable reference](https://code.visualstudio.com/docs/editor/variables-reference) does not suggest that there is any variable like `MY_NAME`. Could it be added? The value can either be taken from the OS user name or from the git user name. Similarly, there could be a variable for the current user's email address (possibly taken from the git config).\r\n\r\nWDYT?",
        "createdAt": "2018-12-07 11:46:56",
        "state": "open",
        "number": 64599
    },
    {
        "title": "Highlight file containing definition",
        "description": "There is already `Go to Definition` in vscode, so that's usually not the file you're looking for.\r\n\r\nMaybe it should also work with [Expanding folder options](https://github.com/Microsoft/vscode-references-view/issues/28) - When file has 1 reference and that reference is the definition - file shouldn't auto expand.",
        "createdAt": "2018-11-25 13:29:52",
        "state": "open",
        "number": 64530
    },
    {
        "title": "[Suggestion] Add option for displaying in panel",
        "description": "Search has this option (`search.location`). It would be great if this view could also be shown in the panel.",
        "createdAt": "2018-11-20 17:28:16",
        "state": "open",
        "number": 64529
    },
    {
        "title": "Support nls",
        "description": "This extension should be localised for other languages",
        "createdAt": "2018-11-13 07:43:44",
        "state": "open",
        "number": 64526
    },
    {
        "title": "References list should react on file changes",
        "description": "References list view does not react to file changes. Which makes me easy to see outdated results. This is particuarly noticable when I use the references list as a todo list and I am going one by one and changing stuff. I can easily make the mistake and think I did not change something when I actualy did.\r\n\r\nThe other downside of this is that we are not consistent with the search view which nicely reacts on file changes and updates.",
        "createdAt": "2018-11-07 10:58:58",
        "state": "open",
        "number": 64525
    },
    {
        "title": "Feature Reqeust: Also show line numbers",
        "description": "Also Show line numbers like \r\nhttps://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/v1_29.md#show-line-numbers-in-search",
        "createdAt": "2018-11-03 07:17:44",
        "state": "open",
        "number": 64521
    },
    {
        "title": "Need a better grammar support for Rust lang",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\nThis problem is raised up for several times before (#49932, #45628) But not resolved. VSCode team member replies to these issues as: We are using the same grammar with Atom. In fact, Atom has already changed to [tree-sitter syntax](https://github.com/tree-sitter/tree-sitter-rust) as the bundled Rust language grammar support package (https://github.com/atom/atom/tree/master/packages/language-rust-bundled).\r\n\r\nHowever, Vscode's bundled rust support extension is based on Zargony's [package](https://github.com/zargony/atom-language-rust) which is not updated for nearly a year and many issues open with no reply at all.\r\n\r\nCurrently every highlighting problem in https://github.com/Microsoft/vscode/issues/49932 still happens and that's not simply a \"theme\" thing as @mjbvz mentioned in the orignal issue, I think.\r\n\r\nIn the original issue, @mjbvz  also declares that \r\n> Since we use the same grammar, I believe this is just a matter of theming. As far as I can tell, the atom rust extension injects its own themeing rules to provide better colors.\r\n\r\nthe plugin he referred to is not even Zargony's package. it's a package from @miqh, who also ported the atom package to vscode, and fails to correctly provide grammar for Rust as well.\r\n\r\nHope that I get everything right, thanks for any help.\r\n<!-- Describe the feature you'd like. -->\r\n",
        "createdAt": "2018-12-06 06:32:58",
        "state": "open",
        "number": 64488
    },
    {
        "title": "Extension Pack: Uninstall dependencies from pack if they are removed in an update",
        "description": "Hi there, we've been running an extension pack [for Artsy](https://github.com/artsy/vscode-artsy) for a few months now and it's been great. \r\n\r\nWe've had a bit of churn in our extensions, and hoped that vscode might be able to handle the uninstallation of dependent extensions when we remove a value form the `extensionPack` keys\r\n\r\ne.g.: Between v1 and v2\r\n\r\n```diff\r\n    \"extensionPack\": [ \r\n        \"Orta.vscode-danger\",\r\n-        \"misogi.ruby-rubocop\", \r\n-        \"rebornix.ruby\", \r\n        \"mjmcloug.vscode-elixir\", \r\n```\r\n\r\nVS Code would know that `misogi.ruby-rubocop` and `rebornix.ruby` were installed via this pack (and not a user install) and thus offer (or automatically) remove them from the local setup. ",
        "createdAt": "2018-12-05 15:41:50",
        "state": "open",
        "number": 64436
    },
    {
        "title": "Git: Gracefully handle git hooks",
        "description": "Most projects will have some form of precommit hooks for linting or tests through libraries such as [lint-staged](https://github.com/okonet/lint-staged) and [husky](https://github.com/typicode/husky).\r\n\r\nWhen committing via the source control panel in VSCode there's no visual indicator for when a git hook is running. I think this could be an opportunity to put some UI indicator around this.",
        "createdAt": "2018-12-05 06:15:23",
        "state": "open",
        "number": 64409
    },
    {
        "title": "Setting to disable autocompletion fuzzy matching altogether",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nSometimes, it is annoying to see completely unrelated results when using autocomplete. See the attached screenshot. I am expecting a _pure_ search (ie, consecutive characters only), but am seeing a lot of results pop up simply because they share the same letters.\r\n\r\n<img width=\"494\" alt=\"screen shot 2018-12-04 at 8 51 21 am\" src=\"https://user-images.githubusercontent.com/2454818/49458632-0e364380-f7a2-11e8-96d9-0175f6fdee29.png\">\r\n\r\nVS Code version: Code 1.29.1 (bc24f98b5f70467bc689abf41cc5550ca637088e, 2018-11-15T19:06:21.742Z)\r\nOS version: Darwin x64 18.2.0",
        "createdAt": "2018-12-04 16:53:53",
        "state": "open",
        "number": 64367
    },
    {
        "title": "consider to allow for variable substitution in the inputs section",
        "description": "testing #64214:\r\n\r\nI assume that variable substitution in the \"inputs\" section is disabled to avoid recursion...\r\n\r\nHowever, I think it would be helpful to allow \"simple\" non-interactive variables like ${env:...}, ${config:...}, ${workspaceFolder:...}. This makes it possible to do something like this:\r\n```\r\n{\r\n\t\t\t\"label\": \"echoPrompt\",\r\n\t\t\t\"description\": \"Please enter a folder name\",\r\n\t\t\t\"default\": \"${env:HOME}\",\r\n\t\t\t\"type\": \"prompt\",\r\n}\r\n```\r\n ",
        "createdAt": "2018-12-04 16:01:00",
        "state": "open",
        "number": 64358
    },
    {
        "title": "Loaded scripts should have a collapse all action",
        "description": "Refs: #64230\r\n\r\nAs other debug views that are trees the loaded scripts view should have a Collapse All action in the top of the view.\r\nHere's a code pointer to the action https://github.com/Microsoft/vscode/blob/07202fbfb82bdada89472dd4b1c3c699b0eab0b4/src/vs/workbench/browser/viewlet.ts#L188",
        "createdAt": "2018-12-04 10:59:45",
        "state": "open",
        "number": 64314
    },
    {
        "title": "Search: find, replace input boxes miss scrollbar",
        "description": "Testing #64270\r\n\r\nWhen having a tall multi-line input, the search find & replace boxes seem to miss a scrollbar when scrollable.",
        "createdAt": "2018-12-04 10:45:31",
        "state": "open",
        "number": 64311
    },
    {
        "title": "Implement certain git status operations without spawning git",
        "description": "Like finding HEAD and all refs, etc.\r\n\r\ncc @rebornix ",
        "createdAt": "2018-12-03 16:19:59",
        "state": "open",
        "number": 64234
    },
    {
        "title": "Splitview needs overflowing behaviour",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nI have a 1680x1050 monitor and set to 150% scale. I'm contributing a new view to the Azure view container and found the newly added view could not show up when there're too many views already. I can't shrink spaces for top 4 views any more and the view container can't be scrolled to see the views at the bottom.\r\n![azureview](https://user-images.githubusercontent.com/16605901/49359740-0464ff80-f712-11e8-9e22-64acc30e0113.gif)\r\n\r\n\r\nVS Code version: Code 1.29.1 (bc24f98b5f70467bc689abf41cc5550ca637088e, 2018-11-15T19:13:36.375Z)\r\nOS version: Windows_NT x64 10.0.17763\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Xeon(R) CPU E5-1620 v4 @ 3.50GHz (8 x 3492)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>rasterization: enabled<br>video_decode: enabled<br>video_encode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Memory (System)|31.92GB (18.44GB free)|\r\n|Process Argv|.|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (20)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\ngitlens|eam|9.0.1\r\ntslint|eg2|1.0.40\r\ndocker-explorer|for|0.1.6\r\nrest-client|hum|0.20.4\r\nvscode-azureappservice|ms-|0.10.0\r\nvscode-azurefunctions|ms-|0.12.1\r\nvscode-azurestorage|ms-|0.4.2\r\nvscode-cosmosdb|ms-|0.9.1\r\nmssql|ms-|1.4.0\r\nazure-account|ms-|0.6.2\r\nazurecli|ms-|0.4.2\r\ncpptools|ms-|0.20.1\r\ncsharp|ms-|1.17.1\r\nPowerShell|ms-|1.9.0\r\nvscode-node-azure-pack|ms-|0.0.5\r\nazurerm-vscode-tools|msa|0.4.2\r\nvscode-docker|Pet|0.4.0\r\npartial-diff|ryu|1.4.0\r\nazure-iot-toolkit|vsc|1.7.1\r\nvscode-arduino|vsc|0.2.23\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-12-03 07:49:04",
        "state": "open",
        "number": 64188
    },
    {
        "title": "Emmet support for custom HTML tags / attributes",
        "description": "Continuation of #62976.\r\n\r\nCusom tags / attributes should go into emmet's registry, so all emmet features work as expected for them.",
        "createdAt": "2018-11-29 21:56:20",
        "state": "open",
        "number": 64032
    },
    {
        "title": "Double click the left mouse button to select the nearest code block",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nDouble click the left mouse button to select the nearest code block.\r\n\r\nHow the editor puts the mouse in {}, double-clicking the left mouse button will automatically select the contents inside the curly braces!\r\n\r\nVS Code version: Code 1.29.1 (bc24f98b5f70467bc689abf41cc5550ca637088e, 2018-11-15T19:13:36.375Z)\r\nOS version: Windows_NT x64 6.1.7601\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-11-29 12:46:39",
        "state": "open",
        "number": 63983
    },
    {
        "title": "[folding] Move line up/down should skip over folded regions or folded sections",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version:1.30.0-insider\r\n- OS Version: windows 10\r\n\r\nI think when code is in a folded region or section it should never unfold unless explicitly commanded, so if you are moving a line using move command, the line should skip over both folded regions and folded sections\r\nSteps to Reproduce:\r\n\r\n1. create a folded region using #region #endregion\r\n2. fold some code section\r\n3. move a line using alt+up/down over the folded region/section\r\n![vscodemovelinebug](https://user-images.githubusercontent.com/6554605/49209732-84b4f900-f3d0-11e8-9bbb-e4f1b4fd018f.gif)\r\n\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2018-11-29 08:47:15",
        "state": "open",
        "number": 63972
    },
    {
        "title": "Show actual description for commands in Extensions Contributions section",
        "description": "The `Description` section in the Extensions Contributions section for commands shows the command title instead of command description.\r\n\r\nI would say 2 most important things for a user in this section is the command title and description. Command id, keyboard shortcuts, menu contexts are all secondary information.\r\n\r\nNo one needs the id, unless they want to customize the keyboard shortcut.\r\nMost of the commands dont have a default keyboard shortcut, and so that column is mostly empty. \r\nMost of the commands arent part of any menu, and so the Menu Contexts column is also mostly empty.\r\n\r\nA new user or a existing user new to an extension would like to know what the extension can do. Command title and description is what will help. And so, these 2 should get priority in the limited real estate of the Contributions section\r\n\r\nNote that there is no place in VS Code where one can see the descriptions of the commands contributed by an extension.\r\n\r\n![image](https://user-images.githubusercontent.com/16890566/49181411-27f00a80-f30c-11e8-8c6d-89c6841c3daa.png)\r\n\r\n\r\nVS Code version: Code - Insiders 1.30.0-insider (d3bb20c3fd1f23c369b80dca2ed25d54efd664e2, 2018-11-27T08:27:31.447Z)\r\nOS version: Windows_NT x64 10.0.17763\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-11-28 20:50:20",
        "state": "open",
        "number": 63949
    },
    {
        "title": "vscode.debug API should provide the current thread/stack frame ids",
        "description": "Currently the `vscode.debug` API provides a way to send custom events to debug adapters. But it is missing one fairly important thing - there is no way to know what the current thread id / frame id is. So a debug adapter could maybe guess. But it feels like there should really be a way to query this.",
        "createdAt": "2018-11-28 19:01:20",
        "state": "open",
        "number": 63943
    },
    {
        "title": "Do not trigger auto updates when a specific version of extension is installed from CLI",
        "description": "Follow up item from https://github.com/Microsoft/vscode/issues/12764\r\n\r\nDo not trigger auto updates when a specific version of extension is installed from CLI",
        "createdAt": "2018-11-28 09:18:39",
        "state": "open",
        "number": 63903
    },
    {
        "title": "Add \"TypeAlias\" CompletionItemKind/SymbolKind",
        "description": "\"Type alias\" is whenever an identifier is used to reference another type by a different name, aka \"typedef\" or \"using alias\" (see https://en.cppreference.com/w/cpp/language/type_alias ).\r\n\r\nApplies to the following languages: C, C++, Objective-C, D, C#, Go, Rust, Swift, and probably other languages.\r\n\r\nOur C/C++ workaround is to use the \"Interface\" icon with the text \"(typedef)\" or \"(type alias)\" appended.\r\n\r\nFor Visual Studio with C++ it shows:\r\n![image](https://user-images.githubusercontent.com/19859882/48880491-917c9000-edc5-11e8-9b35-3e19842aaeb8.png)",
        "createdAt": "2018-11-26 20:38:57",
        "state": "open",
        "number": 63804
    },
    {
        "title": "Add more types to CompletionItemKind/SymbolKind ",
        "description": "This would allow our C/C++ extension to show a different icon. Also applies to Objective-C and D. Our workaround is to use the \"Struct\" icon with additional text \"(union)\" at the end of the symbol.\r\n\r\nThis is what Visual Studio shows:\r\n![image](https://user-images.githubusercontent.com/19859882/48880516-b96bf380-edc5-11e8-8723-1d6266671b4e.png)",
        "createdAt": "2018-11-26 20:22:00",
        "state": "open",
        "number": 63802
    },
    {
        "title": "How to get Emmet to generate a custom JSX attribute without quotes",
        "description": "By default, when I expand an html tag with an attribute, the attribute's value gets surrounded by quotes.\r\nI'm trying to remove the quotes generated by Emmet around the props.onClick value for custom attribute onClick.\r\n\r\nMy input (then TAB to expand):\r\n`button[onClick={props.onClick}]`\r\n\r\nEmmet's output:\r\n`<button onClick=\"props.onClick\"></button>`\r\n\r\nWhat I expect (props... WITHOUT quotes):\r\n`<button onClick={props.onClick}></button>`\r\n\r\nWhereas, I want to have to specify when the expanded version wrapping with quotes. \r\nEither rapping it around double brackets doesn't work. Is that possible with vscode.emmet?\r\n\r\n",
        "createdAt": "2018-11-24 01:58:33",
        "state": "open",
        "number": 63703
    },
    {
        "title": "Centered editor layout: top and bottom padding",
        "description": "I don't like Zen mode taking full screen. I want some padding on top and bottom. Here's what I get in Vim with https://github.com/junegunn/goyo.vim:\r\n\r\n<img width=\"946\" alt=\"image\" src=\"https://user-images.githubusercontent.com/4033249/48916946-41d7ac00-ee39-11e8-9cc9-c51a87e69653.png\">\r\n",
        "createdAt": "2018-11-22 17:31:16",
        "state": "open",
        "number": 63663
    },
    {
        "title": "API should install extensions defined in extensionPack before running extension tests",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nI ran into #30165 because I was making use of settings contributed by another extension defined in extensionPack. This causes our CI tests to fail, because that extension isn't downloaded before the extension tests are run:\r\n\r\n```\r\n### VS Code Extension Test Run ###\r\nCurrent working directory: ...\r\nDownloading VS Code into ... from: https://vscode-update.azurewebsites.net/1.29.1/linux-x64/stable\r\nRunning extension tests: /home/travis/build/IBM-Blockchain/blockchain-vscode-extension/client/.vscode-test/stable/VSCode-linux-x64/code /home/travis/build/IBM-Blockchain/blockchain-vscode-extension/client/out/test --extensionDevelopmentPath=/home/travis/build/IBM-Blockchain/blockchain-vscode-extension/client --extensionTestsPath=/home/travis/build/IBM-Blockchain/blockchain-vscode-extension/client/out/test\r\n```\r\n\r\nWould it be possible to update the test script in the api to download the _other_ extensions defined in the extensionPack category so we won't have to work around this? \r\n(My work around was just to stub out the get and update function calls where we're making use of the other extension's settings. Not ideal but works) ",
        "createdAt": "2018-11-22 10:24:49",
        "state": "open",
        "number": 63631
    },
    {
        "title": "Support updating multiple workspace configuration settings at once...",
        "description": "hey there :wave:\r\n\r\nmy extension manages a number of custom workspace configuration settings (established via the `contributes.configuration.properties` object in my `package.json` / manifest file). i monitor these settings using `workspace.onDidChangeConfiguration()` and take action when `event.affectsConfiguration()` signals that a relevant change has occurred.\r\n\r\ni'd like to expose a command that a user can invoke to be walked through the process of updating _multiple_ configuration settings within their workspace. kind of like a set up wizard UX.\r\n\r\nthe problem i'm running into is that there does not appear to be a way to update _multiple_ configuration values at once. \r\n\r\ninstead, i'm forced to update them like so:\r\n\r\n```javascript\r\nawait config.update('foo', foo, ConfigurationTarget.Workspace);\r\nawait config.update('bar', bar, ConfigurationTarget.Workspace);\r\nawait config.update('baz', baz, ConfigurationTarget.Workspace);\r\n```\r\n\r\nwhich causes my `onDidChangeConfiguration()` to be called three times (once for each change). in this scenario, i want to emit _one_ change event once all three settings have been updated.\r\n\r\ni can work-around the current behavior by simply debouncing my event handler or managing some global flag and exiting my event handler early based on whether or not it is set or even just editing the `.code-workspace` json file myself using node's `fs.writeFile`, etc. however, this doesn't prevent 3rd party listeners from running and / or is generally a bit clunky.\r\n\r\nit would be great if there was support for something like this:\r\n\r\n```javascript\r\nawait config.update('myExtension', { foo, bar, baz }, ConfigurationTarget.Workspace);\r\n```\r\n\r\nwhich would then update those three values but only emit one change event.",
        "createdAt": "2018-11-22 01:48:24",
        "state": "open",
        "number": 63616
    },
    {
        "title": "[snippets] Support for global or project-level variables",
        "description": "I originally posted in #59557, but I realized the OP was asking for a variable *defined within the snippet*.\r\n\r\n## This request is for adding support for user-overridable variables defined *outside* of the snippet code, perhaps in:\r\n\r\n1. A global/project-level config file\r\n2. Environment variables\r\n\r\nNOTE: # 2 [has a precedent in TextMate](https://macromates.com/manual/en/environment_variables).\r\n\r\n# JavaScript Use Cases\r\n\r\n## Use Case 1: `let` vs `const`\r\n\r\nES2015 introduced `let` and `const`. This comes down to a personal preference for many users.\r\n\r\nThis could be accommodated by allowing the user to set a variable like `${VARIABLE_DECL_KIND}` to either `const` or `let`.\r\n\r\n## Use Case 2: `;`\r\n\r\nEnding statements with `;` is also a stylistic preference for most JavaScript code.\r\n\r\nThis could be accommodated using a `${STATEMENT_TERMINATOR}` that could be defined as either `;` or an empty string.\r\n\r\nI know many similar requests are being closed in favor of #10561, but I'm wondering if short of that, this could be implemented by adding another `VariableResolver` implemention, e.g.: `EnvironmentVariableResolver` or `ConfigFileVariableResolver`?",
        "createdAt": "2018-11-20 23:45:46",
        "state": "open",
        "number": 63534
    },
    {
        "title": "Is it possible to copy text from `Show Hover`?",
        "description": "For example I hover over an error like this:\r\n\r\n![image 2018-11-16 12 31 36](https://user-images.githubusercontent.com/6391776/48619064-90013100-e99b-11e8-99ee-890a0e148a46.jpg)\r\n\r\nAnd I would like to put `[ts] Property 'class' does not exist on type 'IntrinsicAttributes & Props. [2339]'` into my clipboard from a hotkey. Currently I am forced to use the mouse and highlight the hovered text and then pressing copy. I would love to do this from the keyboard.\r\n\r\nMy use case is that I want to quickly grab the text from `Show Hover` and then run a macro to Google for it or search it on Stack Overflow. For that I need to grab the text from hover window to my clipboard with a hotkey.\r\n\r\nThank you.\r\n",
        "createdAt": "2018-11-16 11:34:10",
        "state": "open",
        "number": 63296
    },
    {
        "title": "Provide an easy way to debug a freezing window (The window is no longer responding)",
        "description": "When **The window is no longer responding** dialog appears, it would be great if there is an option to debug the window (e.g. start the DevTools and enter a debugging session). This should up me and other developers to find out and understand the cause of a freezing window more easily.\r\n\r\n![image](https://user-images.githubusercontent.com/193136/48535990-c37e8580-e8df-11e8-9017-d9643b3535ed.png)",
        "createdAt": "2018-11-15 07:10:26",
        "state": "open",
        "number": 63195
    },
    {
        "title": "editor.insertSnippet() messes with indenting of the SnippetString",
        "description": "This is a very similar issue to #44200/#57093 but that fix appears to be only being applied to completions, but applying snippets causes the same issues.\r\n\r\nHere's a repro:\r\n\r\n```ts\r\nvs.workspace.openTextDocument(vs.Uri.parse(`untitled:${os.tmpdir}/a.dart`)).then(async (document) => {\r\n\r\n\tconst originalCode = `main() {\r\n  // code indented with two spaces\r\n}`;\r\n\tconst editor = await vs.window.showTextDocument(document);\r\n\tawait editor.edit((eb) => eb.insert(new vs.Position(0, 0), originalCode));\r\n\r\n\tconst startOffset = originalCode.indexOf(\"// code indented with two spaces\");\r\n\tconst endOffset = originalCode.indexOf(\"\\n}\");\r\n\tconst snippetString = new vs.SnippetString(\"// new code indented with two spaces\\n  // newer code indented with two spaces\");\r\n\r\n\tawait editor.insertSnippet(snippetString, new vs.Range(document.positionAt(startOffset), document.positionAt(endOffset)));\r\n});\r\n```\r\n\r\nThis creates a doc and inserts into it the code:\r\n\r\n```dart\r\nmain() {\r\n  // code indented with two spaces\r\n}\r\n```\r\n\r\nIt then applies a snippet string that includes an additional line that is also indented by two spaces. However what you end up with is:\r\n\r\n```dart\r\nmain() {\r\n  // new code indented with two spaces\r\n    // newer code indented with two spaces\r\n}\r\n```\r\n\r\nThe inserted line has been re-indented.\r\n\r\nWhilst this behaviour may be useful if applying basic hard-coded strings, it's incorrect for language servers that are correctly calculating edits to leave the file indented/formatted correctly (I guess for the same reasons that left to #57093).",
        "createdAt": "2018-11-14 14:13:49",
        "state": "open",
        "number": 63129
    },
    {
        "title": "Feature Request Add favorites",
        "description": "Can you add in the Welcome page, a list of favorite projects that the user will set? For example i am working on 3 projects but the recent projects is not helping. I would want to have a panel that i can set my favorites and with a click to open the folder. ",
        "createdAt": "2018-11-13 21:12:16",
        "state": "open",
        "number": 63057
    },
    {
        "title": "Ability to apply a final sort to QuickPick results",
        "description": "I'd like to be able to pin certain items to the top of a QuickPick list, but the QuickPick's fuzzy matching functionality doesn't allow any custom sorting. Providing some kind of hook to apply a final sort would solve this. This hook would receive the fuzzy-matched order and could return a new array for the final order.",
        "createdAt": "2018-11-13 18:58:08",
        "state": "open",
        "number": 63050
    },
    {
        "title": "emmet.includeLanguages for one to many mapping",
        "description": "How can I enable several languages for a given file extension please?\r\n\r\nFor example\r\n\r\n```json\r\n\"emmet.includeLanguages\": {\r\n        \"tt\": [\"html\", \"css\", \"javascript\"],\r\n    }\r\n```\r\n\r\nExcept this doesn't work. I tried with multiple references to the key \r\n\r\n```json\r\n\"emmet.includeLanguages\": {\r\n        \"tt\": \"html\",\r\n        \"tt\": \"css\",\r\n        \"tt\": \"javascript\",\r\n    }\r\n```\r\n\r\nand also with an embedded object\r\n\r\n```json\r\n\"emmet.includeLanguages\": {\r\n        \"tt\": {\r\n        \"html\":\"html\",\r\n        \"css\": \"css\",\r\n        \"javascript\": \"javascript\",\r\n    }\r\n```\r\n\r\nno joy :-(\r\n\r\n\r\n-------------------------------------------------\r\n```json\r\n\"emmet.includeLanguages\": {\r\n        \"erb\": \"html\"\r\n    }\r\n```\r\n\r\n_Originally posted by @abnersajr in https://github.com/Microsoft/vscode/issues/9500#issuecomment-339634819_",
        "createdAt": "2018-11-11 05:07:19",
        "state": "open",
        "number": 62910
    },
    {
        "title": "Feature request: Control Custom views",
        "description": "I have two requests for custom views : \r\n1. I would be great if custom views can be expandable conditionally. For example, being able to expand a certain view only after an event occurs. \r\n2. also , a control mechanisim to define view area usage would be beneficial. We want some views take up less space than others. \r\n",
        "createdAt": "2018-11-09 18:09:03",
        "state": "open",
        "number": 62860
    },
    {
        "title": "badges on custom activities added to activity bar by extensions",
        "description": "Previously mentioned by @eamodio in https://github.com/Microsoft/vscode/issues/43645#issuecomment-378261837 where @sandy081 asked to create separate issues for more specific features.\r\n\r\nIt would come helpful if extensions which create new activity in activity bar could also display a badge with a count. For example https://github.com/Gruntfuggly/todo-tree/issues/22 has request to show number of TODO/FIXME found in the project.\r\n\r\n![badge](https://user-images.githubusercontent.com/22587994/40053697-997c15dc-5842-11e8-87b0-444531094fa1.png)",
        "createdAt": "2018-11-08 13:43:39",
        "state": "open",
        "number": 62783
    },
    {
        "title": "VS Code should be able to handle file:// URIs",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: Version: 1.28.2\r\nCommit: 7f3ce96ff4729c91352ae6def877e59c561f4850\r\nDate: 2018-10-17T00:20:56.183Z\r\nElectron: 2.0.9\r\nChrome: 61.0.3163.100\r\nNode.js: 8.9.3\r\nV8: 6.1.534.41\r\nArchitecture: x64\r\n- OS Version: Debian buster/sid\r\n\r\nSteps to Reproduce:\r\n\r\n1. Ctrl-Click an HTML `file://` URL in `gnome-terminal` like `file:///home/per/git/myproject/build/reports/spotbugs/main.html`\r\n2. A new VSCode window opens, but with an empy `Untitled-1` file instead of the file I tried opening.\r\n\r\nNo error is shown in the developer console (I verified).\r\n\r\nThis _seems_ like #25987 have come back, in one form or the other.\r\n\r\nFor reference, here is the `code.desktop` file:\r\n\r\n```ini\r\n$ cat /usr/share/applications/code.desktop\r\n[Desktop Entry]\r\nName=Visual Studio Code\r\nComment=Code Editing. Redefined.\r\nGenericName=Text Editor\r\nExec=/usr/share/code/code --unity-launch %F\r\nIcon=code\r\nType=Application\r\nStartupNotify=true\r\nStartupWMClass=Code\r\nCategories=Utility;TextEditor;Development;IDE;\r\nMimeType=text/plain;inode/directory;\r\nActions=new-empty-window;\r\nKeywords=vscode;\r\n\r\nX-Desktop-File-Install-Version=0.23\r\n\r\n[Desktop Action new-empty-window]\r\nName=New Empty Window\r\nExec=/usr/share/code/code --new-window %F\r\nIcon=code\r\n```\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes/No\r\n\r\nCan't really try. :cry: ",
        "createdAt": "2018-11-08 11:51:48",
        "state": "open",
        "number": 62777
    },
    {
        "title": "Git: Provide task progress",
        "description": "**Request**\r\nIt could be a nice feature to show the git progress details in the GIT output console or since Visual Studio even though is 'Code' has the characteristic to being 'Visual', polish the user interface with some indicator. \r\nIn the following images there are some suggestions:\r\n![progress 1](https://user-images.githubusercontent.com/8238828/48170162-9c7bee80-e2f6-11e8-830f-7c440c1ef7b2.png)\r\n![progress2](https://user-images.githubusercontent.com/8238828/48170168-a30a6600-e2f6-11e8-807c-817580ac5e84.png)\r\n\r\n**Use case**\r\nIt happen sometime that users have in their own repository some huge files or maybe the connection slow down during the 'git push', users don't have any idea what is happening or what is the current operation state (it could take even plenty of minutes).\r\nIn the example I'have done, this is what is showed actually in VS Code:\r\n![nothappen](https://user-images.githubusercontent.com/8238828/48170294-2b890680-e2f7-11e8-9737-4397bc03bb06.png)\r\nAnd this is what it can be read from the git executable output:\r\n![expected](https://user-images.githubusercontent.com/8238828/48170317-4c515c00-e2f7-11e8-9903-c5816dcc2084.png)\r\n\r\n**Advantages**\r\nUsers that have this kind of experience can think that the git integration (that is already amazing in VS Code) is not working very good because the operations appears 'blocked'. So they give up and jump on the CLI for the daily usage of git. With some nice improvements like I showed they wouldn't do it.\r\n\r\n**Technical inspection**\r\nI inspected the main source code file about the default GIT extension:\r\n[https://github.com/Microsoft/vscode/blob/master/extensions/git/src/git.ts](https://github.com/Microsoft/vscode/blob/master/extensions/git/src/git.ts)\r\nA nice implementation could be extract more information on the 'git commands output' parsing, ex. Operation 'N' of 'M' and 'Percentage', expose it and use on higher layer of Visual Studio Code.\r\n\r\nWaiting for a your feedback.\r\n\r\nThank you.\r\n",
        "createdAt": "2018-11-08 00:51:04",
        "state": "open",
        "number": 62751
    },
    {
        "title": "Add a command to put OS / VS Code info into clipboard",
        "description": "A lot of times I want to open issues directly on GitHub. Now if I want to provide VS Code's info, I need to launch the issue helper, fill in title / body, open GitHub link, copy the info from there.\r\n\r\nI would want a command to directly get those informations into the clipboard.",
        "createdAt": "2018-11-07 20:57:24",
        "state": "open",
        "number": 62741
    },
    {
        "title": "Exclude gitignored files from file watcher",
        "description": "I would like an option to disable watching of gitgnored files (i.e. add them to the `files.watcherExclude` option automatically).\r\n\r\nI think this makes sense, at least I couldn't think of a use case for watching gitignored files. It might also help with [autorefresh related issues](https://github.com/Microsoft/vscode/issues/42821#issuecomment-436627837) and could make the `files.watcherExclude` option thinner.",
        "createdAt": "2018-11-07 13:54:31",
        "state": "open",
        "number": 62725
    },
    {
        "title": "Some suggestions for moving views",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\nSometimes the code does not wrap. There is an advantage. When setting it to not wrap, if you need to view the code beyond the view part, you need to pull the scroll bar below or move the cursor. This is very troublesome. I hope to have a function, you can press and hold a certain Shortcuts make the mouse a small hand, and hold down to drag the entire code view left and right.\r\nI am a windows user.\r\n<!-- Describe the feature you'd like. -->\r\n",
        "createdAt": "2018-11-07 01:35:07",
        "state": "open",
        "number": 62689
    },
    {
        "title": "JSON hover should point to new docs",
        "description": "For example, `contributes.grammars` should point to https://vscode-ext-docs.azurewebsites.net/api/references/contribution-points#contributes.grammars\r\n\r\n![image](https://user-images.githubusercontent.com/4033249/48083704-b8727980-e1aa-11e8-818a-61d2aeaff25e.png)\r\n\r\nPublisher should point to the publishing topic.\r\n",
        "createdAt": "2018-11-06 18:01:17",
        "state": "open",
        "number": 62675
    },
    {
        "title": "API should support to create a folder",
        "description": "",
        "createdAt": "2018-11-06 15:15:29",
        "state": "open",
        "number": 62663
    },
    {
        "title": "[theme] inspect tool for workbench colors",
        "description": "Issue Type: Feature Request\r\nRelevant Issues: There was one but I'm unable to find it, this is an idea to perhaps explore it. Maybe the bot can find it.\r\n\r\n## Live Editor Theming\r\nThe original issue puts forward the idea of live editing a theme, such that when a change is applied, it's applied automatically without reloads and allows the developee to see what exactly changed. There are still a few downsides that I feel this feature request would solve. But before I explain, I'll describe my idea to push it further.\r\n\r\n\r\n## Idea In-depth\r\nMy plan is to perhaps be able to have a 'Theme Dev Mode' of some sorts where the editor is put into a 'frozen' state (by this, I don't mean a 'Not Responding' state, but rather you can't type, UI actions don't do anything but are toggleable, basically a disabled state) and devs are able to click on various UI elements or scopes to open a pop up detailing all the possible relevant scopes that can be defined.\r\n\r\nThis is similar to the current `Developer: Inspect TM Scopes` but adds in support for UI too, and would be part of the 'live' experience\r\n\r\n## How would this benefit developers\r\nThe original issue stated that it would help theme developers (the live theme idea in general), and I believe this notion. would. boost the efficiency further. Currently many devs probably go to the docs to find their relevant UI scope, but this could be made easier as the pop ups detailed here could also be powered by docs. \r\n\r\n## Issues this specific idea would solve\r\n(relating to this idea, not necessarily the original issue)\r\n\r\n- Time consumed searching for scopes\r\n- Much more friendly towards new devs\r\n\r\n\r\nCons:\r\n- May be hard to implement, though the 'disabled' state is one thatvs started groundwork in the Walkthrough on the Welcome page",
        "createdAt": "2018-11-06 06:26:45",
        "state": "open",
        "number": 62637
    },
    {
        "title": "[scss] rename not working for placeholder selectors",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.28.2\r\n- OS Version: Windows 10\r\n\r\n## Note: this only happens for `.scss` file types, as `.sass` is not supported by VSCode without extensions.\r\n\r\nSteps to Reproduce:\r\n\r\n1. Place cursor over sass placeholder selector\r\n2. Initiate \"Rename Symbol\" command (through command palette, keyboard shortcuts, etc.)\r\n3. Attempt to rename\r\n\r\nAfter completion, the text editor will have renamed the variable throughout the document but removed the leading percent sign in the process. Even this can be dealt with by including a leading percent sign while renaming, it should be considered an issue because when the user does not take the effort to work around this quirk, the behavior of the selector is changed.\r\n\r\nExample:\r\n```sass\r\n%foo {\r\n\t...\r\n}\r\n\r\n.bar {\r\n\t@extends %foo;\r\n}\r\n```\r\n\r\nAttempting to rename `foo` to `foobar` results with this:\r\n\r\n```sass\r\nfoobar {\r\n\t...\r\n}\r\n\r\n.bar {\r\n\t@extends foobar;\r\n}\r\n```\r\n\r\nRather than expected:\r\n\r\n```sass\r\n%foobar {\r\n\t...\r\n}\r\n\r\n.bar {\r\n\t@extends %foobar;\r\n}\r\n```\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2018-11-05 04:34:33",
        "state": "open",
        "number": 62569
    },
    {
        "title": "Support negative filters on text",
        "description": "It seems like attempting to filter out certain text from errors or warnings does not work. Take the following for example:\r\n\r\nFiltering to include a warning:\r\n![](https://i.imgur.com/swIdNNl.png)\r\n\r\nFiltering to exclude the warning:\r\n![](https://i.imgur.com/ZKFful8.png)\r\n\r\nI have also tried using quotes. It seems like the exclude `!` flag does not apply to text.",
        "createdAt": "2018-11-04 04:08:07",
        "state": "open",
        "number": 62531
    },
    {
        "title": "Keyboard Shortcuts Ide Tab and Browser Pdf Shift+Alt+... entries",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nThe Keyboard Shortcuts ide tab [ Ctrl+K Ctrl+S ] and browser pdf [ Ctrl+K Ctrl+R ] references have a bunch of Shift+Alt+... entries.  For whatever mental reason I, and i'm guessing others, find these really confusing given historically we are used to seeing keyboard shortcuts involving use of Shift key listed as Ctrl+Shift+... and Alt+Shift+....  My recommendation here is that the 1/2 dozen Shift+Alt+... entries i'm seeing in these keyboard shortcut references be updated to use the more expected Alt+Shift+... format unless there was an intentional reason for using non-typical ordering.\r\n\r\nVS Code version: Code 1.28.2 (7f3ce96ff4729c91352ae6def877e59c561f4850, 2018-10-17T00:23:51.859Z)\r\nOS version: Windows_NT x64 10.0.17763\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-8650U CPU @ 1.90GHz (8 x 2112)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>rasterization: enabled<br>video_decode: enabled<br>video_encode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Memory (System)|15.85GB (6.41GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (6)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-css-formatter|aes|1.0.1\r\nvbscript|Dar|1.0.4\r\nnightswitch-lite|gha|2.2.1\r\ncsharp|ms-|1.17.0\r\nvsliveshare|ms-|0.3.897\r\nteam|ms-|1.142.0\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-11-02 16:32:23",
        "state": "open",
        "number": 62498
    },
    {
        "title": "[Extension] Is it possible to stop a TreeItem tied to a workspace resource from getting Emphasized?",
        "description": "Sorry if this doesn't belong here, but I already have [a StackOverflow question](https://stackoverflow.com/questions/53094634/stop-treeitem-from-being-emphasized) which no one has helped with. Copied here: \r\n\r\nIn my extension, I have a TreeView where the TreeItems have their `resourceUri` set to point to a folder in the workspace. When I have errors/warnings/etc in those folders, the folder gets Emphasized (turns green/red/etc and gets a dot to the right side), as does the TreeItem that matches it.\r\n\r\nI don't want this behaviour in my TreeView. Is it possible to disable Emphasizing a TreeItem while still setting the `resourceUri` field?",
        "createdAt": "2018-11-02 15:23:45",
        "state": "open",
        "number": 62497
    },
    {
        "title": "Reinstall Language Pack shows neither Restart button nor Info Message",
        "description": "While verifying #60834:\r\n\r\n- Install Japanese Language Pack\r\n- VS Code shows \"Restart\" Info message\r\n- Restart\r\n- Uninstall Japanese Language Pack\r\n- There is only one button: Install. There is nothing that prompts me to switch back to the default display language English, or anything that prompts me to restart.\r\n\r\nHope when a Lang Pack is uninstalled and the display language is configured to use it, a message shows up saying \"The Japanese Language Pack extension is uninstalled. The display language will be changed to English. Please Restart.\".",
        "createdAt": "2018-11-01 19:15:09",
        "state": "open",
        "number": 62405
    },
    {
        "title": "Command Palette should steal focus from active webview...",
        "description": "hey there :wave:\r\n\r\ni ran into a weird one. i have an extension which presents a webview with a number of html button elements. when these buttons are clicked, they often run a command via `executeCommand` which in turn prompts the user via `showInputBox`.\r\n\r\nwhen a user clicks, the button is focused, command is run, and the input box is shown prompting the user to enter some info. they enter text and press the `<enter>` key to submit.\r\n\r\nsince the button on the webview is _still focused_, it receives the `<enter>` key press and re-triggers the command. iow, `<enter>` in the input box is re-routed to the focused html button element.\r\n\r\nideally, focus should be removed from a webview (or any of it's children elements) once the user opens the command palette.\r\n\r\nfor now, i just call `el.blur()` in my webview's event handler which fixes the issue.\r\n\r\n- VSCode Version: v1.28.2\r\n- OS Version: macOS v10.13.6 (high sierra)\r\n",
        "createdAt": "2018-11-01 17:48:31",
        "state": "open",
        "number": 62403
    },
    {
        "title": "[css] Add @media and @supports to CSS breadcrumbs",
        "description": "It would be really useful if the navigation breadcrumbs for css included @media and @supports queries. \r\n\r\nAt the moment, if you are working inside a long media query, there's no easy way to tell aside from scrolling up and manually checking for one.\r\n\r\n![screen shot 2018-10-31 at 3 04 08 pm](https://user-images.githubusercontent.com/182772/47821648-a57d2680-dd1e-11e8-964e-dc654d5ad625.png)\r\n",
        "createdAt": "2018-10-31 22:09:04",
        "state": "open",
        "number": 62333
    },
    {
        "title": "Breadcrumb missing on read-only documents supplied by debug adapter",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nVS Code version: Code 1.28.2 (7f3ce96ff4729c91352ae6def877e59c561f4850, 2018-10-17T00:23:51.859Z)\r\nOS version: Windows_NT x64 10.0.15063\r\n\r\n1. Start debugging something. In my case I am debugging a debug extension written in Typescript, e.g. the mock-debug sample.\r\n2. Use the Pause button to suspend execution at a point where the debug adapter will supply the (read-only) source for display. In my case it was easy to suspend in async_hooks.js.\r\n3. Observe that there's no breadcrumb on the loaded document. Toggling breadcrumb on the View menu has no effect.\r\n4. Set a breakpoint in a source that exists on the local filesystem. Run to that breakpoint and confirm that a breadcrumb appears as expected. Toggling breadcrumb on the View menu works as expected.\r\n\r\nAlso occurs on current 1.29 Insider. I don't recall if the same problem existed in other breadcrumb-enabled versions (i.e. 1.26+).",
        "createdAt": "2018-10-31 14:44:06",
        "state": "open",
        "number": 62290
    },
    {
        "title": "Surface the 'origin and 'presentationHint' attributes of a Source in the Loaded Scripts Explorer",
        "description": "When a Source appears in the CALL STACK panel during debugging, its `presentationHint` modifies the row's appearance, and its `origin` displays on the second line of the hover tip.\r\n\r\nPlease apply `presentationHint` in the same way on the LOADED SCRIPTS panel.\r\n\r\nPlease also surface `origin` there, either by appending in italics (as currently happens in the OPEN EDITORS panel) or as a second line of the hover tip.\r\n",
        "createdAt": "2018-10-31 12:04:54",
        "state": "open",
        "number": 62277
    },
    {
        "title": "[themes] Allow textmate token color customizations to reference existing scope",
        "description": "Allow the ability to reference an existing token\r\n\r\n### Use case\r\n\r\nInstead of needing to have\r\n\r\n```json\r\n  \"editor.tokenColorCustomizations\": {\r\n    \"[Default Dark+]\": {\r\n      \"textMateRules\": [\r\n        {\r\n          \"scope\": \"markup.italic\",\r\n          \"settings\": {\r\n            \"foreground\": \"#dcdcaa\"\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    \"[Default Light+]\": {\r\n      \"textMateRules\": [\r\n        {\r\n          \"scope\": \"markup.italic\",\r\n          \"settings\": {\r\n            \"foreground\": \"#795e26\"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n```\r\n\r\nin which the foreground color is copied from the `support.function` foreground color of each theme and repeating for each theme, something similar to the following:\r\n\r\n```json\r\n  \"editor.tokenColorCustomizations\": {\r\n    \"textMateRules\": [\r\n      {\r\n        \"scope\": \"markup.italic\",\r\n        \"settings\": {\r\n          \"foreground\": {\r\n            \"referenceScope\": \"support.function\",\r\n            \"referenceSetting\": \"foreground\"\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  }\r\n```",
        "createdAt": "2018-10-30 21:21:54",
        "state": "open",
        "number": 62201
    },
    {
        "title": "Add labels/colors for folders",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nAssign colors or labels to any folder, making it easy to identify the most important. Useful for when working with many folders.",
        "createdAt": "2018-10-30 00:36:07",
        "state": "open",
        "number": 62104
    },
    {
        "title": "HTML Auto-indent Does Not Work If Original File Type is PHP",
        "description": "<!-- Please search existing issues to avoid creating duplicates. --> \r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: Version: 1.28.2 (user setup)\r\nCommit: 7f3ce96ff4729c91352ae6def877e59c561f4850\r\nDate: 2018-10-17T00:23:51.859Z\r\nElectron: 2.0.9\r\nChrome: 61.0.3163.100\r\nNode.js: 8.9.3\r\nV8: 6.1.534.41\r\nArchitecture: x64\r\n- OS Version: Windows 7\r\n\r\nSteps to Reproduce:\r\n\r\n1. Create new PHP file\r\n2. Type in div.class, hit tab, hit enter\r\n\r\nCurrent Solution:\r\n\r\nChange file type to HTML, and then back to PHP\r\n\r\nProposed solution: \r\n\r\nIn a file type where HTML tab-completion works, HTML auto-indenting should also work\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Quick Google search did not provide clear instructions on how to perform this in Windows.\r\n",
        "createdAt": "2018-10-29 18:59:28",
        "state": "open",
        "number": 62077
    },
    {
        "title": "User needs to be able to control whether or not the issue report seaches duplicates",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nWe introduced several settings that allow users to control whether or when VS Code talks to online services. They show when searching for `@tag:usesOnlineServices` in the settings editor.\r\n\r\nThere is no way to control online service usage for the issue reporter. Neither a checkbox on the issue reporter nor a setting. There should be one since we don't talk to GH directly.\r\n\r\nVS Code version: Code - Insiders 1.29.0-insider (4626bc0e1b679d555dd6f034ece35ffc394b3bb7, 2018-10-29T06:11:45.152Z)\r\nOS version: Darwin x64 18.0.0\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-10-29 18:49:28",
        "state": "open",
        "number": 62076
    },
    {
        "title": "editor.selectionHighlight causing confusing highlighting noise when searching",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nI'm using the search panel to search for text across an entire workspace. I have case sensitivty and whole word matching enabled. When I move selection through the results in the panel it opens the file containing the result for previewing. Because this selects the text of the current match, editor.selectionHighlight kicks in and highlights all the occurrances of the same text in the file. This doesn't respect the case sensitivity and whole word settings and ends up adding a ton of visual noise within the newly opened editor.\r\n\r\nI'm reasonably certain this has not always happened and is a bug introduced recently. Also, this behavior does not match what happens when searching within a single editor, where spurious highlighting never occurs.\r\n\r\nIdeally, selectionHighlight is disabled while the search panel is open. Or at the very least respects search settings so it isn't destroying the user's ability to see actual search results.\r\n\r\nExpected (selectionHighlight disabled):\r\n![image](https://user-images.githubusercontent.com/484784/47630179-9a4ab080-dafc-11e8-9a3a-defeb244416a.png)\r\n\r\nActual (selectionHighlight enabled):\r\n![image](https://user-images.githubusercontent.com/484784/47630182-9e76ce00-dafc-11e8-9feb-e63f06f2f2d4.png)\r\n\r\nVS Code version: Code 1.28.2 (7f3ce96ff4729c91352ae6def877e59c561f4850, 2018-10-17T00:23:51.859Z)\r\nOS version: Windows_NT x64 10.0.17134\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-4770K CPU @ 3.50GHz (8 x 3492)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>rasterization: enabled<br>video_decode: enabled<br>video_encode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Memory (System)|15.94GB (9.34GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (15)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-npm-script|eg2|0.3.5\r\ntortoise-svn|fan|0.1.1\r\nvsc-space-block-jumper|jmf|1.2.2\r\nLua|key|0.0.9\r\ntheme-monokai-pro-vscode|mon|1.1.8\r\npython|ms-|2018.9.1\r\ncpptools|ms-|0.19.0\r\ncsharp|ms-|1.16.2\r\nGo|ms-|0.6.93\r\nPowerShell|ms-|1.9.0\r\ncode-settings-sync|Sha|3.2.0\r\nshader|sle|1.1.4\r\nAlign|ste|0.2.0\r\nunity-debug|Uni|2.6.6\r\nvscode-todo-highlight|way|1.0.4\r\n\r\n(1 theme extensions excluded)\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-10-29 05:02:03",
        "state": "open",
        "number": 62004
    },
    {
        "title": "Strip trailing whitespace after the cursor when pressing enter",
        "description": "When pressing the enter key, I'd like VSCode's automatic indentation to remove any whitespace directly after the insertion point, so that whatever was after the insertion point on that line ends up correctly indented. Currently, anything after the insertion point is untouched, so the line is not correctly indented and I have to manually delete that extra whitespace.\r\n\r\nFor example, I often have a situation where my cursor is in a line like this:\r\n\r\n![indent1](https://user-images.githubusercontent.com/578731/47612472-754d3380-da51-11e8-9b36-5b549874f801.png)\r\n\r\nWith automatic indentation enabled in VSCode, pressing the enter key results in this:\r\n\r\n![indent2](https://user-images.githubusercontent.com/578731/47612486-a88fc280-da51-11e8-86cf-76c372dae7d8.png)\r\n\r\nBut that whitespace after the cursor is still there, so the indentation isn't actually correct. Other editors I've used (even Visual Studio, if I recall correctly) would give this result instead:\r\n\r\n![indent3](https://user-images.githubusercontent.com/578731/47612474-754d3380-da51-11e8-8fc1-796ea4454aab.png)\r\n",
        "createdAt": "2018-10-28 05:35:58",
        "state": "open",
        "number": 61972
    },
    {
        "title": "Support adding grammars at runtime",
        "description": "Hello!\r\n\r\nI'm the author of [vscode-language-babel](https://github.com/michaelgmcd/vscode-language-babel) and I'd love to be able to support [configurable tagged template literal grammar extensions](https://github.com/gandm/language-babel#javascript-tagged-template-literal-grammar-extensions). In order to do this, I'd need to be able to add grammars based on the users configuration instead of in the `contributes.grammars` field.\r\n\r\nI've noticed the [vscode-textmate](https://github.com/Microsoft/vscode-textmate) library used within vscode has the methods I would need but they don't seem to be public. Would a feature like this be possible to expose to extension authors?",
        "createdAt": "2018-10-27 21:21:55",
        "state": "open",
        "number": 61962
    },
    {
        "title": "Integrated Terminal : Start named session",
        "description": "Although renaming integrated terminal sessions is allowed (#10023), I can't find an easy way to automatically do it when you debug an application. When using \"console\": \"integratedTerminal\" in launch.json, it would be nice to have an \"integratedTerminalName\" attribute available.\r\n\r\nThis is specially useful, since currently is not possible to have multiple debug console windows and when running multi project and need to read each project output on a different window, navigation through the many terminals is hard, and renaming each manually after launching is a very repetitive and hard to do everytime task.",
        "createdAt": "2018-10-26 10:14:28",
        "state": "open",
        "number": 61865
    },
    {
        "title": "Save and import the list of enabled extensions.",
        "description": "\r\nI would like to be able to save the list of my enabled extensions and also be able to load it for a new vscode installation.",
        "createdAt": "2018-10-26 09:43:01",
        "state": "open",
        "number": 61863
    },
    {
        "title": "When you copy a line without any selection the \\n should not be copied",
        "description": "- VSCode Version: 1.28.2\r\n- OS Version: OSX 10.13.6\r\n\r\nrelated bug: https://github.com/Microsoft/vscode/issues/40695\r\n\r\nSteps to Reproduce:\r\n\r\n1. In the editor put cursor on a line and hit CTRL+C.\r\n2. Now go the place you want paste the content and position the cursor in for example in the middle of two parenthesis.\r\n3. Hit CRTL+V. You would expect the content to be pasted in between your two parenthesis. But it will create a new line on top of where you position the cursor and paste the line there. \r\n\r\nThis is the default behavior of IntelliJ and PyCharm and it is really convenient. Copying one line of text generally means only the content of that line no the \\n at the end.\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes. same result without any extensions.\r\n\r\n\r\n",
        "createdAt": "2018-10-26 04:48:42",
        "state": "open",
        "number": 61840
    },
    {
        "title": "Remember previous window size and position per workspace",
        "description": "I use VSCode to develop many projects, require to open many folders in different window in same time.\r\nAgain and again after opened folder in window I need to resize VSCode window and prepare them to previous position.\r\nIf possible I want VSCode can remember previous state of each opened folder.",
        "createdAt": "2018-10-26 02:10:43",
        "state": "open",
        "number": 61838
    },
    {
        "title": "MSIX installer",
        "description": "After 2 years of conversation in issue #10759 (Release in the Windows Store) I think this is the right time to reevaluate the request.\r\n\r\nWhat we originally wanted is all the goodness of UWP lifecycle management (clean install/uninstall and updates received in the background without having to run the app), but now it's possible outside of the Store with MSIX packaging without having to comply with some of the stricter rules of the Store and resource/capability management of UWP apps.\r\n\r\nSo the proposal is simple: **Please make an MSIX installer for VS Code** even if it's not distributed through the Store (for numerous technical reasons).\r\n\r\nAs a first step, Windows 10 users would benefit from it, later, as MSIX is designed to be cross-platform, it can evolve into the only installer format on all platforms (Linux, macOS, Windows 7+) and as the Store evolves, it can be a good foundation to potentially publish VS Code to the Store.",
        "createdAt": "2018-10-25 12:35:28",
        "state": "open",
        "number": 61793
    },
    {
        "title": "Need a shortcut key binging of outline to toggle expanding or folding",
        "description": "It's necessary for me using a shortcut to toggle the outline view.  I think it well be better if it has a key binging to expand the outline when you want to look the code symbol,  and also can folding it when needed.\r\n\r\nBy the way, why the outline view can not be maximize in the side bar when in expanding state ?",
        "createdAt": "2018-10-24 08:55:32",
        "state": "open",
        "number": 61689
    },
    {
        "title": "Make TreeItemHighlights API public",
        "description": "Ref https://github.com/Microsoft/vscode/issues/61313\r\n\r\nThis is the API that allows extension authors to highlight the labels\r\n\r\n",
        "createdAt": "2018-10-23 08:24:32",
        "state": "open",
        "number": 61579
    },
    {
        "title": "When editing css / scss, an option to not inserting blank line within braces.",
        "description": "When editing css / scss file, assume we have this:\r\n\r\n```\r\n.container{}\r\n```\r\n\r\n\r\nIf the cursor is now within the braces and we insert a new line by pressing `Enter`, it becomes this:\r\n\r\n```\r\n.container{\r\n  \r\n}\r\n```\r\n\r\n\r\n\r\nHowever, what I need is an option that it become this (without the blank line) if I press `shift + Enter`:\r\n\r\n```\r\n.container{\r\n}\r\n```\r\n\r\nThis option helps a lot when I added a new nested child class and migrating css properties from parent down to child by swapping the line using `Option + Up / Down` without removing the blank line that vsc added automatically when I insert a new line within the braces in the child class.\r\n\r\nI think it could be used not only in css/scss but all file format indeed.\r\n",
        "createdAt": "2018-10-23 02:17:41",
        "state": "open",
        "number": 61549
    },
    {
        "title": "Task Manager: provide the ability to reuse custom problem matchers",
        "description": "I have several related tasks that share a custom output format.  I'd like to be able to define a problem matcher for this format once and reference it in multiple tasks like I can for built-in matchers, eg. `\"problemMatcher\": \"$my-matcher\"`.",
        "createdAt": "2018-10-22 13:34:59",
        "state": "open",
        "number": 61497
    },
    {
        "title": "Register as an option in Windows' \"Set Default Programs\" screen",
        "description": "Visual Studio Code should register itself as a program available in the Control Panel's \"Set Default Programs\" screen in Windows 7.\r\n\r\n![Windows 7 - Set Default Programs](https://user-images.githubusercontent.com/490651/47293176-ab318880-d609-11e8-86bd-ddae389d55d0.png)\r\n\r\nMost editors are available through there, including VS, but not VS Code. If I want to register it for many extensions, I have to go through each of them manually through the file type association screen, which is *very long*.",
        "createdAt": "2018-10-22 12:49:57",
        "state": "open",
        "number": 61490
    },
    {
        "title": "Interactive Tutorials as Extensions",
        "description": "**Feature Request: Tooling to enable making interactive Tutorials as Extensions**\r\nProvide developers with tooling to design \"getting started\" guided tutorials for various languages and frameworks. These can be made available to users via extensions that can be prompted for in the command pallete, or activated-suggested under certain events.\r\n\r\nUse Case 1: beginners to typescript can take a guided tutorial into the nuances of typescript / node package development after invoking `npm init`. This tutorial could have the user:\r\n* identify / highlight the `package.json` from the files sidebar\r\n* wait until the user clicks to open the file in the sidebar\r\n* highlight portions of the `package.json` (*.json) file, such as the dependencies section\r\n* prompt for and wait until the user adds `typescript` as a dependency to the file\r\n* prompt for and wait until the user invokes a keyboard shortcut \r\n* prompt for and wait until the user invokes a different registered command, such as a command alias for `npm install`\r\n\r\nUse Case 2: newcomers and first-time users to vscode can take a guided tour through the application. It can use the same tooling mentioned above to highlight portions of the workspace to users in a guided tour.",
        "createdAt": "2018-10-21 21:09:15",
        "state": "open",
        "number": 61447
    },
    {
        "title": "TreeItem should support highlights",
        "description": "It would be nice if the tree view supports some kind of highlights in its label. This would be helpful when showing search-result-like things. Maybe something like this\r\n\r\n```\r\nexport class TreeItem {\r\n\r\n  label?: string;\r\n\r\n  // start, end tuples\r\n  labelHighlights?:[number,number][]\r\n}\r\n```\r\n\r\nor something more elaborated that allows to reference a theme color or allows to express the highlighting style (background color or bold text etc)",
        "createdAt": "2018-10-19 12:34:25",
        "state": "open",
        "number": 61313
    },
    {
        "title": "Show Timestamp while Debugging",
        "description": "Geetings,\r\nI am debugging my JavaScript files in VSCode with the ChromeDebugger extension. I recognized that I cant activate timestamps in the DebugConsole in VSCode. \r\nIs it possible to show timestamps like in Chrome DevTools? Or is this a ChromeDebugger extension Feature request?\r\n\r\n**No Timestamps:**\r\n![vscode_notimestamps](https://user-images.githubusercontent.com/24226141/47206346-b9bd3d00-d388-11e8-8d61-85e7d44fa8bf.png)\r\n\r\n\r\n\r\n**Want Timestamps:**\r\n![inkedchromedevtools_withtimestamps_li](https://user-images.githubusercontent.com/24226141/47206551-36e8b200-d389-11e8-88a4-aa14a187d956.jpg)\r\n\r\n",
        "createdAt": "2018-10-19 08:26:11",
        "state": "open",
        "number": 61298
    },
    {
        "title": "Problem matchers should restore problems on close",
        "description": "For a detailed discussion see https://github.com/Microsoft/vscode/issues/47386\r\n\r\nThis branch https://github.com/Microsoft/vscode/tree/dbaeumer/47386 has still the correct start of work.",
        "createdAt": "2018-10-17 13:08:24",
        "state": "open",
        "number": 61140
    },
    {
        "title": "[css] Autocomplete for media queries",
        "description": "VSCode doesn't offer autocompletion for media queries.\r\nWhy is that?\r\n\r\n![2018-10-17_104706](https://user-images.githubusercontent.com/11320080/47071163-8600dc80-d1fb-11e8-8632-7fd7cfbcabd1.jpg)\r\n\r\n",
        "createdAt": "2018-10-17 07:58:26",
        "state": "open",
        "number": 61125
    },
    {
        "title": "Backticks not auto-closing for tagged template literals",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nWhen working with tagged template literals in JS and JSX (styled-components is my use case), the backticks used to auto-close when typed, but that recently changed. The big issue though is that if you go into a multi-line literal, and then try to type the closing backtick, vscode inserts two backticks, leaving you with three.\r\n\r\nFor example if I type:\r\n\r\n```\r\nconst Button = styled.button`\r\n```\r\n\r\nI would expect to have the closing tick automatically inserted and the cursor in between them. Instead it just stops there. If I then go on to enter some css and then manually enter the closing backtick, I get:\r\n\r\n```\r\nconst Button = styled.button`\r\n  background: papayawhip;\r\n  color: green;\r\n``\r\n```\r\n\r\nI then have to manually delete the third backtick, as if I delete the second, the whole pair is deleted because of the auto-close rules.\r\n\r\nI have verified this is happening on Mac and Windows 10, with extensions enabled and disabled, and in the Insiders build.\r\n\r\nVS Code version: Code 1.28.1 (3368db6750222d319c851f6d90eb619d886e08f5, 2018-10-11T18:07:48.477Z)\r\nOS version: Darwin x64 18.0.0\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-7820HQ CPU @ 2.90GHz (8 x 2900)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: enabled<br>rasterization: enabled<br>video_decode: enabled<br>video_encode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|1, 2, 2|\r\n|Memory (System)|16.00GB (0.87GB free)|\r\n|Process Argv|-psn_0_1007862|\r\n|Screen Reader|no|\r\n|VM|17%|\r\n\r\n</details><details><summary>Extensions (20)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nActiveFileInStatusBar|Ros|1.0.3\r\nbetter-comments|aar|2.0.2\r\nbracket-pair-colorizer|Coe|1.0.60\r\nvscode-eslint|dba|1.6.1\r\nes7-react-js-snippets|dsz|1.8.7\r\nprettier-vscode|esb|1.6.1\r\ndotnet-test-explorer|for|0.5.4\r\nvscode-styled-components|jpo|0.0.22\r\nmssql|ms-|1.4.0\r\npython|ms-|2018.9.0\r\ncsharp|ms-|1.16.2\r\nvsliveshare|ms-|0.3.790\r\nindent-rainbow|ode|7.2.4\r\nvscode-docker|Pet|0.3.1\r\nseti-icons|qin|0.1.3\r\ncode-settings-sync|Sha|3.1.2\r\nmdx|sil|0.1.0\r\nvscode-status-bar-format-toggle|tom|1.4.0\r\nvim|vsc|0.16.10\r\nquokka-vscode|Wal|1.0.154\r\n\r\n(3 theme extensions excluded)\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-10-16 18:04:38",
        "state": "open",
        "number": 61070
    },
    {
        "title": "Hide lines with filters instead of just removing from active file or showing in new window",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\nDone, I hope.\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nI am happy with it but I would love a way to \"hide\" lines from the editor such that filters could hide lines leaving only included lines visible and availble for editing. I realize this is getting into Emacs territory. Could use \"folding\" code, maybe? It could be a mode of the Search/Replace dialog. You would need to show in sidebar or status that lines were hidden. I get that this is problematic. Just an idea. \r\n\r\nUse case - filtering down a \"TODO list\" and making bulk edits easier, etc. ",
        "createdAt": "2018-10-15 16:03:53",
        "state": "open",
        "number": 60981
    },
    {
        "title": "Support PowerShell as the default shell on Unix-like platforms",
        "description": "<sup>Migrated and generalized from https://github.com/OmniSharp/omnisharp-vscode/issues/2605</sup>\r\n\r\nIt would be great if Visual Studio Code also supported a Unix configuration where PowerShell (Core) is configured as the user's default shell.\r\n\r\nBelow is an example of where that currently fails: when using an _external_ terminal (as controlled by setting `console\": \"externalTerminal`) for debugging, the debugger-invocation command line assumes a POSIX-like shell on Unix, and submits a command using the latter's syntax, which breaks in PowerShell.\r\n\r\nThere may be other, related cases.\r\n\r\nIn the debugger-invocation case, only a trivial tweak is required to support PowerShell too (see below).\r\n\r\n## Steps to reproduce\r\n\r\n* On a Unix-like platform with PowerShell Core installed, make the latter your default shell as follows: `chsh -s /usr/local/bin/pwsh` (macOS) or `chsh -s /usr/bin/pwsh` (Linux).\r\n\r\n* On Linux, reboot to make the new default shell take effect (not necessary on macOS).\r\n\r\n* Open any C# project in VS Code and debug with a `\".NET Core Launch (console)\"` configuration with setting `\"console\": \"externalTerminal\"`\r\n\r\n## Desired  behavior\r\n\r\nDebugger invocation should succeed.\r\n\r\n## Current behavior\r\n\r\nDebugger invocation fails, because the command line sent to the terminal assumes POSIX-like-shell syntax (e.g., `bash`), which PowerShell doesn't support.\r\n\r\nSample symptom:\r\n\r\n```powershell\r\nPS /Users/jdoe> cd '/Users/jdoe/.vscode/extensions/ms-vscode.csharp-1.16.2/.debugger/';  '/Users/jdoe/.vscode/extensions/ms-vscode.csharp-1.16.2/.debugger/vsdbg' '--interpreter=vscode' '--connection=/var/folders/19/0lxcl7hd63d6fqd813glqppc0000gn/T/CoreFxPipe_vsdbg-ui-9bb838baf07245f591dda2adcfd2536f'\r\nAt line:1 char:155\r\n+ ... -vscode.csharp-1.16.2/.debugger/vsdbg' '--interpreter=vscode' '--conn ...\r\n+                                            ~~~~~~~~~~~~~~~~~~~~~~\r\nUnexpected token ''--interpreter=vscode'' in expression or statement.\r\nAt line:1 char:178\r\n+ ... ter=vscode' '--connection=/var/folders/19/0lxcl7hd63d6fqd813glqppc000 ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nUnexpected token ''--connection=/var/folders/19/0lxcl7hd63d6fqd813glqppc0000gn/T/CoreFxPipe_vsdbg-ui-9bb838baf07245f591dda2adcfd2536f'' in expression or statement.\r\n+ CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException\r\n+ FullyQualifiedErrorId : UnexpectedToken\r\n```\r\n\r\nWith a _quoted_ path to `vsdbg`, the call would have to be prefixed with `&\u00a0`  to make PowerShell happy.\r\n\r\n**A pragmatic workaround would be _not_ to quote the `vsdbg` path, which would make the call succeed in PowerShell too, without special-casing.**\r\n\r\nThis should be safe as long as the user's `$HOME` path has no embedded spaces - something I've never seen in the Unix world.\r\n\r\n",
        "createdAt": "2018-10-15 14:05:43",
        "state": "open",
        "number": 60971
    },
    {
        "title": "Centered layout should be per workbench, not per editor area",
        "description": "With centered editor layout enabled (with or without zen mode), toggling the side bar on/off will resize the sashes. Even though there is enough real-estate for the side bar to show without doing so. To illustrate this behavior, look at the left sash in both these screenshots.\r\n\r\n1.\r\n![1](https://user-images.githubusercontent.com/30827238/46919994-db64a000-cfe7-11e8-8ff8-7d718cf85880.PNG)\r\n\r\n2.\r\n![2](https://user-images.githubusercontent.com/30827238/46919995-de5f9080-cfe7-11e8-98ae-44910a3764db.PNG)\r\n\r\nThis illustrates the \"jumpiness\" when opening the side bar in this scenario. It would be preferable that the sashes were not moved unless needed.",
        "createdAt": "2018-10-14 17:33:26",
        "state": "open",
        "number": 60900
    },
    {
        "title": "editor.acceptSuggestionOnEnter: \"off\" not working in debugging console",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\n`editor.acceptSuggestionOnEnter: \"off\"` doesn't work when I type in debugging console.\r\nIt still insert `FileList` when I type `files` and hit `enter`.\r\nVideo: https://streamable.com/r7zcc\r\n\r\nVS Code version: Code 1.28.1 (3368db6750222d319c851f6d90eb619d886e08f5, 2018-10-11T18:15:15.139Z)\r\nOS version: Windows_NT ia32 10.0.17134\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i5-6500 CPU @ 3.20GHz (4 x 3192)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>rasterization: enabled<br>video_decode: enabled<br>video_encode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Memory (System)|15.96GB (8.37GB free)|\r\n|Process Argv|ffmpeg.js.wasm\\|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (47)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-css-formatter|aes|1.0.1\r\nmarkdown-checkbox|bie|0.1.1\r\nbetter-toml|bun|0.3.2\r\nnpm-intellisense|chr|1.3.0\r\ngitignore|cod|0.5.0\r\nvscode-svgviewer|css|1.4.7\r\nvscode-markdownlint|Dav|0.20.0\r\nvscode-eslint|dba|1.6.0\r\nxml|Dot|2.3.2\r\nEditorConfig|Edi|0.12.5\r\ntslint|eg2|1.0.40\r\nvscode-npm-script|eg2|0.3.5\r\nprettier-vscode|esb|1.6.1\r\nvsc-travis-ci-status|fel|1.1.0\r\ncode-runner|for|0.9.4\r\nterminal|for|0.0.10\r\nvscode-yarn|gam|1.6.0\r\nvscode-pull-request-github|Git|0.2.1\r\nwebpack-snippets|gog|0.0.4\r\nvue-snippets|hol|0.1.9\r\nminify|Hoo|0.3.0\r\nwebpack|jer|2.1.0\r\nnearley|kar|1.0.3\r\nvscode-fix-checksums|leh|1.1.0\r\ng-translate|map|0.0.2\r\ndotenv|mik|1.0.1\r\ntheme-monokai-pro-vscode|mon|1.1.8\r\nvscode-attrs-sorter|mrm|2.1.0\r\nvscode-jade-snippets|mrm|1.0.1\r\nvscode-language-pack-zh-hant|MS-|1.28.2\r\npython|ms-|2018.9.0\r\ncpptools|ms-|0.19.0\r\ndebugger-for-chrome|msj|4.10.2\r\nvetur|oct|0.13.0\r\nmaterial-icon-theme|PKi|3.6.0\r\npolacode|pnp|0.2.2\r\nvscode-graphql|Pri|0.1.5\r\nejs-language-support|Qas|0.0.1\r\nvscode-yaml|red|0.0.17\r\nLiveServer|rit|5.1.1\r\nbackground|sha|1.1.19\r\ncode-settings-sync|Sha|3.1.2\r\nlanguage-stylus|sys|1.10.0\r\nnativescript-xml-snippets|tsv|1.0.7\r\nquokka-vscode|Wal|1.0.153\r\nswig|zhu|0.0.5\r\nvscode-open-in-github|ziy|1.3.6\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-10-14 10:37:30",
        "state": "open",
        "number": 60877
    },
    {
        "title": "Open next build error file+line based on regex parsing of build output.",
        "description": "Edit: The proposed ability to jump to first/next build error should not be part of the \"Problems\" explorer system, since this requires code analysis. **The command should be based solely on regex parsing of the build output, and should work in absence of any language support aka extensions.** I shouldn't have to run 300mb and jvm in the background just to jump to build errors.\r\n\r\nWhen I run a build task to compile my code, I would like a keyboard shortcut that will open the location of the first/next compile error by opening the file and jumping to the line.\r\n\r\nThis command should ignore non build related errors and warning (from linters / intellisense). I am not interested in general VSCode problem noise, I just want to be able to quickly and easily address compile errors. \r\n\r\nIt should start at the first compile error in the terminal, and cycle from there. Basically, just go see how all other editors in the world jump to build errors with a shortcut.....do that.\r\n\r\nIts a pretty basic and necessary feature.\r\n\r\n1. Hit build.\r\n2. Jump to error....\r\n\r\nThe problems view is not adequate.\r\n\r\n**1. It requires the language support plugin to be installed.** This is totally unnecessary, as regex parsing of the build output is simpler, lighter, and tried tested and true.  \r\n\r\n**2 It is more than a single hotkey press.** In sublime when I build, I press a single shortcut to jump to error, then I fix error, I press a single shortcut to jump to next error....rinse and repeat.\r\n\r\nIn VSCode I...\r\n-press a shortcut to focus problems\r\n-I press down to highlight error\r\n-I press ENTER to focus editor and the fix error\r\n-I press shortcut to focus problems view again\r\n\r\nIts so much more work! \r\n\r\n**3. It does not cycle problems in order.** This is important, as when compiling, often the first build error is also causing the subsequent errors.\r\n\r\n\r\n\r\n\r\n\r\n",
        "createdAt": "2018-10-13 19:41:36",
        "state": "open",
        "number": 60851
    },
    {
        "title": "Please provide a \"Delete Record\" button when the path of recent project does not exist.",
        "description": "please provide a \"Delete Record\" button when the \"Path does not exist\" dialog box pops up in the \"Recent\" tab of the initial welcome screen",
        "createdAt": "2018-10-13 04:22:28",
        "state": "open",
        "number": 60821
    },
    {
        "title": "Improve ui/ux when debugging with multiple configurations",
        "description": "I am often debugging both an extension and attaching to an lsp server and I find the current ui/ux frustrating when constantly switching between them. Having to use the dropdown on the Debug sidebar to switch between running the extension vs attaching to the lsp server is imo less than ideal.\r\n\r\nI would love to see something like the following (one or more of them):\r\n1. a way of defining shortcut keys to launch specific configs (ideally per workspace)\r\n1. a way to make a config(s) the default (like tasks) -- so that F5 would ALWAYS run that config, and if there were more than 1 default, it would open a quickpick with the set of defaults (again just like build tasks when you hit Ctrl+Shift+B)\r\n1. in lieu of the default above, another option would be a way to start a launch config without switching the selected launch config -- e.g. I start debugging the extension (so the dropdown is the extension), then I want to attach to the lsp server so I run something like `workbench.action.debug.selectandstart` but it *shouldn't* change the selection. So that when I stop debugging and I hit F5 again, it runs the extension rather than attaching to a not running lsp server.\r\n1. Coupled with the one above, would be nice to be able to have F5, if the debugger wasn't paused (BP or otherwise), open a quickpick of launch configs (not by default, but something that can be made to happen via custom shortcut configuration)\r\n\r\nThoughts?",
        "createdAt": "2018-10-12 20:31:03",
        "state": "open",
        "number": 60810
    },
    {
        "title": "nextMatchFindAction inherits addSelectionToNextFindMatch match word setting",
        "description": "I would like to have a setting which would enable _nextMatchFindAction_ to inherit the matchCase+matchWord of the  addSelectionToNextFindMatch (ctrl+d) command.\r\n\r\nSomething like... **findActionInheritsSelectionMatchWord**.\r\n\r\n**Current Behaviour:**\r\n\r\nThe _addSelectionToNextFindMatch_ command automatically sets the matchCase&matchWord settings, based on the selection type.\r\n\r\n**Example A1**\r\n1-press ctrl+d _addSelectionToNextFindMatch_ with the caret at the front of the word to select the word.\r\n2-press ctrl+d _addSelectionToNextFindMatch_  again. The matchCase&matchWord are automatically turned on for this second ctrl+d.\r\n\r\n**Example A2**\r\n1-select a word by any means other than ctrl+d _addSelectionToNextFindMatch_. (ctrl+shift+left\\right)\r\n2-press ctrl+d _addSelectionToNextFindMatch_ . The matchCase&matchWord are automatically turned off for this second ctrl+d.\r\n\r\nI would like the exact same behavior, but with the second step based on nextMatchFindAction. Observe...\r\n\r\n**Proposed Behaviour:**\r\n\r\n**Example B1**\r\n1-press ctrl+d _addSelectionToNextFindMatch_ with the caret at the front of the word to select the word.\r\n2-press F3 _nextMatchFindAction_. The matchCase&matchWord are automatically turned on for this _nextMatchFindAction_.\r\n\r\n**Example B2**\r\n1-select a word by any means other than ctrl+d _addSelectionToNextFindMatch_. (ctrl+shift+left\\right)\r\n2-press F3 _nextMatchFindAction_. The matchCase&matchWord are automatically turned off for this second _nextMatchFindAction_.\r\n\r\nThe command _moveSelectionToNextFindMatch_ might be suggested, but it does not solve my problem, since it does not remember the last search term.\r\n\r\nFor example...\r\n\r\n**Example C1**\r\n1-I press ctrl+d to select a whole variable.\r\n2-I press F3 a bunch of times to observe how variable is used (say view the first 10 of 20 instances.\r\n3-I then stop and type in some code, removing any selection.\r\n4-I then press F3 again, to pick up where I left off browsing through all uses of a variable (second 10 instances.\r\n\r\nIn this example _moveSelectionToNextFindMatch_ fails, since I removed by selection at step 3, and at step 4 nothing will happen. I would have to navigate back to the instance of a variable, and re-initiate the selection.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "createdAt": "2018-10-12 03:22:18",
        "state": "open",
        "number": 60721
    },
    {
        "title": "[folding] show folding actions at the end of folding range as well",
        "description": "This is for C# but may affect others I'm not sure:\r\nHaving a large complex code block and wanting to fold it requires always scrolling to the top of the region to collapse it.  There should be an identical folding icon that allows to fold from the bottom of the region.",
        "createdAt": "2018-10-11 17:56:43",
        "state": "open",
        "number": 60670
    },
    {
        "title": "SCM: Option for gutter decoration ignore whitespace",
        "description": "The whitespaces are shown as changes in gutter decoration in editors:\r\n\r\n![image](https://user-images.githubusercontent.com/880459/46783945-cb865b00-cd5e-11e8-8acd-ab7d574f2a2a.png)\r\n\r\nI usually use `git diff -w` in the daily work and think it'll be great if there's an option for ignoring whitespace changes.\r\n\r\nI've only found the setting diffEditor.ignoreTrimWhitespace which seems like it is only worked for Diff Editor not for Editors.",
        "createdAt": "2018-10-11 06:10:18",
        "state": "open",
        "number": 60594
    },
    {
        "title": "[html] proper support of XHTML",
        "description": "XHTML is parsed as HTML rather than as XML, which causes various issues:\r\n\r\n- Self closing tags are not allowed, except for elements which in HTML are void elements.\r\n- Elements which in HTML are void elements are allowed to be unclosed, and are unclosed by default.\r\n- Elements which in HTML are void elements are not allowed to have a separate close tag.\r\n- Attribute values are allowed to be omitted or unquoted.",
        "createdAt": "2018-10-10 09:33:31",
        "state": "open",
        "number": 60489
    },
    {
        "title": "Git: support HEAD <> working tree changes in gutter",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nI'd like to see staged changes as well as unstaged changes in the gutter. Currently, VS Code only shows unstaged changes, at least when using Git.\r\n\r\nUnstaged changes: \r\n<img width=\"131\" alt=\"fikcx\" src=\"https://user-images.githubusercontent.com/103690/46696912-635e3a80-cbe1-11e8-97d4-287bc37bcfcd.png\">\r\n\r\nStaged changes:\r\n<img width=\"128\" alt=\"b6y38\" src=\"https://user-images.githubusercontent.com/103690/46696925-68bb8500-cbe1-11e8-96bb-cd074c8648ea.png\">\r\n\r\nSee https://stackoverflow.com/questions/48881124/can-i-make-visual-studio-code-highlight-staged-changes as well as https://github.com/eamodio/vscode-gitlens/issues/396 .\r\n\r\nVS Code version: Code 1.28.0 (431ef9da3cf88a7e164f9d33bf62695e07c6c2a9, 2018-10-04T16:40:40.180Z)\r\nOS version: Darwin x64 16.7.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-10-09 20:36:51",
        "state": "open",
        "number": 60389
    },
    {
        "title": "Show/log which extension has thrown an exception",
        "description": "pls see https://github.com/Microsoft/vscode/issues/60046. When we catch the extension in the provideHover API call then we can know which extension is handling the call and we could report this to the user.",
        "createdAt": "2018-10-09 14:23:36",
        "state": "open",
        "number": 60321
    },
    {
        "title": "Ability to customise size of a custom view",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nThe problem is that the Favorites side panel is growing in height after I close open files. Closing the files makes Open Editors side panel smaller, but should increase the height of the project view side panel not the height of Favorites. I know the Favorites panel comes from an extension, I am not sure if this should be reported there, or here.\r\nIs there a way to freeze the height of a side panel?\r\n\r\nhttps://www.useloom.com/share/ebc8bbb2c51540dc92dbe20dabd454da\r\n\r\nThank you.\r\n\r\nVS Code version: Code 1.28.0 (431ef9da3cf88a7e164f9d33bf62695e07c6c2a9, 2018-10-04T16:47:36.731Z)\r\nOS version: Windows_NT ia32 10.0.17134\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-7500U CPU @ 2.70GHz (4 x 2904)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>rasterization: enabled<br>video_decode: enabled<br>video_encode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Memory (System)|15.87GB (7.58GB free)|\r\n|Process Argv||\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (8)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nbracket-pair-colorizer|Coe|1.0.60\r\nvscode-eslint|dba|1.6.0\r\nEditorConfig|Edi|0.12.4\r\nprettier-vscode|esb|1.6.1\r\nauto-close-tag|for|0.5.6\r\nfavorites|kdc|1.9.8\r\nvetur|oct|0.13.0\r\nlanguage-stylus|sys|1.10.0\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-10-09 09:06:01",
        "state": "open",
        "number": 60266
    },
    {
        "title": "Add selectionBackground defaults",
        "description": "The selectionBackground color token controls the background color of text selection outside of the editor. So this affects text in native input elements like search, selecting text in the debug console, settings editor, other places. If one isn't defined, it comes from the OS and is different between macOS and windows. Maybe the OS picks different colors in some scenarios, like for different windows themes.\r\n\r\ne.g. in Dark+\r\n\r\nMacOS\r\n\r\n![image](https://user-images.githubusercontent.com/323878/46511718-08a19900-c805-11e8-8452-f6789b3e4fc2.png)\r\n\r\nWindows\r\n\r\n![image](https://user-images.githubusercontent.com/323878/46511726-1820e200-c805-11e8-9322-94f11dd12115.png)\r\n\r\nI think that adding defaults for this token would be a good idea just so it looks consistent. It's also an issue for editor instances pretending to be input boxes - the settings and extensions input boxes that use the suggest widget. If selectionBackground isn't configured, they don't know the native selection color and fall back on the editor selection background which doesn't always look good in that context, so setting a default selectionBackground will make those input consistent with the native inputs. But maybe people like the native text selection look?\r\n\r\n@misolori \r\n@Tyriar \r\n?",
        "createdAt": "2018-10-08 21:30:18",
        "state": "open",
        "number": 60198
    },
    {
        "title": "vscodebot not helpful",
        "description": "I opened a new issue regarding the failure of VS Code to automatically upgrade. I was advised by vscodebot that a number of similar issues were raised. Having visited each so called answer, I was still left with the question - why isn't VS Code automatically upgrading? I appears that vscodebot is too aggressive and rather than point to an answer, just dumps junk answers.  It needs to be fixed and my question needs to be answered!\r\n",
        "createdAt": "2018-10-08 19:30:55",
        "state": "open",
        "number": 60186
    },
    {
        "title": "Is there a way for an extension to prompt to install another extension?",
        "description": "We're considering moving some functionality from the Dart extension into the Flutter one (which is currently essentially empty with a dependency on Dart). We'd like to be able to prompt users to install the Flutter extension if they open a Flutter project with only the Dart extension installed.\r\n\r\nI saw `workbench.extensions.action.showExtensionsWithId` in the source, but I was unable to make it work. I was also unable to find a way to pass `vscode:extension/Dart-Code.flutter` to the `vscode.open` command.\r\n\r\nIs there a way to have a button in a notification that would take the user to the marketplace view for an extension to allow the user to easily install it?",
        "createdAt": "2018-10-08 11:16:45",
        "state": "open",
        "number": 60135
    },
    {
        "title": "Add multiple task.json configuration files",
        "description": "Is there a current way to have multiple `launch.json` or `tasks.json` files?\r\n\r\nIt would be really nice to be able to have a user's custom launch.json/tasks.json for workspaces so that we could have our `.vscode` folder under version control so everyone has the same copy of the standard tasks/debug configurations while working on the project, but they could also have their own tasks/debug configurations without committing them or having unstaged changes floating around.",
        "createdAt": "2018-10-05 18:56:54",
        "state": "open",
        "number": 60043
    },
    {
        "title": "Optional fine-grained control over file-type registration",
        "description": "The installation option to register code as an editor for supported types is detrimental to scripting languages such as Python. A similar problem is faced by tools like archivers (e.g winrar), music players, etc, which provide an advanced option that lets the user decide which types will be registered.\r\n\r\nUnfortunately, for many users, this will be an after-the-fact discovery that is seemingly hard to recover from; having a means of restoring the prior handlers seems like it would be incredibly useful.",
        "createdAt": "2018-10-05 17:13:32",
        "state": "open",
        "number": 60038
    },
    {
        "title": "Provide context to format provider so it knows whether a format came from a save request/manual invocation",
        "description": "I have users that need to disable format-on-save for some sub-tree within their project. Since they can't put settings in sub-folders (without making them workspace folders, which duplicates them at the top - see https://github.com/Microsoft/vscode/issues/45470) my plan is to implement a setting where they can configure a list of files (patterns, like `files.exclude`) to exclude from formatting.\r\n\r\nHowever, it'd be bette if we could exclude them from *automatic* formatting without making explicit format requests silently fail. Currently it doesn't seem like the format provider is given enough information for this.\r\n",
        "createdAt": "2018-10-04 08:24:59",
        "state": "open",
        "number": 59953
    },
    {
        "title": "Stabilize findTextInFiles API",
        "description": "Depends on\r\n\r\n- #59919\r\n- #59458",
        "createdAt": "2018-10-03 18:41:54",
        "state": "open",
        "number": 59924
    },
    {
        "title": "Stabilize TextSearchProvider API",
        "description": "Master issue to track stabilizing the TextSearchProvider extension API...\r\n\r\nForked from #47058 \r\n\r\nDepends on\r\n- #59919\r\n- #59458",
        "createdAt": "2018-10-03 18:39:00",
        "state": "open",
        "number": 59921
    },
    {
        "title": "icons for QuickPickItem",
        "description": "It would be great if the QuickPickItem also can specify an icon as well as a file icon from the file icon themes.\r\n",
        "createdAt": "2018-10-02 13:52:30",
        "state": "open",
        "number": 59826
    },
    {
        "title": "Update: Add progress to update download operation",
        "description": "When on a slower connection (either client or server), it's impossible to tell at what stage the \"Downloading Update...\" is at, which leads you to think it may be stuck. \r\n\r\n<img width=\"56\" alt=\"image\" src=\"https://user-images.githubusercontent.com/35271042/46325383-d564cd00-c5ac-11e8-92b4-ccc702069fc2.png\">\r\n<img width=\"201\" alt=\"image\" src=\"https://user-images.githubusercontent.com/35271042/46325378-d138af80-c5ac-11e8-86c6-f47fc8c3890f.png\">\r\n\r\n\r\n\r\nAt the minimum we should show a percentage to show progress, like `Downloading Update...72%`",
        "createdAt": "2018-10-02 02:05:49",
        "state": "open",
        "number": 59802
    },
    {
        "title": "[scss] No autocomplete for built-in functions inside maps",
        "description": "Issue Type: <b>Bug</b>\r\n\r\n```sass\r\n$something: #fff;\r\n$map: (\r\n    key: transparentize($something, 0.4),\r\n);\r\n```\r\nThere is no autocomplete for `transparentize` and some other functions (`mix`, `lighten`, `darken`, `red`, `rgb`, `saturate` ...)  inside the map definition.\r\n\r\n---\r\nVS Code version: Code - Insiders 1.28.0-insider (caaa5369cb4d22b7481e6ff97252cf92937709eb, 2018-09-28T05:18:20.266Z)\r\nOS version: Windows_NT x64 10.0.17134\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-09-29 19:36:27",
        "state": "open",
        "number": 59678
    },
    {
        "title": "[folding] clicking on on line number of folded line should select full folding range",
        "description": "Issue Type: <b>Bug</b>\r\n1. Fold an area (e.g. a block in JSON) to a line\r\n2. Click the margin of the folded line\r\n3. Try to drag the mouse to select the whole folded area\r\n\r\n**Expected**:\r\nCan select (only) the whole folded area\r\n\r\n**Actual**:\r\nIt's either the first line of folded area, or the whole folded area **and** next line.\r\n\r\nOther editors do not have this problem, but the solutions are different:\r\n- Visual Studio: The whole folded area is selected when you click the margin\r\n- Sublime Text: When you drag down, it expands the selection from first line to the whole folded area. If you keep dragging, it will expand the selection to include next line.\r\n\r\n**Workaround**:\r\nClick the beginning of the folded line, drag to the beginning of the next line. It works, but requires much more mouse precision than clicking/dragging in margin area.\r\n\r\n**Suggestion**:\r\nA simple question: how often do you want to select **only** the first line when you click the margin of **folded** area? I believe it's very rare, so Visual Studio's solution is desired.\r\n\r\nVS Code version: Code 1.27.2 (f46c4c469d6e6d8c46f268d1553c5dc4b475840f, 2018-09-12T16:17:45.060Z)\r\nOS version: Windows_NT x64 10.0.17134\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-8705G CPU @ 3.10GHz (8 x 3096)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>rasterization: enabled<br>video_decode: enabled<br>video_encode: enabled<br>webgl: enabled<br>webgl2: unavailable_off|\r\n|Memory (System)|15.85GB (4.97GB free)|\r\n|Process Argv|C:\\Program Files\\Microsoft VS Code\\Code.exe D:\\Repos\\modern\\NovaApi|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-09-28 23:37:49",
        "state": "open",
        "number": 59657
    },
    {
        "title": "Button in Find/Replace to swap the content of the text boxes",
        "description": "Suggestion: Add a button in the \"Find and Replace\" dialog box that swaps the text in the two boxes.\r\n\r\nI use VS Code as my general purpose text editor, and I will often do the following operation:\r\n\r\n1. Find and replace a separator value with newline\r\n2. Modify the text (adding lines, removing lines, modifying lines with column select)\r\n3. Find and replace newline with a separator value\r\n\r\nThis is particularly handy when working with system PATH values on Windows, or editing CSV files.  However, when I want to perform step 3, I have to delete the text in both boxes and re-type them.  If a button to swap the text existed, it would reduce this operation down to a single click.",
        "createdAt": "2018-09-28 20:54:28",
        "state": "open",
        "number": 59652
    },
    {
        "title": "Git: Offer to clean workspace when checkout fails due to dirty working tree",
        "description": "When doing a checkout in vscode and there are local changes in current branch, vscode shows the following dialog:\r\n\r\n![screen 1](https://user-images.githubusercontent.com/184472/46197053-bb5f8c00-c319-11e8-8dc0-5f9719948e3a.png)\r\n\r\nI think vscode can be smarter here and show the list of actual files that need to be committed or discarded and also offer some useful actions. Here is an example of how webstorm handles the same situation:\r\n\r\n![screen 2](https://user-images.githubusercontent.com/184472/46197171-0a0d2600-c31a-11e8-92c9-9d38cc60af78.png)\r\n\r\nHere is the list (probably not complete) of things I can do from that dialog. It would be nice to be able to do same things from vscode.\r\n\r\n* Force Checkout - Ignore current changes and checkout to the branch.\r\n* Smart Checkout - quote from jetbrains website: \"shows the files preventing checkout and offers to stash local changes, checkout the branch, and then unstash changes back. If a conflict happens during unstash, merge dialog is shown.\"\r\n* Don't Checkout - just close the dialog and do nothing.\r\n* See the diff of individual modified files by double clicking (or from context menu). This would open vscode built in diff editor for that file to see the changes.\r\n* Revert individual files from the list from context menu:\r\n\r\n![screen 3](https://user-images.githubusercontent.com/184472/46197503-1a71d080-c31b-11e8-9654-cfb7789c9c90.png)\r\n\r\n",
        "createdAt": "2018-09-28 08:39:59",
        "state": "open",
        "number": 59600
    },
    {
        "title": "Breadcrumbs enhance-> double click change the edit state ",
        "description": "Hi,\r\nWaiting for this wonderful feature comes in about the Breadcrumbs.\r\n\r\nnow the Breadcrumbs is like this:\r\n![image](https://user-images.githubusercontent.com/24240963/46183679-901e7200-c304-11e8-978f-75289a339b98.png)\r\n\r\nIf I double click this specific room and it will change to the edit state that make me be able to copy the path or manually modify the path and jump when out of focus (will remain unchanged if it does not exist).\r\n\r\nI think this is more convenience way that I can get the path than others and more selective for quickly jump to anther file.\r\n\r\nbelow is the edit state I am support to:\r\n```\r\nsrc/models/TodoModel.js( #method | $property )\r\n\r\n\r\n// more config for this feature will make better, like this\r\n\r\n// ( configName: type:default  -- notation )\r\n// isShowAbsolutePath: boolean:false -- is showing the absolute path when the Breadcrumbs is edit \r\nstate.\r\n// isShowSuffix: boolean:true  -- is showing the previously cursor indicate the file (method / property...) when the Breadcrumbs is edit \r\n```\r\n\r\nThank you for consider this.\r\n\r\n",
        "createdAt": "2018-09-28 02:17:14",
        "state": "open",
        "number": 59590
    },
    {
        "title": "[html] support less syntax in html file",
        "description": "For my information, it seems like vscode doesn't support less and sass in html file, so can we make an extensions to support it?\r\n\r\nsome thing like this:\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n    <title>Document</title>\r\n    **<style lang=\"less\">\r\n        .a {\r\n          width: 200px;\r\n          background-color: #af1b3b;\r\n\r\n          .box {\r\n                flex-direction: column;\r\n                justify-content: center;\r\n                align-items: center;\r\n            }\r\n        }\r\n    </style>**\r\n</head>\r\n<body>\r\n\r\n</body>\r\n</html>\r\n```",
        "createdAt": "2018-09-26 08:48:51",
        "state": "open",
        "number": 59445
    },
    {
        "title": "Extend tasks API to allow programmatic problem matching",
        "description": "The new tasks APIs (fetchTask(), executeTask(), task events...) makes it more convenient to use vscode's own task system to spawn child process (as opposed to using something like `child_process`, for example). Still, AFAICT, there are two bits missing in the API:\r\n\r\n1. A method to get the underlying `Terminal` instance of a running task (maybe through `TaskExecution`?);\r\n\r\n2. Events that would be fired whenever something is written in the process' stdout/stderr (that would probably go in the `Terminal` instance itself)\r\n\r\nThis would be very useful to implement UI feedback (i.e progess notifications) while using vscode's task system. Right now, the only way I see to do that is to spawn my own proces, create an output channel and handle problem matching myself...\r\n\r\nDoes that make sense?",
        "createdAt": "2018-09-25 12:52:23",
        "state": "open",
        "number": 59337
    },
    {
        "title": "ModuleEvent raised by Debug Adapter has no effect",
        "description": "- VSCode Version: 1.27.2\r\n- OS Version: Windows 10, x64\r\n\r\nSteps to Reproduce:\r\n\r\n1. Create a Debug Adapter extension, or modify vscode-mock-debug sample\r\n2. Set supportsModulesRequest = true in initializeRequest\r\n3. Implement modulesRequest\r\n4. Implement a way of raising a ModuleEvent with reason=\"new\", for example in the REPL loop's call to evaluateRequest\r\n5. Set a breakpoint in your modulesRequest\r\n6. Test the extension. Trigger the ModuleEvent. The breakpoint in modulesRequest isn't hit. Nor is there any visible change to the VSCode UI\r\n\r\nI guess it's possible that VSCode doesn't yet make use of the Module capabilities of the DA protocol.\r\n",
        "createdAt": "2018-09-25 11:31:26",
        "state": "open",
        "number": 59329
    },
    {
        "title": "Show full line in search results",
        "description": "After updating to 1.27.2 (I don't know the exact prior version I was on), search results only show a very small part of the line that the result is in. I can only assume that this change was intentional, so I'm filing this as a feature request: \r\n\r\nPlease add an option to show the full line of each search result \u2014 I need more context to judge which search result is the one I'm looking for. It can be very confusing to not even see the beginning of the line. (There are people asking about this on StackOverflow already: https://stackoverflow.com/questions/52488545/show-full-line-in-search-results)\r\n\r\nAlternatively, it would be great to optionally show even more context (i.e. lines above and below the search result) similar to what Sublime Text does.\r\n\r\n",
        "createdAt": "2018-09-25 09:20:16",
        "state": "open",
        "number": 59310
    },
    {
        "title": "SCM: Support to automatically change active provider based on current open file",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nIn case I've created and opened a `workspace`, I think it'd be better `vscode` change the source control providers according to the currently active directory.",
        "createdAt": "2018-09-24 08:06:00",
        "state": "open",
        "number": 59215
    },
    {
        "title": "Allow for block relation line colors.",
        "description": "I am trying to see if you can update the colors for each block relation line. Similar to how [Bracket Pair Colorizer](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer) extention works when coding JS in VSCode. Nothing is more annoying than tracking the same color line down. As you can see in the pic they are all light gray. It would be nice to have a couple different colors... like grandparent = light green, parent light blue, child light red - repeat down or the option to put 3 colors of your choice in.\r\n\r\nStackoverflow - https://stackoverflow.com/questions/52415082/how-can-you-change-the-block-relation-line-colors-in-vs-code?noredirect=1#comment91776609_52415082\r\n\r\n<img width=\"158\" alt=\"esili\" src=\"https://user-images.githubusercontent.com/31771611/45824332-62f31380-bcb5-11e8-8cf8-e73b8414273b.png\">",
        "createdAt": "2018-09-20 14:15:29",
        "state": "open",
        "number": 59043
    },
    {
        "title": "Feature request: advance cursor to the next line of code",
        "description": "I currently have a macro set up to run the current line or select, and move the cursor down one line. However, sometimes the next line is blank, only has an indentation, or is commented. I'd like the ability to advance instantly to the next line which has code that can actually be run.",
        "createdAt": "2018-09-20 02:26:00",
        "state": "open",
        "number": 59002
    },
    {
        "title": "Settings UI - Not Showing Language Specific fields",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nUser settings JSON:\r\n```\r\n  \"[javascript]\": {\r\n    \"editor.tabSize\": 2,\r\n    \"editor.insertSpaces\": true\r\n  },\r\n  \"[php]\": {\r\n    \"editor.tabSize\": 2,\r\n    \"editor.insertSpaces\": true\r\n  },\r\n```\r\n\r\nSettings UI - Not showing language specific fields at all. Just a general tab size. \r\n![image](https://user-images.githubusercontent.com/14123790/45788139-da806d00-bccc-11e8-9116-363f783295c6.png)\r\n\r\nVS Code version: Code 1.27.2 (f46c4c469d6e6d8c46f268d1553c5dc4b475840f, 2018-09-12T07:04:11.329Z)\r\nOS version: Darwin x64 16.7.0\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-4870HQ CPU @ 2.50GHz (8 x 2500)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: enabled<br>rasterization: enabled<br>video_decode: enabled<br>video_encode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|3, 2, 2|\r\n|Memory (System)|16.00GB (0.82GB free)|\r\n|Process Argv|/Applications/Visual Studio Code.app/Contents/MacOS/Electron .|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (15)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nhtml-css-class-completion|Zig|1.17.1\r\nhtml-snippets|abu|0.2.1\r\nsilverstripe|adr|0.0.5\r\nvscode-sqlite|ale|0.3.1\r\nvscode-intelephense-client|bme|0.8.8\r\nnpm-intellisense|chr|1.3.0\r\nvscode-eslint|dba|1.6.0\r\ngitlens|eam|8.5.6\r\nprettier-vscode|esb|1.6.1\r\ngraphql-for-vscode|kum|1.12.1\r\nphp-import-checker|mar|0.1.3\r\nphp-namespace-resolver|Meh|1.1.0\r\nvetur|oct|0.12.6\r\nhighlight-matching-tag|vin|0.4.4\r\nReactSnippets|xab|2.2.0\r\n\r\n(1 theme extensions excluded)\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-09-20 00:01:43",
        "state": "open",
        "number": 58995
    },
    {
        "title": "Relative problem paths don't take `cwd` into account",
        "description": "From https://github.com/Microsoft/vscode-cpptools/issues/2518\r\nby @galgalesh \r\n--------------------------------------------------------\r\n\r\n**Type: LanguageService**\r\n<!----- Input information below ----->\r\n\r\n<!--\r\n**Please review existing issues and our documentation at https://github.com/Microsoft/vscode-cpptools/tree/master/Documentation prior to filing an issue.**\r\n-->\r\n\r\n**Describe the bug**\r\n- OS and Version: Ubuntu 18.04\r\n- VS Code Version:  1.27.1 5944e81f3c46a3938a82c701f96d7a59b074cfdc x64\r\n- C/C++ Extension Version: 0.18.1\r\n- Other extensions you installed (and if the issue persists after disabling them):\r\n- A clear and concise description of what the bug is.\r\n\r\nThe problemMatcher doesn't take the `cwd` of a task into account when resolving relative paths.\r\n\r\n**To Reproduce**\r\n<!-- Steps to reproduce the behavior: -->\r\n<!-- *The most actionable issue reports include a code sample including configuration files such as c_cpp_properties.json* -->\r\n\r\nCreate a task and set the `cwd` of that task to a different path.\r\n\r\n**Expected behavior**\r\n\r\nThe problemMatcher resolves relative paths as relative to `cwd`. If you set the `cwd` of a task, relative paths will most likely be relative to the `cwd`, not to the workspaceFolder.\r\n\r\n**Behavior I get**\r\n\r\nThe problemMatcher resolves relative paths as relative to `workspaceFolder`\r\n\r\nFollowing is the `tasks.json` for such a task. The line starting with ` \"fileLocation\"` shouldn't be neccisary.\r\n\r\n```\r\n        {\r\n            \"label\": \"build adfgxx\",\r\n            \"type\": \"shell\",\r\n            \"command\": \"ninja\",\r\n            \"args\": [\r\n            ],\r\n            \"group\": {\r\n                \"kind\": \"build\",\r\n                \"isDefault\": true\r\n            },\r\n            \"problemMatcher\": {\r\n                \"base\": \"$gcc\",\r\n                // The next line shouldn't be needed since it is the same value as `cwd`\r\n                \"fileLocation\" : [\"relative\", \"${workspaceFolder}/builddir\"]\r\n            },\r\n            \"options\": {\r\n                \"cwd\": \"${workspaceFolder}/builddir\",\r\n            }\r\n        }\r\n```\r\n\r\n\r\n**Additional context**\r\n<!--\r\n*Call Stacks: For bugs like crashes, deadlocks, infinite loops, etc. that we are not able to repro and for which the call stack may be useful, please attach a debugger and/or create a dmp and provide the call stacks. Starting with 0.17.3, Windows binaries have symbols available in VS Code by setting your \"symbolSearchPath\" to \"http://msdl.microsoft.com/download/symbols\".*\r\nAdd any other context about the problem here including log messages in your Output window (\"C_Cpp.loggingLevel\": \"Debug\" in settings.json).\r\n-->\r\n",
        "createdAt": "2018-09-19 21:00:05",
        "state": "open",
        "number": 58980
    },
    {
        "title": "Run task in external terminal",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nJust like the launch.json supports the ability to host the application, i would like to be able to host my tasks in an external console window. Some console workloads i have are to heavy for xTerm.js and the ability to accidentally kill one of those processes when killing terminal processes with the trash can button is a little bit annoying.\r\n\r\nVS Code version: Code - Insiders 1.28.0-insider (cd9d71a31f731baf17330a84448c3efdeabc873f, 2018-09-17T05:20:06.620Z)\r\nOS version: Windows_NT x64 10.0.17134\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-09-17 08:10:48",
        "state": "open",
        "number": 58790
    },
    {
        "title": "feature request: \"locking\" a text buffer",
        "description": "Summary:\r\nFeature Idea: allow to specify a buffer's (start, end) so that  text operations work on a specific \"locked\" text buffer\r\n\r\nDescription:\r\nI think it's a good idea: allow to lock a certain text region or buffer, so when I do search replace and other operations like renaming, or really any of the many extensions, the operations will work on only that part, leaving the rest of the file unchanged.\r\nAn example is a long file, where we have a short text to replace, but the replace value changes according to context. for example in a long file that has code for an entire namespace, I am adding a self variable to all the functions, yet the type changes frequently (other classes are being defined). So I would like operations to have an effect only in that delimited area.\r\n\r\nit's like extending the idea of \"selection\". the find widget can work only within the selection. I would like all operations to be restricted, when I specify such a region. \r\n\r\nWhat do you think?\r\n\r\nPS: vscode is awesome. it's my programming editor of choice.",
        "createdAt": "2018-09-16 11:21:42",
        "state": "open",
        "number": 58764
    },
    {
        "title": "[folding] editor.showFoldingControls: never",
        "description": "`editor.showFoldingControls` only allows for \"always\" and \"mouseover\". It would be nice if we could disable it entirely.\r\n\r\nThe only way to remove the controls (and save space in the editor) is to set `\"editor.folding\": false`. However, this will also disable the keyboard shortcuts for folding.\r\n\r\nPreferably, we could disable the UI controls (saving space in the editor by decreasing the gutter width), while still being able to use the keyboard shortcuts.\r\n\r\nUI controls are not necessary for simple folding (fold imports, fold a method, etc.).",
        "createdAt": "2018-09-14 17:14:26",
        "state": "open",
        "number": 58708
    },
    {
        "title": "copy the exact path from the new breadcrumbs",
        "description": "It would be really great if we can copy and share the breadcrumbs generated a \r\npath, so we can save a huge time when we work as a team, as we can refer to the exact point of (issue or function) we need to work on next\r\n\r\n![screen shot 2018-09-14 at 10 45 22 am](https://user-images.githubusercontent.com/15789257/45540116-e15e3a00-b80b-11e8-8ab9-9b136c9c4581.png)\r\n",
        "createdAt": "2018-09-14 08:49:53",
        "state": "open",
        "number": 58678
    },
    {
        "title": "[folding] go to region command",
        "description": "So if we have the ctrl + g to go to line, how about we have a shortcut that will allow us to go to certain region in our code?",
        "createdAt": "2018-09-14 04:02:11",
        "state": "open",
        "number": 58658
    },
    {
        "title": "Problem reporter -- promote/advertise that it works for extension repos",
        "description": "I just found out today that the problem reporter supports filing issues against extensions as well as vscode! I think it would be awesome to promote this ability in the UI -- maybe under the \ud83d\ude04 menu? Or a new command `Help: Report an Extension Issue`. I think something along these lines would be valuable to extensions.",
        "createdAt": "2018-09-13 21:57:49",
        "state": "open",
        "number": 58643
    },
    {
        "title": "Open settings editor from link with URI handler",
        "description": "It could be useful if users could click a link in docs to open vscode with the settings editor navigated to some setting.",
        "createdAt": "2018-09-13 21:11:58",
        "state": "open",
        "number": 58641
    },
    {
        "title": "Pending extension updates don't show as a badge (counter) on the Extensions sidebar icon",
        "description": "<!-- Please search existing issues to avoid creating duplicates. --> \r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.27.1\r\n- OS Version: Windows 10 x64\r\n\r\nI swear at one point (probably quite a while ago now), extension updates would show up as a badge counter on the sidebar icon, but now I have to go into the Extensions view to see if any are pending a reload.\r\n\r\nIs this a bug? Did it change at some point for a reason? Am I crazy? \ud83d\ude04 ",
        "createdAt": "2018-09-13 16:42:59",
        "state": "open",
        "number": 58620
    },
    {
        "title": "OnEnterRule#oneLineAboveText",
        "description": "Via #51557 a new API sneaked in and it should go the normal API way. https://github.com/Microsoft/vscode/blob/9982055873dd8d883ece2d74a703000d02e13619/src/vs/vscode.d.ts#L3741-L3744",
        "createdAt": "2018-09-11 15:19:54",
        "state": "open",
        "number": 58440
    },
    {
        "title": "[html] Automatically delete HTML closing tag when converting to self-closing tag",
        "description": "A simple but useful feature would be to automatically delete an HTML or a JSX closing tag when converting to a self-closing tag.\r\n\r\nIn the latest version of VS Code (1.27.1), in order to go from\r\n\r\n```\r\n<App><App>\r\n```\r\n\r\nto\r\n\r\n\r\n```\r\n<App />\r\n```\r\n,\r\n\r\nI need to do the following:\r\n\r\n```\r\n<App /></App>\r\n```\r\n\r\nand then manually delete the closing tag. It would be great if, at this point, VS Code would do that automatically.\r\n\r\nI think it's simple enough and would be a nice feature especially for web developers who use Emmet. Therefore, it could be a core feature.\r\n\r\nI tried searching for an extension that does this, but I was not able to find any. If an extension already exists, please link it here.\r\n\r\n*This is not a duplicate of any of the issues linked by the experimental duplicate detection.*",
        "createdAt": "2018-09-09 20:19:03",
        "state": "open",
        "number": 58315
    },
    {
        "title": "Allow text-shadow to be used in themes",
        "description": "I used to use a neon theme in brackets that had really awesome glowing neon text\r\n\r\nSee below:\r\nhttps://github.com/remonbonbon/brackets-theme-neon-sign\r\n\r\nI tried making a similar theme in vscode but didn't realise the CSS property text-shadow was not supported. \r\n\r\nI know this is a very small and low priority request but it would totally make my day if we could implement glowing text in our themes. \r\n\r\nThank you for your awesome work!",
        "createdAt": "2018-09-09 17:22:05",
        "state": "open",
        "number": 58301
    },
    {
        "title": "Display invisible character",
        "description": "## Description\r\n\r\nZero width characters can be used in some programs or to fingerprint people.\r\n\r\nSee [Zero-Width Characters - Invisibly fingerprinting text](https://www.zachaysan.com/writing/2017-12-30-zero-width-characters) and [Be careful what you copy: Invisibly inserting usernames into text with Zero-Width Characters](https://medium.com/@umpox/be-careful-what-you-copy-invisibly-inserting-usernames-into-text-with-zero-width-characters-18b4e6f17b66).\r\n\r\nThose characters are not rendered in anyway, making hard to detect them.\r\n\r\nSo we need an option to:\r\n\r\n- render invisible chars as their UTFx code (like in nvim <200b>\r\n- or to render any invisible char as one arbitrary chosen char like for whitespace\r\n\r\n[Invisible Character Visualizer](https://marketplace.visualstudio.com/items?itemName=ShaneRay.InvisibleCharacterVisualizer) seems to do that well so the feature can start from this plugin instead from scratch.\r\n \r\nSecond thing, the show whitespace feature of vscode is only displaying whitespaces and tabs but not CR and EOL like many editors.\r\n\r\nFor example in atom \r\n\r\n![](https://i.imgur.com/UFnP20p.png)\r\n\r\n## Possible related issues and resources\r\n\r\n- View invisible characters #31291\r\n- Feature request: Show hidden characters like: space, tab, end of line, carriage return #18282\r\n- Invisible Character Visualizer https://marketplace.visualstudio.com/items?itemName=ShaneRay.InvisibleCharacterVisualizer, but this is for Visual Studio not for VS Code\r\n\r\n## Demo\r\n\r\nVS Code (not even a clue there is something)\r\n\r\n![](https://i.imgur.com/R9EMSWX.png)\r\n\r\nneovim (nvim)\r\n\r\n![](https://i.imgur.com/rJxbduR.png)\r\n\r\nxxd\r\n\r\n```\r\n$ xxd test \r\n00000000: 436f 6e66 6964 656e 7469 616c 2041 6e6e  Confidential Ann\r\n00000010: 6f75 6e63 656d 656e 743a 20e2 808c e280  ouncement: .....\r\n00000020: 8be2 808b e280 8ce2 808b e280 8be2 808b  ................\r\n00000030: e280 8ce2 808d e280 8ce2 808b e280 8be2  ................\r\n00000040: 808c e280 8be2 808b e280 8be2 808b e280  ................\r\n00000050: 8de2 808c e280 8be2 808b e280 8be2 808c  ................\r\n00000060: e280 8ce2 808b e280 8ce2 808d e280 8ce2  ................\r\n00000070: 808b e280 8be2 808c e280 8ce2 808c e280  ................\r\n00000080: 8ce2 808b e280 8de2 808c e280 8be2 808b  ................\r\n00000090: e280 8ce2 808b e280 8ce2 808b e280 8c54  ...............T\r\n000000a0: 6869 7320 6973 2073 6f6d 6520 636f 6e66  his is some conf\r\n000000b0: 6964 656e 7469 616c 2074 6578 7420 7468  idential text th\r\n000000c0: 6174 2079 6f75 2072 6561 6c6c 7920 7368  at you really sh\r\n000000d0: 6f75 6c64 6e27 7420 6265 2073 6861 7269  ouldn't be shari\r\n000000e0: 6e67 2061 6e79 7768 6572 6520 656c 7365  ng anywhere else\r\n000000f0: 2e0a                                     ..\r\n```",
        "createdAt": "2018-09-08 10:31:47",
        "state": "open",
        "number": 58252
    },
    {
        "title": "Problems View: Indicate which errors come from tasks / problem matchers",
        "description": "**Problem**\r\nJS/TS uses the same diagnostic identifier for errors from tasks and for errors from the editor. This can be confusing if you have a mismatched typescript version, as some errors will only show up in the editor or in the task run. Tracking down which error came from which source can be difficult\r\n\r\n**Proposal**\r\nAdd an icon or other indicator in the problems list that indicates if a problem comes from a task / problem matcher vs the editor.\r\n\r\n/cc @chrisdias ",
        "createdAt": "2018-09-07 18:01:38",
        "state": "open",
        "number": 58210
    },
    {
        "title": "Setting to hide extension updates badge",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nIn order to organize \"zen environment\", I would like to avoid any badges. \r\n\r\nI am able to hide git badge in the setting \"git.countBadge\": \"off\", but I need the same setting for the Extension icon. See attachment for the detail - I would like to to see (1 count).\r\n\r\nVS Code version: Code 1.23.1 (d0182c3417d225529c6d5ad24b7572815d0de9ac, 2018-05-10T16:03:31.083Z)\r\nOS version: Darwin x64 17.7.0\r\n\r\n<img width=\"50\" alt=\"screen shot 2018-09-07 at 09 22 18\" src=\"https://user-images.githubusercontent.com/14233091/45201912-c3c72880-b27f-11e8-9c33-dcf380c4894e.png\">\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-09-07 06:24:32",
        "state": "open",
        "number": 58153
    },
    {
        "title": "New settings editor cannot override value in workspace settings",
        "description": "- VSCode Version: 1.27\r\n- OS Version: Windows 10 1803\r\n\r\nSteps to Reproduce:\r\n\r\n1. Set some value to true in your user settings, like editor.formatOnSave:\r\n![image](https://user-images.githubusercontent.com/8000820/45138329-94acaa80-b1de-11e8-8fa3-724d55bce045.png)\r\n\r\n2. Open settings editor, switch to Workspace Settings, you will see the item is unchecked but showed (modified by user):\r\n![image](https://user-images.githubusercontent.com/8000820/45138344-9d9d7c00-b1de-11e8-9de8-0f3c1b2ada4f.png)\r\n\r\n3. If you want to set editor.formatOnSave to false in this workspace, there's no way to achieve this. If you check & uncheck the item, there will only be an empty settings.json file in .vscode folder:\r\n![image](https://user-images.githubusercontent.com/8000820/45138389-cd4c8400-b1de-11e8-840a-08a1ad4a8167.png)\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2018-09-06 06:12:17",
        "state": "open",
        "number": 58038
    },
    {
        "title": "new settings UI: possible to undo a setting change?",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nwhen one accidentally clicked some where in the new settings UI, thus made an unexpected change, allow user to undo that change, by pressing ctrl-z or cmd-z",
        "createdAt": "2018-09-06 00:49:09",
        "state": "open",
        "number": 58021
    },
    {
        "title": "Feature request to support querying for running extensions in extensions search",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n## Similar Issues\r\n> Create groups to organize installed extensions #35891 \r\n> Extension search filters should compose #55697 \r\n> Create Categories/Groups for extensions #20599 #35891\r\n> Group highlighting / bulk actions for extensions #47053\r\n\r\nAll of these issues are attempting to address the broader issue of **installed extension organization**. When you only have a few extensions it isn't a big deal. But for most of us extension junkies, finding one or a group of installed extensions among a single long and convoluted list is a headache, especially with all of the themes mixed in.\r\n\r\nSolving any of one these smaller github issues would be a giant leap towards the overall goal of installed extension organization.\r\n\r\n<!-- Describe the feature you'd like. -->\r\n## Feature Requests / Solutions\r\n_By order of impact on organizability..._\r\n1. Make`@category` combinable/composable with `@installed`, `@enabled`, etc. #55697 \r\n2. Add `@sort:category`, `@sort:unused`\r\n3. Add installed extensions custom groupings #20599 #35891\r\n4. Add Enable/`Disable Selected Extensions` (would require ability to `\u2318`, `\u21e7`, `\u2318 a` select groups of extensions), or perhaps even easier would be Enable/`Disable Filtered Extensions` #47053\r\n\r\n### Example Use-Cases\r\n- **Troubleshooting Extension cross-collision/interference problems**\r\nYou could narrow down the issue by disabling entire groups of extensions by category instead of having to `Disable All Installed Extensions`\r\n- **Uninstalling unused/unnecessary extensions** w/ `@sort:unused` for example, improving overall performance",
        "createdAt": "2018-09-05 16:04:06",
        "state": "open",
        "number": 57969
    },
    {
        "title": "Allow to set a file association for files with no extension",
        "description": "```\r\n{\r\n\t\"files.associations\": {\r\n\t\t\"*\": \"mydefaulttype\"\r\n\t}\r\n}\r\n```\r\n\r\nThis changes the file association for absolutely all files. Should be possible to set a file association only for files that have no extension. So it would match `somefilename` but not `somefilename.txt` and not even `.somefilename`.",
        "createdAt": "2018-09-05 06:39:35",
        "state": "open",
        "number": 57939
    },
    {
        "title": "Allow extensions to use dark and light thumbnail icons",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nCurrently extensions need to provide a single icon thumbnail for their theme to work on dark and light backgrounds. Similarly to how we allow icons from within an extension to use dark and light icons, we should also allow extensions to use dark and light thumbnail icons. Here's an example where a single icon doesn't work:\r\n\r\n![image](https://user-images.githubusercontent.com/35271042/45051917-3f379880-b03a-11e8-8c0d-cf6fa20265f0.png)\r\n\r\n\r\nVS Code version: Code - Insiders 1.27.0-insider (7b9afc4196bda60b0facdf62cfc02815509b23d6, 2018-09-03T09:07:33.052Z)\r\nOS version: Darwin x64 17.7.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-09-04 19:01:35",
        "state": "open",
        "number": 57896
    },
    {
        "title": "Option to insert comment // characters at column zero for editor.action.commentLine",
        "description": "I recreate this formerly closed feature request for this issue : https://github.com/Microsoft/vscode/issues/20515 (@drewnoakes)\r\n\r\n-   VSCode Version: 1.26.0\r\n-   OS Version: Windows 7 x64\r\n\r\n(Following\u00a0[this Stack Overflow question](http://stackoverflow.com/q/42192341/24874))\r\n\r\nI miss the code commenting behavior from Visual Studio (possibly via R#). That is, when you comment a line of code, the\u00a0`//`\u00a0characters are injected at the gutter.\r\n\r\nFor me, this distinguishes commented code from documentation.\r\n\r\nI would like an option that allows this.\r\n\r\n*Steps to Reproduce:*\r\n\r\n1.  Position the caret on a line that has indented code\r\n2.  Invoke the comment line command `editor.action.commentLine` (i.e.\u00a0`Ctrl`+`:`)\r\n3.  Notice that the inserted\u00a0`//`\u00a0is not in column zero, but is indented as much as the code was",
        "createdAt": "2018-09-01 18:25:54",
        "state": "open",
        "number": 57753
    },
    {
        "title": "Escape key while dragging selection should leave selection unchanged",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nEscape key while dragging selection should leave selection unchanged just like it does with (traditional apps on) Windows.\r\nRepro:\r\nSelect something and begin to drag it. Keep mouse pressed.\r\nDecide it was better left where it was. Keep mouse pressed.\r\nTap Escape key.\r\nObserve content drops as if the mouse button were released.\r\nExpect mouse button to release, but content to fall back where it was before beginning the action.\r\n\r\n\r\nVS Code version: Code 1.26.1 (493869ee8e8a846b0855873886fc79d480d342de, 2018-08-16T18:38:57.434Z)\r\nOS version: Windows_NT x64 10.0.17134\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-7820HQ CPU @ 2.90GHz (8 x 2904)|\r\n|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>rasterization: enabled<br>video_decode: enabled<br>video_encode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Memory (System)|15.88GB (7.00GB free)|\r\n|Process Argv|C:\\Program Files\\Microsoft VS Code\\Code.exe C:\\Users\\v-kafasi\\Microsoft\\FastTrackAnalytics-DataPlatformTeam - Performance Tuning\\20180814\\1 p_load_FastTrackTenantService_Extended\\p_load_FastTrackTenantService_Extended - top memory consumer.sqlplan|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (39)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nbracket-pair-colorizer|Coe|1.0.59\r\nvscode-markdownlint|Dav|0.20.0\r\ndocs-article-templates|doc|0.1.2\r\ndocs-markdown|doc|0.1.4\r\ndocs-preview|doc|0.3.12\r\nxml|Dot|2.3.2\r\ngitlens|eam|8.5.6\r\nazure-arm-template-helper|ed-|0.0.17\r\ngit-project-manager|fel|1.6.1\r\nIonide-FAKE|Ion|1.2.3\r\nIonide-fsharp|Ion|3.25.3\r\nIonide-Paket|Ion|1.12.0\r\ndupchecker|jia|0.0.9\r\nkusto-syntax-highlighting|jos|1.0.1\r\nvscode-regexp-preivew|le0|0.0.3\r\nrainbow-csv|mec|0.4.2\r\nvscode-azurestorage|ms-|0.4.1\r\nvscode-cosmosdb|ms-|0.8.0\r\nmssql|ms-|1.4.0\r\nazure-account|ms-|0.4.3\r\nazurecli|ms-|0.4.2\r\ncsharp|ms-|1.15.2\r\ngithub-issues-prs|ms-|0.9.0\r\nPowerShell|ms-|1.8.3\r\nwordcount|ms-|0.1.0\r\nvsliveshare|ms-|0.3.623\r\nvsliveshare-audio|ms-|0.1.32\r\nvsliveshare-pack|ms-|0.1.2\r\nazurerm-vscode-tools|msa|0.4.2\r\nmaterial-icon-theme|PKi|3.5.3\r\nruby|reb|0.20.0\r\nsnake-trail|ric|0.6.0\r\nvscode-filter-json|ric|1.0.0\r\nvscode-sort-json|ric|1.13.0\r\nglassit|s-n|0.1.3\r\nusql-vscode-ext|usq|0.2.14\r\nvscodeintellicode|Vis|1.0.3\r\nmarkdown-all-in-one|yzh|1.6.0\r\nvscode-open-in-github|ziy|1.3.5\r\n\r\n(2 theme extensions excluded)\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-08-31 18:51:33",
        "state": "open",
        "number": 57708
    },
    {
        "title": "Allow to compare 3 files",
        "description": "VS Code allows to easily compare two files by choosing `Select for compare` and `Compare with selected`.\r\n\r\nBut we can only select two files.\r\n\r\n`diff3`, `kdiff3` and `vimdiff` do the job but I would prefer it integrated into VS Code.\r\n\r\nThis would be helpful!\r\n\r\n**Edit**: would also be nice to be able to compare 4 files \ud83d\ude04 [vimdiff](http://vimdoc.sourceforge.net/htmldoc/diff.html) and [diffuse](http://diffuse.sourceforge.net/) do",
        "createdAt": "2018-08-31 12:54:31",
        "state": "open",
        "number": 57687
    },
    {
        "title": "Allow changing triple-click (and double-click) behaviour",
        "description": "Currently when I triple-click a word, the whole line gets selected.\r\n\r\nI'm finding this annoying, as I seem to be doing it by accident, when intending to double-click to select just one word.\r\n\r\nSo I want to be able to customize triple-click to behave identically to double-click.\r\n\r\nSearching user settings I cannot find anything for \"triple\". I also cannot find anything for controlling double-click behaviour. Or even how to define the action for \"select word\" and \"select line\". (I've also checked the keymap config, in case mouse actions were in there.)\r\n\r\n(That is surprising, so if the config options I want already exist, then my feature request is to make them more easily discoverable!)\r\n",
        "createdAt": "2018-08-30 17:14:15",
        "state": "open",
        "number": 57633
    },
    {
        "title": "ctrl+p picker for loaded scripts",
        "description": "Testing #57249\r\n\r\n* launch chrome with remote debugging enabled\r\n* attach to it from VS Code\r\n\r\nThe loaded scripts view is there, but it is difficult to jump to a specific file name in the style of quick open.",
        "createdAt": "2018-08-30 10:36:54",
        "state": "open",
        "number": 57597
    },
    {
        "title": "Verify source maps ",
        "description": "Today I saw another problem with breakpoints not being hit because the sourcemap's `sourceRoot` was wrong (because it was configured incorrectly in the tsconfig.json).\r\n\r\nThe fix was trivial for me, but for a user it is not obvious what the problem is. Hovering over the grey breakpoint just shows a not very informative message \"unverified breakpoint\". \r\n\r\nAnd not many users are aware of the \".scripts\" utility that can be run on the debug console to see the source mappings in detail. And the output of \".scripts\" is a bit verbose and does not highlight errors. See this example from node-debug which has a wrong `sourceRoot` entry in the source map of sourceMaps.js:\r\n\r\n![2018-08-30_11-33-33](https://user-images.githubusercontent.com/1898161/44843570-e4bcc780-ac48-11e8-86f3-6397339dc2d8.png)\r\n\r\nI think we can and should do better!\r\n\r\nMy proposal:\r\n\r\nFor obvious reasons we cannot show a warning message when an expected breakpoint is **not** hit.\r\nBut we could do an upfront verification pass over all generated files reachable via the `outFiles` globs and if they have a source map reference at the end we can verify that the source map exists and that contained back reference to the source is points to an existing file.\r\nIf the verification process sees error, we could show detailed information about the problem.\r\nIn order to keep the amount of information small, we could limit the verification to only those source files that actually have breakpoints.\r\n \r\nThis verification can be implemented in basically three ways:\r\n- inside the DA in \"launch\" or \"attach\" when the launch config is available. The output of the verification could be send to the debug console in text form and we could either treat problems as fatal and abort debugging or as informative and continue debugging. The verification could use the \".scripts\" tool and verify the paths in its output and only show the errors.\r\n- inside the node-debug extension: here we could verify the launch config and the source maps in the `resolveDebugConfiguration` method which makes it possible to show nicer UI and ask the user whether he wants to continue or abort debugging. Another advantage of doing the verification in the extension code is that the code is shared for both node-debug and node-debug2.\r\n- inside a separate extension. This approach could be useful for any debugger that uses sourceMaps. But since launch configs are not standardized, it is difficult to find and interpret the relevant attributes correctly. \r\n\r\n@roblourens what do you think?\r\n\r\n/cc @dbaeumer \r\n",
        "createdAt": "2018-08-30 09:52:22",
        "state": "open",
        "number": 57590
    },
    {
        "title": "Add ability to paste text/html content type",
        "description": "Using the latest version of VS Code I don't get the copy with syntax highlighting working as I would expect.\r\n\r\nWhen I copy code in one VS Code window (e.g. C# file) and then paste the code into another VS Code window where I am editing a markdown file then the pasted code is plain text and not HTML formatted. Seems like this feature doesn't work at all, because there is no format whatsoever applied when I paste it.\r\n\r\nAccording to [this comment](https://github.com/Microsoft/vscode/issues/3518#issuecomment-304152929) it should copy it as HTML into the clipboard and given that I am pasting it into a markdown file I would expect that VS Code will paste the HTML formatted code.\r\n\r\nLooks like that VS Code doesn't respect its own features or maybe it's just fundamentally not working as expected?",
        "createdAt": "2018-08-30 07:39:40",
        "state": "open",
        "number": 57577
    },
    {
        "title": "Support filtering tasks activities by file type (language)",
        "description": "I guess this is related to #1167 but was closed, however I don't think that version 2 of the tasks api properly supports this.\r\n\r\nIn fact, in my workspace I've multiple files for different languages (scripts and such plus the actual sources), and when hitting my build keybinding I'd like the activity panel to only show the tasks which are relevant for such language (or for the whole project, if any is defined as \"global\"), and not all the tasks defined.",
        "createdAt": "2018-08-30 00:17:17",
        "state": "open",
        "number": 57553
    },
    {
        "title": "Loaded Scripts should show paths in original format",
        "description": "![screen shot 2018-08-29 at 2 02 44 pm](https://user-images.githubusercontent.com/323878/44815542-ab2a8480-ab94-11e8-9006-d81aaee73db4.png)\r\n\r\nChrome devtools:\r\n![image](https://user-images.githubusercontent.com/323878/44815612-d4e3ab80-ab94-11e8-9a51-7d5ae62c6566.png)\r\n\r\n\r\nI think this should be showing `client%20with%20space` which is the actual path of the URL\r\n\r\nAnd maybe it should be showing the `?blah` too?",
        "createdAt": "2018-08-29 21:07:47",
        "state": "open",
        "number": 57544
    },
    {
        "title": "Extensions startup loading order",
        "description": "There has been an issue here without a potential solution: #13292\r\n\r\nI don't want to give extensions the power to set their priority of loading in my VSCode I rather want myself setting a priority to some extensions I want to have loaded before the others.\r\n\r\nFor example, I have an extension that shows me saved projects ([Project Manager](https://github.com/alefragnani/vscode-project-manager)) and I want this to be loaded at first to fast select a project before the rest is loaded because when I have selected a project the viewport will be reloaded anyway.\r\n\r\nMy solution, having a option like this:\r\n\r\n```json\r\n\"workbench.extensions.loadingOrder\": {\r\n    \"alefragnani.project-manager\": {\r\n      \"priority\": 10000\r\n    }\r\n  },\r\n```\r\n\r\nall other extensions would be loaded as before after these prioritised extensions.",
        "createdAt": "2018-08-29 08:32:18",
        "state": "open",
        "number": 57481
    },
    {
        "title": "[html] Support SCSS in HTML with <style type=\"text/scss\">",
        "description": "I'm using a framework that lets me write SCSS code in HTML files, by marking them in a block with `<style type=\"text/scss\">`. While VS Code seems to be perfectly fine with SCSS, it doesn't seem to support it inside a HTML file. As such, I get errors from the CSS parsers when using SCSS features, IntelliSense isn't working, etc.",
        "createdAt": "2018-08-29 05:05:08",
        "state": "open",
        "number": 57469
    },
    {
        "title": "Settings UI lacks concept of inherited default value",
        "description": "re #57304\r\n\r\n* open settings UI\r\n* locate 'Suggest Font Size'\r\n* notice how the UI shows `0` which isn't true - the default value is the font size of the editor. \r\n\r\n<img width=\"343\" alt=\"screen shot 2018-08-28 at 09 47 01\" src=\"https://user-images.githubusercontent.com/1794099/44708754-32e69500-aaa8-11e8-9088-194a04f4d6bc.png\">\r\n",
        "createdAt": "2018-08-28 07:53:29",
        "state": "open",
        "number": 57330
    },
    {
        "title": "Feature Request: Hotkey Support for QuickInputButton",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\nIssue Type: **Feature Request**\r\n<!-- Describe the feature you'd like. -->\r\n\r\nAs an extension developer I want to assign a hotkey to a custom [QuickInputButton](https://code.visualstudio.com/docs/extensionAPI/vscode-api#QuickInputButton), that is active/enabled when the [InputBox](https://code.visualstudio.com/docs/extensionAPI/vscode-api#InputBox) or [QuickPick<T>](https://code.visualstudio.com/docs/extensionAPI/vscode-api#QuickPick%3CT%3E) is shown. This would enhance navigating through multi step input forms a lot. It should have similar behaviour like the [QuickInputButtons.Back](https://code.visualstudio.com/docs/extensionAPI/vscode-api#QuickInputButtons) button which is by default assigned to <kbd>Alt</kbd> + <kbd>&larr;</kbd>.  Further I want to allow the extension user to assign his/her preferred hotkey to that button, too. Therefore maybe \"some link\" to the `keybindings.json` would be applicable.",
        "createdAt": "2018-08-26 09:14:49",
        "state": "open",
        "number": 57225
    },
    {
        "title": "Allow <super> as a keybinding option in linux",
        "description": "I am using VSCode on linux (fedora) and I want to bind the *super* key to:\r\n\r\n\"editor.multiCursorModifier\": \"super\"\r\n\r\nbut currently, the only options are ctrlCmd and alt (which doesn't work because it toggles menu navigation).\r\nI don't want to change it to ctrl+click because it's handy for links and function definitions, but multi-cursor editing is also very useful, and I can't make both happen with my keybinding options.\r\n\r\n",
        "createdAt": "2018-08-23 13:03:05",
        "state": "open",
        "number": 57083
    },
    {
        "title": "Add a command that redos the last command that was executed",
        "description": "Please add a \"repeat last command\" command and keybinding, as sometimes found in other other apps, e.g. Microsoft Office.\r\n\r\nI want to press a shortcut, and for it to repeat whatever the last command was, so I don't have to find it again in the menu or the <kbd>ctrl-shift-p</kbd> box.\r\n\r\nThis is especially useful when doing a lot of editing.",
        "createdAt": "2018-08-23 09:00:05",
        "state": "open",
        "number": 57070
    },
    {
        "title": "Have Windows Setup prompt user about setting Code as the git.editor",
        "description": "Related to #56848",
        "createdAt": "2018-08-22 07:16:31",
        "state": "open",
        "number": 56973
    },
    {
        "title": "Extension pack recommendation message is too vague for users to know what extensions are included",
        "description": "The issue is related but not limited to Java extension pack, because the recommendation message looks like a template for all kinds of extension packs.\r\n\r\nIt will be much better if the recommendation message tells what exactly extensions are included.\r\n\r\nIn this way, users know everything and it helps with the decision to take the recommendation.\r\n\r\nBut now (without BI data backup, I just get the conclusion from my own experience), it asks too much for users to figure out the details and to install the pack, they just close/ignore it.\r\n\r\n- VSCode Version:\r\n\r\nVersion: 1.26.1\r\nCommit: 493869ee8e8a846b0855873886fc79d480d342de\r\nDate: 2018-08-16T18:38:57.434Z\r\nElectron: 2.0.5\r\nChrome: 61.0.3163.100\r\nNode.js: 8.9.3\r\nV8: 6.1.534.41\r\nArchitecture: x64\r\n\r\n- OS Version:\r\n\r\nWindows 10 \r\nBuild: 17134\r\n\r\n- Steps to Reproduce:\r\n1. Open a java file\r\n2. Get the recommendation message for 'Java' extension pack\r\n![image](https://user-images.githubusercontent.com/5179063/44380982-d849b800-a540-11e8-882b-7af9c0f15e60.png)\r\n\r\n- Does this issue occur when all extensions are disabled?\r\nYes\r\n",
        "createdAt": "2018-08-21 05:09:35",
        "state": "open",
        "number": 56875
    },
    {
        "title": "[themes] Allow custom variables in workbench color customizations section",
        "description": "This is a feature request to allow defining custom color variables in the workbench color customizations section. It would allow creating a small palette of colors and reusing it across the workbench color definitions, saving many repetitions and making it much easier to maintain.\r\n\r\nThis is just simple text substitution based on some naming convention like the .less `@variable` convention. For example, see the `@PaletteXXX` variables in the sample below:\r\n\r\n```\r\n\"workbench.colorCustomizations\": {\r\n\r\n      // custom colors\r\n      \"@Palette000\": \"#FFFFFF\",\r\n      \"@Palette050\": \"#ECEFF1\",\r\n      \"@Palette100\": \"#CFD8DC\",\r\n      \"@Palette200\": \"#B0BEC5\",\r\n      \"@Palette300\": \"#90A4AE\",\r\n      \"@Palette700\": \"#455A64\",\r\n\r\n      // input control\r\n      \"input.background\": \"@Palette000\",\r\n      \"input.foreground\": \"@Palette700\",\r\n      \"input.placeholderForeground\": \"@Palette200\",\r\n      \"inputOption.activeBorder\": \"@Palette300\",\r\n      \"input.border\": \"@Palette100\",\r\n\r\n      // list views\r\n      \"list.activeSelectionBackground\": \"@Palette200\",\r\n      \"list.activeSelectionForeground\": \"@Palette700\",\r\n      \"list.inactiveSelectionBackground\": \"@Palette100\",\r\n      \"list.hoverBackground\": \"@Palette100\",\r\n      \"list.dropBackground\": \"@Palette100\",\r\n      \"list.focusBackground\": \"@Palette100\",\r\n\r\n```\r\n",
        "createdAt": "2018-08-20 22:26:24",
        "state": "open",
        "number": 56855
    },
    {
        "title": "Provide a way to kill a task or terminal from the main menu",
        "description": "Now that both \"Terminal\" and \"Tasks\" are under the same menu (via https://github.com/Microsoft/vscode/issues/56836), @Tyriar suggested to somehow preserve an action in the menu to kill a terminal. Since we already have \"Terminate Task...\" which in most cases is just a terminal, one idea would be to show a combined picker of tasks and terminals to kill. \r\n\r\n![image](https://user-images.githubusercontent.com/900690/44354511-527b2d80-a4aa-11e8-8de0-c39ef7f3ad28.png)\r\n\r\n![image](https://user-images.githubusercontent.com/900690/44354529-5f981c80-a4aa-11e8-95ff-ed5ce6188c82.png)\r\n",
        "createdAt": "2018-08-20 16:52:47",
        "state": "open",
        "number": 56838
    },
    {
        "title": "Show file picker for 'path' string settings",
        "description": "https://github.com/Microsoft/vscode/issues/50249#issuecomment-414362277",
        "createdAt": "2018-08-20 16:19:59",
        "state": "open",
        "number": 56834
    },
    {
        "title": "when no problemMatcher is specified, just run all the matchers and pick the first one that matches",
        "description": "as title says. I can't imagine that being to slow. If fast enough just run all the matchers all the time as the default. This will make it easier for new users. In my build I have multiple languages. I have a script that just rewrites output to 1 kind of matcher compatible. \r\n\r\nBy default do a search for files if double clicking on a issue the file is not found. And just pick one that is most closes file path.",
        "createdAt": "2018-08-18 00:55:10",
        "state": "open",
        "number": 56725
    },
    {
        "title": "[npm] hover should show relevant latest version",
        "description": "In a `package.json`, when you hover the version for a dependency it will show the \"[Latest version](https://github.com/Microsoft/vscode/blob/9a03a86c0a54a24c355bd950ddad91a0e74de6dd/extensions/npm/src/features/packageJSONContribution.ts#L303)\". I think it would be useful to (also) show the _relevant_ latest version, which might differ if using a version prefix like `^` or `~`.",
        "createdAt": "2018-08-17 20:47:40",
        "state": "open",
        "number": 56719
    },
    {
        "title": "Allow extensions to be installed for all users",
        "description": "I'm the instructor a college Python programming course. I'd love to adopt VS Code for this course, but the fact that extensions are installed on a per-user basis is a major problem. For education and enterprise markets, there needs to be support for pre-installing extensions for all users.\r\n\r\nIt's important that we be able to provide a ready-to-use environment to students on login. I have 50 students in my class. I can't afford to lose class time to making students install the Python extension each time they use a new computer or to help troubleshooting students when they have problems.\r\n\r\nI've put together a very hackish workaround where I've created a batch file that installs the plugin and then launches VS Code. I've added shortcuts to this batch file, but it's messy and I fear brittle.\r\n\r\nPlease add a flag to code --install-extension that allows users to specify the extension is to be installed for all users.\r\n\r\nFWIW, @rhyspaterson mentioned needing this same functionality in a comment on Issue #27972.",
        "createdAt": "2018-08-17 00:41:17",
        "state": "open",
        "number": 56614
    },
    {
        "title": "Method separator ",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nPlease add method separator in class and shortcut for go back to previous Edit/last edit location ... Thanks \r\n\r\nVS Code version: Code 1.26.0 (4e9361845dc28659923a300945f84731393e210d, 2018-08-13T16:20:44.170Z)\r\nOS version: Darwin x64 17.7.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-08-16 04:43:08",
        "state": "open",
        "number": 56530
    },
    {
        "title": "Allow hover to be resized",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n**steps:**\r\n1) open a code file, such as .go\r\n2) mouse over a type definition which has many members\r\n3) then you can see the float window looks like a bit small and littery with unexpected line break\r\n\r\n<!-- Describe the feature you'd like. -->\r\n**expected:**\r\nneed auto resize the float window(especially the width) or show a grip to resize it manually",
        "createdAt": "2018-08-16 03:04:57",
        "state": "open",
        "number": 56525
    },
    {
        "title": "add a context menu to entities listed in breadcrumbs",
        "description": "for folders listed in breadcrumbs i wish i could right click and create a new file from there\r\n\r\n![image](https://user-images.githubusercontent.com/937933/44167730-fd4fae00-a09c-11e8-8db3-aca6acf5529f.png)\r\n",
        "createdAt": "2018-08-15 19:08:22",
        "state": "open",
        "number": 56494
    },
    {
        "title": "Warn when reloading VSCode if Issue Reporter is open",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nWhen trying to isolate a bug, it is common to reload the application to see if a change (e.g., disabling an extension) has fixed things. But that currently discards any content that has been written in the Issue Reporter dialog!\r\n\r\nA warning would be nice. Even better would be to save the content to a temporary file & re-open the issue reporter after reloading. But at least a warning, so I can copy & paste to my own temporary file.\r\n\r\nVS Code version: Code 1.26.0 (4e9361845dc28659923a300945f84731393e210d, 2018-08-13T16:29:31.933Z)\r\nOS version: Windows_NT x64 10.0.17134\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-08-14 22:06:46",
        "state": "open",
        "number": 56410
    },
    {
        "title": "[api] Allow extensions to use the syntax highlighter ",
        "description": "It would be great if the extension API would offer a way to access the syntax highlighter of VS Code.\r\n\r\nI am currently building an extension that offers an inline help system, I use a WebviewPanel to display the help in the editor. For consistency it would be great if we could format code samples the same way the editor does but I currently see no way to do that. ",
        "createdAt": "2018-08-14 13:24:22",
        "state": "open",
        "number": 56356
    },
    {
        "title": "Don't show breadcrumb bar when not applicable",
        "description": "**Issue type:** polish/feature-request\r\n\r\nSteps to reproduce\r\n\r\n1. Set breadcrumbs setting to the following:\r\n```\r\n  \"breadcrumbs.enabled\": true,  \r\n  \"breadcrumbs.filePath\": \"off\",\r\n  \"breadcrumbs.symbolPath\": \"on\"\r\n```\r\n\r\n2. Open a file which isn't supported by the breadcrumbs, like an XML file:\r\n\r\n![2018-08-14 11_18_12-webapi xml - visual studio code](https://user-images.githubusercontent.com/42275345/44083521-773a9c00-9fb4-11e8-8e68-35a2e36c7159.png)\r\n\r\n---\r\n\r\nA breadcrumb bar is shown, but it houses no content.\r\n\r\nIs it possible to disable the breadcrumb bar if no symbol path is found? And enable it again when a symbol path is found?",
        "createdAt": "2018-08-14 09:26:05",
        "state": "open",
        "number": 56327
    },
    {
        "title": "Support auto update for Windows and Linux ZIP",
        "description": "Hi,\r\n\r\nUpdating VSCode Insiders (portable) on macOS is a great experience; it simply restarts the app and applies the update.\r\n\r\nHowever VSCode Insiders (portable) on Windows, prompts me every single day to download a zip file. Not only does this method take a lot of time regularly, it also takes a ton of time to sync tens of thousands of files in Dropbox, where the portable versions will typically be placed.\r\n\r\nCould we have the Windows version update same as the macOS version? :)",
        "createdAt": "2018-08-14 09:09:56",
        "state": "open",
        "number": 56326
    },
    {
        "title": "Option to specify separator for \"Copy Relative Path\" action",
        "description": "**Workaround (from @bpasero)**\r\nYou can use this extension: https://marketplace.visualstudio.com/items?itemName=rssowl.copy-relative-path-posix\r\n\r\n**Original Issue:**\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\nLooked for other mentions but haven't found related requests or discussion.\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI'm often using Copy Relative Path feature to compose import strings or share with other developers on Mac/Linux. Therefore, new Copy relative path feature that has native path separators on Windows doesn't help in these cases (in comparison with Copy path).\r\n\r\nPlease add option to change path separators used in Copy Relative Path action, so I will be able to set `/` as path separator and have same behavior across all platforms.",
        "createdAt": "2018-08-13 22:32:01",
        "state": "open",
        "number": 56279
    },
    {
        "title": "\"Halfway\" option for scrolling beyond the last line",
        "description": "Currently, VSCode has two options for scrolling past the last line of the file (`editor.scrollBeyondLastLine`): either it's enabled, in which case you can scroll the full window height beyond the last line, or disabled, in which case the farthest you can scroll is so that the last line of the file is at the very bottom of the window.\r\n\r\nBoth of these settings have issues. If the setting is enabled, then when you scroll as far as possible, you'll just be looking at a blank window because only the last line of the file is visible (at the very top of the screen). If the setting is disabled, then when you scroll as far as possible, the last line of the file is at the very bottom, which can be awkward -- generally I like the cursor to be near the middle of the screen, and if I'm editing the last line of the file then that's not possible.\r\n\r\nIdeally, VSCode would have a \"halfway\" option for this setting, where the farthest you could scroll beyond the last line of the file would be half the window height. This way, when you scroll down as far as possible, the last line will be vertically centered in the editor window.",
        "createdAt": "2018-08-10 22:27:20",
        "state": "open",
        "number": 56174
    },
    {
        "title": "Support find in the Contributions section of the Extension Editor",
        "description": "We support find in the \"Details\" section of the Extension Editor, but not in the \"Contributions\" section. The latter can be huge in certain extensions, and a find feature can definitely help\r\n",
        "createdAt": "2018-08-10 17:31:47",
        "state": "open",
        "number": 56163
    },
    {
        "title": "Improved Welcome Screen",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\nIssue Type: Feature Request/UI\r\nNo relevant Issues found.\r\n\r\n<!-- Describe the feature you'd like. -->\r\nI believe that as a long-time user of VSCode, the Welcome screen is mere redundant to me, however I feel that for newer users, that the layout doesn't seem that appealing.\r\n> Note: * means more info at the bottom\r\n- First of all, the title and subtitle is hidden on viewport with a height < 685px (This was the css that dev tools showed: \r\n```\r\n[workbench.main.css:14]\r\n.monaco-workbench>.part.editor>.content .welcomePageContainer.max-height-685px .title {\r\n  display: none;\r\n}\r\n```\r\nI understand that it may not be worth to show on small heights, but I don't think a little scrolling would harm anyone. I believe cramming a bunch of stuff could cause more confusion. The title and subtitle should be placed aligned in the middle, with the VSCode icon (coloured or the non-coloured version, I'm personally split on this and leave it up to you should you consider my suggestion) on top of the text\r\n(maybe text sits on top, overlapping? Again, split).\r\n- Next is what comes under it, I believe this should be the \"Help\" box.\r\n  - Some users may click the links given, some may just want to start coding right away\r\n  - This could show to new users that the editor is very capable, and there is thorough help for anything needed. This could in turn quickly ease them into usage as they would have a definite source of help.\r\n  - This should be its own container, definitely not full-width, but more center aligned like everything else, maybe set margins/padding around the container to present it neatly.*\r\n- Under the \"Help\" container, should be, in my opinion, a new category called \"Files\", which would be a merge of the current \"Start\" and \"Recent\" categories.\r\n  - The layout of this is similar to the \"Help\" I mentioned above, and place the options inside said container and possibly separate them with title and a divider*\r\n- Finally, under those should be the 2 categories would be the \"Customize\" and \"Learn\"\r\n\r\n* In terms of layout, everything is aligned in the middle, with some padding at least on the left and right so everything is more to the center, and easier to read. Could be themable (not sure if it is or isn't, the buttons change but that just might be a take this background colour and darken it type thing)\r\nThese blue texts should probably be buttons, or at least have more padding and either an underline, or if you go the button route, contain the main button with the main text, and the extra text outside it perhaps.\r\n\r\nEven I know I didn't explain it clearly enough, and would be happy to provide a HTML/CSS Mockup of what I mean, please let me know if so!\r\n\r\n## TODO List:\r\n- Design\r\n  - [ ] Create Design\r\n  - [ ] Implement\r\n- Styling\r\n  - [ ] Edit text sizes\r\n- Probs more stuff\r\n",
        "createdAt": "2018-08-10 11:07:06",
        "state": "open",
        "number": 56144
    },
    {
        "title": "Better indicator for long extension installations",
        "description": "If you are either on a slow connection or are installing a large extension, it's hard to identify if the installation is still proceeding or if it's stuck. There is the viewlet progress indicator, but that's not easy to identify with a specific extension as it's over the entire viewlet container.\r\n\r\n### Current\r\n<img src=\"https://user-images.githubusercontent.com/35271042/43853319-a93dd858-9af4-11e8-8b25-3c4a87e585e7.png\" width=\"70%\">\r\n\r\n### Suggestion\r\nAnimate a `...` on the `Installing` text so that the progress is implicit.\r\n![gif](https://user-images.githubusercontent.com/35271042/43855395-4c6677d8-9afa-11e8-91d6-466b83cd0d7a.gif)\r\n",
        "createdAt": "2018-08-08 18:03:28",
        "state": "open",
        "number": 56023
    },
    {
        "title": "skipFiles Option in Auto Attach Debugger",
        "description": "How to define the default skipFiles option for use in debugger auto attach scenario?",
        "createdAt": "2018-08-07 14:44:31",
        "state": "open",
        "number": 55947
    },
    {
        "title": "egrep like feature to subset display of lines based on regex  (i.e. hide code lines that don't match)",
        "description": "The Mac console has a nice feature where any text file viewed can have only lines that match some search criteria displayed, however the feature is limited and doesn't support regex.\r\n\r\nWhat would be great in VSCode would be a regex search feature allowing multiple combinations, e.g. xxx | yyy | zzz and then have an option to *only* show matching lines.\r\n",
        "createdAt": "2018-08-06 22:46:27",
        "state": "open",
        "number": 55919
    },
    {
        "title": "Breadcrumbs Option Bottom of Editor ",
        "description": "\r\nIssue Type: <b>Settings Search Issue</b>\r\n\r\nPlease add the option to place breadcrumbs at the bottom of the editor. \r\nComing from Intellij where the breadcrumbs are located closer towards the bottom, i'm having to retrain my eyes to look up.\r\n\r\nI often read from top to bottom, and constantly have to jump back to the top if I want to quickly glance at the breadcrumbs.  Probably not a big deal for everyone, however I figured at least a position option would be nice to have. \r\n\r\nThank you for this feature.\r\n\r\nVS Code version: Code - Insiders 1.26.0-insider (c2ddece6536330f4b4ceef33de5eea6e406fb30a, 2018-08-06T10:34:04.876Z)\r\nOS version: Windows_NT x64 6.1.7601\r\n\r\n<details><summary>Extensions (32)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nbetter-comments|aar|1.2.6\r\nproject-manager|ale|8.0.0\r\nmongogo|bag|0.1.2\r\nnpm-intellisense|chr|1.3.0\r\npath-intellisense|chr|1.4.2\r\nvue-peek|dar|1.0.2\r\nvscode-eslint|dba|1.4.12\r\ngitlens|eam|8.5.4\r\nvscode-npm-script|eg2|0.3.5\r\ncode-runner|for|0.9.4\r\ngc-excelviewer|Gra|2.1.25\r\nrest-client|hum|0.19.0\r\nr|Iku|0.6.0\r\nr-lsp|Iku|0.0.7\r\nsearch-node-modules|jas|1.3.0\r\nsvn-scm|joh|1.31.0\r\nlanguage-julia|jul|0.10.2\r\nvscode-cfml|Kam|0.4.0\r\nvscode-simple-icons|Lau|1.8.4\r\nvs-script-commands|mkl|7.0.0\r\nmssql|ms-|1.4.0\r\npython|ms-|2018.7.1\r\natom-keybindings|ms-|3.0.4\r\nGo|ms-|0.6.85\r\nsyncing|non|1.8.1\r\nvetur|oct|0.12.5\r\nvscode-code-outline|pat|0.2.1\r\nvscode-docker|Pet|0.1.0\r\nvscode-graphql|Pri|0.0.10\r\njava|red|0.29.0\r\nsharecode|Rol|0.4.1\r\nlicenser|ymo|1.1.2\r\n\r\n\r\n</details>No fuzzy results\r\n\r\nQuery: breadcrumbs\r\nLiteral matches: 3\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-08-06 17:34:03",
        "state": "open",
        "number": 55892
    },
    {
        "title": "API to retrieve a dimensions from a given Terminal instance",
        "description": "VS Live Share extension needs to know current dimensions of a terminal and also to get notified when they're getting changed.\r\n\r\nConsider adding a new API to get read-only access to a terminal renderer associated with given terminal instance.",
        "createdAt": "2018-08-03 00:45:32",
        "state": "open",
        "number": 55718
    },
    {
        "title": "Disable undo menu item when there is no more history available",
        "description": "From #55389\r\n\r\n**Feature request**\r\nDisable the undo menu item if there is no undo history available. \r\n\r\n(same for redo if there is no more forward history)",
        "createdAt": "2018-07-31 09:27:02",
        "state": "open",
        "number": 55440
    },
    {
        "title": "Disable some menu items when issue reporter is focused",
        "description": "Testing #55389\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open issue reporter and focus that window\r\n2. Open title bar menu.\r\n3. Try clicking on an action such as `file -> New File`\r\n\r\n**Bug**\r\nThese menu items have no effect but are still enabled\r\n",
        "createdAt": "2018-07-31 07:42:00",
        "state": "open",
        "number": 55425
    },
    {
        "title": "add Activation Events for setting field",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nAdd Activation Events for setting field.\r\n\r\nThis allows precise control over when expansion needs to be activated.\r\n\r\nReduce unnecessary extensions runs.\r\n\r\nReduce memory usage and speed.\r\n\r\n```diff\r\nonLanguage:${language}\r\nonCommand:${command}\r\nonDebug\r\nworkspaceContains:${toplevelfilename}\r\nonFileSystem:${scheme}\r\nonView:${viewId}\r\n*\r\n+ onSetting: ${key}==${value}\r\n+ onSettingExist: ${key}\r\n+ onSettingUpdate: ${key}\r\n```\r\n\r\n### Why should I need it?\r\n\r\nsome extension, they need to be activated when user set the relative config.\r\n\r\nfor example: when user seted `sync.autoDownload` then actived the extension [Settings Sync](https://github.com/shanalikhan/code-settings-sync) and download the setting.\r\n\r\n```json\r\n{\r\n  \"sync.autoDownload\": true\r\n}\r\n```\r\n\r\nset `activationEvents`\r\n\r\n```diff\r\n{\r\n  \"activationEvents\": [\r\n-   \"*\"\r\n+   \"onSetting: sync.autoDownload==true\",\r\n+   \"onSettingUpdate: sync.autoDownload\"\r\n  ]\r\n}\r\n```\r\n\r\nSo, `Settings Sync` don't need to activating and check `sync.autoDownload` the field exists or not.\r\n\r\n**In theory, it can reduce the self-starting of a part of the extension, which should improve performance.**\r\n\r\nVS Code version: Code 1.25.1 (1dfc5e557209371715f655691b1235b6b26a06be, 2018-07-11T15:33:29.235Z)\r\nOS version: Darwin x64 17.7.0\r\n\r\n<!-- generated by issue reporter -->\r\n",
        "createdAt": "2018-07-28 13:18:01",
        "state": "open",
        "number": 55299
    },
    {
        "title": "Keybindings - right click disables multiple selection of items",
        "description": "OS: win7x64\r\nVS Code: 1.26.0-ins\r\n\r\nWhat if being in the keybindings the user wants to do multiple selection of items to delete them?\r\n\r\n![multiple selection in keybindings](https://user-images.githubusercontent.com/24613274/43352069-5f082e2c-9226-11e8-8dd4-29b485915972.gif)\r\n",
        "createdAt": "2018-07-28 02:25:48",
        "state": "open",
        "number": 55286
    },
    {
        "title": "Problem matchers should support creating related diagnostic information",
        "description": "See #55120 for motivation. ",
        "createdAt": "2018-07-27 16:09:11",
        "state": "open",
        "number": 55253
    },
    {
        "title": "[folding] provide non-selection aware fold level command ",
        "description": "- VSCode Version:\r\n![vscode version](https://user-images.githubusercontent.com/33103832/43330619-09562f04-91c4-11e8-9ccf-f1e483b08fc8.png)\r\n- OS Version:\r\nWin 10 64 bit\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open a file which has different folding levels through indentation\r\n2. Move the cursor to a specific level x\r\n3. Run command 'Fold level x'\r\n\r\nAll areas of that level getting folded but not the one the curor is currently in.\r\n\r\n![vs-code-issues](https://user-images.githubusercontent.com/33103832/43331255-a0434b4e-91c5-11e8-9852-f8f3dde77f84.gif)\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2018-07-27 15:51:29",
        "state": "open",
        "number": 55252
    },
    {
        "title": "Use smartCase for Find",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nThe `search.smartCase` setting is really useful. Thanks for implementing it.\r\n\r\nIt would be great if it worked in the \"Find\" functionality too, so I can quickly perform a case sensitive search within the text in a file.\r\n\r\nVS Code version: Code 1.25.1 (1dfc5e557209371715f655691b1235b6b26a06be, 2018-07-11T15:33:29.235Z)\r\nOS version: Darwin x64 16.7.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-07-27 14:33:39",
        "state": "open",
        "number": 55247
    },
    {
        "title": "Rapid render ignores border colors",
        "description": "When parts are restored only the background colors are consider but not borders.",
        "createdAt": "2018-07-27 12:44:06",
        "state": "open",
        "number": 55237
    },
    {
        "title": "\"Quick Open\" open all files",
        "description": "Sometimes I need to open all files matching a certain criteria.\r\nFor example:\r\n![files matching dialog](https://user-images.githubusercontent.com/14938293/43263867-c7fbaef6-90e4-11e8-8633-64ea5c4b1524.png)\r\n\r\nAt the moment I have to start \"Quick Open\" and then enter my search term and then go through each entry and hit arrow-right on my keyboard. This can take very long.\r\nIt would be nice if I could just open all files that are in the dialog.\r\nIt would also be good if I could select multiple files with ctrl + click and maybe shift + click to open only the files I need.\r\n",
        "createdAt": "2018-07-26 13:04:55",
        "state": "open",
        "number": 55146
    },
    {
        "title": "Missing keybinding for navigation in Quick Fix contextual menu",
        "description": "The problem:\r\n\r\nIt is not possible to define custom shortcuts for Quick Fix contextual menu.\r\n\r\n- Use latest stable build of VS code  and open a TypeScript project.\r\n- Open the Quick Fix by intentionally making a mistake in the code.\r\n- Press `CTRL + .` to open the Quick Fix contextual menu suggestions.\r\n- It is possible to select an item from the menu by using UP/DOWN arrow key.\r\n- ISSUE: it is no possible to define custom shortcuts in order to select the prev/next Quick Fix suggestion in the contextual menu.\r\nWould be great to have customize selection of the prev/next suggestion, similarly to IntelliSense (example below): \r\n```\r\n    {\r\n      \"key\": \"ctrl+k\",\r\n      \"command\": \"selectPrevSuggestion\",\r\n      \"when\": \"suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus\"\r\n    },\r\n    {\r\n      \"key\": \"ctrl+j\",\r\n      \"command\": \"selectNextSuggestion\",\r\n      \"when\": \"suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus\"\r\n    },\r\n```",
        "createdAt": "2018-07-26 05:57:18",
        "state": "open",
        "number": 55111
    },
    {
        "title": "Show Opening Tag when Closing Tag Selected",
        "description": "intelliJ / PHP Storm / etc. have this nifty little feature. When your cursor is at the end of a tag, if the opening tag is off the screen it will show it in a little floating window.\r\n\r\n![Example of being able to see a line that is off the screen](https://user-images.githubusercontent.com/40297408/43215220-89fe0742-9009-11e8-841a-de5c054c9fd8.png)\r\n\r\nThis makes it incredibly easy to keep track of exactly which closing tag you're at, especially useful for when you have to work in heavily nested templates.\r\n",
        "createdAt": "2018-07-25 16:52:59",
        "state": "open",
        "number": 55075
    },
    {
        "title": "[css] use folding regions in outline ",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nIt would be great to see CSS code-folding regions used as Outline sections along with their coinciding header, in much the same way that Markdown headings appear right now.\r\n\r\nFor example, this code:\r\n```css\r\n/*#region This is a section */\r\n.classA {\r\n  color: blue;\r\n}\r\n\r\n.classB {\r\n  color: green;\r\n}\r\n/*#endregion*/\r\n```\r\nCurrently creates a collapsible section in VSCode, which is incredibly helpful. However, the new Outline view still only shows a single-level list of every single rule in the document, so you can't see where those collapsible sections start and end:\r\n\r\n![image](https://user-images.githubusercontent.com/2294248/43208954-927a49a4-8ff9-11e8-80c7-f585acfa3bd5.png)\r\n\r\nI'm using VSCode 1.26.0-insider on Windows 10.",
        "createdAt": "2018-07-25 14:56:44",
        "state": "open",
        "number": 55068
    },
    {
        "title": "Allow syntax colouring in parameters for SignatureHelp",
        "description": "There are a couple of issues that looked like they might cover this:\r\n\r\n- https://github.com/Microsoft/vscode/issues/11877\r\n- https://github.com/Microsoft/vscode/issues/26241\r\n\r\nHowever as far as I can tell, it's not possible to get highlighting in the parameter names in the signature. I've tried various combinations of `string/MarkdownString` in the `documentation` properties with no luck. The string being rendered here is `SignatureInformation.label` which is only a `string`:\r\n\r\n![screen shot 2018-07-25 at 12 15 50 pm](https://user-images.githubusercontent.com/1078012/43197858-7e408510-9004-11e8-996c-39e8e0bbdfed.png)\r\n\r\nHere the main signature line in the tooltip is just all white. It would be much more readable if the types were coloured like they are in the editor.",
        "createdAt": "2018-07-25 11:16:45",
        "state": "open",
        "number": 55044
    },
    {
        "title": "Make decoration provider API public",
        "description": "Make the following API public\r\n\r\n```ts\r\nexport interface DecorationProvider {\r\n\tonDidChangeDecorations: Event<undefined | Uri | Uri[]>;\r\n\tprovideDecoration(uri: Uri, token: CancellationToken): ProviderResult<DecorationData>;\r\n}\r\n\r\nexport namespace window {\r\n\texport function registerDecorationProvider(provider: DecorationProvider): Disposable;\r\n}\r\n```",
        "createdAt": "2018-07-24 12:51:53",
        "state": "open",
        "number": 54938
    },
    {
        "title": "Display installed dependencies",
        "description": "The dependencies tab of an Add-on should display which ones I have installed already/give me a button to install a dependency individually.",
        "createdAt": "2018-07-24 07:13:26",
        "state": "open",
        "number": 54917
    },
    {
        "title": "Option to automatically open markdown in preview ",
        "description": "Add a setting `markdown.defaultView` to automatically open .md files in preview mode instead of editing mode.\r\nThis is so useful, because the most of time, I just want to read the .md files.\r\n",
        "createdAt": "2018-07-21 01:16:14",
        "state": "open",
        "number": 54776
    },
    {
        "title": "Give the option to fix centered layout width.",
        "description": "Previously the centered layout in zen mode had a fixed width, meaning that if you resize the window the centered section will remain the same as long as it still fits in the resized window. The behaviour now is for the centered section width to be proportional to the size of the window. See below:\r\n\r\n![image](https://user-images.githubusercontent.com/30509290/43009531-57ddd10a-8c14-11e8-9ee0-597c2a9e8466.png)\r\n\r\nOn resize, old behaviour/new behaviour:\r\n\r\n![image](https://user-images.githubusercontent.com/30509290/43009812-1187e6e0-8c15-11e8-980f-b3251e081dc4.png)\r\n",
        "createdAt": "2018-07-20 15:06:57",
        "state": "open",
        "number": 54731
    },
    {
        "title": "Have separate colors for active and inactive tab hover",
        "description": "Currently we have \"tab.hoverBackground\", but this is bit inconsistent with the rest of the tab properties and also sometimes lead to not-so-nice results visually when the backgrounds of the active and inactive tabs are too contrasting. In this case finding a hover color that looks fine on both active and inactive tab is not an easy task.\r\nI'd rather suggest to split this in two as the rest of tab properties, so we get : \"tab.activeHoverBackground\" and \"tab.inactiveHoverBackground\".\r\n",
        "createdAt": "2018-07-20 08:56:02",
        "state": "open",
        "number": 54713
    },
    {
        "title": "Emmet: error wrapping link",
        "description": "Hello,\r\nwrapping an url with emmet wrapping command with \"a\" tag I notice this strange behavior.\r\n\r\nwrapping with \"a\" preview, look at href:\r\n![screenclip 33](https://user-images.githubusercontent.com/47943/42991089-e060b778-8c04-11e8-9289-ca3059dab403.png)\r\n\r\n\r\nresult after hitting ENTER:\r\n![screenclip 34](https://user-images.githubusercontent.com/47943/42991071-ccc4ed92-8c04-11e8-9fc5-e43fbb98ff60.png)\r\n\r\nhref is empty instead of http://www.google.it, in Sublime href is correctly filled so I think there is a bug in this command implementation.\r\n\r\nI'm using VScode Insiders (last version) on Windows 10",
        "createdAt": "2018-07-20 08:13:06",
        "state": "open",
        "number": 54711
    },
    {
        "title": "[scss] Add \"Go to or peek defintion\" for imported mixins and variables for SCSS files",
        "description": "Has this been discussed before? \r\nI couldn't find an issue, but I can't imagine other people not needing this. ",
        "createdAt": "2018-07-19 08:40:39",
        "state": "open",
        "number": 54638
    },
    {
        "title": "[folding] Add keyboard shortcut to jump between #region and #endregion",
        "description": "How difficult would it be to add a keyboard shortcut to jump between `#region` and `#endregion`, the same way you can jump between opening and closing brackets `[]`, braces `{}`, and parentheses `()`? I would prefer the same keyboard shortcut, so just adding this to `editor.action.jumpToBracket` would be perfect. However, I can imagine that some might prefer it to be a separate command, or it may be better to do that from an implementation standpoint.\r\n\r\nI apologize if I'm missing an existing shortcut, but I couldn't find anything in the current keybindings.",
        "createdAt": "2018-07-19 07:11:35",
        "state": "open",
        "number": 54631
    },
    {
        "title": "Rectangle commands for large file editing",
        "description": "### Problem\r\nIt is difficult to modify large files (more than 10k lines) efficiently, as we are limited in cursors, as showed in the following gif.\r\n\r\n![Cursor](https://i.imgur.com/fc78CRp.gif)\r\n\r\nWhile i do understand the possible problem to have more than 10k active cursors at the same time, i still think it would be nice to be able to edit large file.\r\n\r\n### Solution and request \r\nI think emacs has a interesting solution for file editing without using multiple cursors: the [rectangle commands](https://www.gnu.org/software/emacs/manual/html_node/emacs/Rectangles.html).\r\nMaybe using this \"marking\" solution could enable vscode to modify larger file.\r\nThanks. \r\n\r\n\r\n\r\n",
        "createdAt": "2018-07-18 21:16:00",
        "state": "open",
        "number": 54614
    },
    {
        "title": "Allow disabling of breadcrumbs on a per language basis",
        "description": "I want to do this:\r\n\r\n```json\r\n  \"[markdown]\": {\r\n    \"breadcrumbs.enabled\": false\r\n  }\r\n```",
        "createdAt": "2018-07-18 15:32:32",
        "state": "open",
        "number": 54587
    },
    {
        "title": "Enhancement: finer control of word separators",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nCurrently, the setting term `\"editor.wordSeparators\"` only tells the editor to separate words *at* these characters. Can we make it *before* or *after* the separators?\r\n\r\nNow I take LaTeX as an example. If we remove `\\` from \"editor.wordSeparators\", then double click on `\\cmdA\\cmdB\\cmdC`, we will select the whole expression. However, as the expression is actually three commands, we should select a single (e.g. `\\cmdA`) one at a time. That means, we should only separate words *before* `\\`, not after.",
        "createdAt": "2018-07-18 11:46:10",
        "state": "open",
        "number": 54571
    },
    {
        "title": "Keyboard Shortcuts Reference that incorporates User Key Bindings",
        "description": "It would be a nice little improvement if the [keyboard shortcuts reference](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf) accessed from the help menu incorporated users' key bindings. Currently, it's a static document that only contains the defaults. \r\n",
        "createdAt": "2018-07-17 22:19:32",
        "state": "open",
        "number": 54517
    },
    {
        "title": "Improve readability of diagnotic hovers",
        "description": "The number one annoyance I have and hear from people about VS Code + TypeScript is that type errors are hard to read. TypeScript will display nested type errors with each level indented, but because of the line wrapping, that indentation basically lost.\r\nThis makes the error hard to follow and in consequence hard to solve.\r\n\r\n![image](https://user-images.githubusercontent.com/10532611/42839855-dbc732a2-89b9-11e8-841d-f0b66f3a62fb.png)\r\n\r\nHere are things that I think would improve the readability:\r\n- Add an option to enable horizontal scrolling in hovers. This would mean the indentation would actually have the intended visual effect.\r\n- Make the width of the hover configurable. I have way more space on my screen it could utilize.\r\n- Add smart wrapping that preserves indentation.\r\n- Add markdown support to diagnostics and make TypeScript output markdown. This would mean not the whole diagnostic has to be rendered in a monospace font, therefor saving horizontal space. The parts that are code would use backticks instead of single quotes.",
        "createdAt": "2018-07-17 19:11:40",
        "state": "open",
        "number": 54503
    },
    {
        "title": "Remove CtrlCmd+W keybinding to close window when no editors are opened",
        "description": "This could be viewed a duplicate of [this Feature Request](https://github.com/Microsoft/vscode/issues/50671), but I'm reopening it as a bug for two reasons:\r\n\r\n1. Based on the last comment, I don't believe that the assigned developer completely understood the issue, and\r\n2. I am adding more specific details that would classify it as a bug.\r\n\r\nI frequently use `Ctrl + W` to close the active editor.  When there are no open Windows (i.e. editor tabs) pressing `Ctrl + W` closes the Workspace (i.e. the entire VS Code application) which is not the behavior I want.\r\n\r\nIn the Keyboard Shortcuts menu there are default bindings for `Ctrl + W` to \"Close Window\" and `Ctrl + K + F` to \"Close Workspace\".\r\n\r\nIn Version 1.25.1 when there are no open editors, pressing `Ctrl + W` (wrongly) assumes that I wanted to issue a `Ctrl + K + F` / Close Workspace command.  In this situation the desired behavior is no action as:\r\n\r\n1. There are no open Windows, and \r\n2. The Workspace is not a Window according to the semantics defined in Keyboard Shortcuts.\r\n\r\nThis could be fixed by either disabling Close Workspace on `Ctrl + W` or adding a configuration option that lets me control the behavior of `Ctrl + W` when no editors are open.\r\n",
        "createdAt": "2018-07-17 16:41:50",
        "state": "open",
        "number": 54492
    },
    {
        "title": "Multiline Numbering",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\nI didn't see this so I hope it's not a duplicate.\r\n<!-- Describe the feature you'd like. -->\r\nWhen doing multi-line editing I frequently want to do something with incrementing numbers.\r\n\r\nFor example\r\n\r\nSome code that is all the same except at the end I'm going to say line 1\r\nSome code that is all the same except at the end I'm going to say line 2\r\nSome code that is all the same except at the end I'm going to say line 3\r\nSome code that is all the same except at the end I'm going to say line 4\r\n\r\nThis would be especially useful when I'm doing variable names that end in numbers like.\r\n\r\nVariableName1 = 0;\r\nVariableName2 = 0;\r\nVariableName3 = 0;\r\nVariableName4 = 0;\r\n\r\nI hope that makes sense.",
        "createdAt": "2018-07-16 23:38:45",
        "state": "open",
        "number": 54430
    },
    {
        "title": "Add ability to access commands without typing",
        "description": "AFAIK the only way to access commands from different extensions is through the use of command palette. This works like a big bag of commands that we filter to the commands we want. \r\n\r\nIt would be better to be able to access the commands through some other more structured way, instead of having to type them every time or use history. Having to remember the wording for the concepts extension developers made is a pain point. Also, the commands are not discoverable in this way. Currently the team has refused to add a basic toolbar, which I consider a common sense feature. https://github.com/Microsoft/vscode/issues/41309 To achieve this basic functionality people put commands in the status bar, which is a hacky inconvenient way. https://marketplace.visualstudio.com/items?itemName=fabiospampinato.vscode-commands \r\n\r\nIrrespective of the toolbar feature, I propose another menu \"Commands\" where commands from different extensions are automatically added and grouped by extension name. This would aid in discoverability and also users wouldn't have to waste time typing command names. ",
        "createdAt": "2018-07-15 15:37:21",
        "state": "open",
        "number": 54348
    },
    {
        "title": "Contributed webview context menu actions",
        "description": "**Feature request**\r\nAllow extensions to contribute to the context menu in a webview \r\n\r\n(From FB meeting)",
        "createdAt": "2018-07-13 22:05:58",
        "state": "open",
        "number": 54285
    },
    {
        "title": "Add way for extensions to signal that diagnostics are actively being computed but have not been returned yet",
        "description": "**Problem**\r\nSometimes it may take a few seconds to return diagnostics in a file (especially when you first open a workspace). We would like a way to signal to users that diagnostics are actively being computed but are not being shown yet. This piece of information could also be used at other points in the VS Code UI (such as preventing f5 for example)\r\n\r\n**Possible solutions**\r\nWe discussed a few potential ideas around this at the FB meeting:\r\n\r\n- Add API so that an extension / language server can signal that diagnostics are actively being computed for a given file\r\n- Encourage extensions to return a fake diagnostic that says \"diagnostics are being computed\"\r\n- Add a pull model for diagnostics so that we can determine \r\n\r\n(This came out of the FB meeting)",
        "createdAt": "2018-07-13 18:38:02",
        "state": "open",
        "number": 54273
    },
    {
        "title": "Allow diagnostics messages to have markdown (or formatted text) content",
        "description": "**Feature request**\r\nAllow diagnostics to display formatted content. The specific request was to show part of a diagnostic message in bold.\r\n\r\nA few potential options:\r\n\r\n- Allow diagnostics to use markdown content\r\n- Allow diagnostics to use formatted text \r\n- Add an \"important span\" to diagnostic messages that lets us control the styling of the diagnostic.\r\n\r\n(This request came out of the FB meeting)\r\n",
        "createdAt": "2018-07-13 18:25:09",
        "state": "open",
        "number": 54272
    },
    {
        "title": "Configurations naming mixing javascript and typescript",
        "description": "I the configurations of the editor, when you search for \"typescript\", you will notice that configurations related to javascript and typescript are mixed with each other.\r\nThis is not the ideal, since one can use different configurations for javascript projects than for the typescript projects. See the image attached.\r\n\r\n![image](https://user-images.githubusercontent.com/4294962/42707005-2098a27a-86af-11e8-9562-e3cd8f8404b2.png)\r\n\r\n",
        "createdAt": "2018-07-13 18:12:22",
        "state": "open",
        "number": 54270
    },
    {
        "title": "[json] package.json: complete package versions from scopes or private registries",
        "description": "While there are numerous issues explaining that package _names_ cannot be autocompleted for scopes on the official registry or for private registries, that doesn't mean you shouldn't be able to autocomplete package _versions_.\r\n\r\nAnd I'd argue that atleast for private registries autocompleting the version is generally more important than autocompleting the name. The name is usually well known for internal dependencies. But the version range available; that not so much...\r\n\r\nAnyway, for scoped packages and even for scopes that are redirected to other registries using `registry` entries in `.npmrc`, the versions can be gotten from a simple `npm view` command, which returns a JSON structure that also holds all of a package's versions. No reason the functionality for that command couldn't be tapped for autocompletion as well.\r\n\r\n",
        "createdAt": "2018-07-13 09:44:07",
        "state": "open",
        "number": 54248
    },
    {
        "title": "Allow to associate a workspace folder to untitled documents",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nCurrently VS Code workspace API doesn't allow to specify the workspace of the document being created with:\r\n```js\r\nopenTextDocument(options?: {content: string, language: string}): Thenable<TextDocument>\r\n```\r\n\r\nIn our [Quokka extension](https://marketplace.visualstudio.com/items?itemName=WallabyJs.quokka-vscode) we allow users to select an active workspace (with `window.showWorkspaceFolderPick`). The active workspace is used as a working directory to run their code.\r\n\r\nHowever, when we create new (scratch) documents with the `openTextDocument` method call, we can't pass the selected workspace, and it causes users to see intellisense (and other services) for the first workspace (rather than for the one selected by the extension).\r\n\r\nWould it be possible to extend the API and add workspace URI property to the `options` parameter?",
        "createdAt": "2018-07-13 03:33:30",
        "state": "open",
        "number": 54227
    },
    {
        "title": "Debug Provider to return launch configurations 'in-memory' to the debugger",
        "description": "The only way to start a debug session in vscode is by populating the launch.json content. In the 'live share' extension the launhc.json is not the only source of debug configuartions, for example when connected to a VS host there will be no launch.json file. Also live share will artificially create all the 'shared debug configurations' available on runtime without the need to change the content of launch.json.\r\n\r\na simple way to achieve is by something like this:\r\n```ts\r\ninterface DebugLaunchConfigrationsProvider {\r\n getLaunchConfigurations(): ProviderResult<DebugConfiguration[]>;\r\n\r\nonLaunchConfigurationsChanged: Event;\r\n}\r\n```\r\n",
        "createdAt": "2018-07-12 22:45:57",
        "state": "open",
        "number": 54212
    },
    {
        "title": "add custom folding strategy",
        "description": "Hello,\r\n\r\nThis PR has been discussed  with @aeschli at #53910\r\n\r\n- allow folding range provider to have an id\r\n```\r\ninterface FoldingRangeProvider {\r\n     id?: string;\r\n     providerFoldingRanges(...) ...\r\n}\r\n```\r\n\r\n- allow the user to enter that id as a strategy\r\n```\r\n \"editor.foldingStrategy\": \"explicit\"\r\n```",
        "createdAt": "2018-07-12 20:05:46",
        "state": "open",
        "number": 54200
    },
    {
        "title": "Simplify API for updating settings",
        "description": "Today the API for modifying settings supports to target the different settings stores (user, workspace, folder). This is powerful but a bit laborious to use.\r\n\r\nIf you need to update a value in the store where it came from, you need to write code to figure out where it came from and then select the appropriate target value for passing it to `WorkspaceConfiguration.update`.\r\n\r\nThis results in something like this:\r\n```\r\n\tconst conf = vscode.workspace.getConfiguration('debug.node');\r\n\tconst info = conf.inspect('autoAttach');\r\n        const value = conf.get('autoAttach');\r\n\tlet target: vscode.ConfigurationTarget = vscode.ConfigurationTarget.Global;\r\n\tif (info) {\r\n\t\tif (info.workspaceFolderValue) {\r\n\t\t\ttarget = vscode.ConfigurationTarget.WorkspaceFolder;\r\n\t\t} else if (info.workspaceValue) {\r\n\t\t\ttarget = vscode.ConfigurationTarget.Workspace;\r\n\t\t} else if (info.globalValue) {\r\n\t\t\ttarget = vscode.ConfigurationTarget.Global;\r\n\t\t} else if (info.defaultValue) {\r\n\t\t\t// setting not yet used: store setting in workspace\r\n\t\t\tif (vscode.workspace.workspaceFolders) {\r\n\t\t\t\ttarget = vscode.ConfigurationTarget.Workspace;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tconf.update('autoAttach', !value, target);\r\n```\r\n\r\nI suggest that we simplify the API a bit.\r\n\r\nCurrently I see two approaches:\r\n\r\n1. Add a new enum value `originalTarget` to the `ConfigurationTarget` type. With this a setting value can be toggled like this: \r\n```\r\n    const conf = vscode.workspace.getConfiguration('debug.node');\r\n    const value = conf.get('autoAttach');\r\n    conf.update('autoAttach', !value, vscode.ConfigurationTarget.originalTarget);\r\n```\r\n\r\n2. Add a new attribute `effectiveTarget` to the structure returned from `WorkspaceConfiguration.inspect`. `effectiveTarget` would contain the target where the value came from. With this a setting value can be toggled like this: \r\n```\r\n    const conf = vscode.workspace.getConfiguration('debug.node');\r\n    const info = conf.inspect('autoAttach');\r\n    const value = conf.get('autoAttach');\r\n    conf.update('autoAttach', !value, info.effectiveTarget);\r\n```\r\n",
        "createdAt": "2018-07-12 15:01:47",
        "state": "open",
        "number": 54183
    },
    {
        "title": "Provide an API to track a position in a document across edits",
        "description": "I've come across a few places where this'd be handy lately. Most recently, I run some tests for my user and I get back positions in the document of where each test is - this allows them to click on the test in the runner/results to jump directly to it.\r\n\r\nUnfortunately, if the user modifies their test file then this location information becomes out of date and now jumps the user to the wrong location when they click it. This can be really common - you run your tests; 5 of them fail; you start working through them - working on the first test shifts the position of the tests below such that it's now difficult to jump to them from the test list.\r\n\r\nVS Code is presumably already tracking things like this for things like decorations so it'd be nice if we could use it too. For example, imagine an API like this:\r\n\r\n```ts\r\n// Get some token that represents a live position in the document\r\nconst loc = document.trackLocation(position);\r\n\r\n// User makes some edits\r\n\r\n// Request the new position\r\nconsole.log(document.positionOf(loc));\r\n```\r\n\r\n",
        "createdAt": "2018-07-12 09:03:53",
        "state": "open",
        "number": 54147
    },
    {
        "title": "Localized descriptions for built-in extensions and their settings dont show up in Extensions view",
        "description": "For all our built-in extensions, we have the package-nls.json such that extension and settings descriptions are localized.\r\nThese localized strings dont appear in the extensions view:\r\n\r\n![image](https://user-images.githubusercontent.com/16890566/42601169-90dc3a52-8519-11e8-8192-342e26d00af7.png)\r\n\r\nThe above shows a weird mixture of English and localized strings.",
        "createdAt": "2018-07-11 21:50:11",
        "state": "open",
        "number": 54111
    },
    {
        "title": "Make extension details view more responsive",
        "description": "When using grid view (2 columns and the extension viewlet, I was at zoomLevel 2 at the time):\r\n\r\n<img width=\"498\" alt=\"screen shot 2018-07-11 at 7 42 33 am\" src=\"https://user-images.githubusercontent.com/2193314/42579880-180905be-84de-11e8-8c68-95737287b601.png\">\r\n\r\nThe reason I need it is to check the download count/stars to see if this was \"the one\", also those details are hidden in the viewlet so I couldn't check there:\r\n\r\n<img width=\"396\" alt=\"screen shot 2018-07-11 at 7 43 43 am\" src=\"https://user-images.githubusercontent.com/2193314/42579943-37e85e34-84de-11e8-98df-e5e9f6f02936.png\">\r\n",
        "createdAt": "2018-07-11 14:48:59",
        "state": "open",
        "number": 54064
    },
    {
        "title": "Outline view + Markdown: Do not display the \"#\"s",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nThe Outline view for Markdown already displays headers and sub-headers in a structured way; there is no need to pollute the view with \"#\"s to show the header levels.\r\n\r\n![image](https://user-images.githubusercontent.com/103355/42536060-08a6d31e-845f-11e8-8846-4bb7a7fad80a.png)\r\n",
        "createdAt": "2018-07-10 20:34:27",
        "state": "open",
        "number": 53992
    },
    {
        "title": "Support links execute vscode commands in output panels",
        "description": "## Feature\r\nCurrently, I'm using the output panel and can use file paths in order to create links to files on my system. At the moment, this includes input and output files from the extension running. I want to also be able to diff compare the output to the correct output on just a click from the terminal.\r\nIn order to use vscode's awesome diff editor, I have to launch it programmatically. So that's where this feature idea came from. If I was able to create links in the output panel that run a vscode command, I could then launch the diff editor on the appropriate files.\r\nI can also see why you wouldn't want someone to launch commands from the output panel as a fear of unknown code execution.\r\n### Background\r\nI'm working on an extension for personal use designed as a test runner for competitive programming. The gist of it is that I create test cases from input and output files and can run on multiple languages with the output to the output panel. There are other features specific for the extension that aren't relevant here.\r\n\r\nAny input on whether this is already supported, any good alternatives, or whether this is a bad idea?\r\n\r\nNote: that just selecting files and doing a diff isn't an applicable solution, because the files are runtime generated and stored in temporary locations.",
        "createdAt": "2018-07-10 02:52:25",
        "state": "open",
        "number": 53922
    },
    {
        "title": "Setting the zoom level independently for each editor",
        "description": "I have a very large monitor and am using the grid layout a lot (thanks! :)) ... and what I'm finding is that I'd like to zoom out some of the editor panes so that they're visible to glance at, but reduced in size seeing as they're not the main focus, and then be able to zoom in on certain panes as well. For instance I write a tonne of notes across different markdown files, and I'll have 2-3 previous markdown files open to the right in a vertical stack of grid panels for reference/review while I'm writing today's notes, which take up a full column to their left. Then to the left of that, I have the current code file I'm working on. The main markdown file would ideally be zoomed in a bit, and the code file would be at the normal zoom level. The reference notes on the right would be at about half zoom so I can see enough to make the vertical stacking not lose value.",
        "createdAt": "2018-07-09 19:42:05",
        "state": "open",
        "number": 53901
    },
    {
        "title": "Dynamic injection grammar contributions",
        "description": "**Problem**\r\nhttps://github.com/mjbvz/vscode-lit-html/issues/14 \r\n\r\nMany users have requested that we colorization the contents of all JavaScript template strings as html. However I think that turning this on by default with no way to disable it would be incorrect. Instead, I want to have a setting that allows users to enable or disable this behavior.\r\n\r\n**Proposal**\r\nThe current colorization of `html` tagged templates is provided by an injection grammar. In order to support treating all template strings as html, I would like to be able to contribute this injection grammar dynamically. I can see this working in a few possible ways:\r\n\r\n* Add a `when` clause to contributed grammar injections\r\n* Add a `vscode` api that allows registering (and possibly unregistering) of injection grammars\r\n\r\nThe current workaround is to make the extension rewrite its `package.json` or its contributed grammar (with the changes only taking effect after the next load). I believe that vetur already does something like this",
        "createdAt": "2018-07-09 16:13:30",
        "state": "open",
        "number": 53885
    },
    {
        "title": "suggestion score - allow first character to be a weak match",
        "description": "(This idea was originally posted in the repo for the python extension as issue [2097](https://github.com/Microsoft/vscode-python/issues/2097), reposted here on advice of [MikhailArkhipov](https://github.com/MikhailArkhipov). This is reworded and extended with screenshots)\r\n\r\nIntellisense completions in VSCode are only shown after typing the first letter of a method. But I don't always remember this - I often only remember some other parts of a name.\r\n\r\nExample: If I type \r\n \r\n    import os \r\n    os.dir\r\n\r\nI would like to get \"mkdir\" or \"makedirs\" as a suggestion. This works as expected in VS Community2017 (or other IDEs like pycharm):\r\n\r\n![intellisense_vs_community2017](https://user-images.githubusercontent.com/19992955/42380505-74e7b554-812e-11e8-83bc-ece31654ee40.png)\r\n \r\nIn VSCode 1.25.0 (with python extension 2018.06) I only get this:\r\n\r\n![intellisense_vscode1 25](https://user-images.githubusercontent.com/19992955/42380531-84cd182e-812e-11e8-887f-c752623cd53d.png)\r\n\r\nOnly if I enter \"os.m\" I get suggestions for \"mkdir\" or \"makedirs\". It's nice that after the initial letter I can enter any string so that \"os.md\" shows the suggestions I want but I don't always remember the first letter of a method. I think I'm not the only one with this problem. \r\n\r\nThis not only affects the module os but is a general problem.\r\n\r\nI don't know how this behavior is called. maybe fuzzy completion? Please adjust the title of this thread.\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n",
        "createdAt": "2018-07-06 13:17:40",
        "state": "open",
        "number": 53715
    },
    {
        "title": "Use code editor for rename input box",
        "description": "Release 1.25.0 just introduced sub-word navigation \u2013thank you!- yet it is not available on the `F2` _Rename Symbol_ input prompt box.\r\n\r\nIdeally it should be possible to navigate in it as well. It'd be specially useful on camel-cased methods renaming.",
        "createdAt": "2018-07-06 07:55:10",
        "state": "open",
        "number": 53666
    },
    {
        "title": "Improvements to Node Auto Attach to improve defaults and discoverability",
        "description": "We should improve Node auto attach in the following ways:\r\n\r\n1. Remove the Toggle Auto Attach status bar action, and replace it with the user setting instead. It's my understanding that the StatusBarAction was added due to a performance concern on Windows, which have been resolved. \r\n\r\nThe rationale is to make it a global setting, and declutter the already full statusbar. This would also enable a workspace setting to override for a specific project, and enable users to toggle this once.\r\n\r\n2. We should enable Auto attach by default, and provide more guidance to the user to on what's going on. For example, show a notification when a debug command line is detected in the terminal, that has an explainer text, and an action to disable.\r\n\r\nThe overall rationale is to improve discoverability and provide a more opinionated default.\r\n\r\ncc @egamma, @weinand \r\n\r\n",
        "createdAt": "2018-07-06 03:32:59",
        "state": "open",
        "number": 53640
    },
    {
        "title": "Shared properties in launch.json ",
        "description": "## Search Terms\r\n\r\nlaunch.json, configuration, url\r\n\r\n## Suggestion\r\n\r\nThe ability to specify shared properties among launch configurations.\r\n\r\nAllowing properties to be inherited or specified in some common way while allowing overrides in individual entries would ease this situation greatly.\r\n\r\n## Use Cases\r\n\r\nFor example, I have many launch configurations that are identical except the URL. Management of changes then has to be propagated to each and every entry. Often a single launch.json can contain dozens of entries, and changing something simple but common like browser or other option must be done by search and replace. SNR itself is easy, but the repeated entries clutter up the launch.json and make spotting the actual differences when they exist other than URL more difficult.\r\n\r\nI fully understand this is a corner case and not relevant to a large audience, however it would be extremely helpful for those who do need it, and the implementation is small in scope.\r\n\r\n## Examples\r\n\r\nNot too picky about actual implementation, but a possible idea is below. Multiple shared configs accessed by name would be even better to allow multiple default settings.\r\n\r\n```json\r\n{\r\n    \"version\": \"0.2.0\",\r\n    \"defaultConfiguration\": [\r\n            \"preLaunchTask\": \"build\",\r\n            \"request\": \"launch\",\r\n            \"sourceMaps\": true,\r\n            \"port\": 9222,\r\n            \"smartStep\": true,\r\n            \"breakOnLoad\": true,\r\n            \"webRoot\": \"${workspaceRoot}\"\r\n     ],\r\n    \"configurations\": [\r\n        {\r\n            \"name\": \"Demo1 (Chrome)\",\r\n            \"type\": \"chrome\",\r\n            \"url\": \"http://127.0.0.1:8888/demo1/\",\r\n        },\r\n        {\r\n            \"name\": \"Demo1 (Firefox)\",\r\n            \"type\": \"firefox\",\r\n            \"url\": \"http://127.0.0.1:8888/demo1/\",\r\n        },\r\n        {\r\n            \"name\": \"Demo2 (Chrome)\",\r\n            \"type\": \"chrome\",\r\n            \"url\": \"http://127.0.0.1:8888/demo2/\",\r\n        },\r\n    ]\r\n```",
        "createdAt": "2018-07-04 22:28:28",
        "state": "open",
        "number": 53557
    },
    {
        "title": "Editor/terminal only anti aliasing",
        "description": "So would love to have a working anti aliasing. Right now it's all or nothing with workbench setting - so either my editor fonts are blurry or, if I turn off AA then the menu fonts (which I can't appear to change) get all crappy due to them using a font that doesnt work well with AA. \r\n\r\nCan we please have an option to use anti aliasing in the editor and terminal only?  Seems like a pretty standard thing that all other editors support.  I realize there is a lot of discussions but all the issues have been closed with no real working resolution a far as I am concerned.",
        "createdAt": "2018-07-04 19:27:35",
        "state": "open",
        "number": 53554
    },
    {
        "title": "Subword navigation : Apply introduced feature to whole UI",
        "description": "Issue type : Feature Request\r\n\r\nAfter the PR #48023 has been merged, a feature I really like has been added to VSCode and is currently in ~Insiders~ `1.26`. This change is working well so far in the editors, but I would want to be more extended through the whole vscode UI.\r\n\r\nBy \"_through the whole UI_\", I mean Search boxes, Command Palette, **file/folder renaming**, even the terminal (_stretched request here_).\r\n\r\nThis is a request that is already present in the extensions that provided this functionnality in the past (but were blocked by extensions APIs limits) : https://github.com/ow--/vscode-subword-navigation/issues/12 (as seen in this thread too : https://github.com/Microsoft/vscode/issues/541#issuecomment-371194836).\r\n\r\n@kumarharsh's request (https://github.com/Microsoft/vscode/issues/3526#issuecomment-249657993) is basically the same as what this current issue is about.\r\n\r\nIt would be awesome to have either :\r\n- an extension API to allow for hooks in the Input fields of VSCode (which would allow for something kind of like #35993) (**_this would be better in another issue though_**)\r\n- or to actually do it in the core of vscode.\r\n\r\n<details><summary>VSCode Insiders Info</summary>\r\n<p>\r\n\r\n```\r\n  Version: 1.25.0-insider\r\n  Commit: 33ba00346fd1bc889d5adc2f386c64fdb3657e61\r\n  Date: 2018-07-03T14:40:32.630Z\r\n  Electron: 1.7.12\r\n  Chrome: 58.0.3029.110\r\n  Node.js: 7.9.0\r\n  V8: 5.8.283.38\r\n  Architecture: x64\r\n```\r\n\r\n</p>\r\n</details>",
        "createdAt": "2018-07-03 18:22:31",
        "state": "open",
        "number": 53498
    },
    {
        "title": "Allow for horizontal scrolling a page at a time",
        "description": "- VSCode Version: Code 1.17.2 (b813d12980308015bcd2b3a2f6efa5c810c33ba5, 2017-10-16T13:59:46.104Z)\r\n- OS Version: Windows_NT x64 10.0.17134\r\n- Extensions: \r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\ncsharp|ms-|1.13.1\r\nPowerShell|ms-|1.5.1\r\nvetur|oct|0.11.3\r\n\r\nWhen clicking in the horizontal scroll bar area the page jumps to a relative location. This makes it hard to be sure you are reading the entire line. Most text editors jump a single page width at a time when clicking in the scroll area thus you can be sure you have read the entire long line.\r\n\r\nNot having a < and > on either side of the scroll bar would be a nice plus as well. For those who may not want pageable horizontal scrolling the < and > could be used to scroll a page at a time and still leave relative scrolling in place.\r\n\r\n---\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open a file with a long line\r\n2. Find the long line and then exercise the horizontal scrolling functionality.  \r\n\r\n",
        "createdAt": "2018-07-03 15:20:59",
        "state": "open",
        "number": 53492
    },
    {
        "title": "[json] don't suggest top level snippet if there's already an object",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\n- Open one of the user snippets JSON files\r\n- Type \" to bring up the empty snippet suggestion\r\n- Tab to insert it\r\n\r\nThe provided snippet inserts top-level curly braces, which (I don't know JSON) an existing snippet file already has, making the new snippet invalid.\r\n\r\n```JSON\r\n// Valid\r\n{\r\n\t\"Existing Snippet\": {\r\n\t\t\"prefix\": \"my_snippet\",\r\n\t\t\"body\": \"this is a snippet\",\r\n\t\t\"description\": \"I'm an existing snippet\"\r\n\t}\r\n}\r\n\r\n// \"End of file expected\" warning on the next line\r\n{       \r\n\t\"snippetName\": {\r\n\t\t\"prefix\": \"prefix\",\r\n\t\t\"body\": \"snippet\",\r\n\t\t\"description\": \"description\"\r\n\t}\r\n}\r\n```\r\n\r\nVS Code version: Code 1.24.1 (24f62626b222e9a8313213fb64b10d741a326288, 2018-06-13T17:51:32.889Z)\r\nOS version: Windows_NT x64 6.3.9600\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-3630QM CPU @ 2.40GHz (8 x 2395)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: disabled_software<br>rasterization: disabled_software<br>video_decode: enabled<br>video_encode: enabled<br>vpx_decode: unavailable_software<br>webgl: enabled<br>webgl2: enabled|\r\n|Memory (System)|15.95GB (10.49GB free)|\r\n|Process Argv|C:\\Program Files\\Microsoft VS Code\\Code.exe|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (2)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-lua|gcc|0.1.2\r\ncolor-highlight|nau|2.3.0\r\n\r\n(1 theme extensions excluded)\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-07-02 16:25:22",
        "state": "open",
        "number": 53454
    },
    {
        "title": "User profile",
        "description": "What am going to ask is huge. I know it might take a lot of work. It is not a small thing but very important for me.\r\n\r\nI am using VS Code from day one. And during that time I have few OS reinstalled and one PC change. Every time when that happens I need to install all plugins and configure VS Code again.\r\n\r\nNow I've realized that I use VS Code without reinstall for quite a while. \r\n\r\n1. I have pretty much nice setup, which was made through 1-2 years. But I do not remember all changes I made in configuration or all extensions. I remember one day accidentally I found an article that recommended to use some cool font, I followed procedure to install and activate it. Also I've went through so many themes before I've found the one I like.\r\n\r\n   But if my PC crashes, I am not sure I'll ever get back to the same setup. Because I do not remember all extensions I have now, and where to look the name of that font and how to activate it. I do not remember name of the theme. So PC crush it will be pretty much devastating experience in terms of IDE setup.\r\n\r\n2. I have PC at work and at home and laptop. I have VS Code installed everywhere, I often jump between PCs doing same job and sync through github. But my setup is different on every PC. And it is not something that I like. I cannot find that cool article about that cool font. So I just resigned that this is how it works. Sometimes I want to run a tool and discover it is not here because I did not yet installed it on this VS Code instance.\r\n\r\n3. Sometimes I have to code few lined on the PC of other people as a supervisor. But setup of those users completely turn me off. I just cannot work on their color theme and without tools I love and depend on.\r\n\r\n4. VS Code become a very advanced, versatile and flexible tool. \u041c\u042b Code setup for PHP developer looks and feel different then setup of JS developer or Markdown writer. For instance when I edit markdown files I want wrap lines at 80, when edit JS files I want to wrap limes at 160. And so on.\r\n \r\n**feature request**\r\n\r\nAllow users lo login to VS Code with live ID, and create cloud profile, and VS code not only restore configuration, key map, themes but also installs all extensions I have. If I install something new on PC one, when I open PC two it will automatically update. Also user can create few profiles for example one for working with PHP with needed extensions and theme, another for documentation work with markdown and such. not only user can restore environment, user can have different environments and quickly switch between them.\r\n\r\nSo I could have uniform experience, where ever I am. Even if I am in internet cafe on the edge of the universe, just install VS Code to write few lines, login, and here we are, MY VS Code. My. Only my, exactly like it was last time i'd opened it on the other edge of the universe. \r\n",
        "createdAt": "2018-07-02 16:08:11",
        "state": "open",
        "number": 53453
    },
    {
        "title": "Sort extensions by extension update date",
        "description": "It's in the title : I could use the possibility to browse installed extensions sorted by ~~installation~~ update date.\r\n\r\nI often install a batch of extensions at a time, for a given language, or about a given feature. Some times I find unrelated extensions during the search and install them too.\r\nSo I restart the editor with a whole bunch of new extensions, and its behavior may be quite different compared to last reload.\r\n\r\nI don't necessarily remember the names of all the newly installed extensions, and after restarting the editor sometimes I wish to go back to the extension read-me to see the how-to again, or just get the extension's name to use its commands.\r\n\r\nWhen you have a lot of extensions installed it may be hard to browse through to find the new ones.\r\nIt would be nice to have a way to discriminate the latest installed extensions.\r\n\r\nThank you for this great editor anyway :)\r\n",
        "createdAt": "2018-07-01 20:03:11",
        "state": "open",
        "number": 53405
    },
    {
        "title": "Providing an option to copy the hover text to the clipboard",
        "description": "ref: https://github.com/Microsoft/vscode-go/issues/1742\r\n\r\nhttps://user-images.githubusercontent.com/16890566/42074807-d904ff04-7b22-11e8-9e47-6809b6a0625f.gif\r\n",
        "createdAt": "2018-06-30 21:32:57",
        "state": "open",
        "number": 53386
    },
    {
        "title": "Update: Provide error messages if network resources are unavailable",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nRecently I had a problem with my ISP that all resources hosted on Microsoft servers were inaccessible for me. The error was simple \u2014 \"Connection timed out\".\r\n\r\nBut I noticed that VS Code doesn't directly tell if, for example, it fails to check updates because of this, instead, it just says \"There are currently no updates available.\", which is a quite untruthful message. \r\n\r\nBetter, if it would tell when some action fails because the resource is inaccessible.\r\nFor example, if you run update check manually, after it fails, it would say \"The update server is currently inaccessible. Check your network connection.\".\r\n\r\nThis all also applies for extensions installation \u2014 same *hilarious* situation: \"Error: Failed to install 'msjsdiag.debugger-for-chrome'. [Download Manually]\".\r\nUntil I figured out that Microsoft resources are unavailable for me, I thought it's problem with my VS Code installation or config files. Guess how many times I tried to install extensions, reloaded the window, changed settings and etc?\r\n\r\nVS Code version: Code - Insiders 1.25.0-insider (6ca99aca80e80224f1c0bd4370c6ec4941c3bc54, 2018-06-29T09:03:04.490Z)\r\nOS version: Windows_NT x64 10.0.17686\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-06-30 12:16:37",
        "state": "open",
        "number": 53379
    },
    {
        "title": "Linked snippets",
        "description": "**Feature request**\r\nAPI to insert multiple snippets in a file so that the the placeholders of these snippets are connected together.\r\n\r\nExample using this to reimplement rename:\r\n\r\n1. Start with the js:\r\n\r\n```js\r\nconst a = 1;\r\nconsole.log(a)\r\n```\r\n\r\n1. Trigger rename on `a`\r\n\r\n1. VS Code inserts linked snippets `${1:a}` at all locations effected by the rename:\r\n\r\n```\r\nconst ${1:a} = 1;\r\nconsole.log(${1:a})\r\n```\r\n\r\nAs the user completes the placeholder value, both locations are updated in the file as they type. \r\n\r\n\r\n**usage cases**\r\nRefactorings  that require user input, such as extract constant or extract function\r\n",
        "createdAt": "2018-06-29 00:15:55",
        "state": "open",
        "number": 53280
    },
    {
        "title": "Enable progressive selection (up/down) for multi-edit",
        "description": "I absolutely love the ability to select a character sequence and see all matching sequences highlighted, then press `Ctrl-Shft-L` to edit them all at the same time - stand-out feature for me.  But quite often, I don't want to edit all matches in the file - I may only want to edit those in the current function or block.  It gets a bit painful to select these with the mouse.\r\n\r\nI think a great (and easily implemented?) feature would be to be able to successively select matching sequences above or below my original selection with a key combination - say `Ctrl-Shft-Down` or `Ctrl-Shft-Up`.\r\n\r\nFor example, I have a function with 10 instances of the string `isValid` in it.  I want to edit them all, but not the other instances of `isValid` in the file.  With this feature implemented, I could:\r\n\r\n1. Select the first instance of `isValid` in the function\r\n1. Press `Ctrl-Shft-Down` nine times\r\n1. Edit away around all 10 instances of `isValid`!\r\n\r\n",
        "createdAt": "2018-06-28 18:37:02",
        "state": "open",
        "number": 53266
    },
    {
        "title": "Outline view: collapsed by default (introduce optional setting?)",
        "description": "Very simple request: I'd like the outline view tree to be collapsed by default. It'd be great if there were a configuration setting for this. To be clear, I'm referring to the items in the tree, not the panel itself.\r\n\r\nGood:\r\n\r\n![image](https://user-images.githubusercontent.com/298883/42051462-7ae50a72-7b4f-11e8-9359-e587be8bc9ea.png)\r\n\r\nBad:\r\n\r\n![image](https://user-images.githubusercontent.com/298883/42051505-97429086-7b4f-11e8-9a9c-8ee580523280.png)\r\n",
        "createdAt": "2018-06-28 17:48:13",
        "state": "open",
        "number": 53262
    },
    {
        "title": "Show 'Source' actions in file explorer context menu",
        "description": "**Feature request**\r\nShow source actions in the file explorer context menu. This would allow triggering actions such as `organize imports` on file\r\n\r\nI believe this would require a new activation event and a new way to present source actions (instead of using the editor right click context menu)\r\n\r\n**Alternatives**\r\n- A generic `source` context menu could be contributed by an extension\r\n\r\n- Or individual extensions could contribute new items to the file explorer context menu",
        "createdAt": "2018-06-27 21:36:12",
        "state": "open",
        "number": 53180
    },
    {
        "title": "Improve usefulness of extension \"Contributions\" view",
        "description": "The Contributions tab for an extension should be a quick place to change settings for that extension.\r\n\r\n- The \"Settings\" section should show the current workspace/user value for the setting as well as allowing to change the setting\r\n  - this could be an inline editor, modal dialog, or just a \"Set\" link in the workspace/user columns that pops open the settings.json and adds the key to the bottom of the file or positions the cursor at the existing value\r\n\r\n- The \"Commands\" section should similarly allow changing the keyboard shortcut\r\n- The \"Languages\" section should have a link to show a syntax-highlighted sample of the snippets",
        "createdAt": "2018-06-27 12:54:23",
        "state": "open",
        "number": 53146
    },
    {
        "title": "Snippet transform leaves conditional operator",
        "description": "```\r\n\t\"fffff\": {\r\n\t\t\"prefix\": \"ffff\",\r\n\t\t\"body\": [\r\n\t\t\t\"- (${1:void})${2:methodName}{\",\r\n\t\t\t\"${1/void$|(.+)/(?1:\\n\\treturn nil;)/}\",\r\n\t\t\t\"}\"\r\n\t\t]\r\n\t},\r\n```\r\n\r\n* have the snippet above\r\n* type number for the first placeholder\r\n* press tab\r\n* \ud83d\udc1b there `?1:` in the editor...",
        "createdAt": "2018-06-27 12:09:55",
        "state": "open",
        "number": 53137
    },
    {
        "title": "Safe File Delete",
        "description": "Add a \"safe delete\" option for files that gives option to check for file usage in comments/strings **and/or** text occurrences. If usages found, it will display an additional warning before deleting the file.\r\n\r\n[Feature example](https://www.jetbrains.com/help/phpstorm/safe-delete.html) exists in WebStorm.",
        "createdAt": "2018-06-25 21:59:16",
        "state": "open",
        "number": 52844
    },
    {
        "title": "Add settings editor commands to focus next and previous settings",
        "description": "Issue Type: <b>Bug</b>\r\n\r\n1) When the cursor in the search box, <kbd>DownArrow</kbd> moves the keyboard focus to the list of settings. However, <kbd>UpArrow</kbd> does not bring me back to the search box.\r\n\r\n2) When the keyboard focus in the TOC, <kbd>RightArrow</kbd> should move the keyboard focus to the closest item in the list of settings.\r\n\r\n3) When the keyboard focus is in the list of settings, <kbd>LeftArrow</kbd> should move the keyboard focus to the highlighted node in the TOC.\r\n\r\n4) It seems unusal that the section headers and subheaders in the list of settings can take the keyboard focus. It would feel more natural if the headers and subheaders would be skipped.\r\n\r\n5) When a settings cells has the keyboard focus, <kbd>Enter</kbd> should move the keyboard focus to the value editor (same as <kbd>Tab</kbd>. <kbd>Shift+Tab</kbd> and <kbd>ESC</kbd> remain to remove it back to the settings row.\r\n\r\nVS Code version: Code - Insiders 1.25.0-insider (5d6156a0f8b68fe7e9429facbcfaa7c061a8b3e3, 2018-06-25T09:32:08.937Z)\r\nOS version: Darwin x64 16.7.0\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-4870HQ CPU @ 2.50GHz (8 x 2500)|\r\n|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>native_gpu_memory_buffers: enabled<br>rasterization: enabled<br>video_decode: enabled<br>video_encode: enabled<br>vpx_decode: enabled<br>webgl: enabled<br>webgl2: enabled|\r\n|Load (avg)|2, 2, 2|\r\n|Memory (System)|16.00GB (1.06GB free)|\r\n|Process Argv|/Users/kmaetzel/Applications/Visual Studio Code - Insiders.app/Contents/MacOS/Electron -psn_0_17449123|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-06-25 14:23:06",
        "state": "open",
        "number": 52815
    },
    {
        "title": "Make open editors view extensible",
        "description": "Reopening this issue again, as I (and other community members) believe this is **_rudimentary_** functionality of _any_ editor and should _**not**_ be left to extensions.\r\n\r\nQuite simply, an option to rename and delete files on/from disk should be offered as a right-click option in the Explorer pane, for currently open editors. This is essential when editing files which are external from the current workspace/directory (i.e. one-off edits). Items can be moved by means of dragging and dropping into different folders, so why should renaming and deleting be left out?\r\n\r\nThe solution of \"Open the parent folder to enable these functions\" should not be honored, as this is not suitable for single-file projects, and files opened using \"Open with Code\" from Windows Explorer.\r\n\r\nReferences: #30400 #1886",
        "createdAt": "2018-06-22 22:41:31",
        "state": "open",
        "number": 52713
    },
    {
        "title": "Git: Support submodule management",
        "description": "### **Feature Request**\r\n\r\nAdd support for the git submodule commands from within VS Code.\r\n\r\nCurrently submodules are supported, but only if the submodules are created via git cli.\r\n\r\nExamples: \r\ngit submodule init\r\ngit submodule update\r\ngit submodule summary\r\n\r\netc...\r\n\r\nI think the most important ones would be add, init, and update\r\n\r\nCurrently running ver. 1.24.1\r\n\r\n",
        "createdAt": "2018-06-22 17:32:55",
        "state": "open",
        "number": 52700
    },
    {
        "title": "Allow disabling builtin extensions from the command line and persisting the configuration state so that subsequently when vscode is closed and open ithose extensions will still be disabled",
        "description": "Allow disabling builtin extensions from the command line",
        "createdAt": "2018-06-21 20:01:48",
        "state": "open",
        "number": 52639
    },
    {
        "title": "Support for --inspect-brk=0 for node.js debugging.",
        "description": "Hi!\r\nSince node.js 8.1.0 `--inspect-brk=0` is used for random debugger port.\r\nhttps://github.com/nodejs/node/pull/5025\r\n\r\nFor now, VS Code 1.24 does now support such a situation. It fails to attach to process.\r\nSo, support this please.\r\n\r\nJust in case, WebStorm supports this, so let's catch up. :)\r\n\r\nWebStorm support answered me how they do it:\r\n> for child processes we do parse parent process output with regexp to get the port number. But note that this only works if the child process inherits stdio from parent.\r\n",
        "createdAt": "2018-06-20 01:44:27",
        "state": "open",
        "number": 52373
    },
    {
        "title": "Shortcut for opening color picker and insert color of selected format",
        "description": "### Problem\r\nA huge dealbreaker for me is that VSCode just doesn't let me use the color picker ever, because I'm using Sass files. There does not seem to be any color picker extension that provides the functionality either, that isn't Windows-specific (I'm running macOS).\r\n\r\n### Feature request\r\nI'd like the ability to spawn a color picker anywhere. So there would be a command that does exactly that, and when you're done it inserts the color code.\r\n\r\nA nice inclusion would be if it could know if the cursor is in a color code, and accordingly update that color code. VSCode seems to do this only in a few file types now, which is a bummer for anyone not using those. I don't *demand* this, as long as I can get a color picker I'm content.",
        "createdAt": "2018-06-19 22:29:08",
        "state": "open",
        "number": 52364
    },
    {
        "title": "make an action of editor.contrib.wordHighlighter",
        "description": "Currently there are 2 actions (assignable to hot keys) to move between highlighted tokens (```editor.action.wordHighlight.next``` and ```editor.action.wordHighlight.prev```), but there isn't a way to fire the highlighter action except using the mouse and clicking the token.\r\n\r\nThe action seems to be ```editor.contrib.wordHighlighter``` but can't map it to a hotkey like for example ```editor.action.showHover```.\r\n\r\nI'm using VimKeybinding and could be great have support for it. \r\n\r\n\r\n",
        "createdAt": "2018-06-19 19:55:53",
        "state": "open",
        "number": 52354
    },
    {
        "title": "Detect and inform user if Code is in quarantine on macOS",
        "description": "",
        "createdAt": "2018-06-18 17:59:12",
        "state": "open",
        "number": 52224
    },
    {
        "title": "Add prompt to \"test on insiders\" to issue reporter",
        "description": "In the issue reporter, add a prompt the test using the latest insiders build. Many issues reported against stable have already been fixed in insiders",
        "createdAt": "2018-06-18 15:31:38",
        "state": "open",
        "number": 52210
    },
    {
        "title": "Fix some missing indentationRules and indentation on ctrl+shift+enter",
        "description": "Fixes #51802  \r\nFixes #29134  \r\nMakes \"Insert Line Above\" command use current line's indentation when no indentationRules exist for the current language.\r\n\r\nAll indentationRules were copied/converted from the source language package or from a similar Atom package. Some language packages still don't have any indentationRules because I couldn't find any.",
        "createdAt": "2018-06-18 15:28:48",
        "state": "open",
        "number": 52209
    },
    {
        "title": "Feature Request: Outline Customization",
        "description": "Is it going to be possible for extensions to contribute `configurationDefaults` for the Outline (to show and to set follow cursor and sort type)? It would seem logical since we can do that for things like the minimap. It's beneficial for creating a curated experience with certain specialized extensions (and users can always override said defaults).\r\n",
        "createdAt": "2018-06-18 14:20:05",
        "state": "open",
        "number": 52202
    },
    {
        "title": "cursor up/down is confused by selection",
        "description": "- VSCode Version: 1.24.0\r\n- OS Version: Windows 7\r\n\r\nSteps to Reproduce:\r\n\r\n1. Create the following document\r\n```\r\ndorfus\r\nhamnut\r\n```\r\n2. Place the cursor at the d and go right three. Then go down.  The cursor is at the n. Good.\r\n3. Place the cursor at the end of dorfus and go left three. Then go down.  The cursor is at the n. Good.\r\n4. Place the cursor at the d and hold down shift while going right three. Release shift.  Go down. The cursor is at the n. Good\r\n5. Place the cursor at the end of dorfus and hold shift while going left three. Release shift. Go down. The cursor is at the end of hamnut? <--- BUG\r\n\r\nI expect the cursor to be at n in every case\r\n\r\nOther applications, for reference:\r\nvisual studio: good\r\nwordpad: good\r\nnotepad: good\r\nfirefox: good\r\nIE: good\r\nchrome: mysteriously works today, but didn't when I wrote this bug\r\ngedit: \"broken\" also, but on second thought, maybe it's sensible to some people. \r\n\r\nIn any event, it's also senseless to some people.\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2018-06-17 16:30:27",
        "state": "open",
        "number": 52131
    },
    {
        "title": "Further control over presentation of Problems",
        "description": "This relate to my feature request of https://github.com/Microsoft/vscode/issues/44141\r\n\r\nThe issue was resolved, but it only partially resolved my request. The use case I had was that I wanted to see squiggly underlines for the spellcheker in the editor view, but I didn't want to see the spelling issues reported in the Problems panel or Explorer view.\r\n\r\nCurrently one can control the type of diagnostic level for the spell checker extension;\r\n\r\n```\r\n\"cSpell.diagnosticLevel\": \"Hint\",\r\n```\r\n\r\nThis do indeed hide silence the report in the Problems panel and Explorer view, but with the draw back of changing the squiggly underlines in the Editor to the ellipsis:\r\n\r\n![image](https://user-images.githubusercontent.com/192418/41507209-47f4d9d2-722e-11e8-9634-b770f8573ee8.png)\r\n\r\nWould it be possible to have some control for the user or extension developers to allow such control?",
        "createdAt": "2018-06-17 11:00:16",
        "state": "open",
        "number": 52128
    },
    {
        "title": "[Feature Request] Extension Permissions, Security Sandboxing & Update Management Proposal",
        "description": "I believe that Visual Studio Code should support some kind of \"Extension Permission Management\", complete with prompts, warnings, opt-in, and opt-out, similar to what has been supported for some time now with Chrome, Firefox, and other browsers. \r\n\r\n# Reference Screenshot\r\n\r\nI've provided, for reference, some screenshots showing Extension Permission and update prompts and management UIs in the below screenshot, as well as others torwards the end of this proposal.\r\n\r\n#### Chrome prompting to approve additional permissions when updating an extension:\r\n\r\n![image](https://user-images.githubusercontent.com/4053734/41503578-cfbf9ee4-718c-11e8-82c8-8a97fb8b61a7.png)\r\n\r\n_(See additional screenshots at the very bottom.)_\r\n\r\n# Scope and Benefits\r\n\r\nI have proposed, in detail here, how Extension Permissions management could function and be exposed to users, including descriptions of dialogs for prompting users to allow/deny permissions on extension install vs. updating, changes to Extensions Sidebar and Extension Details Marketplace pages, grouping/managing extensions by Category/Collection in VSCode, specific warnings and when to show them, types of permissions could define (and whether may default to opt-out or opt-in for them), APIs could provide, how extensions could operate with more limited or conditional functionality, and how could crowdsource extension safety reporting.\r\n\r\nI'm also proposing that users can disable Auto-Update behavior for specific extensions, which, besides being useful in its own right, could allow users to stick with previous versions which require fewer permissions, manually review updates for higher-risk extensions, or avoid updating to problematic versions of extensions until issues are resolved.\r\n\r\n# Related Issues & Discussions\r\n\r\nAs discussed in Issue #9539 (\"Visual Studio Code should update itself silently\") regarding enabling silent, auto-updates of VSCode and Extensions) by @alexhass, @kasajian, myself and others, there are some security concerns regarding what permissions are granted to extensions when installing or updating them. As seen there, without such controls, some users aren't even comfortable installing many extensions, allowing them to auto-update once they have, or even allowing VSCode core itself to auto-update.\r\n\r\n# Proposed User Stories / Features for Extension Permissions Management\r\n\r\nSpecifically, I propose the following extension permission management features, prompts, and use cases:\r\n\r\n## 1.  **Display Extension Permission requirements**\r\n\r\n1. Clearly labels what permissions are required by each extension in Extensions Details page, with Permission Name (plus Icon) shown underneath the Disable/Uninstall buttons for each permission required/requested.\r\n\r\n2. Clearly label extension permissions, ideally via Icons (along with Name, Author, Description and Rating) in Extensions Sidebar (showing Installed and Available Extensions), at least as Icons next to either A) to left of # of Downloads (Cloud icon), B) to left of Settings (gear icon), or C) to right of Name and Version #, with them grayed out if denied\r\n\r\n## 2. **Prompt Users to Approve High-Risk Permissions**\r\n\r\n1. Notify user on extension install of potentially dangerous extension permissions and provide ability to opt-out of optional permissions or cancel install, by showing an  \"Approve Permissions for (ExtensionName)?\" (or \"Allow (ExtensionName) To?\" or \"Approve Extension Permissions\") dialog:\r\n\r\n\t- Only show this dialog if more than just basic On-Demand Actions permissions are requested.\r\n\t- Provide VSCode options to skip this prompt if only other common, usually safe permissions as requested (like possibly \"Auto-Complete\"?)\r\n\t- \"Approve\" (or \"Allow\") and \"Cancel Install\" dialog buttons\r\n\t- Checkboxes (or toggle buttons) for each \"Optional Permission\" (with \"(Optional\") shown after permission name)\r\n\t- For Required Permissions, show Checked (but disabled, so can't modify) checkboxes shown next to required permissions, possibly with \"(Required)\" shown after permission name\r\n\t- [Maybe, Low Priority] If user attempts to uncheck a required permission, possibly could just suggest they \"Don't install\", \"Disable\" or \"Install/Downgrade to Previous Version\"\r\n\t\r\n2. When Updating Extensions, show users \"Approve New Permissions for (ExtensionName)?\" prompt\r\n\r\n\t- Based on dialog shown when first installing\r\n\t- Only showing if/when there are new not-yet-approved permissions to review\r\n\t- Only shown if there are New Requested, New Required, or Now Required (previously optional and rejected) permissions which user hasn't already approved.\r\n\t- Show New (Not-yet-Approved or Now Required) permissions at the top\r\n\t- If permission was previously denied but is now Required instead of Optional, highlight it, and warn user may want to Cancel Update + Disable Auto-Update for that one extension instead.\r\n\t- Previously prompted permissions (whether or not previously approved, optional, required, etc.) are bottom, with space in between, so easy to review and modify here, but doesn't crowd the important changes.\r\n\t- Show dialog buttons: \"Approve\", \"Skip Update\" (only prompt again after next update), and \"Never Update\" (disabling auto-update).\r\n\t- [Advanced / Later / Maybe] Could ask user, after chose \"Skip/Never Update\", whether want to prompt again if/when required permissions change (optionally showing list of all New/Now Required permissions to check or uncheck waiting for, though may not be needed).\r\n\t\r\n## 3. **Extensions functioning with Optional Permissions denied**\r\n\r\n1. Extensions should be able to run with limited functionality when optional permissions are denied, yet be able to prompt user when try to use a feature disabled by denied permissions:\r\n\r\n2. You could provide an API allowing extension to show the Approve Extension Permissions dialog together with a custom message (maybe even custom title too) together with API allowing extensions to check what permissions are currently approved for the extension \r\n3. Possibly could limit extensions from checking permissions available to other extensions, in case would be security risk with them polling other extensions to find other extensions to automate/interact with as a workaround to their own denied permissions.\r\n4. Provide \"Never Ask Again\" button so that a prompt is never shown again for an extension, possibly with option to disable prompts just for just a) specific feature (permission use case/prompt message), b) specific permission, or c) all permissions for this extension.\r\n5. Can (disabled in VSCode Options) show status bar message and/or play error sound whenever attempt to use a feature (eg. hotkey, F1 action, etc.) unavailable due to denied permissions\r\n6. Provide API making it flag an action or context menu item as requiring a permission so that will automatically show \"(Disabled due to Permissions)\" or \"(Disabled)\" after action names (eg. in F1 command line, menus, etc.), and/or show permission prompt if clicked (or hotkey is used) anyways.\r\n\r\n## 4. **Disable higher-risk permissions by default**\r\n\r\n1. Have dangerous permissions like Full File System Control disabled by default in permission prompts.\r\n2. If required (vs. optional), can require user to manually check it before proceeding or warn user about the risks and how isn't needed for most extensions, and how may want to not proceed).\r\n3. Can be based on selected \"Extension Type/Category\" (eg. Language Syntax, Language Syntax + Auto-Formatting, File Management, etc.)\r\n\r\n## 5. **Safety Reporting**\r\n\r\n1. Allow Users to Flag Extensions as Safe vs. Suspicious (in addition to Ratings / Reviews), to crowdsource security and review\r\n2. Allowing reporting potentially malicious extensions for investigation\r\n3. Possibly affects what, if any, type and severity of warnings are shown in Approve Permissions dialog\r\n4. Possibly affects whether higher-risk optional permissions are enabled or disabled by default.\r\n\r\n## 6. **Modify Permissions Anytime**\r\n\r\n1. In Extension Sidebar, show \"Enable/Disable (Permission Name) (Icon)\" entry for each requested/required permission as menu items under the Gear icon (Settings menu showing Disable, Uninstall, etc. currently).\r\n2. In Extensions Sidebar, ideally also allow clicking permission icons to enable/disable (gray out).\r\n3. In Extensions Detail Page, allow clicking each Permission listed below the Disable, Uninstall, etc. buttons to Approve/Deny them.\r\n\r\n## 7. **Auto-Update options per Extension**\r\n\r\n1. Users could opt-out of Auto-Update for specific extensions, with toggle button next to Disable/Uninstall in Extensions Sidebar (under gear icon menu) and next to those buttons in Extensions Detail Page.\r\n2. This could allow users to stick with previous versions before new high-risk permissions became required\r\n3. This could allow avoiding updating to problematic versions of extensions until issues are resolved.\r\n4. This could allow users to manually review/approve updates based on reviews and changelog for higher (security or reliability) risk extensions\r\n5. This could be controlled per extension without disabling globally as may be desired by default for most extensions.\r\n6. Can be set per extension to \"Default\" vs Auto-Update vs. Disable Automates, like with Firefox, with Default behavior controlled through global setting.\r\nCould provide Undo Update button or choose from version history (like with Chrome/Firefox extension stores) on extension details page, to enable rollback to previous version after an update causes issues, instead of just disabling until if/when ever fixed.\r\n\r\n## 8. **Extension Categories Enhancements**\r\n\r\n1. Extension Type Categories benefits and use cases:\r\n\r\n\t- Allow extensions to be browsed or filtered by category from within VSCode and more easily in marketplace, in addition to how are used as Collections in Marketplace currently, possibly allowing extensions to belong to multiple categories, and supporting subcategories.\r\n\t- Which permissions are selected by default in Approve Permissions dialog, and when warnings (for exceptionally high-risk, unusual permission requirements) are shown to user in that dialog can be used on the extension type.  \r\n\t- This also makes it very clear to the user - without relying on them reviewing easy-to-overlook detailed permission requirements - at a glance what kind of permissions are likely to be required. \r\n\t- This can also be useful in general for helping users to find extensions, like done with Chrome and Firefox. \r\n\t- This can also make it very clear to users how advanced an extension is, with just Syntax Highlighting vs. Auto-Complete vs. Run/Debug, when trying to find an extension for a particular language.\r\n\t\r\n2. Show \"Extension Type/Category\" near the top of the Extension Details Page:\r\n\r\n\t- Category Customizable by Author, but limited based on permissions, eg. can't classify File System control extension as \"On-Demand Actions\"\r\n\t- Showing this Category at either:\r\nA) to right of Extension Name/ID at top, in parenthesis, B) to right of Author Name, C) a separate Line  below Author, D) to the left of the Permissions Names/Icons row, or E) a separate line above the Permissions row.\r\n\t- Allow Browsing and Filtering on Extensions website by Extension Type/Category\r\n\t\r\n3. Group Extensions by Category in Extensions Sidebar\r\n\r\n With grouping enabled/disabled via Icon next to \"Clear Extensions Input\", possibly allowing Expand/Collapse Groups, with options to group by:\r\n\t- Extension Type/Category (overall, like Language Syntax, etc.)\r\n\t- Permission (eg. File System, Auto-Save, Auto-Complete, On-Demand Actions), with extensions able to be shown multiple times under multiple groups.\r\n\t\r\n4. **Possible Additional Extension Categories / Subcategories could include**\r\n\r\n\t- **Language Syntax**\r\n\t\t- Highlighting, maybe even auto-complete prompts supports (if user always chooses/confirms what to insert, vs. arbitrary, automated modification of any document contents\r\n\t- **Language Syntax & Auto-Format**\r\n\t\t- If want as separate category with much higher expected (and by-default enabled) permissions, and if don't just allow extensions belong to a couple different categories simultaneously.\r\n\t- **Auto-Format (Auto Document Actions)**\r\n\t- **Document Tabs Management**\r\n\t- **Document Actions**\r\n\t- **Menu Extensions**\r\n\t- **Automation**\r\n\t- **File Management**\r\n\t- **Web-Connected**\r\n\t\r\n## 9. Specific Permission Types could include\r\n\r\n1. **On-Demand Document Actions**\r\n\t- Shown in F1 command line or newly added context, etc. menu actions which the user would have to choose to perform.\r\n\t- May not need permission (or at least don't show prompt) to register these kinds of actions.\r\n\t\r\n2. **Automated Document Actions**\r\n\t- Automate executing own (or even other built-in or other extension) actions (from F1, context menu, etc.) in response to events, timer, etc.,\r\n\t- Possibly can split into separate permission for use of other extension and/or built-in actions.\r\n\t\r\n3. **On-Demand Non-Document Actions**\r\n\t- Automated use of VSCode features which don't just affect document contents.\r\n\t\r\n4. **Automated Non-Document Actions (or just \"Automation\")**\r\n\t- Use of Actions applying to more than just document content performed automatically instead of on-demand (via context menus or F1), such as instead based on event handling, timer, etc. or in response to certain types of document edits.\r\n\t\r\n5. **Document Rendering (or Document/Editor Rendering/Display)**\r\n\t- For custom spelling underline, indicators, showing collapsible regions, etc.\r\n\r\n6. **User Interface Extension permissions**\r\n\r\n\t- **Toolbar**\r\n\t- **Context Menu**\r\n\t- **Menu Bar**\r\n\t- **Sidebar / Tool Windows**\r\n\t- **Statusbar**\r\n\r\n7. **File System Permissions**\r\n\r\n\t- **Extension Data Files**\r\n\t\t- Maybe allow extensions full control over files in folder only they have access to (except from other extensions without full file system control) without requiring approved permissions.\r\n\t- **File Browsing**\r\n\t\t- Read/list file and folder names (and possibly sizes, timestamps, etc.) for browsing.\r\n\t- **File Reading**\r\n\t\t- Read any file on disk, including those not opened as documents by the user.\r\n\t- **File Modification**\r\n\t\t- Modify or overwrite a file.\r\n\t\t- Provide warning in description for this and similar permissions that this is not typically necessary for language extensions where user can choose whether to save file or whether Auto-Save Permission should be granted instead.\r\n\t\t- Description / Tooltip: \r\nWarning: This is a potential dangerous permission usually not needed for most extensions (such as most Language Syntax extensions) which, when approved, allows the extension to delete, move, rename, create, read, and modify any files or folders on your system (Instead of just those installed with it or otherwise modify contents of opened document tabs user can choose to save), so you should only enable it for extensions you trust and may want to deny this permission when optional or cancel install of extensions which don\u2019t allow opt-out, especially if seems like this wouldn't be necessary for the type of extension.\r\n\t- **File Deletion**\r\n\t\t- Delete any existing or newly created file on disk.\r\n\t\t\r\n8. **Networking** (or Internet, or Web Service Use)\r\n\r\n9. **Open Files (as Document Tabs)**\r\n\r\n10. **Auto-Save (Opened Documents)**\r\n\t- If needed, can possibly split into separate permissions for Open Active Document (and only if allowed by document type/extension) vs. Auto-Save All Document Tabs.\r\n\t\r\n11. **Manage Document Tabs**\r\n\t- Reorganize, rename, save, close, or create new (but not necessarily Open Existing File as New Tab, if have that as a separate permission).\r\n\r\n12. **Create New Documents** (opened as Document Tabs)\r\n\r\n13. **Task Management**\r\n\r\n14. **Source Control**\r\n\r\n15. **Process Control**\r\n\t- Interacting with processed had launched or with existing processes.\r\n\r\n16. **Full System Control**\r\n\r\n17. **Launching Processes**\r\n\r\n\t- Alternative Names:  \"Execute\" or \"Run/Debug Code/App\" or \"Launch / Run / Debug\"\r\n\r\n\t- Description: Allow to start new processes or launch applications in background, such as is often required to Run, Build, or Debug code.\r\n\t\r\n\t- You could possibly allow extensions requiring this or similar permissions (or provide to any extension, if/when needed) the ability to save contents of an open document with unsaved changes to a temporary file, and provide the file path to that temp file to the extension - but *without* providing the extension the ability to modify/overwrite that temp file by default.  This would reduce risk of a malicious extension being able to save and execute arbitrary code into a temp file without that code being first shown in the opened document tab.\r\n\t- You can even, if necessary, delay any process launching until X milliseconds after any extension-automated changes (eg. auto-formatting) made to opened document contents.\r\n\t- Possibly can restrict, as defined in extension manifest and shown in Extension Details Page, what executable names are allowed. Then, at worst, the extension would have to inject malicious code into an open script document and require user\r\n\t- Possibly can restrict (without requiring separate higher-risk permission) whether any variable command line args are allowed for it other than file name and pre-declared ones to prevent passing arbitrary code via command line to execute.\r\n\t\r\n\t- Possibly separate permission for launching processes for exe's that are just bundled with extension vs. already installed on the system.\r\n\r\n## 10. Sandboxing Extensions\r\n\r\nWhat, if anything, has already been done to provide or attempt extension sandboxing or security with VSCode?\r\n\r\nAs I understand, VSCode is based on Electrum which, by design, disables much of Chromium's facility for sandboxing to enable native API access.  However, Electron and Node.js both have some facilities for sandboxing and security, and there are a few projects extending support for these, as detailed below:\r\n\r\n### Electron/Node.js Sandboxing/Security References and Options to Consider\r\n\r\n- [Electron's overview of security risks and options](https://electronjs.org/docs/tutorial/security) may be a useful reference for this discussion.\r\n- [Electron's sandbox options](https://electronjs.org/docs/api/sandbox-option) Would these be of any help here, or anything else described in above articles?\r\n- Here is an [Issue summing up progress of sandboxing support for Electron](https://github.com/electron/electron/issues/6712).\r\n- [Some tips on sandboxing and security with Electron](https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2016/september/avoiding-pitfalls-developing-with-electron/)\r\nMight the following be useful references for implementing Sandboxing in VSCode?\r\n-  @kwede's [Electron Sandboxing example app / template](https://github.com/kewde/electron-sandbox-boilerplate)e for Electron app using sandboxing for security: \r\n- [Great summary of sandboxing and XSS with Electron](https://blog.scottlogic.com/2016/03/09/As-It-Stands-Electron-Security.html), mentioning Brave browser as having developed or contributed code to support this.\r\n- Might [enableMixedSandbox() in VSCode](https://github.com/Microsoft/vscode/search?q=enableMixedSandbox&unscoped_q=enableMixedSandbox) be applicable or [use of --enable-sandbox](https://github.com/electron/electron/issues/11631)?\r\n- Would disabling node integration (eg. via \"new BrowserWindow({  webPreferences: { nodeIntegration: false } });\") and/or [Preload script + WebView](https://github.com/electron/electron/issues/1753) - as both discussed in [this Atom issue](https://github.com/electron/electron/issues/1753), as an example (though I understand VSCode isn't based on Atom) and as also [suggested at Hackernoon](https://hackernoon.com/electron-the-bad-parts-2b710c491547)- help here?\r\n- Preload script based security,\r\n\r\n### Node.js / JavaScript Sandboxing Projects\r\n\r\nWould any of Node.js's facilities for sandboxing / security possibly be applicable here, or any of the following projects providing sandboxing for Node.js or otherwise?\r\n\r\n- [Node.js built-in VM](https://nodejs.org/api/vm.html#vm_vm_executing_javascript)\r\n- [VM2](https://github.com/patriksimek/vm2) (from @patriksimek, like mentioned [here](https://medium.freecodecamp.org/running-untrusted-javascript-as-a-saas-is-hard-this-is-how-i-tamed-the-demons-973870f76e1c))\r\n- @gf3's [Sandbox](https://github.com/gf3/sandbox)\r\n- @auth0's [SandboxJS](https://github.com/auth0/sandboxjs)\r\n- [electron-common-ipc](https://www.npmjs.com/package/electron-common-ipc)\r\n- [Compute's Node.js sandboxing](https://blog.computes.com/new-javascript-secure-sandbox-405a4fca31ed)\r\n- [Google Caja](https://github.com/google/caja)\r\n\r\n\r\n## Additional Reference Screenshots\r\n\r\nYou can see some additional good examples of Extension Permission prompts and management in the screenshots below:\r\n\r\n\r\n#### Chrome prompting user to confirm higher risk permissions (and in language very clear to the user), when installing an extension:\r\n\r\n![image](https://user-images.githubusercontent.com/4053734/41503555-53e33092-718c-11e8-8506-8f73430f4f4e.png)\r\n\r\n\r\n#### Chrome prompting user to enable additional requested permissions when updating an extension:\r\n\r\n![image](https://user-images.githubusercontent.com/4053734/41503572-af946a96-718c-11e8-8fca-1daf9b35d179.png)\r\n\r\n\r\n\r\n#### Chrome allowing modifying some permissions for installed extensions, like \"Allow in incognito\":\r\n\r\n![image](https://user-images.githubusercontent.com/4053734/41503596-030da994-718d-11e8-99c8-4fab0cd0e6d0.png)\r\n\r\n\r\n#### Firefox allowing managing Auto-Update behavior for installed extensions:\r\n![image](https://user-images.githubusercontent.com/4053734/41503620-4d838dcc-718d-11e8-89e6-f681948707f5.png)\r\n\r\n\r\n#### Firefox allowing changing permissions from sidebar for installed plugins, such as to control \"Ask to Activate\" behavior:\r\n![image](https://user-images.githubusercontent.com/4053734/41503626-77715b6e-718d-11e8-95d7-1ad2b8042ed4.png)\r\n\r\n### Labels\r\n_Suggested additional labels for this issue:_\r\ninstall-update\r\n\r\n_Possible additional labels:_\r\napi-proposal, extension-host\r\n",
        "createdAt": "2018-06-17 02:11:29",
        "state": "open",
        "number": 52116
    },
    {
        "title": "[folding] unfold when pressing enter on last line",
        "description": "\r\n![bug](https://user-images.githubusercontent.com/24494089/41499698-c931352c-7184-11e8-9e5a-9c620cb20474.gif)\r\n\r\nIssue Type: <b>Bug</b>\r\n\r\nHi, \r\n\r\nAfter collapsing a Command (with code in) I can't enter after that.\r\nIn this example I can't enter between fds en the comment.\r\n\r\nVS Code version: Code 1.21.1 (79b44aa704ce542d8ca4a3cc44cfca566e7720f1, 2018-03-14T14:47:13.351Z)\r\nOS version: Windows_NT ia32 10.0.17134\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz (8 x 4008)|\r\n|Memory (System)|15.92GB (8.93GB free)|\r\n|Process Argv|E:\\ProgramFiles(x86)\\Microsoft VS Code\\Code.exe|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (1)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nLiveServer|rit|5.0.0\r\n\r\n\r\n</details>\r\nReproduces only with extensions\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-06-16 14:46:20",
        "state": "open",
        "number": 52103
    },
    {
        "title": "Ignore `editor.insertSpaces` within strings",
        "description": "<!-- Please search existing issues to avoid creating duplicates. -->\r\nRelated issues\r\n==============\r\n\r\nAfter searching existing issues, I found two open issues, which are closely related, but different. Including links for reference purposes:\r\n\r\n- #5394\r\n- #46287\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nFeature request\r\n===============\r\n\r\nTabs have three uses in code files:\r\n\r\n1. Indentation at the beginning of lines - people often prefer to use spaces here\r\n2. Indentation between keys and values or around assignment operators - people often prefer to use spaces here\r\n3. When a literal tab character is required within a string - this should *always* be a tab and never converted to spaces.\r\n\r\nCurrently, the 3rd use-case is difficult/impossible to handle easily in VSCode when `editor.insertSpaces` is set to `true`.\r\n\r\nThe most common place I've encountered this is for RegEx strings in BSD `sed`, which does not support GNU's non-standard `\\t` notation for tabs.",
        "createdAt": "2018-06-15 09:35:42",
        "state": "open",
        "number": 52004
    },
    {
        "title": "Multiple languages specific editor settings",
        "description": "We definitely need the ability to set those for multiple languages at once.\r\n\r\nSomething like:\r\n```\r\n// Once for all\r\n\"[cpp, c]\":{\r\n    \"editor.formatOnSave\": true\r\n}\r\n```\r\n\r\nInstead of:\r\n```\r\n// Once for C++\r\n\"[cpp]\":{\r\n    \"editor.formatOnSave\": true\r\n},\r\n\r\n// And once for C\r\n\"[c]\":{\r\n    \"editor.formatOnSave\": true\r\n}\r\n```\r\n",
        "createdAt": "2018-06-14 21:45:41",
        "state": "open",
        "number": 51935
    },
    {
        "title": "Organize Keyshortcuts by Topic",
        "description": "When viewing the keyboard shortcuts within VS Code, we need the option to view them by category to help learn them like they are already presented in https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_keyboard-reference-sheets",
        "createdAt": "2018-06-14 20:22:26",
        "state": "open",
        "number": 51925
    },
    {
        "title": "toggling editor.minimap.renderCharacters changes minimap display size significantly",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nSetting editor.minimap.renderCharacters to false increases the height of the minimap by 150% vs setting it to true, which means that fewer minimap lines fit on the screen. I would expect rendering text vs rendering blocks to occupy the same amount of vertical space since they occupy the same amount of horizontal space.\r\n<img width=\"241\" alt=\"screen shot 2018-06-14 at 11 11 23 am\" src=\"https://user-images.githubusercontent.com/201996/41420997-be9010ec-6fc3-11e8-825f-d130a98823a5.png\">\r\n\r\n\r\nVS Code version: Code 1.24.1 (24f62626b222e9a8313213fb64b10d741a326288, 2018-06-13T17:41:50.128Z)\r\nOS version: Darwin x64 17.4.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-06-14 15:12:43",
        "state": "open",
        "number": 51908
    },
    {
        "title": "Add DecorationRangeBehavior.Word",
        "description": "From #50779\r\n\r\n**Problem**\r\nUsing decorators, a common pattern is that you want an decoration that applies to a given whole word. None of the current `DecorationRangeBehavior` values handle this well. `Open` will always expand the decorator even if you type non-word characters, while `Close` never expands the decorator\r\n\r\n**Proposal**\r\nAdd a `DecorationRangeBehavior.Word` setting or similar that would expand the decoration if the edit extends the word at the edges of the decoration. Typing a word character would expand the decorator while typing space would not",
        "createdAt": "2018-06-13 23:22:39",
        "state": "open",
        "number": 51806
    },
    {
        "title": "Instructor Mode",
        "description": "As per the conversation with @auchenberg and @chrisdias, it's been requested by a number of instructors to take zen mode one step further. The expected behavior would:\r\n\r\n- Have no LOC numbers visible\r\n- Go full screen\r\n- Remove the icons from the top right\r\n- Have no tabs\r\n- Be available and removed on a toggle\r\n\r\ncc @johnpapa @kentcdodds @eggheadio @elijahmanor\r\n\r\nPlease feel free to add to this thread if I've misrepresented anything. Thank you for your time and effort in this!",
        "createdAt": "2018-06-13 18:29:05",
        "state": "open",
        "number": 51790
    },
    {
        "title": "Explore extending settings schema with additional metadata",
        "description": "#51773\r\n#3355\r\n#50249\r\n\r\nExtended category/subcategory classifications? New friendly setting names?\t\r\n\r\n",
        "createdAt": "2018-06-13 16:35:00",
        "state": "open",
        "number": 51778
    },
    {
        "title": "Feature: Use package.json to save state of extensions ",
        "description": "One of extensions have regression so downgrading it and  freezing extension to **specific** version is not possible. I have to freeze all automatic updates and manually find vsix for old version and install it.\r\n\r\n**This is hot shit**\r\n\r\nMy idea is that there is package.json file in global settings of vscode and we use npm dependancies(vscode extension projects) to list the extensions.\r\n\r\n- This will reduce developer learning curve for creating extensions.\r\n- One can freeze particular extension version, or auto update minor versions, or major\r\ne.g \r\n```\r\n{\r\n  \"dependencies\": {\r\n    \"@marketplace/piotrpalarz.vscode-gitignore-generator\": \"^1.2.2\",\r\n    \"extension\" : \"git://github.com/user/extension.git#commit-ish\",\r\n    \"@marketplace/ms-vscode.cpptools\": \"2.3.2\",\r\n    \"jas99/myextension\": \"~1.1.0\", // by default use github\r\n    \"@gitlab.com/jas99/myextension\": \"1.0\"\r\n  }\r\n}\r\n\r\n```\r\n\r\nIn addition to that one can also load dependencies/extensions with local package.json file in workspace settings.\r\n\r\nThx",
        "createdAt": "2018-06-12 07:51:49",
        "state": "open",
        "number": 51675
    },
    {
        "title": "Default extensions scope",
        "description": "Hi,\r\nCurently when you install extension it will be installed in global scope (used for all projects), I think it can be useful to have settings to set default installation scope, such as `current workspace`, `global scope`, maybe even `current session`. Because:\r\n\r\n1. If you use VS Code for many different projects (different languages/frameworks) you will load unneeded extensions every time that will slow down start up \r\n2. Some extensions can have conflicts between each other\r\n3. Some extensions is badly written and can throw error messages if they can't find required files in current workspace\r\n4. Maybe you need to use this extension rarely or only once.\r\n\r\nIt should be allowed to change this setting from user settings. Possible values:\r\n\r\n1. Current workspace \r\n2. Global workspace (installation default)\r\n3. ??? Current session (not sure if this needed, but some extensions used quite rare, for example screen sharing or something similar)\r\n\r\nAlso it should be possible to select one of this options from combobox in extension store.\r\n\r\nIf this will be approved I want to handle pull request for this issue.\r\n\r\nMaybe related to:\r\nhttps://github.com/Microsoft/vscode/issues/49826\r\nhttps://github.com/Microsoft/vscode/issues/47053\r\n",
        "createdAt": "2018-06-12 06:55:45",
        "state": "open",
        "number": 51658
    },
    {
        "title": "Add user-option to refuse extensions' keybindings contributions",
        "description": "extensions shortcuts conflict too much.",
        "createdAt": "2018-06-10 12:56:56",
        "state": "open",
        "number": 51547
    },
    {
        "title": "Horizontal scroll area does not refresh",
        "description": "If every line in a file has a sufficiently small line length, there's no horizontal scrolling, which is nice and expected.  However, if I fix up a really long line, the horizontal scroll area does not refresh, allowing me to scroll to the right into a useless blank area.\r\n\r\n![horizscroll2](https://user-images.githubusercontent.com/1288904/41196855-b9872d0a-6bff-11e8-9111-bd2c25ac09e4.gif)\r\n",
        "createdAt": "2018-06-09 23:17:20",
        "state": "open",
        "number": 51535
    },
    {
        "title": "Outline: support for `//#region` fold regions",
        "description": "in conjunction with [hierarchical support](https://github.com/Microsoft/vscode/issues/34968) in outlines.\r\n\r\nHere's how Xcode is doing it:\r\n\r\n<img width=\"485\" alt=\"capture d ecran 2018-06-07 a 11 37 44\" src=\"https://user-images.githubusercontent.com/326577/41110400-421f2f60-6a47-11e8-96bd-6e3b09a0a122.png\">\r\n\r\n",
        "createdAt": "2018-06-07 15:38:13",
        "state": "open",
        "number": 51364
    },
    {
        "title": "Tweak autoClosingPairs to make PHP docblock insertion less intrusive",
        "description": "As soon as you type `/**` you immediately get `/**\ud835\udda8 */` (where \ud835\udda8 is the cursor). If you didn't intend to start a docblock you need to remove the extraneous `*/`. I'd appreciate two enhancements:\r\n\r\n- Expand to docblock only after `/**<space>` or `/**<enter>`.\r\n- Disable the overall feature if you're already inside a comment and maybe if the line already has code before the caret. (Other invalid contexts seem to be detected nicely.)\r\n\r\nThis is a follow-up to #51047.\r\n",
        "createdAt": "2018-06-05 09:03:20",
        "state": "open",
        "number": 51130
    },
    {
        "title": "Filter \"Problems\" by the extension which generated them (Markers Panel Filter)",
        "description": "I'd love to be able to declutter the \"Problems\" Markers Panel by hiding/showing logs generated by only certain extensions. \r\n\r\nRight now, if I type `[ts]` into the filtering box, I get `No results found with provided filter criteria. Clear Filter.`\r\n\r\nIf I then delete the filter, I can clearly see plenty of warnings and errors generated by `[ts]`. After tinkering with it for a while, I've not been able to figure out how to filter by the extension name. (Maybe it just needs some documentation or UI to help the user write filters?)\r\n\r\nAlso, for other users finding this issue, after a bit of searching around I realized I could also filter roughly by using the keywords `warning`, `error`, and `info`. E.g: enter `warning, error` into the filter to hide `info` markers. This helps a bit, but doesn't help much when you're trying e.g. to filter out a particularly noisy extension (like a spell checker) generating the same type of marker you're looking for.\r\n\r\n",
        "createdAt": "2018-06-04 18:50:15",
        "state": "open",
        "number": 51103
    },
    {
        "title": "Provide workbench.panel.location \"top\" option",
        "description": "This is with reference to locked issue #2806\r\n\r\n**Besides bottom and right, can the panel be placed at the top?**\r\nLet me explain:\r\n\r\nNew output is appended to the bottom of the output/terminal, aka right at the edge of the display. \r\nThis causes a lot of eye movement between filename tabs, code and new output.\r\n\r\nHowever, if panel is placed on top, code can easily be scrolled so that the part being edited is always around the display's center, with the newest output just right above it.\r\n\r\nThank you.\r\n\r\n\r\n",
        "createdAt": "2018-06-02 02:21:46",
        "state": "open",
        "number": 50984
    },
    {
        "title": "Support folding ranges inside a line",
        "description": "Hey, I have read through the folding-related issues (like #3422, the linked ones and some other ones related to the `FoldingRangeProvider` API specifically), but I don't seem to have come across a conversation about inline folding ranges.\r\n\r\nHas this been discussed - or is it okay to start a discussion on the topic now?\r\n\r\nI am interested in these, because I'd like to improve readability of MarkDown documents (using an extension) by collapsing MarkDown link targets (the URLs - which can be quite long) and instead linkifying the text range (using a `DocumentLinkProvider`).\r\n\r\nResearching the `FoldingRange` API though, I can see it only has start and end lines, not `Position`s. Is this an immutable deliberate design decision or something open to alternative with enough support behind it?\r\n\r\nI think other possible use cases could be folding of ternary expression branches, one-liner `if` statements and stuff like that. (But I'm mostly interested in my use-case described above.)",
        "createdAt": "2018-05-30 20:34:04",
        "state": "open",
        "number": 50840
    },
    {
        "title": "Support customisable alias for commands in command palette",
        "description": "- VSCode Version: 1.23.0\r\n- OS Version: Linux\r\n\r\n----\r\n\r\n**Is there a way to define an alias for a command so that the command can be called under multiple different names (original name and the alias)?**\r\n\r\nThis is useful in different cases:\r\n\r\n- If you switch from a different editor that uses a command palette (like emacs, ... ) you might have learned the names of commands over many years. Relearning takes more time than making an alias once. This would also allow to use two editors in parallel without interference. Before I came to VSCode I used emacs. I regularly want to call `diff-buffer-with-file` and it takes me some time to figure out that in VSCode it's called `Compare active file with saved`.\r\n- You could define abbreviations that are quicker to type than selecting regular command names with the fuzzy search, e.g. `tt`.  This is quite popular in emacs, see e.g. http://ergoemacs.org/emacs/emacs_alias.html \r\n- if you regularly hit keys in the wrong order an alias might be useful for command you regularly use.\r\n\r\nI think I'm not the only one who likes such a feature: When I used emacs I checked quite a few popular user configurations that users keep on github. A lot of these contain aliases by using the command `(defalias ...)` - including popular/influential ones like [spacemacs](https://github.com/syl20bnr/spacemacs/), [abo-abo's oremacs](https://github.com/abo-abo/oremacs), the [config of the emacs maintainer](https://github.com/jwiegley/dot-emacs) ... \r\n\r\nThis has been asked on [Reddit](https://www.reddit.com/r/vscode/comments/8bj63w/can_i_set_an_alias_for_the_command_palette/) and [stackoverflow](https://stackoverflow.com/questions/50143258/add-alias-for-commands-in-command-palette) without any useful answer.\r\n",
        "createdAt": "2018-05-30 19:46:08",
        "state": "open",
        "number": 50836
    },
    {
        "title": "Find/replace: Keyboard shortcuts for \"toggleFindCaseSensitive\" and \"toggleFindRegex\" don't work when find has focus",
        "description": "<!--\r\nDo you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode.\r\n\r\nFor bug reports, please fill in the details below. For feature requests, please describe the desired feature.\r\n-->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.23.1\r\n- OS Version: macOS 10.13.4\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open a new file\r\n2. Open the Find widget (Command + F)\r\n3. With focus in Find widget, press (Alt+Command+R) for `toggleFindRegex` or (Alt+Command+C) for `toggleFindCaseSensitivity`\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes/No\r\nYes\r\n\r\nThe commands seem to be overridden by `revealFileInOS` (regex) and `copyFilePath` (case sensitivity) since they have the same keybindings with the context `!editorTextFocus`. However, the commands for `toggleFindInSelection` (Alt+Command+L) and `toggleFindWholeWord` (Alt+Command+W) seem to work since they don't have any commands with the same bindings.",
        "createdAt": "2018-05-29 22:19:35",
        "state": "open",
        "number": 50750
    },
    {
        "title": "Consider show a filename input box (Quick Open box or rename-like input box) for \"Move to new file\"",
        "description": "#50486\r\n\r\nCurrently if the new file cannot be resolved, it would be `newFile.ts`. Later I would have to manually update the filename. And in the case when `updateImportsOnFileMove.enabled` is set to falsey, I'll have to rename the references to the new files too.\r\nWould be better to show an input for filename when no reasonable guess for the new file name exists.",
        "createdAt": "2018-05-29 15:37:24",
        "state": "open",
        "number": 50685
    },
    {
        "title": "Cannot exclude root folders while searching",
        "description": "Testing #50498\r\n\r\n- In a MR workspace, try to exclude root folder using **/folder1/** and search. Results are still shown in folder1.\r\n\r\nThis happens irrespective of setting `search.enableSearchProviders\" `\r\n\r\n![image](https://user-images.githubusercontent.com/10746682/40652451-8f56d79e-6338-11e8-8994-58f40d5ab239.png)\r\n",
        "createdAt": "2018-05-29 10:05:47",
        "state": "open",
        "number": 50638
    },
    {
        "title": "Tasks: path property has no effects if pointing out of workspace",
        "description": "<!--\r\nDo you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode.\r\n\r\nFor bug reports, please fill in the details below. For feature requests, please describe the desired feature.\r\n-->\r\nI want to create an `npm` task where the `package.json` is outside the workspace for whatever reason. I was happy to find the `path` property. As the documentation says: \r\n> The path to the folder of the package.json file that provides the script. Can be ommitted.\r\n\r\nHowever when I add the path of a folder that contains the `package.json` and is outside of the workspace, the task is ignored and the output of the console is always:\r\n> Error: The npm task detection didn't contribute a task for the following configuration:\r\n```\r\n{\r\n  \"type\": \"npm\",\r\n  \"script\": \"foo:start\",\r\n  \"path\": \"C:/some/folder/not/in/workspace\"\r\n}\r\n```\r\n\r\n\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.23.1",
        "createdAt": "2018-05-28 08:48:33",
        "state": "open",
        "number": 50554
    },
    {
        "title": "Add ThemeIcons for common test statuses",
        "description": "VS Code now has a builtin \"test\" view that we can contribute to. To render icons against our test nodes we can set the `iconPath` property on the `TreeItem`.  The description of that says:\r\n\r\n> Using a theme icon is preferred over a custom icon as it gives theme authors the possibility to change the icons\r\n\r\nSince lots of people are going to be adding in test support soon, in order to a) have some consistency and b) allow theming, it would be great if Code shipped some ThemeIcons for passing/failing/errored/skipped tests.",
        "createdAt": "2018-05-24 13:58:02",
        "state": "open",
        "number": 50398
    },
    {
        "title": "Support a variable that resolves to the location of the code-workspace file",
        "description": "## Issue Type\r\n\r\nFeature Request / Question\r\n\r\n## Description\r\n\r\nHi,\r\nMaybe this is already possible, but I didn't spot anything in the docs\r\nwithin a Multi-root Workspace where you have a .code-workspace file like the below with multiple folders listed\r\n\r\nis there a variable for the top level directory where the .code-workspace lives?\r\n${workspaceFolder} equals the path of the folder which changes from folder to folder\r\nin the below example ${workspaceFolder}/../ works fine for most folders, but not the Root one which is one directory up\r\n\r\nHaving a common set of settings for for all folders where there are file paths are involved at different levels makes things difficult if your trying to create a path that's relative to the location of the .code-workspace file\r\n\r\nIf there was a variable that represented the top level directory ./ (Root where the .code-workspace file lives)\r\nthis would make life a bit easier when referencing things like virtual environments within python\r\n\r\nAnother way around this is if there was such a thing as custom variables, since you can reference a setting via\r\n${config:Name} but not create a custom setting for use later on in a path setting.\r\n\r\n## Example .code-workspace file\r\n\r\n```\r\n{\r\n    \"folders\": [\r\n        {\r\n            \"name\": \"Library\",\r\n            \"path\": \"./scons_gbd_docs\"\r\n        },\r\n        {\r\n            \"name\": \"Examples\",\r\n            \"path\": \"./examples\"\r\n        },\r\n        {\r\n            \"name\": \"Tests\",\r\n            \"path\": \"./tests\"\r\n        },\r\n        {\r\n\t        \"name\": \"Docs\",\r\n            \"path\": \"./docs\"\r\n        },\r\n        {\r\n\t        \"name\": \"Root\",\r\n            \"path\": \".\"\r\n        },\r\n    ],\r\n    \"settings\": {\r\n\r\n        // Use python within the virtual environment\r\n        \"python.pythonPath\": \"${workspaceFolder}/../scripts/virtualenv_py3/Scripts/python\",\r\n        // Directory where the virtual environments are stored\r\n        \"python.venvPath\": \"${workspaceFolder}/../scripts\",\r\n        // Additional autocompletion search directories\r\n        \"python.autoComplete.extraPaths\": [\r\n            \"${workspaceFolder}/../scripts/virtualenv_py3/Lib/site-packages/scons-3.1.0.alpha.yyyymmdd\",\r\n            \"${workspaceFolder}/..\"\r\n         ],\r\n\r\n        // Use pytest for testing\r\n        \"python.unitTest.pyTestEnabled\": true,\r\n        // Since we'e enabled coverage in the default settings for pytest\r\n        // disable it here for debugging tests\r\n        \"python.unitTest.pyTestArgs\": [\"--no-cov\"],\r\n\r\n        // Pep8 linting\r\n        \"python.linting.enabled\": true,\r\n        \"python.linting.pep8Enabled\": true,\r\n        \"python.linting.pep8Path\": \"${workspaceFolder}/../scripts/virtualenv_py3/Scripts/pycodestyle\",\r\n        \"python.linting.pep8Args\": [\"--ignore\",\"E501,E265\"],\r\n\r\n        // pylint linting\r\n        \"python.linting.pylintEnabled\": false,\r\n        \"python.linting.pylintPath\": \"${workspaceFolder}/../scripts/virtualenv_py3/Scripts/pylint\",\r\n        // Use a configuration file for pylint, we need to add in additional search directories\r\n        // using init_hook to find source outside of site_packages\r\n        \"python.linting.pylintArgs\": [\r\n            \"--rcfile\", \"${workspaceFolder}/../.vscode/pylint.cfg\"\r\n        ],\r\n\r\n        // Ignore intermediary files\r\n        \"files.exclude\": {\r\n            \"**/*.pyc\": true,\r\n            \"**/__pycache__\": true,\r\n            \"**/.sconsign.dblite\": true,\r\n        },\r\n    }\r\n}\r\n```\r\n",
        "createdAt": "2018-05-23 22:46:14",
        "state": "open",
        "number": 50372
    },
    {
        "title": "Intellisense tooltip with filter category like Visual Studio",
        "description": "\r\n![](https://www.visualstudio.com/wp-content/uploads/2018/05/assisted-intellisense@2x-800x436.jpg)\r\n\r\nIt would be awesome if in the moment to bring the intellisense of properties or classes on Typescript and C# or other language we can filter this like the little icons on the bottom of the tooltip as visual studio,\r\nor control + shift + p + @: but for the intellisense. \r\n",
        "createdAt": "2018-05-22 16:46:30",
        "state": "open",
        "number": 50291
    },
    {
        "title": "Support syntax highlighting with tree-sitter",
        "description": "Please consider supporting [tree-sitter](https://github.com/tree-sitter/tree-sitter) grammars in addition to TextMate grammars. TextMate grammars are incredibly difficult to author and maintain and impossible to get right. The over 500 (!) issues reported against https://github.com/Microsoft/TypeScript-TmLanguage are a living proof of this.\r\n\r\nThis presentation explains the motivation and goals for tree-sitter: https://www.youtube.com/watch?v=a1rC79DHpmY\r\n\r\ntree-sitter already ships with Atom and is also used on github.com.",
        "createdAt": "2018-05-19 01:41:27",
        "state": "open",
        "number": 50140
    },
    {
        "title": "Git: Support Co-Authored-By",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nGithub introduced a convention where the commit message contains a list of co-authors, for use when pairing.\r\n\r\nExample:\r\n\r\n```\r\ncommit 032db38255275dd7372f575e3d06947c878ef4c6\r\nAuthor: Tommy Brunn <foo@gmail.com>\r\nDate:   Thu May 17 10:21:16 2018 +0200\r\n\r\n    Encode int64\r\n\r\n    Co-Authored-By: Tulio Ornelas <bar@gmail.com>\r\n```\r\n\r\nBoth Github and Atom then displays both authors whenever they are showing author information. See http://blog.atom.io/2018/04/18/atom-1-26.html#github-package-improvements-1 for an example of what it looks like in Atom.\r\n\r\nVS Code version: Code 1.23.1 (d0182c3417d225529c6d5ad24b7572815d0de9ac, 2018-05-10T16:03:31.083Z)\r\nOS version: Darwin x64 16.7.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-05-18 09:06:22",
        "state": "open",
        "number": 50090
    },
    {
        "title": "Feature request: Allow Code Outline in Minimap location",
        "description": "I'm using the VS Code insiders build, which has Code Outline built in. I loved this feature from Nuclide, but in its current incarnation it's not as useful as it could be (to me). I have to choose now between file tree (or git or any other of course) sidebar and Code Outline, but I'd prefer to always have it next to my code.\r\n\r\nMy idea was to allow what is now the Minimap to use different \"widgets\" (sorry, I've never developed for VS Code so I don't know the correct terminology), so the Code Outline view could live there instead of the (minimally useful Minimap).",
        "createdAt": "2018-05-17 13:57:16",
        "state": "open",
        "number": 50047
    },
    {
        "title": "Feature request: Treat the Chinese text as a Chinese sequence when using`Ctrl+Left/Right`",
        "description": "Now the VSCode treats a long Chinese text as one \u201cword\u201d. Each time use `Ctrl+Left/Right`, it will move the cursor to the begin or end.\r\n\r\nThe feature request is that treat the Chinese text as a Chinese sequence, then each `Ctrl+Left/Right`, it just move one step. This act is the system text program default.\r\n\r\nExample: (use `|` as the cursor )\r\n```\r\n|\u672c\u6587\u7684\u5b66\u4e60\u516c\u5f0f\r\n// Ctrl+Right\r\n\u672c\u6587\u7684\u5b66\u4e60\u516c\u5f0f|\r\n```\r\n\r\nExpected:\r\n```\r\n|\u672c\u6587\u7684\u5b66\u4e60\u516c\u5f0f\r\n// Ctrl+Right\r\n\u672c|\u6587\u7684\u5b66\u4e60\u516c\u5f0f\r\n// Ctrl+Right\r\n\u672c\u6587|\u7684\u5b66\u4e60\u516c\u5f0f\r\n// Ctrl+Right\r\n\u672c\u6587\u7684|\u5b66\u4e60\u516c\u5f0f\r\n```\r\n\r\n(Of course, It would be better if it can support Word Segmentation.)",
        "createdAt": "2018-05-17 13:45:53",
        "state": "open",
        "number": 50045
    },
    {
        "title": "Allow both \"onFocusChange\" and \"afterDelay\" for \"files.autoSave\"",
        "description": "It would be nice to have both options enabled simultaneously.\r\nI want rare saves during I'm typing code in the editor and instant save after I switched to the browser to see my changes in action.\r\n\r\nExample:\r\n```js\r\n  \"files.autoSave\": [\"onFocusChange\", \"afterDelay\"],\r\n  \"files.autoSaveDelay\": 10000,\r\n```\r\n\r\nVote if you like this.",
        "createdAt": "2018-05-17 09:47:23",
        "state": "open",
        "number": 50035
    },
    {
        "title": "Move selection - Alt + arrow key",
        "description": "Would you add ability to move selected part of line (not whole line) by Alt + arrow key - if none selection move line (this works), if part of line is selected - move selected part? Thanks.",
        "createdAt": "2018-05-17 05:56:00",
        "state": "open",
        "number": 50025
    },
    {
        "title": "Add commands to outline elements",
        "description": "The outline view should offer commands that can be run straight from an element. E.g. rename but also triggering things like find references et al. Similar to the editor-context-menu this could be made open for contributions",
        "createdAt": "2018-05-15 17:14:26",
        "state": "open",
        "number": 49925
    },
    {
        "title": "Alternative locations for the outline view",
        "description": "The outline view lives inside the file explorer and while it can be re-arranges in there it cannot be dragged into its own view. Alternative locations could be:\r\n\r\n1. a standalone viewlet, \r\n2. inside another viewlets, \r\n3. the bottom panel, or \r\n4. as a re-arrangable view that can be docked anywhere in the UI (like most others have it). ",
        "createdAt": "2018-05-15 17:10:15",
        "state": "open",
        "number": 49923
    },
    {
        "title": "Bot: improve duplicate message ",
        "description": "When an issue is closed as a duplicate by the bot, the bot should take into account the other labels on the issue and give a helpful message to the user to easily find the original issue. The message should contain a link to the search query of issues with the mentioned labels.\r\n\r\nExample: user comes and says I want find widget in debug console\r\nI put the following labels: `\"*duplicate\"`, `\"debug\"`, `\"feature request\"`\r\nBot says \"this as a duplicate ...\"(same as before) + \"To find the original issue follow [this query](https://github.com/microsoft/vscode/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+label%3Adebug+label%3Afeature-request)\". ",
        "createdAt": "2018-05-15 14:59:37",
        "state": "open",
        "number": 49912
    },
    {
        "title": "support easy re-arranging of folded blocks",
        "description": "I want to be able to easily reorder the definitions in a file.\r\nI get the best overview about the structure of my file when everything is folded.\r\nSo, I want to be able to reorder the definitions (of functions, classes, etc.) in a file when it is folded.\r\n\r\nExample:\r\n- Open https://raw.githubusercontent.com/Microsoft/vscode/master/src/bootstrap.js in editor\r\n- Fold All\r\n\r\nOne can easily see the classes, interface, functions.\r\n\r\nNow I want to rearrange them. This doesn't work.\r\n\r\nIf I select a folded function (2 lines) and want to move it with the keyboard, I can use 'Move Line Down' (Alt+ArrowDown), but that will not skip over folded blocks, but run into them.\r\n\r\nIf I try to move the selected block by mouse (drag&drop), the folding gets lost.\r\n\r\nSame for the clipboard (cut&paste).\r\n\r\nI don't see a single way to do what I want.\r\n",
        "createdAt": "2018-05-15 09:17:04",
        "state": "open",
        "number": 49886
    },
    {
        "title": "F10 and F11 should start debugging with stopAtEntry:true",
        "description": "in visual studio (not vscode) you can start debugging and stop at the first line of code by pressing the `step over` or `step into` keys. this is distinct from hitting the `start debugging` key which doesn't stop at `main` (or wherever). it's incredibly useful to easily choose whether or not to stop at the first line of code, especially for console apps.\r\n\r\ncan we get similar functionality added to vscode? it's a pain to have to switch debug configurations, or edit the `stopAtEntry` setting just to do this.",
        "createdAt": "2018-05-14 19:37:12",
        "state": "open",
        "number": 49855
    },
    {
        "title": "How to hide the Restart button in the debug toolbar when attached to a process that can't be restarted?",
        "description": "We're implementing \"Attach to Process\" but sometimes have no ability to re-launch the app being debugged (we don't have all the necessary info if the user launched it separately).\r\n\r\nI can't find any way to hide the Restart button or reliably tell in the debug config provide that the request to resolve came from a restart (so we can inform the user it's not supported).",
        "createdAt": "2018-05-14 11:27:04",
        "state": "open",
        "number": 49822
    },
    {
        "title": "Stop script in NPM Script Explorer",
        "description": "Feature to stop desired task in NPM Script Explorer",
        "createdAt": "2018-05-12 07:21:40",
        "state": "open",
        "number": 49738
    },
    {
        "title": "Setting to ignore whitespace-only lines",
        "description": "VS Code currently removes all trailing whitespace including on whitespace only lines.\r\n\r\nConsider the following JavaScript/Typescript snippet:\r\n\r\n```\r\nexport default class Example {\r\n    constructor() {\r\n        console.log(\"called constructor\");\r\n    }\r\n    \r\n    doSomething() {\r\n        console.log(\"I did something.\");\r\n    }\r\n}\r\n```\r\n\r\nWhen I come back to this file, I expect to be able to move the cursor between the two methods and add a new one in between without having to hit the tab key, but after running the VS Code formatter, the whitespace on that line (ln. 5) is removed.\r\n\r\nAtom supports this under an \"Ignore Whitespace Only Lines\" setting.\r\n\r\nAdditionally, there's a VS Code extension which adds this functionality.\r\n\r\n[Trailing Whitespace VS Code Plugin](https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces#user-content-include-empty-lines)\r\n\r\n It'd be really great if it were configurable and/or auto-detected on a per-file basis by the editor, and would really help my workflow.\r\n\r\nThanks so much,\r\nAndrew",
        "createdAt": "2018-05-11 02:42:13",
        "state": "open",
        "number": 49661
    },
    {
        "title": "Add theme key for the \"alternating\" row color in keybindings editor/settings UI and change default",
        "description": "@roblourens pointed out this color https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/preferences/browser/media/keybindingsEditor.css#L74, this makes the alt row overly grey in mine and other themes. We should add a key for this.\r\n\r\n<img width=\"103\" alt=\"screen shot 2018-05-10 at 4 50 11 pm\" src=\"https://user-images.githubusercontent.com/2193314/39899719-5b38aa02-5472-11e8-8012-125c7d0d1831.png\">\r\n\r\nAlso I think the default should be `rgba(255,255,255,0.2)` for dark themes and `rgba(0,0,0,0.2)` for light themes. This will just lighten or darken the color as opposed to moving it closer towards grey.",
        "createdAt": "2018-05-10 23:53:33",
        "state": "open",
        "number": 49655
    },
    {
        "title": "[Emmet] Include should be more like DocumentSelector",
        "description": "Currently, the Emmet extension has a setting called `emmet.includeLanguages` which just targets language IDs to map to the Emmet-capable language ID. I think it would be very useful if instead you could use something more like `DocumentSelector`, which also allows [`DocumentFilter`](https://code.visualstudio.com/docs/extensionAPI/vscode-api#DocumentFilter) instead of just language ID.",
        "createdAt": "2018-05-10 02:03:57",
        "state": "open",
        "number": 49588
    },
    {
        "title": "Show selection settings widget when text is selected",
        "description": "I'm not sure what the official name for the widget is, but I'm talking about the little panel that appears when pressing `Command-D`, etc.:\r\n![image](https://user-images.githubusercontent.com/3943692/39827701-a7f25cac-53b0-11e8-84f4-8279aecd80b5.png)\r\nOften I want to see what settings I have for selecting text before pressing `Command-D` (to make sure it's what I want, if the next selection is off-screen, for instance). However, the widget only appears after making a selection, by which time it's too late.\r\n\r\nIs there an option to make the widget appear whenever any text is selected? It's unobtrusive, so I'd prefer to always display it when text is selected (so it wouldn't disappear either after a few seconds).\r\n\r\n(Sorry if this has already been asked \u2014\u00a0it's really hard to search for things without knowing their name.)",
        "createdAt": "2018-05-09 16:48:36",
        "state": "open",
        "number": 49563
    },
    {
        "title": "Option to not style rendered whitespace with TextEditorDecorationType",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nWhen whitespace is rendered, and a style is applied to the text of the current line, I would like to not have that font style applied to the rendered whitespace (tabs and spaces) in that line.\r\n\r\n## Use Case:\r\nSome extensions add text styles for certain types of comments. The two I know of are \"Better Comments\" and \"TODO Highlight\".\r\n\r\nWhen you apply a style to an entire comment line, say to style a `# WARNING: ...` line as bright red, the rendered whitespace also turns bright red, which adds noise to the comment.\r\n\r\nVS Code version: Code 1.23.0 (7c7da59c2333a1306c41e6e7b68d7f0caa7b3d45, 2018-05-03T15:23:14.634Z)\r\nOS version: Darwin x64 17.4.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-05-08 13:55:31",
        "state": "open",
        "number": 49462
    },
    {
        "title": "Feature Request: Allow user to override contributes made by extension",
        "description": "Be able to control or custom contributes made by extensions (maybe in the info-page of each installed extension), such as disable button in editor title, item in context menu.\r\nThis feature will make interface clear after install many extensions.\r\n\r\nAnd further more, may be we could let user custom contributes to interface in a setting file.\r\n",
        "createdAt": "2018-05-08 05:07:55",
        "state": "open",
        "number": 49430
    },
    {
        "title": "Decorations: Show decorations in tabs",
        "description": "Hi there\r\n\r\nI come from IntelliJ where the status of Git (uncommitted changes, staged, modified, etc) is highlighted in the tab like this: \r\n\r\n![screen shot 2018-05-07 at 9 56 17 am](https://user-images.githubusercontent.com/4315746/39713796-e8edb164-51dc-11e8-9a05-9c0436ae857d.png)\r\n\r\nIn some ways VS Code does that too by highlighting changes in the File Browser column on the left\r\n\r\n![screen shot 2018-05-07 at 9 54 51 am](https://user-images.githubusercontent.com/4315746/39713740-b96427c0-51dc-11e8-8516-8ca6f04b9677.png)\r\n\r\nWhich is great! But I would love if I could have these highlighted file names displayed on the Tab as well. Is there a certain CSS or setting I could change to enable this? \r\n\r\nI did variations of Google of \"VS Code highlight tab git\" and the sorts, but nothing really comes up. I would appreciate if you could give me some guidance on this issue. ",
        "createdAt": "2018-05-07 16:57:07",
        "state": "open",
        "number": 49382
    },
    {
        "title": "Advanced extension search (for example excluding certain words)",
        "description": "Having option to search for an extension in Marketplace is nice, but it would be nicer if I could make some more sophisticated search, e.g. excluding something words from results.\r\n\r\nFor example, I'm looking for `redux` related extension\r\n\r\n![image](https://user-images.githubusercontent.com/3883359/39709215-970c5070-5219-11e8-9ca7-3c3bc47b5b03.png)\r\n\r\nMost of these extensions are snippets, so I would like to filter them out (I don't need snippets), I tried something like this:\r\n\r\n`redux -snippets` (extensions containing `redux`, but not `snippets`)\r\n\r\nbut this apparently does not work.\r\n\r\nIs there a possibility to add such feature to VSCode in future versions?\r\n",
        "createdAt": "2018-05-07 15:14:26",
        "state": "open",
        "number": 49374
    },
    {
        "title": "Indent guide highlighting is not semantic",
        "description": "Shouldn't the highlighted guide be the one with the blue arrow instead the one with the red when the cursor is at the green line?\r\n![screen shot 2018-05-07 at 09 39 40](https://user-images.githubusercontent.com/1080789/39690770-88f27548-51db-11e8-98b2-11436a38c639.png)\r\n",
        "createdAt": "2018-05-07 07:48:27",
        "state": "open",
        "number": 49342
    },
    {
        "title": "Need Env Variables for DataDir and ExtensionDir",
        "description": "Currently, we can only get a few env variables when refer to the mannual [here](https://code.visualstudio.com/docs/extensionAPI/vscode-api#_env).\r\nSo other extensions may access the path of extension and data dir in their code like this:\r\n\r\n>  let settingsPath = path.join(process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE, 'commandbar.json');\r\n\r\nAnd we can run vscode with command-line parameters [here](https://code.visualstudio.com/docs/editor/command-line).\r\n\r\nIf we specify the following options(for example, we can make it portable), we may change the extension and data dir settings.\r\n> --extensions-dir \\<dir>\tSet the root path for extensions.\r\n--user-data-dir \\<dir>\tSpecifies the directory that user data is kept in, useful when running as root.\r\n\r\nBut other extensions cann't realize the changes, so it may fails. This issue may be solved when env variables of extension-dir and data-dir exposed.\r\n\r\n---------------\r\nVSCode v1.23.0 x64(on Win10)\r\n",
        "createdAt": "2018-05-06 14:58:38",
        "state": "open",
        "number": 49306
    },
    {
        "title": "[Feature Request] Support ability to switch between multiple keybindings.json files",
        "description": "# Feature Request for multiple keybindings.json files\r\n\r\n## How it works now\r\nManually copy/paste desired config into `keybindings.json`, repeat to switch back\r\n\r\n## Feature request\r\nAllow multiple keybinding config files to be imported and selected programmatically\r\n\r\n# Why\r\nAs a programmable keyboard user, I have one workflow for when I'm using my external keyboard, and another for when I'm using my laptop.  I would like to be able to define a set of keybindings for each use case separately, and be able to toggle between both from within VSCode.\r\n\r\n## Example\r\nOn my keyboard, I use `FN+ j/k/i/l` as arrow keys, which outputs the native keycodes for `left/down/up/right`.  To duplicate this behavior on my laptop keyboard, I have to define the following:\r\n\r\n```\r\n{\r\n    \"key\": \"ctrl+j\",\r\n    \"command\": \"cursorLeft\",\r\n    \"when\": \"textInputFocus\"\r\n},\r\n{\r\n    \"key\": \"ctrl+k\",\r\n    \"command\": \"cursorDown\",\r\n    \"when\": \"textInputFocus\"\r\n},\r\n{\r\n    \"key\": \"ctrl+i\",\r\n    \"command\": \"cursorUp\",\r\n    \"when\": \"textInputFocus\"\r\n},\r\n{\r\n    \"key\": \"ctrl+l\",\r\n    \"command\": \"cursorDown\",\r\n    \"when\": \"textInputFocus\"\r\n}\r\n```\r\n\r\nHowever, when I switch back, I've got to reset these bindings to the defaults (along with all of the other keyboard-specific shortcuts I've defined).  This would be far easier if I could just select from a pre-existing keybinding config from within the editor.",
        "createdAt": "2018-05-06 05:33:18",
        "state": "open",
        "number": 49294
    },
    {
        "title": "[html-templating] easy way to inherite advanced html features",
        "description": "With the vscode extension [Better Jinja](https://github.com/samuelcolvin/jinjahtml-vscode) the `jinja-html` language highlights jinja html templates, however some more advanced features available with the `html` langauge are not working with `jinja-html`:\r\n* highlighting the opening tag when the cursor is in the closing tag (and visa versa) ![image](https://user-images.githubusercontent.com/4039449/39631948-95a001c0-4fab-11e8-911d-6fd571357b76.png) ![image](https://user-images.githubusercontent.com/4039449/39631931-8c49dbbe-4fab-11e8-8595-42f7ab8b1eda.png) In the second case with `jinja-html` as the language all `div`s are highlighted, not just the sibling of the tag under the cursor\r\n* auto creating the closing tag once the opening tag is created.\r\n\r\nAnd probably more, but these are the two which would be most useful.\r\n\r\nHow do I get these advanced features working in my child language definition?\r\n\r\nI've tried copying most of the config from `extensions/html/package.json` and `extensions/html/language-configuration.json` into my extension but to no avail. I also tried looking through `extensions/html-language-features` but there's nothing obvious there to include.\r\n\r\nThis isn't as simple as adding more file extensions somewhere, even in a `.html` file if the language is changed to `jinja-html` the features above disappear.\r\n\r\n- VSCode Version: `1.22.2 3aeede733d9a3098f7b4bdc1f66b63b0f48c1ef9 x64`\r\n- OS Version: ubuntu 18.04\r\n\r\nSteps to Reproduce:\r\n\r\n1. install \"Better Jinja\"\r\n2. open or create a file with some html in\r\n3. change the language to `jinja-html`\r\n4. try using advanced html features as described above\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes (the advanced features work with the `html` language without extensions, obviously the error can only be shown with the extension installed)\r\n",
        "createdAt": "2018-05-04 14:04:15",
        "state": "open",
        "number": 49210
    },
    {
        "title": "Support Windows 10 Timeline feature",
        "description": "In Windows 10 April 2018 Update, Microsoft releases a new feature called [Timeline](https://www.youtube.com/watch?v=nNdirfTlU4E). This is a very helpful feature for restoring the work. Please add support for this feature",
        "createdAt": "2018-05-03 07:09:17",
        "state": "open",
        "number": 49096
    },
    {
        "title": "Search - path to file in 'include' box should be searched",
        "description": "- Add absolute path to file in the search viewlet's 'include' box\r\n- No results\r\n\r\nWe assume it's a folder and don't read the results correctly, but this should work.",
        "createdAt": "2018-04-30 16:54:28",
        "state": "open",
        "number": 48958
    },
    {
        "title": "Add language to Output channels",
        "description": "My extension often outputs pretty huge structures of EDN and Clojure text. It would be fantastic to be able to attach the `clojure` language ID to the calls to `append and appendLine` in order to have output syntax highlighted. This would be great for log rows as well and probably lots of other scenarios.",
        "createdAt": "2018-04-28 14:31:15",
        "state": "open",
        "number": 48890
    },
    {
        "title": "Merge results from multiple DocumentHighlightProviders",
        "description": "as discussed in here:\r\n\r\nhttps://github.com/Microsoft/vscode-languageserver-node/issues/318\r\n\r\nI would love to see VS Code to support the document highlights from multiple extensions simultaneously, much in the same way hovers can be provided from multiple extensions and are displayed in the same hover popup.\r\n\r\nThe background for this is:\r\nI have a language server based extension for VS Code that can deliver documentHighlight information for Java code, but as long as the Java language extension itself is installed and active, my documentHighlights are never shown (but the ones from the Java extension instead).\r\n\r\nThe purpose of my language server is to provide additional functionality for Java source code, not to replace the existing Java language tooling. Therefore I benefit from the ability to run multiple language servers for the same language (file type) and that the results from both are merged (which is the case for content assist and hover information, for example). I need the same mechanics for documentHighlight requests/responses... :-)\r\n",
        "createdAt": "2018-04-27 12:15:07",
        "state": "open",
        "number": 48821
    },
    {
        "title": "Does the watch view support auto completions?",
        "description": "_From @yaohaizh on April 8, 2018 14:37_\n\nIn the debug view, the auto completions is supported in the debug console, but it doesn't support in the watch view when typing expression for evaluation. \n\n_Copied from original issue: Microsoft/vscode-debugadapter-node#171_",
        "createdAt": "2018-04-27 09:43:31",
        "state": "open",
        "number": 48810
    },
    {
        "title": "Feature Request: Smarter indent guides",
        "description": "When something is indented in a 'non-standard' way like this:\r\n\r\n![](https://i.imgur.com/1yXCnEx.png)\r\n\r\nmultiple indent guides are shown, even though there's really only one logical indent here. Could the indent lines be smarter and only draw one here?",
        "createdAt": "2018-04-26 16:41:20",
        "state": "open",
        "number": 48772
    },
    {
        "title": "Allow un-selecting an item in a contributed tree",
        "description": "We can select items in the tree node with `reveal`, but we can't un-select. For an outline view that follows the users cursor, it would be good to unselect when the user moves the cursor to some empty whitespace that doesn't have a matching node.\r\n\r\nThe existing explorer treeview also does this; if you open a file that's outside of the workspace folders (or create a new untitled file) then no items are selected in the tree.",
        "createdAt": "2018-04-26 12:27:43",
        "state": "open",
        "number": 48754
    },
    {
        "title": "What are default excludes in workspace.findFiles?",
        "description": "Hello, [`findFiles`](https://code.visualstudio.com/docs/extensionAPI/vscode-api#workspace.findFiles)'s `exclude` argument says that if you pass in `undefined`, default excludes will apply.\r\n\r\nI have found this to not work in my extension despite my configuration being correct. Consider this piece of code:\r\n\r\n```typescript\r\nconst files = await workspace.findFiles('**/*.md'); // https://github.com/Microsoft/vscode/issues/47645\r\n// TODO: Figure out https://github.com/Microsoft/vscode/issues/48674\r\nconsole.log(workspace.getConfiguration('search.exclude'));\r\nfor (const file of files) {\r\n    console.log(file.fsPath);\r\n}\r\n```\r\n\r\nAbove, `workspace.getConfiguration('search.exclude')` returns:\r\n\r\n```json\r\n{\r\n    \"**/node_modules\": true,\r\n    \"**/bower_components\": true\r\n  }\r\n```\r\n\r\nThis is merged from the default settings, I never change this configuration section.\r\n\r\nDespite that, the `workspace.findFiles('**/*.md')` (with or without `undefined` explicitly passed as a 2nd argument, shouldn't make a difference unless some weird parameter counting is going on) returns MarkDown files from my `node_modules` directory.\r\n\r\nI do not know how to run extension debugging in a \"none but this extension\" mode, but I installed a published version of my extension and tried installing it alone in my Insiders instance and was able to reproduce the problem.\r\n\r\nI am using VS Code 1.22.2 and VS Code Insiders 1.23.0-insider`.\r\n\r\nIs there anything else I can do to debug this further?",
        "createdAt": "2018-04-25 12:21:44",
        "state": "open",
        "number": 48674
    },
    {
        "title": "FileSystemProvider: have a reference test suite",
        "description": "Refs: https://github.com/Microsoft/vscode/issues/48421\r\n\r\nI think it would be odd if each extension that implements a `FileSystemProvider` has to write a test suite. It would be nice if we would provide a test suite that serves as the reference of what an extension has to implement in order to be \"compliant\". ",
        "createdAt": "2018-04-25 10:26:11",
        "state": "open",
        "number": 48664
    },
    {
        "title": "FileSystemProvider: no way of handling permissions issues",
        "description": "Refs: https://github.com/Microsoft/vscode/issues/48421\r\n\r\n**Setup:**\r\n* clone https://github.com/bpasero/remote-fs\r\n* F5\r\n* click \"Refresh\" in the explorer\r\n* you should see the current working directory as a remote folder using the file system provider for scheme `datei://`\r\n\r\nI can think of 2 reasons why a permission error raises:\r\n* user needs elevated rights to change a file or folder\r\n* a file can be readonly (e.g. Windows) and to save it you need to first remove the readonly flag\r\n\r\nCurrently there does not seem to be a way to signal a) to save as elevated user or b) to remove the readonly flag.\r\n\r\nI am not sure how relevant this is for any other file system provider that does not have these concepts but this is something our file service can do (via the options `overwriteReadonly` and `writeElevated`). \r\n\r\n",
        "createdAt": "2018-04-25 10:12:52",
        "state": "open",
        "number": 48659
    },
    {
        "title": "Moving View Containers: visual indicator might improve UX",
        "description": "testing #48407\r\n\r\nJust a nitbit but I'm used to the following type of UX when reordering items:\r\n![movingiconsvlc](https://user-images.githubusercontent.com/15158320/39199403-a9489bd4-47e9-11e8-9284-19862dc07672.gif)\r\n\r\nThe current implementation feels more like moving one view into the other instead of above or below it.\r\n![movingiconsvscode](https://user-images.githubusercontent.com/15158320/39199475-d23fc652-47e9-11e8-9013-887f80a8ee7b.gif)\r\n\r\nA border-top or border-bottom on the destination item (similar to gif 1) might improve the experience.",
        "createdAt": "2018-04-24 16:07:13",
        "state": "open",
        "number": 48567
    },
    {
        "title": "[folding] fold all but comments",
        "description": "Now that we have syntax aware folding, I wonder if we could prevent comments from being folded (configurable, if wanted).\r\n\r\nThis would enable to get an overview of a file very quickly.\r\n\r\n**Now**\r\n```\r\n/** ...\r\nreload() { ...\r\n}\r\n```\r\n\r\n**Desired**\r\n```\r\n/**\r\n * This important comment documents the signature of `reload()`\r\n * @param force Enforce reloading\r\n */\r\nreload(force: boolean) { ...\r\n}\r\n```",
        "createdAt": "2018-04-24 13:38:31",
        "state": "open",
        "number": 48556
    },
    {
        "title": "TypeScript: Provide setting to organize imports on format",
        "description": "Testing #48150\r\n\r\nThis would be awesome.",
        "createdAt": "2018-04-24 13:08:06",
        "state": "open",
        "number": 48547
    },
    {
        "title": "Fixed #47151 - Added Multi-cursor support to Alt+Up/Alt+Down",
        "description": "This PR addresses https://github.com/Microsoft/vscode/issues/47151.\r\n \r\nThe PR adds multi-cursor support to Alt+Up/Alt+Down.\r\n \r\nYou can now move the whole multi-cursor instead of just one.\r\n \r\nHere is what it looks like when moving up:\r\n![worksupv1](https://user-images.githubusercontent.com/16523071/39130172-7284630e-46da-11e8-82de-a37752852e0b.gif)\r\n\r\n \r\nHere is what it looks like when moving down:\r\n![worksdownv1](https://user-images.githubusercontent.com/16523071/39130266-a6a74b9c-46da-11e8-8247-e827f3488d2b.gif)\r\n\r\n \r\nThanks for considering this PR.",
        "createdAt": "2018-04-23 13:43:42",
        "state": "open",
        "number": 48406
    },
    {
        "title": "end keyword matching for Ruby, Lua, Julia, Elixir, Crystal and others",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.22.0\r\n- OS Version: Manjaro Linux 17.1.8\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open a Ruby `.rb` file\r\n2. Try to match `end` keywords\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\nHi community!\r\n\r\nI'm happy user of Vim and VSCode :smile:\r\n\r\nOn Vim I can match Ruby, Lua, Julia, Elixir, Crystal `end` keywords using matchit.\r\n\r\nBy example, the following code is for Crystal on Vim:\r\n\r\n![crystal](https://user-images.githubusercontent.com/3067335/29022601-a35ac1f2-7b2f-11e7-9067-fd6b626068ed.gif)\r\n\r\nWould be nice to have something similar on VSCode.",
        "createdAt": "2018-04-22 01:15:11",
        "state": "open",
        "number": 48332
    },
    {
        "title": "Provide an action to collapse all views except the focussed view",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nI've currently got the \"open editors\", \"Folder map\" and \"Code map\" and \"Gitlens\" open. Everything is very cramped. Would be nice if the left panel sub windows would dynamically \"reveal/open up\" upon mouse hover and revert once curser leave the left panel.\r\n\r\nVS Code version: Code 1.22.2 (3aeede733d9a3098f7b4bdc1f66b63b0f48c1ef9, 2018-04-12T16:38:45.278Z)\r\nOS version: Windows_NT x64 10.0.16299\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-04-19 11:08:27",
        "state": "open",
        "number": 48201
    },
    {
        "title": "Option to configure editor scrollbar to be opaque",
        "description": "Currently, if editor.renderLineHighlight is set to \"line\" or \"all\", the highlight extends into the scrollbar. It would be helpful if it stopped just left of the scrollbar. Here is my rationale:\r\n- The line position isn't the same as the scrollbar position, except by coincidence. They are independent, however the highlighting suggests a linkage of some kind.\r\n- With certain color schemes it can be confusing at a quick glance to determine where on the scrollbar I actually am.\r\n\r\nExample of intrusion of line highlight into the scrollbar:\r\n\r\n![image](https://user-images.githubusercontent.com/5439104/38955070-60bf0aaa-4308-11e8-9603-9d0620c13bcf.png)\r\n\r\nNotice how similar the two highlighted areas look on the scrollbar? On closer inspection I can tell that I am actually at the lower point on the scrollbar, because of the brown horizontal line. \r\n\r\nAs a workaround, I could easily change the color of the highlight to prevent confusion. But, I'm having trouble understanding why the highlight extends into the scrollbar in the first place. \r\n\r\nThanks for your consideration! \r\n\r\nVS Code 1.22.1  ",
        "createdAt": "2018-04-18 20:00:32",
        "state": "open",
        "number": 48153
    },
    {
        "title": "[Feature Request] Keybinding with a sequence of keys",
        "description": "## Feature request for keybindings\r\n\r\n### How works now\r\nvscode only supports `two` layers of keybindings combination:\r\n```json\r\n{ \"key\": \"ctrl+k ctrl+s\", \"command\": \"...\" }\r\n```\r\nHere you have `ctrl+k` as root and `ctrl+s` as specification.\r\n\r\n### Feature request\r\nI would like to have the ability of add `many` individual keys strokes in order to trigger a command:\r\n```\r\n{ \"key\": \"ctrl+space g a c\", \"command\": \"...\" }\r\n```\r\nHere the root is `ctrl+space`, followed by `g`, then `a` then `c` key\r\n\r\n### Implications\r\nThis may lead to a conflict where you have partial key bindings repeated:\r\n```json\r\n{ \"key\": \"ctrl+space g\", \"command\": \"...\" }\r\n{ \"key\": \"ctrl+space g a\", \"command\": \"...\" }\r\n```\r\nThe way of resolve this is adding a small delay before resolve the keystroke in order to make sure that finished the command.\r\n\r\n\r\n## Why\r\nI consider this very helpful in order to add `Mnemonics` keybindings, usually I bind git commands in this way: **g**it **a**dd . & git **c**ommit, So the command becomes the follow keybind: `ctrl+space g a c` (git add and commit).\r\n\r\n<hr>\r\n\r\nLet me know if the request is clear,\r\nMany thanks.",
        "createdAt": "2018-04-18 13:44:18",
        "state": "open",
        "number": 48129
    },
    {
        "title": "editor.action.sortLinesAscending has confusing sort order for symbols",
        "description": "When sorting lines using `editor.action.sortLinesAscending` (\"Sort Lines Ascending\" via the Command Palette) the lines are sorted in a very strange order when the comparison involves a symbol character.\r\n\r\nI would expect that `.` (period) would be sorted before `_` (underscore) because in ASCII, period is 46 and underscore is 95.\r\n\r\nHowever, vscode uses `localeCompare` as its sorting method (see [sortLinesCommand.ts:76]( https://github.com/Microsoft/vscode/blob/54e7055c12f4e9a80f44c67758a12cf248d5f374/src/vs/editor/contrib/linesOperations/sortLinesCommand.ts#L76)), which results in underscore being sorted before period. See the repro steps below for an example.\r\n\r\nI saw a previous issue regarding this (#15516) but it was closed because the ASCII ordering was in fact correct. In the case I've outlined below, the ordering is not correct.\r\n\r\nI'm not sure what the correct solution would be but I think that for ASCII symbols, ASCII ordering should be obeyed. I do realise that \"Sort Lines Ascending\" is an ambiguous term - ascending according to what criteria? - so perhaps the command could be renamed to something more specific, or you could provide different default sorting options.\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.22.1 Commit 950b8b0d37a\r\n- OS Version: Windows 10 Enterprise Version 1709 OS Build 16299.371\r\n\r\nSteps to Reproduce:\r\n\r\n1. Copy the following into a new file:\r\n\r\n```\r\na_b.txt\r\na_b_c.txt\r\n````\r\n\r\n2. Highlight the file contents.\r\n\r\n3. Open the Command Palette and select \"Sort Lines Ascending\".\r\n\r\n**Expected:**\r\n\r\nThe file is sorted in the following order:\r\n\r\n```\r\na_b.txt\r\na_b_c.txt\r\n```\r\n\r\n**Actual:**\r\n\r\nThe file is sorted in the following order:\r\n\r\n```\r\na_b_c.txt\r\na_b.txt\r\n```\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2018-04-18 12:03:17",
        "state": "open",
        "number": 48123
    },
    {
        "title": "Allow block comments characters to have new line in them",
        "description": "\r\nIssue Type: <b>Bug</b>\r\n\r\nCreate an extension with a language configuration containing the following types of comments (it's coming from the [VSCode Matlab extension](https://github.com/Gimly/vscode-matlab/) :\r\n\r\n```JSON\r\n\"comments\": {\r\n    \"lineComment\": \"%\",\r\n    \"blockComment\": [ \"\\n%{\\n\", \"\\n%}\\n\" ]\r\n},\r\n```\r\nRun in debug mode and try to create a block comment. \r\n\r\nThe block comment should correctly be added, but when you try to remove it with the same key combination, it will add new block comments instead of removing the existing ones.\r\n\r\nVS Code version: Code 1.22.1 (950b8b0d37a9b7061b6f0d291837ccc4015f5ecd, 2018-04-06T02:26:57.615Z)\r\nOS version: Windows_NT x64 10.0.16299\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-4650U CPU @ 1.70GHz (4 x 2295)|\r\n|Memory (System)|7.91GB (1.15GB free)|\r\n|Process Argv|C:\\Program Files\\Microsoft VS Code\\Code.exe .|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (19)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nng-template|Ang|0.1.9\r\nvscode-markdownlint|Dav|0.14.1\r\nvscode-eslint|dba|1.4.8\r\ngithistory|don|0.4.0\r\ntslint|eg2|1.0.28\r\nvscode-npm-script|eg2|0.3.3\r\nfortran|Gim|0.2.0\r\nmatlab|Gim|0.8.1\r\nAngular2|joh|2.16.1\r\nsolidity|Jua|0.0.38\r\nftp-sync|luk|0.3.3\r\nHTMLHint|mka|0.4.0\r\ncsharp|ms-|1.14.0\r\nPowerShell|ms-|1.6.0\r\nteam|ms-|1.133.0\r\ndebugger-for-chrome|msj|4.3.0\r\ndebugger-for-edge|msj|0.4.1\r\nvscode-docker|Pet|0.0.26\r\nyo|sam|0.9.3\r\n\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-04-17 20:50:03",
        "state": "open",
        "number": 48074
    },
    {
        "title": "Add percentage for zoom in/out, don't zoom everything in/out.",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nNow we can use \"Ctrl+=\" to zoom in, with \"Ctrl+-\" to zoom out.\r\nHowever we cannot control zoom percentage accurately. \r\nCan you add a percentage label or selector (just like VS) for us? \r\nAnd maybe we don't need zoom everything in/out (Now if I use Ctrl+=, this will zoom almost everything, especially the file explorer, in fact I don't think it need zooming). We ONLY need to zoom code in/out. Just like that of VS:)\r\n\r\nPS\uff1a\"Ctrl+ Mouse's wheel\" for percentage zoom in/out is welcomed. \r\n\r\nVS Code version: Code 1.22.2 (3aeede733d9a3098f7b4bdc1f66b63b0f48c1ef9, 2018-04-12T17:28:16.777Z)\r\nOS version: Windows_NT ia32 6.3.9600\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-04-17 02:06:54",
        "state": "open",
        "number": 48019
    },
    {
        "title": "Feature: Settable \"keyboard.chords.mode\"",
        "description": "<h1 align=center><img alt=\"consequential inaccessibility \u2260 incidental feature request\" src=\"https://upload.wikimedia.org/wikipedia/commons/3/3b/Antu-preferences-desktop-accessibility-32.svg\" height=48 /></h1>\r\n\r\n<details><summary align=center><b><code>Explainer</code></b></summary>\r\n\r\n---\r\n\r\n**Note** \u2014 The following was added after reopening the issue\u2026 please read to understand my perspective when I opened this issue a while back.\r\n\r\n> TL;DR;\r\n>\r\n> This issue for folks like myself comes with accessibility related burdens that extend far beyond feeling \ud83d\ude2f because you triggered the wrong thing\u2026 For every unexpected outcome, there is a long period of observing to look for what makes it happen, then you need to figure out where to look for possible causes, then you find that, then you look for ways to fix it, creating all sorts of noise and all sorts of visual and cognitive burdens.\r\n>\r\n> So you get the gist, I am disabled my way, it never got in my way, but your chords feature is an actual disability not of my way, it is in my way!\r\n>\r\n> And so yes all that just because of a shortcut, yes, that is what others don't get to see \u2014 which is a good thing, but not accepting that some suffer this is hardly a fair thing to do just because there is more who don't need bother\u2026 please \u2764\ufe0f\r\n>\r\n> DR;\r\n>\r\n> consequential inaccessibility \u2260 incidental feature request\r\n\r\n</details>\r\n\r\n---\r\n\r\n**Proposal**\r\n\r\nI'd like to propose a solution that will allow everyone to decide the degree of complexity they are comfortable with, without the need for any complicated configuration and possible very little change to the existing system. The user simply decides which \"keyboard.chords.mode\" they want to use in the `settings.json`, which will augment how VS code behaves immediately after the first key of a possible chord is pressed.\r\n\r\n<details><summary>This was in the original issue, it is not meant as a \"feature request\" merely my na\u00efve way to try to \"offer solutions\" not \"problems\" but I realize now my mistake\u2026</summary><p>\r\n\r\n> Let's say the current unchanged behaviour is the \"default\" mode, we can also consider an alternative \"off\" mode, and maybe my favourite one \"continuous\" is the third mode, may be even extension-defined or something more complicated down the road. When \"off\", VS code does not even need to initialize any chord effects. When \"default\", VS code does what it normally does.\r\n> \r\n> For \"continuous\" a new mode all together is introduces to replace the current sparse key sequences with modifier(s) + key(s) combinations. This would instead require the first key to include one or more modifiers with one or more letter, except the modifiers should remain pressed before the following keys in the sequence. So for instance\"<kbd>cmd</kbd>+<kbd>k</kbd> <kbd>cmd</kbd>+<kbd>w</kbd>\"  would not trigger if the <kbd>cmd</kbd> key was released midway, or if <kbd>cmd</kbd> is not yet released (allowing sequences that go beyond two keys), then as soon as the modifier is released, all keybindings exactly matching `\"key\": \"cmd+k cmd+w\"` would be the intended keys, excluding any other partial matches like ~~`\"key\": \"cmd+k\"`~~ or ~~`\"key\": \"cmd+k cmd+w cmd+1\"`~~... etc.\r\n\r\n</details>\r\n\r\nBut, please come your own solution, I do not want chords, not the way they are at least, so on/off is better to me than trouble/off/useful \u2014 which was misrepresented above, sorry!\r\n\r\n---\r\n\r\n**Why**\r\n\r\nFrom time to time commonly used keyboard shortcuts, specifically those that overlap with the first key in the chord of others, stop working. The reasons are always different, but ultimately, the underlaying cause or the side effect will be fixed by finding the offending keybinding which is guaranteed to either be a default or extension default, and then adding two or more new bindings to try to gracefully avoid the conflict.\r\n\r\nIn reality, the current chord implementation is extremely evolved to do amazing work coalescing **predefined** keybindings from many sources, but as far as the user is concerned, `keybindings.json` is an extremely complicated file to troubleshoot. If a conflict did not involve chords, it is not complicated, and most of the time using the Keyboards Shortcut editor is all you need to substitute any offenders, which result in 1 or 2 records in the json file at the most.\r\n\r\n**Issue**\r\n\r\nSo let me close with my incomplete issue (which likely you would not like filed).\r\n\r\nCurrently my <kbd>cmd</kbd>+<kbd>k</kbd> no longer clears the terminal and my keybindings to fix that are not close to how things were before either a new VS code change or some extension I recently added (or something else).\r\n\r\n- VSCode Version: Version 1.22.2 (1.22.2)\r\n- OS Version: macOS 10.13.4 (17E199)\r\n\r\nSteps to Reproduce:\r\n\r\n1. Don't know\r\n\r\nCurrent *Crude* Fix:\r\n\r\n```json\r\n// keybindings.json\r\n\r\n    {\r\n        \"key\": \"cmd+k\",\r\n        \"command\": \"workbench.debug.panel.action.clearReplAction\",\r\n        \"when\": \"!editorFocus && inDebugMode\" // but only if panel is open and showing please\r\n    },\r\n    {\r\n        \"key\": \"cmd+k\",\r\n        \"command\": \"workbench.action.terminal.clear\",\r\n        \"when\": \"terminalFocus\" // did xterm break this (I don't know)\r\n    },\r\n    {\r\n        \"key\": \"cmd+k\",\r\n        \"command\": \"workbench.action.terminal.clear\",\r\n        \"when\": \"!editorFocus && !inDebugMode\" // but only if in terminal please\r\n    }\r\n```\r\nDoes this issue occur when all extensions are disabled?: Yes *but which one*\r\n\r\nI don't think it is possible for users of different skillsets to figure out the trickle down logic the VS code uses to determine when to expect a next chord key when they are 100% sure they bound <kbd>cmd</kbd>+<kbd>k</kbd> to clear the terminal when the focus is in the terminal. Even then, how many negative bindings would it take to ensure that the positive binding always triggers.\r\n\r\n**Thanks** and really excited to see the next iteration of this revolutionary keyboard handling system.",
        "createdAt": "2018-04-16 15:01:43",
        "state": "open",
        "number": 47976
    },
    {
        "title": "Add ability to use source reference as a fall back",
        "description": "Currently when the source reference is returned over the debugger protocol, the source is retrived via the debug adapter (ie remote source is always used).\r\n\r\nWould it be possible for vs code to check if the file exists locally, if not then fall back to using the source reference.\r\n\r\nThis would greatly simplify remote debugging , at least in Python. This way user doesn't need to configure any path (local or remote) mappings.\r\n\r\nHere's the work flow:\r\n* In the attach request we'll (extension in vscode) send current work space as the default local root \r\n* On the remote side when attach request is received, we'll map the local root (received) to the current directory (serves as remote root)\r\n* We return mapped paths along with a source reference (in stack traces)\r\n* VSCode will check if the file exists locally, if yes then use that else use the source reference.\r\n\r\nIf on the other hand the user provides the path mappings, the remote debugger will not return source reference (number). Hence vscode will always look for those files locally.\r\n",
        "createdAt": "2018-04-15 19:38:57",
        "state": "open",
        "number": 47914
    },
    {
        "title": "Allow webviews to be shown in modal windows",
        "description": "It would be very helpful if extension writers could show a popup/modal window with various kinds of graphical options (e.g: create file from list, with a preview of various file types).\r\n\r\nIn fact there is already something like that (the built-in issue report window), but I'd prefer more flexibility by either allowing more control types in the dialog (like icon views, treeviews etc.) or make the entire content a webview.\r\n\r\nThanks",
        "createdAt": "2018-04-15 10:19:13",
        "state": "open",
        "number": 47899
    },
    {
        "title": "Horizontal scrollbars are too tiny in diff mode",
        "description": "When I am in diff mode, if I have to scroll left/right the horizontal scrollbars at the bottom are too tiny and hard to find quickly. Please allow increasing height of it to make it easy to scroll.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: NA\r\n",
        "createdAt": "2018-04-15 01:14:13",
        "state": "open",
        "number": 47888
    },
    {
        "title": "Allow disposable pattern on TreeItems",
        "description": "This is tangentially related to https://github.com/Microsoft/vscode/issues/30535.\r\n\r\nAs [mentioned](https://github.com/Microsoft/vscode/issues/30535#issuecomment-365663622), in GitLens and in the upcoming CodeStream extension, I have tree items that have event subscriptions based on their expanded state (or in some cases just existence -- i.e. visibility). Currently there is no good way to clean up these subscriptions if the items get re-rendered (i.e. replaced with a new instance -- because I am not maintaining a duplicate set of TreeItem that the tree already maintains) or removed from the tree (maybe by a far upstream ancestor).\r\n\r\nIt would be great if upon removal/clearing of the tree items, their dispose method would be called if one exists. That way any subscriptions could be appropriately removed.\r\n\r\nLikely here:\r\nhttps://github.com/Microsoft/vscode/blob/b8df1293c13dfc75c9cff388a0a0994475441198/src/vs/workbench/api/node/extHostTreeViews.ts#L407\r\n\r\nAnd here:\r\nhttps://github.com/Microsoft/vscode/blob/b8df1293c13dfc75c9cff388a0a0994475441198/src/vs/workbench/api/node/extHostTreeViews.ts#L421\r\n\r\n//cc @sandy081",
        "createdAt": "2018-04-14 19:27:04",
        "state": "open",
        "number": 47880
    },
    {
        "title": "Typewriter Scroll Mode",
        "description": "Issue Type: Feature Request\r\n\r\nWhen editing all files, I want to have a \"typewriter scroll mode\" that keeps the current line that I'm working on in the vertical center of the screen.\r\n\r\nYes, I know there is an extension to do this for markdown and text files, but I would want it for all files that I edit.  For code, this is useful because you can more easily see the code below the line you are working on, without mucking about with having to \"overscroll.\"",
        "createdAt": "2018-04-14 18:25:25",
        "state": "open",
        "number": 47879
    },
    {
        "title": "Add wordwrap indicator",
        "description": "There's currently no visual indication when you use the `\"editor.wordWrap\": \"on\"` setting.\r\n\r\nI'd propose optionally adding a wordwrap-indicator on each newline, something like this: \r\n![untitled](https://user-images.githubusercontent.com/24317742/38761997-b52116bc-3f87-11e8-8a61-aa9e0c88c151.png)\r\n\r\nso it becomes easy to spot when a line has been wordwrapped.",
        "createdAt": "2018-04-14 00:02:36",
        "state": "open",
        "number": 47855
    },
    {
        "title": "Use fresh environment block on new terminals in Windows",
        "description": "At the moment, if any environment variables change, or new \"apps\" are installed while VS Code is running, in order for those changes to be recognized VS Code needs to be closed and re-open. \r\n\r\nFor instance, when running `npm i -g <something>` or `choco install <package>` in another prompt or powershell window, those new commands are not recognized until the app is rebooted.\r\n\r\nIt would be great if adding a new terminal instance with `+` would load these new variables/apps/notsurewhatterminologytouse.",
        "createdAt": "2018-04-13 09:07:09",
        "state": "open",
        "number": 47816
    },
    {
        "title": "Feature request: paste and select pasted text",
        "description": "Reason: sometimes there is a need to copy a block of text within the same file and replace some words within copied block. \r\n\r\nCtrl-Shift-V would be a good combination for the command.\r\n",
        "createdAt": "2018-04-13 09:01:53",
        "state": "open",
        "number": 47814
    },
    {
        "title": "[Feature Request] Extension Folder",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nSorry, my English is so poor.\r\n\r\nI want to ask whether there exists one function that can **collate the extensions**.\r\n\r\nI installed so many extensions, but they are in a mess. The list of extensions looks so complex and terrible!!!\r\nCan I **put them into some folders and centrally manage them**?????\r\n\r\nPlease!!!!!!!!!QAQ\r\n\r\nVS Code version: Code 1.21.1 (79b44aa704ce542d8ca4a3cc44cfca566e7720f1, 2018-03-14T14:46:47.128Z)\r\nOS version: Windows_NT x64 10.0.17133\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-04-13 06:03:41",
        "state": "open",
        "number": 47805
    },
    {
        "title": "Command - Undo Replace All",
        "description": "In Search Panel should be button \"Undo Replace All\", whitch undo all \"replaced\" changes in all files.\r\nShould to be work like standard undo function, but only for files whitch \"Replace All\" made a changes.\r\n\r\nIt looks something simple to introduce. Am I right?",
        "createdAt": "2018-04-12 21:55:41",
        "state": "open",
        "number": 47783
    },
    {
        "title": "Need a way to get logs from the DA when there is no explicit launch config",
        "description": "There is no way to set 'trace' when there is no launch config set, like when using auto attach. I can always have the user create a launch config for debugging, but it would be easier if they could set a setting which would enable tracing.  \r\n\r\ncc @weinand ",
        "createdAt": "2018-04-12 19:03:48",
        "state": "open",
        "number": 47774
    },
    {
        "title": "Select editor text via touch",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nWhen using a touch screen, I want to be able to interact with VSCode in an intuitive manner.\r\n\r\nWhen I touch and drag on text, I expect it to do something. I think the most intuitive option would be to select text.\r\n\r\nWhen I touch and drag on empty space (space with no characters in the buffer), I expect the editor to scroll with my finger.\r\n\r\nVS Code version: Code 1.22.1 (950b8b0d37a9b7061b6f0d291837ccc4015f5ecd, 2018-04-06T02:26:57.615Z)\r\nOS version: Windows_NT x64 10.0.16299\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-04-12 18:31:03",
        "state": "open",
        "number": 47770
    },
    {
        "title": "Allow maximizing/restoring a single terminal pane",
        "description": "I'd be surprised if this hasn't been asked before, but tmux supports a thing it calls \"pane zooming\", if I recall correctly. \r\n\r\nBasically once you start splitting a window, vertically, horizontally, it doesn't matter, you press a certain keyboard shortcut and the current pane is \"maximized\", hiding all the other panes. Text is reflowed, so you actually see the former pane as a full window. This is incredibly useful once you launch some command that has a ton of unexpected output that you want to check out.\r\n\r\nWhen you're done you press the same keyboard shortcut and the pane \"reverts\", showing the previous layout. The text in the pane is reflowed again to make it fit in the smaller pane size.\r\n\r\nVery, very handy when you're moving through terminals quickly and you want to check out something.",
        "createdAt": "2018-04-11 14:06:27",
        "state": "open",
        "number": 47661
    },
    {
        "title": "Make input fields keyboard shortcuts (e.g. copy/cut/paste) configurable",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nMy VSC is configured to use the Meta/Super/Command/Windows key for copying and pasting. However, the search box still requires the use of the Control key to paste into it. The behavior should be consistent in all text fields.\r\n\r\n\t{ \"key\": \"meta+v\",   \"command\": \"editor.action.clipboardPasteAction\",\r\n\t\t\"when\": \"editorTextFocus && !editorReadonly\" },\r\n\r\nVS Code version: Code 1.21.1 (79b44aa704ce542d8ca4a3cc44cfca566e7720f1, 2018-03-14T14:46:30.761Z)\r\nOS version: Linux x64 4.9.0-6-amd64\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Xeon(R) CPU E5-2690 v4 @ 2.60GHz (56 x 1375)|\r\n|Load (avg)|0, 0, 0|\r\n|Memory (System)|125.90GB (81.73GB free)|\r\n|Process Argv|/usr/share/code/code google-easel-comm.c|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (1)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\ncpptools|ms-|0.16.1\r\n\r\n\r\n</details>\r\nReproduces only with extensions\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-04-10 21:26:40",
        "state": "open",
        "number": 47616
    },
    {
        "title": "Save automatically when refactoring",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.22.1\r\n- OS Version: macOS\r\n\r\n**It's a feature request, not a bug report.**\r\n\r\nJust like the feature \"Save automatically when Search & Replace\", after refactoring the code (by pressing `F2` key or using context menu), the VS Code should save the file(s) automatically.\r\n",
        "createdAt": "2018-04-10 09:52:27",
        "state": "open",
        "number": 47573
    },
    {
        "title": "Expose `glyphMargin` support to extensions",
        "description": "It would be great if extension were able to use the built-in glyphMargin decorations -- i.e. clickable decorations in the gutter.",
        "createdAt": "2018-04-10 06:54:47",
        "state": "open",
        "number": 47559
    },
    {
        "title": "Improve `Run [Build] Tasks` command and dialog",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nWhen it comes to executing `Tasks: Run [Build] Tasks`, instead of putting the message, `Fetching [build] tasks...` in the status bar (where I often don't notice it) and waiting for all tasks to be available before showing anything, I would like the dialog to pop up immediately, with that message at the top, and populate as tasks are found.\r\n\r\nAs a rough example (please pardon my [lack of] ms paint skills):\r\n\r\n![vscode issue 47449](https://user-images.githubusercontent.com/879055/38473412-89788370-3b44-11e8-8d53-2ee1101b409c.png)\r\n\r\nWhen I execute `Tasks: Run Build Task` just after opening VSCode, or after VSCode has been inactive for quite a while, the `Fetching build tasks...` job takes a fair bit of time to complete. It completes slightly faster for a single-root workspace than for a multi-root workspace, but it still take an annoyingly long time to complete.\r\n\r\nI would guess that tasks from `tasks.json` do not take very long to fetch, and the main holdup is waiting for tasks from extensions and from gulp. Since I often want to run a task from `tasks.json`, it would be wonderful to not have to wait for all of the other tasks to populate before I can run one of those.\r\n\r\nVS Code version: Code 1.22.1 (950b8b0d37a9b7061b6f0d291837ccc4015f5ecd, 2018-04-06T02:26:57.615Z)\r\nOS version: Windows_NT x64 10.0.16299\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-04-08 22:49:44",
        "state": "open",
        "number": 47449
    },
    {
        "title": "keybindings using [ContextMenu] key sometimes ALSO trigger UI context menu",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\n- VSCode Version: 1.22.1\r\n- OS Version: Windows 10 Pro 1803 (build: 17133.1)\r\n- Does this issue occur when all extensions are disabled?: Yes\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open keybindings and create a new one (let's call its action `action`). Do not use a \"when\" clause. Examples:\r\n    - plain: `\"key\" : \"contextmenu\"`\r\n    - modifier: `\"key\" : \"alt+contextmenu\"`\r\n    - chord + plain: `\"key\" : \"ctrl+shift+alt+space contextmenu\"`\r\n    - chord + modifier: `\"key\" : \"ctrl+shift+alt+space alt+contextmenu\"`\r\n\r\n2. Test the keybinding with various selections and non-selections\r\n\r\nNotice that if you use the UI to assign the keybinding, then the \"plain\" and \"chord + plain\" examples will trigger the UI context menu (so you will need to press [Esc] and [Enter] to confirm the keybinding) but the \"modifier\" and \"chord + modifier\" examples will not.\r\n\r\nWhen the [ContextMenu] key is used unmodified (as in the \"plain\" and \"chord + plain\" examples above), then:\r\n- when editor text has focus: *does not* trigger `action` + triggers UI context menu\r\n- outside editor: triggers `action` + triggers UI context menu\r\n\r\nWhen the [ContextMenu] key is used modified (as in the \"modifier\" and \"chord + modifier\" examples above), then:\r\n- when editor text has focus: *does not* trigger `action` + triggers UI context menu\r\n- outside editor, with selection: triggers `action` + triggers UI context menu\r\n- outside editor, without selection: triggers `action` + *does not* trigger UI context menu\r\n",
        "createdAt": "2018-04-07 21:21:10",
        "state": "open",
        "number": 47403
    },
    {
        "title": "Unable to scroll when viewing extremely large files",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nSteps to reproduce:\r\n1. Open extremely large file (mine is 7 GB large and 184 million lines long).\r\n2. Wait for it to load.\r\n3. Try to scroll.\r\n\r\nEven though I can edit the file I am unable to scroll and I am unable to drag the minimap.\r\n\r\nVS Code version: Code 1.22.1 (950b8b0d37a9b7061b6f0d291837ccc4015f5ecd, 2018-04-06T02:26:57.615Z)\r\nOS version: Windows_NT x64 10.0.16299\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz (8 x 4200)|\r\n|Memory (System)|15.94GB (4.88GB free)|\r\n|Process Argv|C:\\Program Files\\Microsoft VS Code\\Code.exe --max-memory=8192|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (11)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nbetter-toml|bun|0.3.2\r\nnpm-intellisense|chr|1.3.0\r\nvscode-eslint|dba|1.4.8\r\nvscode-npm-script|eg2|0.3.3\r\nprettier-vscode|esb|1.2.2\r\ngc-excelviewer|Gra|2.0.20\r\ndiscord-vscode|icr|2.2.4\r\npython|ms-|2018.3.1\r\natom-keybindings|ms-|3.0.4\r\nsubtle-brackets|raf|2.1.1\r\nrust|rus|0.4.1\r\n\r\n(2 theme extensions excluded)\r\n\r\n</details>\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-04-07 14:45:53",
        "state": "open",
        "number": 47394
    },
    {
        "title": "Make the indents non-editable",
        "description": "Hi, a feature request for the editor:\r\n\r\nProposal is to make the indents non-editable.\r\n(add such edit mode)\r\n\r\nHow it works: \r\n- indent char is specified globally in a setup (i.e. \\t or space*n)\r\n- those become non-editable, i.e you cannot input anything before \r\nor inside an indent.\r\n- pressing TAB/SHIFT-TAB indents selected lines more/less\r\n\r\nHow selection works:\r\n- dragging the mouse highlights text starting \r\nfrom the least indented line in the selection\r\n- copy-pasting the selection copies it as if the selected block \r\nwas on zero-indent, thus no need to reformat after pasting -\r\nit will just add indent from the target line (where caret is at pasting)\r\n\r\nFor pasting from the buffer with unknown preceding whitespace -\r\nadd some optional pasting, i.e. char sequences that are parsed as indents.\r\n\r\nIdeally, this should affect the **memory representation** also - \r\ni.e. retrieving the text of line X should give string **without** indent characters,\r\nand give access to additional indent value. \r\nWhy? because IMO this makes much more sense for scripting.\r\n\r\nHope this is clear.\r\nSuch feature will significantly reduce finger movements \r\nand will make editing and scripting more robust.\r\nFurther, the non-editable indent space area on the screen can be utilized for \r\nsome mouse click actions - e.g. line selection.\r\n\r\n**Demos**\r\n\r\n**Caret movements** - walks only in text, remembers position in text:\r\n\r\n![caret](https://user-images.githubusercontent.com/12515548/38472866-16b2a820-3b8f-11e8-921b-32fe5011695b.gif)\r\n\r\n**Selection**: do NOT select the indents,  but grabs them only locally - i.e. starting \r\nfrom the _least indented line in current selection_ \r\n(blue bullets - the indents that will be selected and copied):\r\n\r\n![selection](https://user-images.githubusercontent.com/12515548/38472894-7806a9fa-3b8f-11e8-98f5-b949a5a40dc8.gif)\r\n\r\n**Copy-pasting**: when pasting, adds the current line's indent to each of the buffer's line, \r\nwhich results in precisely formatted lines:\r\n\r\n![copy-paste](https://user-images.githubusercontent.com/12515548/38472937-0c935370-3b90-11e8-8135-1855e84471fb.gif)\r\n",
        "createdAt": "2018-04-07 00:35:07",
        "state": "open",
        "number": 47368
    },
    {
        "title": "[html][css] Investigate cross css/html, multi file support",
        "description": "Approach:\r\n- merge HTML & CSS servers to avoid cross LSP communication\r\n- in the server build an (in-memory) index of for the contents of css and html files in the current folder  \r\n\r\nBenefits:\r\nIn HTML\r\n- code completion in 'class' attributes using the collected class names (same for ids)\r\n- goto & peek references on 'class' attributes (same for ids)\r\n\r\nIn CSS/LESS/SCSS\r\n- code completion for class names based on already used class names in HTML and CSS (same for ids)\r\n- goto & peek references on 'class' attributes (same for ids)\r\n- code completion for variables defined in other css files\r\n",
        "createdAt": "2018-04-06 14:53:48",
        "state": "open",
        "number": 47331
    },
    {
        "title": "Launch task directly into split terminal",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nThe integrated terminal split panes should support launching a task from the command palette into a split terminal panel. \r\n\r\nHere is the current workflow\r\n1. Launch a long-running task from command palette by typing `ctrl+p -> task first-watcher-task -> enter`. (A new terminal window appears, running the task).\r\n2. Click the split terminal button to create a split terminal.\r\n3. In the split terminal, type the arguments for the second task and run it by pressing the enter key in the terminal. Can't run  `ctrl+p -> task second-watcher-task -> enter` because that would open a whole new terminal section of its own.\r\n\r\nHere is the desired workflow\r\n1. Launch a long-running task from command palette by typing `ctrl+p -> task some-watcher-task -> enter`. (A new terminal window appears, running the task).\r\n2. Launch the second long-running task from comand palette by typing `ctrl+p -> task second-watcher-task -> enter`. Somehow, this task runs in a second panel of the split terminal, based on some extra command, a task configuration setting, or perhaps by having focus in an already opened split terminal.\r\n\r\nVS Code version: Code - Insiders 1.22.0-insider (81335051b2d1460112905c2bce23c205e7cdd231, 2018-04-03T01:09:54.914Z)\r\nOS version: Windows_NT x64 6.1.7601\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-04-05 22:25:32",
        "state": "open",
        "number": 47265
    },
    {
        "title": "[json] completion has bad replacement span, overwrites comment",
        "description": "Issue Type: <b>Bug</b>\r\n\r\n* Open a `tsconfig.json` containing:\r\n```json\r\n{\r\n    \"compilerOptions\": {\r\n        \"target\": \"es5\"\r\n    }\r\n}\r\n```\r\n* Comment out `//\"es5\"`\r\n* Put a `\"` in front of it. Choose the completion that pops up for \"es2015\".\r\n* Result:\r\n```json\r\n{\r\n    \"compilerOptions\": {\r\n        \"target\": \"es2015\",es5\"\r\n    }\r\n}\r\n```\r\n\r\nVS Code version: Code - Insiders 1.22.0-insider (6b4d53cdab8bcae1eaaa4934d93c077319b573db, 2018-04-04T13:52:38.747Z)\r\nOS version: Windows_NT x64 10.0.15063\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Xeon(R) CPU E5-1620 v3 @ 3.50GHz (8 x 3492)|\r\n|Memory (System)|15.91GB (6.76GB free)|\r\n|Process Argv|C:\\Program Files\\Microsoft VS Code Insiders\\Code - Insiders.exe|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details>Extensions: none\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-04-04 15:34:19",
        "state": "open",
        "number": 47197
    },
    {
        "title": "[html] propose html 4 properties (cellPadding ...)",
        "description": "#Issue Type: <b>Bug</b>\r\n\r\nCell-padding and cell-spacing, valign and align attribute autocomplete not working \r\n\r\nVS Code version: Code 1.21.1 (79b44aa704ce542d8ca4a3cc44cfca566e7720f1, 2018-03-14T14:46:47.128Z)\r\nOS version: Windows_NT x64 10.0.16299\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-3720QM CPU @ 2.60GHz (8 x 2594)|\r\n|Memory (System)|15.93GB (7.93GB free)|\r\n|Process Argv|C:\\Program Files\\Microsoft VS Code\\Code.exe|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (25)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nhtml-snippets|abu|0.2.1\r\nvscode-caniuse|aka|0.5.3\r\nvs-code-css-comments|ash|1.0.3\r\nhtmltagwrap|bra|0.0.7\r\nphp-autocomplete|bsc|0.4.2\r\nsimple-react-snippets|bur|1.1.1\r\nvscode-css-modules|cli|0.2.2\r\njshint|dba|0.10.17\r\nvscode-eslint|dba|1.4.8\r\nvscode-quick-select|dba|0.2.5\r\nauto-rename-tag|for|0.0.15\r\nauto-comment-blocks|kev|1.0.1\r\nexpand-region|let|0.1.2\r\nnode-debug2|ms-|1.22.0\r\nsublime-keybindings|ms-|3.0.3\r\nteam|ms-|1.122.0\r\nsass-indented|rob|1.4.8\r\nvscode-idiomatic-css-comments|rya|0.1.2\r\ngit-autoconfig|shy|0.0.1\r\neasysass|spo|0.0.6\r\ncss-auto-prefix|spo|0.1.4\r\nvscode-jss-snippets|vis|0.2.2\r\nvscode-react-native|vsm|0.6.6\r\nhtml-css-class-completion|Zig|1.17.1\r\nvscode-open-in-github|ziy|1.3.1\r\n\r\n(2 theme extensions excluded)\r\n\r\n</details>\r\nReproduces only with extensions\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-04-04 13:21:54",
        "state": "open",
        "number": 47192
    },
    {
        "title": "Make search tree context menu multiselect-aware",
        "description": "We need the controller at https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/files/electron-browser/views/explorerViewer.ts#L369 to be not Explorer-specific so it can drive multiselect in other trees.\r\n\r\nTreeResourceNavigator https://github.com/Microsoft/vscode/blob/master/src/vs/platform/list/browser/listService.ts#L456 kind of conflicts with it, need to figure out how that's supposed to work.\r\n\r\nWe will need a generic version of https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/files/browser/files.ts#L27 currently the keyboard shortcuts on some of the search context menu items don't work for the same reason",
        "createdAt": "2018-04-04 01:00:15",
        "state": "open",
        "number": 47166
    },
    {
        "title": "Ctrl+Alt+Down (selecting lines) and Alt+Up (moving them) moves only 1 line",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.22.0-ins\r\n- OS Version: win7x64\r\n\r\n![ctrl alt down](https://user-images.githubusercontent.com/24613274/38259340-6b4a1ac4-376d-11e8-8bec-71e042b44726.gif)\r\n\r\n",
        "createdAt": "2018-04-03 15:33:12",
        "state": "open",
        "number": 47151
    },
    {
        "title": "Add support for \"Go to Super/Base\" (similar to Go to Implementation)",
        "description": "IntelliJ supports both \"Go to Super Method\" and \"Go to Implementation\":\r\n\r\nhttps://www.jetbrains.com/help/idea/navigating-to-super-method-or-implementation.html\r\n\r\nAs far as I can tell, Code currently only has the latter so the former has to just be a custom command (which means it may be implemented inconsistently, have inconsistent keybindings, etc.). It'd be better if we could register a SuperProvider (!) to provide this.\r\n\r\n(It's possible this has been asked for, but trying to search the issues for `super` returns hundreds of results because people like to use that word!)",
        "createdAt": "2018-04-03 09:31:59",
        "state": "open",
        "number": 47126
    },
    {
        "title": "Allow starting debugging using \"current\" config with additional arguments",
        "description": "I'd like to add a command for \"Run in Profile Mode\" however it should respect the users current debug settings in `launch.json` (and which debug config the have selected in the debug tab), similar to pressing F5.\r\n\r\nWhile the user can add `mode: profile` to the launch.json, it means they'd have to maintain the launch config duplicated and wouldn't be able to key-bind this setting.\r\n\r\nCould we have (if there isn't already) a way to start a debug session similar to the user hitting `F5` (currently the startDebug API requires a name/config and doesn't seem to support just using the same thing that F5 would) but that allows some arbitrary config to be passed in (eg. `mode: profile`)?",
        "createdAt": "2018-04-03 08:25:19",
        "state": "open",
        "number": 47122
    },
    {
        "title": "Add support for media keys (keybinding shows \"unknown\" for key \"back\" and \"forward\")",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\nThe same keyboard configuration works on my QtCreator but not VSCode.\r\nThe support for other keys also not good, such as \"Home\" and \"Email\".\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version:\r\n```\r\nVersion 1.21.1\r\nCommit 79b44aa704ce542d8ca4a3cc44cfca566e7720f1\r\nDate 2018-03-14T14:46:30.761Z\r\nShell 1.7.9\r\nRenderer 58.0.3029.110\r\nNode 7.9.0\r\nArchitecture x64\r\n```\r\n- OS Version:\r\n```\r\nLinux 4.14.31-1-MANJARO #1 SMP PREEMPT x86_64 GNU/Linux\r\nDistributor ID: ManjaroLinux\r\nDescription:    Manjaro Linux\r\nRelease:        17.1.7\r\nCodename:       Hakoila\r\n```\r\n\r\nScreenshots:\r\n![screenshot_20180403_103938](https://user-images.githubusercontent.com/956693/38226441-4dde99ce-372c-11e8-817c-940420081d88.png)\r\n![screenshot_20180403_104046](https://user-images.githubusercontent.com/956693/38226442-4e0e3206-372c-11e8-8ed0-fa7df2bfafff.png)\r\n![screenshot_20180403_104438](https://user-images.githubusercontent.com/956693/38226443-4e3f7eb0-372c-11e8-9cab-bdd3a40c983e.png)",
        "createdAt": "2018-04-03 02:50:10",
        "state": "open",
        "number": 47115
    },
    {
        "title": "Allow configuring alias language for contributed snippets",
        "description": "Motivation: https://github.com/vuejs/vetur/issues/718\r\n\r\nvue-html is a language similar to html but with a few additions. However, Vetur users would like to use html snippets contributed by extensions inside vue-html.\r\n\r\nFor users' own snippets, they can achieve this by copy-pasting their snippets between html and vue-html. However, is there anyway to make contributed html snippets available to vue-html too?",
        "createdAt": "2018-04-02 18:51:47",
        "state": "open",
        "number": 47096
    },
    {
        "title": "API for retrieving the current position of the panel",
        "description": "Since a few releases it has been possible to move the bottom panel (the one containing `problems`, `terminal` etc.) to the side.\r\n\r\nI want to add [support for split terminals](https://github.com/fabiospampinato/vscode-terminals/issues/9) to an extension of mine, and once 2d splits are implemented I would need to know the position of the panel in order to implementing this properly, because one would probably want to split a terminal in different directions depending on the position of the panel.",
        "createdAt": "2018-04-01 23:17:21",
        "state": "open",
        "number": 47062
    },
    {
        "title": "Indent guides mismatch if statements without braces",
        "description": "Issue Type: <b>Bug</b>\r\n\r\nWhenever you have an if statement which does not have braces the indent guides keep going forward rather than stopping after the first line underneath.\r\n\r\n**edit**: the same issue exists with loops and switch statements. For the case of switch statements, the indent guide should stop after the `break;`. \r\n\r\nExample below is in PHP, however it appears to be the same in other languages which allow for braceless if statements. \r\n\r\nFirst image shows how it currently is, second image shows how it should be. \r\n\r\n![demo](https://user-images.githubusercontent.com/7613769/38141126-b0df9e16-342e-11e8-85d3-264c53e6f63e.png)\r\n\r\nVS Code version: Code 1.21.1 (79b44aa704ce542d8ca4a3cc44cfca566e7720f1, 2018-03-14T14:46:47.128Z)\r\nOS version: Windows_NT x64 10.0.16299\r\n\r\nReproduces without extensions",
        "createdAt": "2018-03-30 14:36:37",
        "state": "open",
        "number": 47006
    },
    {
        "title": "SCM: Add `amend` checkbox to commit panel",
        "description": "For now, we have the opportunity to amend commits via command palette or via git context menu.\r\n\r\nIt would be great if there were an `amend` checkbox right beside the commit message box to have this feature integrated in the source control panel.",
        "createdAt": "2018-03-30 09:41:04",
        "state": "open",
        "number": 46994
    },
    {
        "title": "Allow temporary changes to settings",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\nWhen editing a standalone file (not in a workspace) I will sometimes want to have non-standard settings. A common example is to set `python.pythonPath` to a specific virtualenv, needed for an individual script.\r\n\r\nActivating the virtualenv and editing the file\r\n\r\n```\r\nvenv\\Scripts\\activate.ps1\r\ncode myfile.py\r\n```\r\n\r\ndoes *not* result in the virtualenv being active in VS Code, if I already have VSCode open (the file is opened in the existing instance, and the path settings don't transfer over).\r\n\r\nIf I could say \"set `python.pythonPath` to XXX\" for the current session, that would be sufficient. I don't want to change my user settings, as that would be a permanent change (and I typically use temporary virtualenvs, so the environment will probably be gone before my next editing session). Even if this functionality was only available as an extension API, that would be enough as I could write my own extension to expose it.\r\n\r\nVS Code version: Code 1.21.1 (79b44aa704ce542d8ca4a3cc44cfca566e7720f1, 2018-03-14T14:46:47.128Z)\r\nOS version: Windows_NT x64 6.1.7601\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-03-29 13:35:22",
        "state": "open",
        "number": 46936
    },
    {
        "title": "Allow extensions to contribute defaults for built in configurations",
        "description": "Currently Code has special knowledge of some folders that shouldn't be looked in, such as:\r\n\r\n```js\r\n\"files.watcherExclude\": {\r\n    \"**/.git/objects/**\": true,\r\n    \"**/.git/subtree-cache/**\": true,\r\n    \"**/node_modules/**\": true\r\n  },\r\n```\r\n\r\nFor the same reason that these folders are in there, extensions may wish to contribute their own folders (for example we'd like to exclude the `.dart_tool` folder).\r\n\r\nAs far as I can tell, this isn't currently possible. I tried adding it to `configurationDefaults` in `package.json` in the hope I'd be merged with that object but it just seems to have no effect.\r\n\r\nIs there a way that I can provide values to be added to `files.watcherExclude`, `files.exclude`, `search.exclude`?",
        "createdAt": "2018-03-28 13:39:36",
        "state": "open",
        "number": 46851
    },
    {
        "title": "Feature: Specifying the load order of extensions (reduce startup wait-time)",
        "description": "Allow the user to specify in what order installed extensions get loaded. This could reduce wait times quite a bit, or at least give the impression of a faster startup; by allowing small, essential extensions to get loaded first.\r\n\r\nUsers often install a lot of extensions, but in reality, only very few are really vital for the user's workflow. By allowing these \"vital\" extensions to be loaded first, the user has to wait less time before being able to work.\r\n\r\n**Proposal**\r\nThe load order could be specified as an array, where extensions lower in the array (= with lower index) get loaded first:\r\n```json\r\n\"extensions.loadOrder\": [\r\n    \"my_super_important_extension\",\r\n    \"somewhat_important\",\r\n    \"mildly_important\",\r\n    \"whatever\"\r\n]\r\n```\r\n\r\nExtensions not mentioned in the list would get loaded after the last specified extension (after whatever).",
        "createdAt": "2018-03-28 12:51:20",
        "state": "open",
        "number": 46846
    },
    {
        "title": "Output Scroll Lock shouldn't be reset on quit",
        "description": "So I use Code Runner a lot, and usually most interesting part of output is the first several lines. There's a button (Toggle Output Scroll Lock) to keep it from scrolling down, but it gets reset every time I relaunch. Is it possible to have a setting for this?",
        "createdAt": "2018-03-28 08:28:28",
        "state": "open",
        "number": 46819
    },
    {
        "title": "Issue reporter - disable extensions should be a button and not a link",
        "description": "Testing #46595\r\nIt is great that you can disable all extensions from the issue reporter. However, I got tricked by the fact that the action is triggered by a link. \r\n\r\n![image](https://user-images.githubusercontent.com/172399/38014976-a2a1c358-326a-11e8-8914-369124d0e96c.png)\r\n\r\nI was expecting that the link points me to some documentation for how to do it. I therefore suggest that the link is replaced with a button `disable all extensions`. There could still be a link that points to the documentation for how to enable/disable extension (should cover the uninstall/install from the command line when an extension runs amoc on startup).",
        "createdAt": "2018-03-28 07:33:26",
        "state": "open",
        "number": 46814
    },
    {
        "title": "Create api SourceBreakpoint without using constructor",
        "description": "Testing https://github.com/Microsoft/vscode/issues/46572\r\n\r\nI would prefer to use the second form below to create a SourceBreakpoint, but it doesn't work, presumably because of some logic in the class. It actually causes `onDidChangeBreakpoints` to fire, but doesn't show a breakpoint in the editor, so one of those things is probably a bug.\r\n\r\n```ts\r\nvscode.debug.addBreakpoints([\r\n    new vscode.SourceBreakpoint(\r\n        new vscode.Location(curDoc.uri, cursorPosition),\r\n        true,\r\n        undefined,\r\n        undefined,\r\n        'hello!'\r\n    ),\r\n    {\r\n        location: new vscode.Location(curDoc.uri, cursorPosition),\r\n        enabled: true,\r\n        logMessage: 'hello!'\r\n    }\r\n])\r\n```\r\n\r\nAlternately, if we can't allow the second version, passing lots of `undefined` is inconvenient so we could add a second constructor which takes an object of those options.",
        "createdAt": "2018-03-27 23:40:19",
        "state": "open",
        "number": 46783
    },
    {
        "title": "Issue Reporter: Support configuring data sent to extensions",
        "description": "Continuation of https://github.com/Microsoft/vscode/issues/45673\r\n\r\nNow that users can choose to file on extensions, extension authors should be able to specify additional data to include in the report. This could potentially include\r\n\r\n- User settings\r\n- `launch.json` information\r\n- Metadata about the workspace (is it multiroot)\r\n- Console errors\r\n- Data specific to the extension\r\n",
        "createdAt": "2018-03-27 17:08:02",
        "state": "open",
        "number": 46726
    },
    {
        "title": "VS Code not being able to open a 19GB file",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.21.1\r\n- OS Version: Windows 10 pro\r\n\r\nSteps to Reproduce:\r\n\r\n1. Get or create a large file (in my case a **19gb** .sql file with insert queries) \r\n2. Try to open the file\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2018-03-27 16:09:45",
        "state": "open",
        "number": 46723
    },
    {
        "title": "search.exclude does not work for searching symbols across a workspace",
        "description": "- VSCode Version: Code Insiders Version 1.22.0-insider (1.22.0-insider)\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open a javascript project with a node_modules folder (couple packages installed)\r\n2. Search for a symbol across the project\r\n3. It will show results from the `node_modules` directory even if you have added the following your user/workspace settings:\r\n\r\n```\r\n\"**/node_modules\": true,\r\n\"node_modules\": true\r\n``` \r\n",
        "createdAt": "2018-03-27 14:55:37",
        "state": "open",
        "number": 46718
    },
    {
        "title": "[folding] blocked while language server is starting up",
        "description": "from  https://github.com/Microsoft/vscode/issues/44524#issuecomment-376479712\\\r\n\r\nthe collapse button now doed nothing until the language server is up. Not a very pleasant experience.",
        "createdAt": "2018-03-27 14:28:32",
        "state": "open",
        "number": 46708
    },
    {
        "title": "Allow to temporarily disable (snooze) all notifications",
        "description": "Hi!\r\n\r\nI have a suggestion for feature that would sometimes be useful.\r\nOption to temporarily easily disable all notification, e.g. I have to edit configuration in many projects, but if I open .NET Core project, it notifies me about restoring dependencies, which don't really interest me in this use case.",
        "createdAt": "2018-03-27 12:17:55",
        "state": "open",
        "number": 46676
    },
    {
        "title": "Expose electrons app.getPath() to extension API (or equivalent)",
        "description": "I am working on an extension, and am using `showOpenDialog` to display an open dialog to my users. I want to make this folder by default point to `~/Documents`. When I was writing in electron, I had access to `app.getPath('documents')`, however I don't see an equivalent API either in raw node, or the vscode extension API. Could a function like that be added to the vscode extension API?",
        "createdAt": "2018-03-26 17:14:50",
        "state": "open",
        "number": 46573
    },
    {
        "title": "Command tracking should show glyphs next to rows and flash lines when navigating",
        "description": "Follow up for https://github.com/Microsoft/vscode/issues/45435\r\n\r\ncmd+up/down on macOS should show some indication of the line that was scrolled to.\r\n\r\nThis will need some upstream changes.",
        "createdAt": "2018-03-26 14:17:55",
        "state": "open",
        "number": 46561
    },
    {
        "title": "Feature Request : SHOW / HIDE comments in editor",
        "description": "Hi VsCode teams !\r\n\r\n# Why developers need it \r\n- Adding comments and documentation in a codebase is very important for maintenance. \r\n- But often it could make it harder to read (especially if you use jsdoc or swagger)\r\n\r\n**Conclusion:** toggling comments visibility could be a very nice productivity feature directly inside VSCode ! Moreover, **this feature exists on most of other text editors.**\r\n\r\n# Question\r\nIf i missed the feature in VSCode, how could i show / hide comments in my code ? \r\nI saw [this extension](https://marketplace.visualstudio.com/items?itemName=3dGrabber.HideShowComments) on vscode store, but it's not maintained and it doesn't work with last versions of VSCode \r\n\r\nThanks for your work ! :open_hands: \r\n\r\n",
        "createdAt": "2018-03-25 19:10:40",
        "state": "open",
        "number": 46505
    },
    {
        "title": "Neo keyboard layout: How do I map \"Ctrl+\u00e4\"? How do I use \"Ctrl+[\"?",
        "description": "I use this keyboard layout. It is not standard, but it is very good and it gains a lot of popularity.\r\n\r\nhttp://neo-layout.org/grafik/druckvorlage/neo-druckvorlage.png\r\n\r\nThe problem I have is with binding keys on that keyboard layout.\r\n\r\nFor example that keyboard layout has a specific undo key (AltGr+Z). VSCode completely ignores that key. I can't map it to undo.\r\n\r\nSince I have a few keys that no other keyboard has, I thought I could use them to bind them to functions and therefore avoid conflicts. For example the keyboard shortcut `Ctrl+\u00fc`. But VSCode here maps `\u00fc` (without my permission) to what the us keyboard would have at that position, which is `z`. And now I get `Ctrl+z`. This is not what I wanted, because that is already mapped to undo.\r\n\r\nAnd then there are keyboard bindings predefined, for example `Ctrl+[`. `[` is on the same key as `L`, but I have to press a modifier with it. But VSCode here thinks again. The modifier is completely filtered out and and instead of `Ctrl+[` VSCode thinks I pressed `Ctrl+L`. There is no way I can type `Ctrl+[`.\r\n\r\nAs a result I am not able to use all predefined keyboard shortcuts and I can't remap those shortcuts to the extra keys that I do have.",
        "createdAt": "2018-03-25 04:36:07",
        "state": "open",
        "number": 46481
    },
    {
        "title": "Expose API for variable substitution in contributed configuration",
        "description": "So now we have a bunch of variable substitutions we can use in `.vscode/tasks.json`\r\n\r\n```\r\n${workspaceFolder} - the path of the folder opened in VS Code\r\n${workspaceFolderBasename} - the name of the folder opened in VS Code without any slashes (/)\r\n${file} - the current opened file\r\n${relativeFile} - the current opened file relative to workspaceFolder\r\n${fileBasename} - the current opened file's basename\r\n${fileBasenameNoExtension} - the current opened file's basename with no file extension\r\n${fileDirname} - the current opened file's dirname\r\n${fileExtname} - the current opened file's extension\r\n${cwd} - the task runner's current working directory on startup\r\n${lineNumber} - the current selected line number in the active file\r\n${env:Name} - the `Name` variable from the environment\r\n${config:Name} - example: ${config:editor.fontSize}\r\n${command:CommandID} - example: ${command:explorer.newFolder}\r\n```\r\n\r\nBut what if an extension wants to give the user the ability to use substitution for the configuration points it contributes, the extension developer has to implement that all themselves. While it is totally possible to support all of these substitutions, even inlined commands, from an extension the developer has to reinvent the wheel and maintain compatibility with future/past versions of VSCode.\r\n\r\nIt would be great if there was a way for an extension to make use of the existing variable substitution logic. Unfortunately, [this is pretty deeply embedded](https://github.com/Microsoft/vscode/blob/b0793e672ddda64d26796873b35c5afafc215090/src/vs/workbench/parts/debug/electron-browser/debugConfigurationManager.ts#L600) into vscode and not something made readily accessible to extension developers.\r\n\r\nI'm sure that there will be demand for **custom substitution**s and for **limiting what kind of substitutions are allowed**. \r\n\r\nReally rough, but this is how something like this could look.\r\n\r\n`./package.json`\r\n```json5\r\n\"contributes\": {\r\n  \"substitutions\": {\r\n    \"prompt-debug.colorOfSky\": {\r\n      \"description\": \"...\"\r\n    }\r\n    \"prompt-debug.binaryPath\": {\r\n      \"description\": \"...\"\r\n    }\r\n  },\r\n  \"configuration\": {\r\n    \"properties\": {\r\n      \"prompt-debug.autoResolveScript\": {\r\n        \"description\": \"A javascript or typescript file which is exports a function named 'autoResolve' that resolves a file path to run.\",\r\n        \"title\": \"Auto Resolve Script\",\r\n        \"type\": \"string\",\r\n        \"required\": false,\r\n\t\t\"substitutions\": false, // substitutions disabled (default)\r\n        \"substitutions\": \"*\", // allow all registered substitutions\r\n\t\t\"substitutions\": [\r\n\t\t  \"*\", // allow all registered substitutions\r\n\t\t  \"-command:*\" // exclude commands from substitutions\r\n\t\t  \"command:explorer.newFolder\" // with the exception of the newFolder command\r\n\t\t],\r\n        \"substitutions\": [\r\n    \t  \"substitution:prompt-debug.*\" // allow all of the substitutions prompt-debug contributes\r\n\t\t  \"-substitution:prompt-debug.binaryPath\" // with the exception of binaryPath \r\n\t\t]\r\n\t}\r\n}\r\n```\r\n\r\n`./src/extension.ts`\r\n```typescript\r\nexport function activate(context: vscode.ExtensionContext) {\r\n  vscode.substitutions.registerSubstitution('prompt-debug.colorOfSky', () => (Math.random() > 0.5) ? 'blue' : 'grey');\r\n  vscode.substitutions.registerSubstitution('prompt-debug.binaryPath', async () => {\r\n    const binaryPath = await someAsycStuff();\r\n\tif (binaryPath) return binaryPath;\r\n    else return '/usr/bin/derp';\r\n  });\r\n}\r\n```\r\n\r\nObviously `vscode.workspace.getConfiguration().get('prompt-debug.autoResolveScript');` would have to be async because substitutions with commands can take a while to evaluate.. I have a few good ideas, but I'm tired of typing so we can bikeshed later if anyone is actually interested in this.. lol",
        "createdAt": "2018-03-24 19:15:55",
        "state": "open",
        "number": 46471
    },
    {
        "title": "Allow hiding the buttons in the tab bar line and in the panel title bar",
        "description": "A small change related to the buttons in the tab bar line:\r\n\r\n* Open Changes\r\n* Split Editor\r\n* Close\r\n\r\nand to the buttons in the panel title bar:\r\n\r\n* New Terminal\r\n* Split Terminal\r\n* Kill Terminal\r\n* Maximize Panel Size\r\n* Move to Bottom\r\n* Close Panel\r\n\r\nFor users who have already memorized the keyboard shortcuts for these commands (and considering the existence of Ctrl-p and Ctrl-Shift-p), the buttons are kind of redundant. It would be nice to have an option to hide them as almost everything in the UI already can be hidden. I know about Zen mode, but Zen mode also centers the text in the editor, hides the panel/terminals, makes Visual Studio Code full screen and all sort of other things which might not be desirable.\r\n\r\nAs a note related to this, Vim and Emacs users generally tend to hide the UI. Funnily enough, even the beast that is IntelliJ IDEA allows it \ud83d\ude06 ",
        "createdAt": "2018-03-23 09:32:16",
        "state": "open",
        "number": 46403
    },
    {
        "title": "Installer doesn't disable launch of VScode  even when installing with /mergetasks=!runcode",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.21.1\r\n- OS Version: Microsoft Windows 10 Pro 64-bit 10.0.15063.0\r\n\r\nSteps to Reproduce:\r\n\r\n1. Run `VSCodeSetup-x64-1.21.1.exe /SILENT /NOCANCEL /MERGETASKS=!runcode /LOG=\"C:\\Windows\\Logs\\Software\\Microsoft_VisualStudioCode_1.21.1_x64_02.log\"`\r\n2. See Code being executed at the end of installation\r\n\r\nThis wasn't the case before (last tested on 1.19.3)\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: N/A\r\n",
        "createdAt": "2018-03-22 16:09:05",
        "state": "open",
        "number": 46350
    },
    {
        "title": "Spacing or Horizontal lines in custom VS Code grammar",
        "description": "I just worked into grammar creation with Atom and now VS code and i'm currently developing an own grammar in VS code. In the text file i canot insert extra spacings, but i would like to separate logical blocks with an Bigger spacing or an horizontal line. But i don't now how zto achieve this, because as far as i figured out none of the VS Code templates scopes allows such a style.\r\n\r\nCould someone tell me how i can achieve this? As far as i figured out i will need to add a custom scope to each ued template?\r\n\r\nYours sincerely, Markus",
        "createdAt": "2018-03-22 11:41:08",
        "state": "open",
        "number": 46331
    },
    {
        "title": "Use xattr (extended attributes) on macOS to save/load text encoding identifier with file ",
        "description": "# Proposal\r\nUse xattr (extended attributes) on macOS to save/load text encoding with file.\r\n\r\n> BBEdit is the only editor I've found that already does this.\r\n\r\nAlso VSCode should honour any existing `com.apple.TextEncoding` and keep it when saving.\r\n\r\nCurrently the value is ignored and the encoding is guessed, often incorrectly, by looking at the contents of the file. Thankfully the xattr is kept when saving the file. \r\n\r\n## Background\r\n- Text Encoding has to either be set manually, or guessed by scanning the file\r\n- Both of these tasks take time\r\n\r\n## Benefits\r\n- loading time can be reduced\r\n- text encoding can be more persistent\r\n- can still be changed and rewritten at any point\r\n\r\n### Details\r\ndebug command:\r\n`xattr -p -l com.apple.TextEncoding \"/path/to/file.txt\"`\r\n\r\noutput:\r\n`file.txt`\r\n`com.apple.TextEncoding: Shift_JIS;2561`\r\n\r\nto set xattr (from terminal):\r\n`xattr -w com.apple.TextEncoding \"Shift_JIS;2561\" \"/path/to/file.txt\"`\r\n\r\n### References\r\n\r\nthese may help with implementation:\r\n- node: https://github.com/LinusU/fs-xattr\r\n- obj-c & swift: https://developer.apple.com/library/content/qa/qa1719/_index.html \r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.21.1\r\n- OS Version: 10.13.3\r\n",
        "createdAt": "2018-03-21 16:20:45",
        "state": "open",
        "number": 46271
    },
    {
        "title": "Undoing several newlines should  undo them all together (or whichever was added at the same time)",
        "description": "In a document, add several line breaks with `Enter`. Then hit `Cmd-Z` to undo them. They will undo one at a time, but they should instead all be removed at once.\r\n\r\n",
        "createdAt": "2018-03-20 01:28:25",
        "state": "open",
        "number": 46152
    },
    {
        "title": "Expose DebugConfigurationProvider for testing",
        "description": "I'd like to write a test that allows me to simulate a user pressing `F5` (eg. calls the DebugConfigurationProvider to resolve a debug config) and then drive the debug session using `vscode-debugadapter-testsupport`.\r\n\r\nI've checked all of the commands returned from `getCommands` and the APIs on `vscode.debug` but can't see anything suitable.\r\n\r\nI think the bit missing, is being able to call `resolveDebugConfig`. If there was a command for this, I think I would be able to do all of this:\r\n\r\n```ts\r\nconst dc = new DebugClient(\"node\", \"./out/src/debug/dart_debug_entry.js\", \"dart\");\r\nconst debugConfig = vs.commands.executeCommand(\"##vscode.executeResolveDebugConfiguration##\", {\r\n  type: \"dart\",\r\n  request\" launch\",\r\n  name: \"Dart\"\r\n});\r\ndc.start(debugConfig.debugServer);\r\nawait Promise.all([\r\n\tdc.configurationSequence(),\r\n\tdc.launch(debugConfig),\r\n\tdc.waitForEvent(\"terminated\"),\r\n]);\r\n```\r\n\r\nThe reason I need this is that my `resolveDebugConfiguration` method attaches a bunch of things to the config that are required for the debugger to work (such as SDK paths). I don't have any easy way to get all of these from inside my test.\r\n\r\nNote: The above code assumes that the resolve method is setting `debugServer` to run in-process (which is what my plan is based on prior discussions), but presumably if that's not the case then `debugServer` could just be added to the original base config passed into this new command.\r\n\r\n(cc @weinand)",
        "createdAt": "2018-03-17 15:10:10",
        "state": "open",
        "number": 46028
    },
    {
        "title": "[icon themes] Expose API to provide a dynamic icon theme.",
        "description": "This is an API feature request.\r\n\r\nWe at `vscode-icons` extension support project detection which dynamically re-generates our icon manifest file including or not project specific icons. Additionally to that, we provide the ability to the user to provide its own custom icons and more.\r\n\r\nAll these features, in the end, require the editor to be reloaded, simply because the icon manifest gets loaded at the start of the editor and with no ability to trigger a reload upon icon manifest recreation.\r\nThis results in a poor UX.\r\n\r\nIf we could have an API to trigger an icon manifest reload, we can have a much smoother transition between changes.\r\n\r\nRelating request: https://github.com/vscode-icons/vscode-icons/issues/1177\r\n\r\n//cc @robertohuertasm @jens1o @PKief @EmmanuelBeziat @LaurentTreguier @file-icons @DavidBabel @be5invis\r\n",
        "createdAt": "2018-03-16 10:06:36",
        "state": "open",
        "number": 45963
    },
    {
        "title": "Emmet: Wrap with abbreviation doesnt work when abbr contains {}",
        "description": "- VSCode Version: 1.21\r\n- OS Version: Any\r\n\r\nSteps to Reproduce:\r\n\r\nUse `ul>li{hello}` to wrap some text using the `Emmet: Wrap with Abbreviation` command\r\n\r\nExpected:\r\n```\r\n<ul>\r\n    \t<li>\r\n    \t\thelloHello world\r\n    \t</li>\r\n</ul>\r\n```\r\n\r\nActual:\r\n```\r\n<ul>\r\n    \t<li>\r\n    \t\tHello world\r\n    \t</li>\r\n</ul>\r\n```\r\n\r\nThis gets worse during live preview that's available in the Insiders. \r\nBy the time `{he` is typed, the text is wrapped inside `<he>Hello world</he>`\r\n\r\nAlso try `ul>li{hello}+li.bye`\r\n",
        "createdAt": "2018-03-14 04:11:49",
        "state": "open",
        "number": 45724
    },
    {
        "title": "Search view with horizontal scrolling",
        "description": "https://github.com/Microsoft/vscode/issues/15539\r\n\r\nI like the horizontal scroll setting but it doesn't work well in the search view. If I have a search result in a long line of text, then I have to scroll very far to see the file count, or the `x` button, replace button, and file count.\r\n\r\n![image](https://user-images.githubusercontent.com/323878/37376278-be69a1d6-26e0-11e8-8925-39af7ab28f16.png)\r\n\r\n\r\nIdeally these would be fixed to the right side of the search view container and visible without scrolling. But we may also move them as part of https://github.com/Microsoft/vscode/issues/45063\r\n\r\ncc @joaomoreno @isidorn ",
        "createdAt": "2018-03-14 00:06:53",
        "state": "open",
        "number": 45717
    },
    {
        "title": "Iterate through multicursor/multiselection and let user type unique text for each selection",
        "description": "This is a feature request, sorry if it exists already. My research showed it doesn't exist.\r\n\r\nSituation\r\n\r\n```\r\n\t\toption(selected) Select \r\n\t\toption(value=\"|\") Events  // <-- note cursors between quotes\r\n\t\toption(value=\"|\") Toys\r\n\t\toption(value=\"|\") Fun\r\n\t\toption(value=\"|\") Games\r\n\t\toption(value=\"|\") Other\r\n```\r\n\r\nnow if i want to type values for them I'd have to cancel selection and individually type them out. However, I already have cursors at the right place.\r\n\r\nI wish there was a mode that I could activate by pressing something, that would let me **simply press tab key and iterate through each cursor and whatever i type only stays there**, think of spreadsheet, you press tab to go to next cell. \r\n\r\nand when i want to exit out, just press ESC key. \r\n\r\n",
        "createdAt": "2018-03-13 04:30:54",
        "state": "open",
        "number": 45631
    },
    {
        "title": "Zen Mode Settings",
        "description": "I request a special property for zen mode\r\n\r\nzenMode.fontSize and \"zenMode.fontWeight\": \"bold\"\r\n\r\nSo would be different from\r\n\r\neditor property settings",
        "createdAt": "2018-03-12 20:38:34",
        "state": "open",
        "number": 45617
    },
    {
        "title": "Toggle Line Comment shortcut working undesirably",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.21.0\r\n- OS Version: Sierra 10.12.6\r\n\r\nSteps to Reproduce:\r\n\r\n1. Have 2 lines of code in your file: one commented out, another one not:\r\n```\r\n// console.log('123')\r\nconsole.log('321')\r\n```\r\n2. Highlight both of them and press _Toggle Line Comment_ shortcut (**CMD + /** on my computer)\r\n3. The result will be as following:\r\n```\r\n// // console.log('123')\r\n// console.log('321')\r\n```\r\n4. I would prefer having it this way:\r\n```\r\nconsole.log('123')\r\n// console.log('321')\r\n```\r\nThat is, the commented out line become a regular line, whereas the regular line becomes a commented-out line.\r\n\r\nIs there a possibility of implementing this feature?",
        "createdAt": "2018-03-11 17:51:52",
        "state": "open",
        "number": 45525
    },
    {
        "title": "Provide access to VS Code API in extension uninstall lifecycle hook",
        "description": "- VSCode Version: 1.20.1\r\n- OS Version: Windows 10\r\n\r\nSteps to Reproduce: Add this events to an extension code:\r\n\r\n```\r\nexport function activate(context: vscode.ExtensionContext) {\r\nvscode.workspace.getConfiguration().update('test', 'some text', ConfigurationTarget.Workspace);\r\n}\r\n\r\nexport function deactivate(context: vscode.ExtensionContext) {\r\n    vscode.workspace.getConfiguration().update('test', '', ConfigurationTarget.Workspace);\r\n}\r\n```\r\n\r\nWhen it activates it updates but on deactivation it doesn't work. Im debugging and the code is running but with no effect. I also tried with ConfigurationTarget.Global.",
        "createdAt": "2018-03-10 14:15:03",
        "state": "open",
        "number": 45474
    },
    {
        "title": "Add a setting to not promote workspace folders to top level if they are children of another top level folder",
        "description": "In case a multi-root configuration is composed of workspace folders that are overlapping (e.g. one is the parent of the other), add a setting to not promote those workspace folders are top level folders of the file explorer that are already included in another workspace folder. \r\n\r\nExtracted from https://github.com/Microsoft/vscode/issues/45399",
        "createdAt": "2018-03-10 10:54:57",
        "state": "open",
        "number": 45470
    },
    {
        "title": "\"Find in selection\" does not function as expected",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.20.1\r\n- OS Version: Win 10 Pro\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open VS Code\r\n2. Open a file with lots of HTML markup\r\n3. Actually, here is some code you can use:\r\n``` html\r\n<div id=\"<?php echo 'tss_id'.$id; ?>\" class=\"owl-carousel\"  style='text-align:center;'>\r\n\r\n  <?php\r\n\r\n    $args = array (\r\n      'post_type'      => 'tss_data',\r\n      'category_name'  => get_post_meta( $id,'mpsp_posts_value', true ),\r\n      'posts_per_page' => get_post_meta( $id,'mpsp_posts_visible', true ),\r\n      'order'          => get_post_meta( $id,'mpsp_posts_order', true ),\r\n      'orderby'        => get_post_meta( $id,'mpsp_posts_orderby', true ),\r\n    );\r\n\r\n    // The Query\r\n    $the_query = new WP_Query( $args );\r\n\r\n    while( $the_query->have_posts() ): $the_query->the_post(); ?>\r\n\r\n    <div id='tss_wrapper'>\r\n      <div id='tss_content'>\r\n        <p class='tss_p' id='tss_testimonial'><?php echo get_post_meta(get_the_ID(),'tss_testimonial',true);  ?></p>\r\n      </div>\r\n      <div id='ts_img'>\r\n        <p class='tss_p' id='tss_name'><?php echo get_post_meta(get_the_ID(),'tss_name',true);  ?></p>\r\n        <p class='tss_p' id='tss_occupation'><?php echo get_post_meta(get_the_ID(),'tss_ocupation',true);  ?></p>\r\n        </div>\r\n    </div>\r\n\r\n    <?php endwhile;?>\r\n  </div>\r\n</div>\r\n```\r\n4. Highlight the `'` characters  from `tss_wrapper` to `tss_testimonial`\r\n5. Press CTRL + F\r\n6. Press **Find in selection**\r\n7. Observe how it highlights matches from outside the selected area\r\n\r\n**Actual results:** Matches are found and highlighted outside the selection because they are on the same line as some of the selected area.\r\n\r\n**Expected results:** Matches should only be found inside the selected area, hence \"find in selection\".\r\n\r\n**Please continue reading:** there is one additional problem that is related.\r\n\r\n8. Now that you have selected text, like this:\r\n![vscode1](https://user-images.githubusercontent.com/17655219/37231554-67beea1e-23a0-11e8-816a-878cddd582e5.png)\r\n\r\n9. Press Find in selection again\r\n\r\n**Actual results:** Every matching result in the entire file is selected.\r\n\r\n**Expected results:** I expect matches inside the selected area to be highlighted.\r\n\r\nWith VS Code acting this way, it is faster to manually replace because Find in selection is too unpredictable and causes time waste.\r\n\r\nHere is a GIF of the first issue:\r\n![find-in-selection1](https://user-images.githubusercontent.com/17655219/37231825-7d072d2c-23a1-11e8-85f7-855ea6a1e758.gif)\r\n\r\nHere is a GIF of the second issue:\r\n![find-in-selection2](https://user-images.githubusercontent.com/17655219/37231852-8c379052-23a1-11e8-8cc7-120eb6482bbd.gif)\r\n\r\n**Optimal solution:** I would like VS Code to highlight matches inside the selected area when I press \"Find in selection\" in both cases that I have demonstrated.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2018-03-09 21:58:08",
        "state": "open",
        "number": 45445
    },
    {
        "title": "Provide a lightweight shell selector without changing default (ie. terminal profiles)",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.21.0\r\n- OS Version: Windows 10\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open a Powershell terminal\r\n2. Split the terminal window\r\n3. Try to open a WSL Ubuntu terminal\r\n\r\nIt'd be great to split the terminal types for different cases!\r\n\r\nI imagine that if you pressed and held the \"+\" you could select other terminals on your system, or similar UI for this.\r\n",
        "createdAt": "2018-03-09 21:01:31",
        "state": "open",
        "number": 45444
    },
    {
        "title": "Add an API for splitting a terminal",
        "description": "Here are two options:\r\n\r\n```ts\r\nexport interface TerminalOptions {\r\n  splitFrom?: Terminal\r\n}\r\n```\r\n\r\nor\r\n\r\n```ts\r\nexport interface Terminal {\r\n  split(options: TerminalOptions): Terminal;\r\n}\r\n```\r\n\r\n/cc @fabiospampinato ",
        "createdAt": "2018-03-09 14:24:34",
        "state": "open",
        "number": 45407
    },
    {
        "title": "[feature request] editor.wordHighlightBorderStyle et al.",
        "description": "- VSCode Version: 1.21\r\n- OS Version: macOS Sierra/HS\r\n\r\nWith the recent release, themers are able to add borders to highlighted words (thank-you for this). However, it'd be nice to be able change the style of the borders using something like: \r\n\r\n`\"editor.wordHighlightBorderStyle\": \"solid\"` / `\"editor.wordHighlightBorder.style\": \"solid\"`\r\n\r\nThen provide `solid`, `dashed`, `dotted` as options.\r\n",
        "createdAt": "2018-03-09 10:16:13",
        "state": "open",
        "number": 45396
    },
    {
        "title": "Suggestion about cursorUndo",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.21.0\r\n- OS Version: Ubuntu 16.04\r\n\r\nCommand cursorUndo becomes invalid after each edit.\r\n\r\nBut in SublimeText, we can keep using Ctrl+U beyond undo and until the bottom of undo stack.\r\n\r\nCan you make it as powerful as SoftUndo of SublimeText?\r\n",
        "createdAt": "2018-03-09 04:10:05",
        "state": "open",
        "number": 45371
    },
    {
        "title": "Settings editor should search known keys in object type settings",
        "description": "Issue Type: <b>Settings Search Issue</b>\r\n\r\nI would have expected to find this as a sub-section of workbench color customizations.\r\n\r\nVS Code version: Code - Insiders 1.22.0-insider (a9dcb2c3159367e347271d88c399e1f6ca88c23d, 2018-03-08T22:21:18.293Z)\r\nOS version: Darwin x64 16.7.0\r\n\r\n<details><summary>Extensions (21)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvsc-material-theme|Equ|1.5.0\r\nmaterial-icon-theme|PKi|3.2.3\r\nvscode-docker|Pet|0.0.25\r\ncode-settings-sync|Sha|2.9.0\r\nsolargraph|cas|0.13.0\r\nnpm-intellisense|chr|1.3.0\r\ngithistory|don|0.4.0\r\ngitlens|eam|8.1.0\r\ntslint|eg2|1.0.28\r\nvscode-npm-script|eg2|0.3.3\r\ngit-project-manager|fel|1.4.0\r\nsvgpreview|kis|0.2.0\r\nGo|luk|0.6.77\r\nvscode-azurestorage|ms-|0.2.0\r\nmssql|ms-|1.3.0\r\npython|ms-|2018.2.0\r\nazure-account|ms-|0.3.1\r\nvsliveshare|ms-|0.2.206\r\nprintcode|nob|2.0.4\r\nRuby|reb|0.17.0\r\nvscode-open-in-github|ziy|1.3.1\r\n\r\n\r\n</details><details><summary>Results</summary>\r\n\r\nSetting|Extension|Score\r\n---|---|---\r\nmssql.query.displayBitAsNumber|ms-mssql.mssql|0.478\r\nopenInGitHub.requireSelectionForLines|ziyasal.vscode-open-in-github|0.394\r\nopenInGitHub.gitHubDomain|ziyasal.vscode-open-in-github|0.136\r\nopenInGitHub.providerType|ziyasal.vscode-open-in-github|0.133\r\nmssql.format.placeSelectStatementReferencesOnNewLine|ms-mssql.mssql|0.122\r\nnpm-intellisense.importLinebreak|christian-kohler.npm-intellisense|0.064\r\nprintcode.webServerPort|nobuhito.printcode|0.057\r\ngitHistory.pageSize|donjayamanne.githistory|0.052\r\ngitHistory.showEditorTitleMenuBarIcons|donjayamanne.githistory|0.047\r\nprintcode.tabSize|nobuhito.printcode|0.036\r\ngitProjectManager.recentProjectsListSize|felipecaputo.git-project-manager|0.030\r\nnpm.bin|eg2.vscode-npm-script|0.019\r\ngitHistory.hideCommitViewExplorer|donjayamanne.githistory|0.013\r\nmssql.format.datatypeCasing|ms-mssql.mssql|0.011\r\nmssql.format.keywordCasing|ms-mssql.mssql|0.011\r\nnpm-intellisense.showBuildInLibs|christian-kohler.npm-intellisense|0.010\r\nazureStorage.file.showSavePrompt|ms-azuretools.vscode-azurestorage|0.007\r\nmssql.format.alignColumnDefinitionsInColumns|ms-mssql.mssql|0.007\r\ngitProjectManager.warnIfFolderNotFound|felipecaputo.git-project-manager|0.007\r\nmssql.format.placeCommasBeforeNextStatement|ms-mssql.mssql|0.006\r\n\r\n</details>\r\n\r\nQuery: editor active line number\r\nLiteral matches: 0\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-03-09 02:33:38",
        "state": "open",
        "number": 45363
    },
    {
        "title": "Allow extensions to provide a global error handler for errors in extension code",
        "description": "Currently it seems that in order to log all errors (or prompt the user to raise a an issue) we'd need to put try/catches in all of the possible entry points for an extensions code (eg. inside all providers methods, etc.).\r\n\r\nI suspect Code is already doing something similar so it'd be nice if an extension could provide an onError (maybe optionally exported alongside active/deactivate) that can be invoked whenever an error occurs in any calls into that extensions code.",
        "createdAt": "2018-03-08 08:12:46",
        "state": "open",
        "number": 45264
    },
    {
        "title": "Add `add keybinding` from keybinding-editor",
        "description": "Right now it's possible to Change/Remove/Reset keybinding from the GUI editor. \r\nBut if you want to assign several keybindings to one command - you have to use `keybindings.json`.",
        "createdAt": "2018-03-08 01:02:13",
        "state": "open",
        "number": 45244
    },
    {
        "title": "Have a history per editor group for in-group navigation",
        "description": "Currently the navigation history is global for all editor groups. Pressing alt-left and alt-right jumps from group to group. It would be helpful to have an option to navigate within the history of each group separately. This is useful when editing same file in multiple groups, and preserving view in one group while actively navigating through another.\r\n\r\nAn example of text editor that behaves as described here is [jEdit](http://jedit.org/) (through [navigator plugin](http://plugins.jedit.org/plugins/?Navigator) )",
        "createdAt": "2018-03-07 22:05:55",
        "state": "open",
        "number": 45233
    },
    {
        "title": "Allow \"files\" field in .code-workspace file",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.20.1\r\n- OS Version: Microsoft Windows [Version 10.0.16299.248]\r\n\r\nSteps to Reproduce:\r\n\r\nN/A\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\n---\r\n\r\nCurrently, .code-workspace only contains `folders` field which allows to add folders into workspace. I prefer a way to add single files into workspace for the entire project, such as README or something else.\r\n",
        "createdAt": "2018-03-07 06:35:17",
        "state": "open",
        "number": 45177
    },
    {
        "title": "debug console should inherit editor settings",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.20.1\r\n- OS Version: OSX 10.11.6\r\n\r\nSteps to Reproduce:\r\n\r\n1. I enabled the user setting {\"editor.acceptSuggestionOnEnter\": \"off\"}\r\n2. In a debugging session, the console still interprets \"enter\" as a suggestion completion.\r\n\r\nThis is not intuitive and forces the user to adapt to different ways of typing in the debug console vs. the editor.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes/No\r\nYes",
        "createdAt": "2018-03-06 19:23:07",
        "state": "open",
        "number": 45156
    },
    {
        "title": "Automatically close diff editor when switching from Source Control to Explorer mode",
        "description": "### Issue Type\r\nFeature Request\r\n\r\n### Description\r\n\r\nI usually select files for diffing in the \"Source Control\" view. Sometimes I diff a lot of files. When I switch back to explorer I still have all those buffers lying around, that make tab switching harder.\r\n\r\nIt would be nice to have VSCode automatically close all those buffers when I switch back to the Explorer view for normal editing.\r\n\r\nThis is probably tangentially related to #41096\r\n\r\n### VS Code Info\r\n\r\nVS Code version: Code 1.20.1 (f88bbf9137d24d36d968ea6b2911786bfe103002, 2018-02-13T15:23:28.607Z)\r\nOS version: Darwin x64 17.4.0\r\n\r\n",
        "createdAt": "2018-03-06 17:26:04",
        "state": "open",
        "number": 45151
    },
    {
        "title": "Feature Request - Match case popup window must be more visible",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.21.0-ins\r\n- OS Version: win7x64\r\n\r\nHow about to make this \"Match Case\" popup window more visible?\r\nI don't have problems with my vision, but this super tiny popup window is a sorry sight.\r\n\r\n![match case popup](https://user-images.githubusercontent.com/24613274/36971977-2b3bbe96-2076-11e8-96d4-ab95382aaefa.gif)\r\n\r\nAnd it's not only the size problem. You almost wouldn't say - which button is active and which is not.\r\n **Active action on all three buttons is absolutely unnoticeable.**\r\n\r\nTake a look at text color of button, when you click on it (enabling) and click again (disabling) - text color will still be brightened, like it's active, but it's already disabled.\r\n\r\nSo, there is a work for total redesign.",
        "createdAt": "2018-03-05 11:15:12",
        "state": "open",
        "number": 45047
    },
    {
        "title": "hide show comments",
        "description": "sometimes hide/show-comments help reading the code, visual studio has extensions for this, failed to find similar ones in vscode, hope we will get one some day.",
        "createdAt": "2018-03-04 16:53:05",
        "state": "open",
        "number": 45020
    },
    {
        "title": "Feature Request: Option for \"Add Next Occurrence\" to select whitespace",
        "description": "In both Atom and Sublime Text when you use the multiselect shortcut (`cmd+d` - Add Next Occurrence equivalent in VSCode) on whitespace, such as the whitespace used to indent some HTML, it will select all of the whitespace. VSCode doesn't do anything when \"Add Next Occurrence\" is performed on whitespace.\r\n\r\nWould it be possible to change this via a setting, or even by making it the only behavior? As of now the Add Next Occurrence command is useless on whitespace.\r\n\r\nHere is the desired behavior (shown in Atom):\r\n\r\n![](https://www.dropbox.com/s/kmnnq2yr4d35hz9/vscode.gif?dl=0&raw=1)\r\n\r\nIt is relatively similar to how VSCode's \"Add Next Occurrence\" works for words, it just seems to be disabled for whitespace.\r\n\r\n## Additional info\r\n\r\n- VSCode Version: 1.20.1\r\n- OS Version: macOS High Sierra 10.13.3\r\n\r\nSteps to Reproduce:\r\n\r\n1. Move your cursor into empty space, such as the spaces used to indent some HTML\r\n2. Hit `cmd+d` (Add Next Occurence). Nothing happens.\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\n",
        "createdAt": "2018-03-04 07:43:24",
        "state": "open",
        "number": 45001
    },
    {
        "title": "SCM: Align next/previous commands between diff and regular editor",
        "description": "Extracted from https://github.com/Microsoft/vscode/issues/7717\r\n\r\nI think the commands that got introduced should also work within a diff editor.",
        "createdAt": "2018-03-02 08:55:40",
        "state": "open",
        "number": 44904
    },
    {
        "title": "Center panel with centered editor",
        "description": "Issue Type: <b>Feature Request</b>\r\n\r\n- maximize window\r\n- change to centered mode\r\n- hide sidebar\r\n- show panel\r\n- the editor now is easy to read, but it is awkward that I have to move my eyes to the left when I want to type in the terminal.\r\n\r\nIt would be great if at least the terminal would center itself in alignment with the editor.\r\n\r\nVS Code version: Code - Insiders 1.21.0-insider (d7dca142ad6051e6b1c7397ea73221feb0160f21, 2018-03-02T06:08:36.701Z)\r\nOS version: Darwin x64 16.7.0\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-03-02 08:54:26",
        "state": "open",
        "number": 44903
    },
    {
        "title": "Document highlight API command should return word highlights if no specific highlight provider is registered",
        "description": "The command should behave exactly the same as if the user sets a cursor somewhere.",
        "createdAt": "2018-03-01 15:52:24",
        "state": "open",
        "number": 44848
    },
    {
        "title": "Overview ruler becomes redundant",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.20.1\r\n- OS Version: Windows 10\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\nSteps to Reproduce:\r\n\r\n1. Create a typescript file with 2000-3000+ lines of code/blank lines (the more lines the worse it gets), usually starts at around 1500 lines+.\r\n2. Click to place your cursor in the editor half way down the file somewhere\r\n3. Scroll the page so cursor is at very top of screen\r\n4. Observe overview ruler on right hand side of editor and the 'blip' used to indicate location of the cursor is incorrect (not sure what you call these but I refer to them as blips in this issue) \r\n\r\n![image](https://user-images.githubusercontent.com/11023398/36825133-b7ea1e3c-1d6a-11e8-8487-fbfb15ee0d82.png)\r\n\r\nThis has caused me a few problems as its also used for search, error and warning blips. Often it will say the item is in my current view when it's not. The bigger my file the more out of sync it is.\r\n\r\nI'm guessing there's some arbitrary limit to the height of the box used to indicate what the current view is showing and I can understand that there would need to be some limit as it may be hard to view things correctly the more lines of code you add.\r\n\r\nI propose a few solutions below, not sure which is best:\r\n\r\n1) When you reach a point where you cant reduce the blip height and/or window preview height in ruler then don't show anything - This is the quickest and simplest solution but I believe it's better than showing incorrect data. Maybe need someway to show that its being disabled so users don't report another bug saying its not showing :)\r\n\r\n2) Put the scroll bar in its own vertical container without the blips and preview and then show 2 or more vertical rulers to the right of it so as you scroll up and down the preview window will show in one of the vertical rulers (could be split when crossing between overview rulers), when everything fits on the one then the scroll bar and overview are combined as they are now, when you make the file bigger you would have two vertical overview rulers, then three up to some limit. \r\n\r\n3) Keep it as it is now with one vertical ruler but only show the preview for x lines of code below and above current view pos. This means when you're half way down a 5000 line file the ruler may only show lines 1500 - 4000, by doing this you can keep the heights of the graphics at a reasonable value, need to show somehow at the top/bottom of the ruler if lines are being hidden.\r\n\r\nKeep up the good work!\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "createdAt": "2018-03-01 03:35:59",
        "state": "open",
        "number": 44789
    },
    {
        "title": "Support environment variables for paths in .code-workspace files",
        "description": "### Issue Type\r\nFeature Request\r\n\r\n### Description\r\n\r\nI'm attempting to use `{ \"path\": \"${env:APPDATA}/Code/User\" }` in my workspace to be able to easily open settings.json and keybindings.json as raw files (the custom panels take up too much space and I rarely need them) and it appears variables are not substituted when loading the workspace file.\r\n\r\n### VS Code Info\r\n\r\nVS Code version: Code 1.20.1 (f88bbf9137d24d36d968ea6b2911786bfe103002, 2018-02-13T15:34:36.336Z)\r\nOS version: Windows_NT x64 10.0.16299\r\n\r\n",
        "createdAt": "2018-02-28 16:49:51",
        "state": "open",
        "number": 44755
    },
    {
        "title": "Provide activation reason to extensions in activate call",
        "description": "It would be useful to know if the extension is being activated due to a command (in my case I want to a show a more specific message if the extension fails to activate due to a missing SDK, and the command gives me more context to tailor this message to the user).",
        "createdAt": "2018-02-28 07:52:58",
        "state": "open",
        "number": 44711
    },
    {
        "title": "\"Command Palette\" add some commands to open editor dropdown menu",
        "description": "Hi\r\nI really enjoy VSC on my Mint 18.3...\r\nIs it possible when working in the editor, to add some \"Command Palette\" functions to the dropdown menu (when you click-right in editor).\r\nI know the list is very long but I just use the \"Toggle line comment\" a lot between my files\r\n----   Off course I can use 'ctrl-/' but adding some to the dropdown menu would be nice\r\n",
        "createdAt": "2018-02-28 05:22:59",
        "state": "open",
        "number": 44701
    },
    {
        "title": "Feature request: Add support for modifier keys like right ctrl and right alt",
        "description": "### Issue Type\r\nFeature Request\r\n\r\n### Description\r\n\r\nCurrently VS Code treats left and right modifier keys as the same one (<kbd>ctrl</kbd>, <kbd>alt</kbd> and <kbd>shift</kbd>).\r\n\r\nI want to define different keyboard shortcuts for left and right modifier keys (e.g. <kbd>left ctrl</kbd> + <kbd>s</kbd> for saving files, and <kbd>right ctrl</kbd> + <kbd>s</kbd> for something else), but unfortunately this cannot be done.\r\n\r\n### VS Code Info\r\n\r\nVS Code version: Code 1.20.0 (c63189deaa8e620f650cc28792b8f5f3363f2c5b, 2018-02-07T17:10:15.949Z)\r\nOS version: Linux x64 4.14.16-300.fc27.x86_64\r\n\r\n",
        "createdAt": "2018-02-28 04:07:33",
        "state": "open",
        "number": 44697
    },
    {
        "title": "Update: Updating VS Code should check for updates first.",
        "description": "If I have an update pending and a new update comes, in order to get the latest version I need to update (and reload window), then check for updates and update again (reloading the window again).\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open VS Code Insiders\r\n2. Check for updates --> a little `1` appears.\r\n3. Wait 24 hours\r\n4. Click the gear\r\n5. Find out there is no way to check for new updates until the previous update is installed.\r\n\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2018-02-28 00:10:15",
        "state": "open",
        "number": 44685
    },
    {
        "title": "[razor] comment out razor code with @* *@",
        "description": "Issue Type: <b>Bug</b>\r\n\r\n1. Edit a cshtml file\r\n2. Select html code to comment out\r\n3. Use comment out keymap (CTRL K + C)\r\n\r\nExpected Behavior: \r\nProper comment is used based on syntax\r\n\r\nSelect Html only line should use `<!-- -->`\r\nSelect Razor should use `@* *@`\r\n\r\nActual Behavior:\r\nAfter comment out keymap is pressed, the selected area has // at beginning of each line. \r\nhttps://www.screencast.com/t/mxAOaHv7qV\r\n\r\n\r\nVS Code version: Code - Insiders 1.21.0-insider (1a84a882737184488d965426747a05474f54a759, 2018-02-27T09:01:48.555Z)\r\nOS version: Windows_NT x64 10.0.16299\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-4700MQ CPU @ 2.40GHz (8 x 2394)|\r\n|Memory (System)|15.88GB (3.92GB free)|\r\n|Process Argv|C:\\Program Files\\Microsoft VS Code Insiders\\Code - Insiders.exe|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (8)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\ngitlens|eam|8.0.2\r\nmssql|ms-|1.3.0\r\npython|ms-|2018.1.0\r\ncsharp|ms-|1.14.0\r\nPowerShell|ms-|1.6.0\r\nvs-keybindings|ms-|0.1.7\r\nteam|ms-|1.122.0\r\nvscode-icons|rob|7.20.0\r\n\r\n\r\n</details>\r\nReproduces only with extensions\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-02-27 15:55:51",
        "state": "open",
        "number": 44612
    },
    {
        "title": "Allow extensions to add coloured markers in the gutter similar to source control",
        "description": "The source control functionality currently renders nice coloured markers down the gutter. It'd be nice if this functionality was available to extensions that aren't source control (for example code coverage).",
        "createdAt": "2018-02-27 15:25:56",
        "state": "open",
        "number": 44606
    },
    {
        "title": "Centered mode should hide the title area",
        "description": "The title area is noise and should die\r\n\r\nfyi @joaomoreno ",
        "createdAt": "2018-02-27 15:03:53",
        "state": "open",
        "number": 44593
    },
    {
        "title": "Run Post extension uninstall script after extension is not running in any VS Code window",
        "description": "Refs: #44363\r\n\r\nUse this extension, just rename .zip to .vsix\r\nIt is just a basic ts extension, with the following postinstall script\r\n\r\n`\"vscode:uninstall\": \"node hey.js\", `\r\n\r\nAnd the hey.js is the following file:\r\n\r\n```javascript\r\nvar fs = require('fs');\r\n\r\nfs.writeFile('mynewfile1.txt', 'Hello content!', function (err) {\r\n  if (err) throw err;\r\n  console.log('Saved!');\r\n});\r\n```\r\n\r\n[test-extension-0.0.1.zip](https://github.com/Microsoft/vscode/files/1762420/test-extension-0.0.1.zip)\r\n\r\n\r\nNotice how after uninstalling the extension the file does not get created.\r\nIf I execute that script from node command line the file gets nicely created.",
        "createdAt": "2018-02-27 11:40:32",
        "state": "open",
        "number": 44552
    },
    {
        "title": "Opening launch configs in user or workspace settings should reveal the \"launch\" section",
        "description": "Testing #44449:\r\n\r\nIf you have a default launch config in user or workspace settings and you press the gear icon in the debug viewlet, it opens the correct settings file but it does not reveal or highlight the \"launch\" section.",
        "createdAt": "2018-02-27 11:28:59",
        "state": "open",
        "number": 44542
    },
    {
        "title": "Request for option for editor to draw a vertical line just after \"editor.wordWrapColumn\"",
        "description": "It would be nice if there was an option for the editor to draw a line just after \"editor.wordWrapColumn\".\r\n[Feature Request]\r\nVSCode Version: 1.120.1",
        "createdAt": "2018-02-27 05:38:25",
        "state": "open",
        "number": 44472
    },
    {
        "title": "Pin/Autohide option in panes",
        "description": "I'll appreciate it if you add a option to pin/autohide panes. e.g. By debugging I use the debug console en de code pane. so if i'm searching in the code, i want to autohide the debug console and vice versa. In summary: the same autohide functionality in visual Studio but then implemented in Visual Studio Code.",
        "createdAt": "2018-02-23 09:05:57",
        "state": "open",
        "number": 44255
    },
    {
        "title": "Add variable to tasks.json for cursor column number",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.20.1\r\n- OS Version: All\r\n\r\nThe [variables available](https://code.visualstudio.com/docs/editor/variables-reference) for tasks.json are very helpful. Unfortunately, while the line number is available in ${lineNumber}, there's no line column variable. \r\n\r\nThe column number would be helpful for me because I have a script which can perform different actions based on where the cursor is.  If the cursor is on a function name, for example, it can launch a documentation program (outside of vscode) to show me the function documentation.  But I need both the cursor line and column passed to the script so it can determine (or at least guess) in what type of context the cursor is found.\r\n\r\nIs there a way we could get a ${column} value to return the column number for use in tasks?  Thanks!\r\n",
        "createdAt": "2018-02-22 21:46:37",
        "state": "open",
        "number": 44237
    },
    {
        "title": "Unimportant notifications should not need to draw attention from status bar",
        "description": "_Feedback to Improved notification UX #22388_\r\n\r\nIf I ignore non-important notifications and they go away after some time, I'd prefer if they didn't draw my attention from the status bar. For example, I invoke Check for Updates and get this notification:\r\n\r\n![image](https://user-images.githubusercontent.com/101152/36527292-a0d75d5e-17b1-11e8-9d02-2cb34b6297b0.png)\r\n\r\nOk, nothing new, I continue working and the toast goes away after a while. However, I still see the notification notification (sic!) in the status bar:\r\n\r\n![image](https://user-images.githubusercontent.com/101152/36527524-5eb8662e-17b2-11e8-9f6a-e7206a15568e.png)\r\n\r\nTo get rid of this, I need to click the icon and manually dismiss the info message. Maybe these unimportant notifications could go away entirely, or be in the notification center but without the alert in the status bar?\r\n\r\n## Version info\r\n\r\nVersion 1.21.0-insider\r\nCommit efa33330fb0ab23b022bdff125311bdb21494b71\r\nDate 2018-02-21T09:22:14.399Z\r\nShell 1.7.9\r\nRenderer 58.0.3029.110\r\nNode 7.9.0\r\nArchitecture x64",
        "createdAt": "2018-02-22 08:29:08",
        "state": "open",
        "number": 44185
    },
    {
        "title": "Allow users to set the EOL for the whole workspace",
        "description": "### Issue Type\r\nFeature Request\r\n\r\n### Description\r\n\r\nI'm working on Windows to change an sh file and publish onto Linux system, however it seems that Windows's end of line is \"\\r\\n\", while Linux and other systems \"\\n\".\r\n\r\nI tried to change the setting in my workspace like this following:\r\n\"settings\": {\r\n\t\t\"files.eol\": \"\\n\"\r\n\t}\r\nBut it has no help. I hope that VSC can enhance this function\uff1aWhen this settings is changed, the file would be immediately re-saved with the changed eol (Of course, the default eol is depending on what system you are now using).\r\n\r\nMaybe \"saving format in Windows (Default) or saving format in Linux/Mac...\" also a choice for clients to choose.\r\n\r\n### VS Code Info\r\n\r\nVS Code version: Code 1.20.1 (f88bbf9137d24d36d968ea6b2911786bfe103002, 2018-02-13T15:33:21.935Z)\r\nOS version: Windows_NT ia32 6.3.9600\r\n\r\n",
        "createdAt": "2018-02-22 05:25:36",
        "state": "open",
        "number": 44174
    },
    {
        "title": "Use a shared, persistent environment for tasks",
        "description": "### Issue Type\r\nFeature Request\r\n\r\n### Description\r\n\r\nI'm compiling C++ on Windows using MSVC 2015. Currently, I'm using cmd.exe as my shell and calling a build.bat as my build task. In that batch file I call vcvarsall.bat to initialize the environment. However, that script is slow and accounts for more than half the runtime of my build task.\r\n\r\nI'd like to be able to call vcvarsall.bat once and have my build task inherit that environment each time it is run, thereby cutting my compile times in half and getting closer to what I would see with Visual Studio.\r\n\r\nI tried setting\r\n```\r\n\"terminal.integrated.shellArgs.windows\": [\"/K\", \"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 14.0\\\\VC\\\\vcvarsall.bat\"]\r\n```\r\n\r\nHowever that exposes multiple problems:\r\n\r\n1) This gets run for each task, defeating the idea from the outset\r\n2) The spaces aren't properly escaped when passed to the task shell instance and I get the error `'C:\\Program' is not recognized as an internal or external command,\r\noperable program or batch file.`\r\n3) If I move that to a batch file so there are no spaces in the path then the batch file gets run but the task command is never run and the task hangs and never exits.\r\n4) Tasks don't inherit the Terminal environment (I'm guessing only the VSCode process environment is inherited)\r\n\r\nI believe I could run VSCode from a command environment where vcvarsall had already been run, but that requires a custom shortcut, therefore only working when that shortcut is used and requiring additional setup for every team member.\r\n\r\n### VS Code Info\r\n\r\nVS Code version: Code 1.20.1 (f88bbf9137d24d36d968ea6b2911786bfe103002, 2018-02-13T15:34:36.336Z)\r\nOS version: Windows_NT x64 10.0.16299\r\n\r\n",
        "createdAt": "2018-02-21 18:02:39",
        "state": "open",
        "number": 44152
    },
    {
        "title": "[json] schema fileMatch for all *.json files in root folder",
        "description": "- VSCode Version: 1.20.1\r\n- OS Version: Win 10\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\nI've tried asking this on stackoverflow and gitter without success. I have a project with (among other things) lots of .json files. This is the `.vscode/settings.json` file:\r\n\r\n``` json\r\n{\r\n    \"json.schemas\": [\r\n        {\r\n            \"fileMatch\": [\r\n                \"*.json\"\r\n            ],\r\n            \"url\": \"https://path/to/schema.json\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nThe problem is that this matches all .json files in the project, but I need it to match **only \\*.json files in the root directory**. What can I put in `fileMatch` to enable this, or can this not be done with the file matching?",
        "createdAt": "2018-02-21 15:05:41",
        "state": "open",
        "number": 44135
    },
    {
        "title": "When A grammar injects to B, grammars embedding B should get A's injection",
        "description": "A real world example: https://github.com/vuejs/vetur/issues/701\r\n\r\nGraphQL is injecting to `source.js`.\r\nVetur is embedding `source.js`.\r\n\r\nHowever the Vue grammar is not getting any injections from GraphQL.",
        "createdAt": "2018-02-20 18:16:52",
        "state": "open",
        "number": 44056
    },
    {
        "title": "When scrolling down through a long body of code, place a cookie crumb of the function(s) you are in.",
        "description": "A feature request:\r\n\r\nWhen looking at large bodies of code, it's easy to forget which function you are in.  This is especially important when you are doing things like renaming a variable in a function.\r\n\r\nSo, take this example:\r\n\r\nI have a .JS file with about 3000 lines of code (not my doing) and the functions can be really long.\r\n\r\nI'm working on simplifying and breaking out some of the functions.\r\n\r\nI am in a function, renaming some variables using CTRL+D but now the function name, parameters have scrolled off the page as I CTRL+D down selecting variable name matches.  Because I jumped down, I'm not sure if I am still in the same function, or outside in a different function that may have the same variable name.  This is where I am thinking we could have a small tip that helps us know that we are still in the body of the function we expected.\r\n\r\nThis tip would appear as a bar at the top of the screen that shows when the parent function scrolls off the the page.  I mocked it up here.  \r\n![image](https://user-images.githubusercontent.com/2914981/36430166-787183de-1622-11e8-90a4-43dcb363fa49.png)\r\n\r\nSo you can imagine the name of the function changing each time I scroll down into a body of a new function and the function declaration scrolls up off the page.  I think this would be super helpful. \r\n\r\nHope that makes sense. \r\n",
        "createdAt": "2018-02-20 14:47:29",
        "state": "open",
        "number": 44042
    },
    {
        "title": "[theming] customize file icons in settings",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: all\r\n- OS Version: all\r\n\r\nCan't there be a quick way to customize file extension icon instead of having to create a whole extension for a custom theme as explained here https://github.com/Microsoft/vscode/issues/10804?\r\n\r\nIt's really daunting to have to learn the whole system of extension just for this tiny need. \r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes/No\r\n",
        "createdAt": "2018-02-20 10:29:02",
        "state": "open",
        "number": 44026
    },
    {
        "title": "Setup challenges when running mocha tests",
        "description": "## Goals\r\n- Since I run tests many times, I want to run mocha tests out of the box using a keyboard shortcut or a flat command (i.e. one that doesn't require input).\r\n- I want to navigate directly to test suites and test cases.\r\n- I want to jump to the last failed test of the most recent test run with a keyboard shortcut.\r\n\r\n## Getting to a keyboard shortcut\r\n\r\n- Add a `test` script to `package.json` and install the `npm` extension. Then I can use <kbd>Cmd+R T</kbd> to run the npm test script.  Somehow I have to learn that the npm extension can be helpful.\r\n\r\n- I can try to use tasks. I need to configure tasks, need to configure the default test task, and I need to assign a keyboard shortcut to the `run test task` command. That's three big hurdles. We have a tasks menu, but that's only talking about build tasks not test tasks. Steep learning curve.\r\n\r\n## Issue with the terminal\r\n\r\n- In both cases (npm and tasks) the test execution happens in a terminal. The terminal is reused.  When running tests I care about the failing tests. The terminal gives me link detection to where the test failed. Great. When I do this the terminal is scrolled away from its default position, i.e. the most recent line of output. Thus, when click the link and I fix the issue and re-run the tests then I don't see the output of the re-run. I need to go to the terminal and scroll to the bottom to see if the test succeeded or failed. A terminal that shows tests should scroll automatically to the bottom.\r\n\r\n- I can assign a keyboard shortcut to focus the active terminal (there is none by default). However, in order to find the failed tests and the link to the source I use the mouse. I'd like to jump to failing tests directly with a keyboard shortcut.\r\n\r\n## Navigation issues\r\n\r\n- Show Document Symbols and Show Workspace Symbols are unaware of mocha test suites and test cases. I always use search to navigate to my tests.\r\n\r\n## Issues when debugging\r\n\r\n- The debug console does not support link detection. Thus, when I run tests in the debugger without hitting a breakpoint, I can not easily navigate the test failure.",
        "createdAt": "2018-02-20 07:10:44",
        "state": "open",
        "number": 44013
    },
    {
        "title": "SCM: Differentiate between submodules and normal repos",
        "description": "### Issue Type\r\nFeature Request\r\n\r\n**I would like submodules to be nested underneath their parent repo in the Source Control Pane.**\r\n\r\n### Description\r\n\r\nI love the new submodule feature, but there are a couple of issues with the Source Control pane:\r\n\r\n  * I can't tell which providers (repos) are submodules\r\n  * I can't tell what top-level provider a given submodule provider is associated with\r\n\r\nFor most situations, this probably isn't an issue. But for some of my projects, it is a serious issue. For example, I have projects:\r\n\r\n  * A - depends on nothing\r\n  * B - depends on A\r\n  * C - depends on A and B\r\n  * etc\r\n\r\nFor development, I use a multi-root workspace with a directory structure something like this:\r\n\r\n  * Projects\r\n    * A\r\n    * B *(references `../A`)*\r\n    * C *(references `../A` and `../B`)*\r\n\r\nFor continuous integration and deployment, I use submodules:\r\n\r\n  * C *(references `./.libs/A` and `./.libs/B`)*\r\n    * .libs\r\n      * A\r\n      * B *(references `/builds/C/.libs/A`)*\r\n\r\nWhile I could leave the submodules uninitialized on my dev machine, my workflow includes doing a build with submodules before I push, to ensure I haven't forgotten to update a submodule, because why waste CPU cycles on a CI build that's guaranteed to fail.\r\n\r\nIn this particular example, where B has A as a submodule, and C has A and B, I will have six repos (A, B, C, B/.libs/A, C/.libs/A, and C/.libs/B) show up in VSCode. While I can and do disable submodule discovery for these projects, that doesn't stop VSCode from picking them up when I open a file in a submodule.\r\n\r\n### VS Code Info\r\n\r\nVS Code version: Code 1.20.1 (f88bbf9137d24d36d968ea6b2911786bfe103002, 2018-02-13T15:34:36.336Z)\r\nOS version: Windows_NT x64 10.0.16299\r\n\r\n",
        "createdAt": "2018-02-18 23:52:41",
        "state": "open",
        "number": 43951
    },
    {
        "title": "Workspace ... scrollbar area is totally invisible",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.21.0-ins\r\n- OS Version: win7x64\r\n\r\nHow about to make scrollbar area a little bit visible?\r\nCause you don't even see where to click, when you want to scroll some hundreds of folders instantly.\r\n\r\nFor now it's totally invisible: \r\n![scrollbar area is invisible](https://user-images.githubusercontent.com/24613274/36354190-0e5a1078-14d9-11e8-8e5a-5b55d328fdc2.gif)\r\n",
        "createdAt": "2018-02-18 16:28:00",
        "state": "open",
        "number": 43936
    },
    {
        "title": "Close All should not stop when unsaved files encountered",
        "description": "One of the features I loved on Atom and dearly miss on VS Code is when you Close All or Close Others and there are unsaved files. On VSCode it will prompt you to save the file and force you to do that first. Extremely annoying. On Atom, it will close all the files it can and not the files it can't and give you a warning. Love that! Please implement this simple but very usable feature",
        "createdAt": "2018-02-18 02:16:41",
        "state": "open",
        "number": 43909
    },
    {
        "title": "Git diff/patch-view UX: Better UI for seeing all patches, staging and discarding selected hunks/lines",
        "description": "### Issue Type\r\nFeature Request\r\n\r\n### Description\r\n\r\nHi all,\r\nI find Atom's Git pane significantly easier to use. See how it lists all hunks at once and allows me to intuitively select whole hunks or lines to stage or discard (note how the button label changed in the \"stage\" button in the first hunk). I think VS Code can be improved a lot by reviewing the git UX.\r\n\r\n![bildschirmfoto vom 2018-02-17 12-31-55](https://user-images.githubusercontent.com/380829/36340974-0991dd6e-13df-11e8-8538-6b0a3b652fa1.png)\r\n\r\n### VS Code Info\r\n\r\nVS Code version: Code 1.20.1 (f88bbf9137d24d36d968ea6b2911786bfe103002, 2018-02-13T15:31:21.019Z)\r\nOS version: Linux x64 4.15.3-300.fc27.x86_64\r\n\r\n",
        "createdAt": "2018-02-17 12:36:07",
        "state": "open",
        "number": 43887
    },
    {
        "title": "Expose git diff functions outside of overflow menu",
        "description": "![screen shot 2018-02-16 at 2 00 08 pm](https://user-images.githubusercontent.com/156888/36331197-b6a5c006-1321-11e8-9c89-7cc24560c82f.png)\r\n\r\nThese commands like revert selected ranges etc are pretty commonly useful commands. Would make sense to extract them into buttons to the left of the overflow menu.\r\n\r\nConsider git tools like SourceTree\r\n\r\n![screen shot 2018-02-16 at 2 01 23 pm](https://user-images.githubusercontent.com/156888/36331252-ed167630-1321-11e8-8b62-7449e69d3d20.png)\r\n",
        "createdAt": "2018-02-16 22:01:02",
        "state": "open",
        "number": 43862
    },
    {
        "title": "Allow an option to only show hovers if a shortcut key is down",
        "description": "### Issue Type\r\nFeature Request\r\n\r\n### Description\r\n\r\nI've been seeing more and more people complain about the hovers, and honestly at times they are getting in my way as well. It might be nice if there was an option to only show hovers if you hold down a key (Ctrl/Alt/etc), so that way moving around won't cause hovers unless you want them. If something like this was to be added, debugging should be considered a separate mode from editing.\r\n\r\n### VS Code Info\r\n\r\nVS Code version: Code - Insiders 1.21.0-insider (936b796aa8667de5edb536b00ce8a8e61fcebfb6, 2018-02-16T05:15:47.029Z)\r\nOS version: Windows_NT x64 10.0.17101\r\n\r\n\r\n<!-- generated by issue reporter -->",
        "createdAt": "2018-02-16 20:32:35",
        "state": "open",
        "number": 43857
    },
    {
        "title": "[folding] Code folding does not respect multi-cursor",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.20.1\r\n- OS Version: Windows 10\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open a new document with the following css:  \r\n```\r\n.selector{\r\n    min-width: 40px;\r\n}\r\n\r\n.selector.a{\r\n    width: 468px;\r\n    height: 60 px;\r\n}\r\n\r\n.selector.b{\r\n    width: 728px;\r\n    height: 90 px;\r\n}\r\n\r\n.selector.c{\r\n    width: 160px;\r\n    height: 600 px;\r\n}\r\n```\r\n\r\n2. Highlight any occurrence of `.selector` and multiselect all occurrences with `Ctrl + D`.\r\n3. Move all cursors to the beginning of their respective lines with `Home`\r\n4. Attempt to execute a code fold with `Ctrl + Shift + [`\r\n\r\nExpected Behavior:\r\nAll selectors are folded down to \r\n```\r\n.selector{\u2026}\r\n\r\n.selector.a{\u2026}\r\n\r\n.selector.b{\u2026}\r\n\r\n.selector.c{\u2026}\r\n```\r\n\r\nActual Behavior:\r\nOnly the initially selected selector is folded. All others remain expanded.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes",
        "createdAt": "2018-02-16 16:18:09",
        "state": "open",
        "number": 43840
    },
    {
        "title": "Git: Support prompting for GPG password",
        "description": "- VSCode Version: 1.19.3\r\n- OS Version: Windows 10\r\n\r\nHey, Git don't work in Visual Studio Code, when i have gpg signing activated.\r\n\r\nSteps to reproduce: https://help.github.com/articles/signing-commits-with-gpg/\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2018-02-16 08:14:24",
        "state": "open",
        "number": 43809
    },
    {
        "title": "Allow custom setting/control of workbench tab titles",
        "description": "Hi there,\r\n\r\nIn my project, I have files with quite long file names (beyond my control).  This limits me to having 3-4 tabs show in my workbench at once.  I would like to be able to rename these tabs, or control their label format myself, in order to have more condense tab titles and thus more easily navigate my tabs.  This was roughly suggested by #21662 but was not really addressed by #12965 -- any of the options for `workbench.editor.labelFormat` still give me tab titles that are too long.  Can `workbench.editor.labelFormat` be modified, for example, to optionally take a formatter lambda function we can provide?  As just one example of a reasonable formatter one might write, it could be that you fix tab titles to 20 chars, and for long filenames you truncate and prepend with \"...\".  Additionally, one might want to assign nickname/shorthand tab titles for commonly used files.  Please pardon me if there is already a way to do this (would love to know how!), but if not, I'd sincerely appreciate considering this as a feature request.\r\n\r\nThanks!",
        "createdAt": "2018-02-16 06:37:05",
        "state": "open",
        "number": 43806
    },
    {
        "title": "Allow middle mouse button to be bound in keyboard shortcuts",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.20.1\r\n- OS Version: Windows 10\r\n\r\nSteps to Reproduce:\r\n\r\n1. Change keybinding for a shortcut\r\n2. Click middle mouse button when prompted for a key combination\r\n\r\n(feature request) Not technically a key, but it could be useful if bound like one. Example: middle mouse click to go to definition.\r\n",
        "createdAt": "2018-02-16 01:28:24",
        "state": "open",
        "number": 43794
    },
    {
        "title": "\"Download Now\" button should respect the used installation method on Linux",
        "description": "### Issue Type\r\n\r\nBug\r\n\r\n### Description\r\n\r\n> __Edit:__ Originally this issue was specifically about the `.deb` installation method, but since this problem is not specific to it, I edited the issue to be more general.\r\n\r\n#### How to reproduce\r\n\r\n1. Install (an outdated version of) VS Code using one of the installation methods.\r\n2. Open VSCode and wait for the `(1)` to appear on the settings icon.\r\n3. Click on the settings icon and then on **Download Now**.\r\n\r\n#### Expected behavior\r\n\r\nVSCode starts the download of the latest version's file (when the `.tar.gz` was used to install VS Code) or instructs the user to run an update through the relevant package manager.\r\n\r\n#### Actual behavior\r\n\r\nVS Code always starts the download of the latest version's `.tar.gz` file.\r\n\r\n### Possible solution\r\n\r\nVS Code could check what type of download was used to install and behave differently based on that.\r\nChecking whether a `.deb` was used could look something like this:\r\n\r\n```ts\r\nimport { spawn } from 'child_process';\r\n\r\nexport function isDebInstallation(): Promise<boolean> {\r\n  return new Promise(resolve => {\r\n    spawn('dpkg', ['--list', 'code']).on('close', code => {\r\n      resolve(code === 0);\r\n    });\r\n  });\r\n}\r\n```\r\n\r\nAnother option would be to include the information about what installation method was used in the release.\r\n\r\n### VS Code Info\r\n\r\nVS Code version: Code 1.20.0 (c63189deaa8e620f650cc28792b8f5f3363f2c5b, 2018-02-07T17:10:15.949Z)\r\nOS version: Linux x64 4.13.0-32-generic\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i5-4590 CPU @ 3.30GHz (4 x 3300)|\r\n|Load (avg)|1, 1, 1|\r\n|Memory (System)|15.61GB (10.31GB free)|\r\n|Process Argv|/usr/share/code/code .|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details>\r\nReproduces without extensions",
        "createdAt": "2018-02-14 15:45:47",
        "state": "open",
        "number": 43671
    },
    {
        "title": "Use Windows Keybindings in MacOS",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\nI frequently use Intellij products to do my Node.js development. With their IDEs I have a way to change the default key-mappings so that I can use the same default between operating systems. in Code, even with extensions designed to remap bindings, I am forced to use the CMD key as most of my leaders and I have no choice in that unless I manually edit all my bindings. A nice feature would be a way to change the defaults between the windows and MacOS keybindings as a simple setting without an add-on.\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.20.0\r\n- OS Version: MacOS 10.13.3\r\n\r\nSteps to Reproduce:\r\n\r\n1. No Steps\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2018-02-14 15:02:37",
        "state": "open",
        "number": 43666
    },
    {
        "title": "Feature Request: 'only errors' option for problems.decorations",
        "description": "In the most recent update `problems.decorations.enabled` was added to highlight files in the explorer that had errors & warnings. It would be great to have a setting to specify whether you want to highlight both errors and warnings or just errors. Say `problems.decorations.level`.\r\n",
        "createdAt": "2018-02-13 18:06:45",
        "state": "open",
        "number": 43602
    },
    {
        "title": "feature-request: click below/above scrollbar handle moves one screen height",
        "description": "When viewing the \"release notes\" on VSCode, I can click above/below the scrollbar handle to scroll up/down one screen height (kind of \"relative scroll\"). In a regular file to be edited in VSCode, a click above/below the scrollbar handle jumps to the (absolute) position. The latter does also not match with the default Windows behaviour. \r\nThis behaviour is also cumbersome in very large files: Even clicking on one of the markers shown in the scrollbar will send you somewhere near, if lucky. After that you have to use the scrollwheel or the scrollbars arrow buttons (both slow).\r\nTherefore this feature-request: Please add a setting to enable a \"page wise\" scroll when clicking above/below the scrollbar handle. The same applied for the Minimap. But I'll suggest to create two seperate settings.",
        "createdAt": "2018-02-13 08:10:29",
        "state": "open",
        "number": 43564
    },
    {
        "title": "Feature Request - Make possible to undo (redo) changes in code after VS Code's been restarted",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.21.0-ins\r\n- OS Version: win7x64\r\n\r\nIt would be great to undo (Ctrl+Z) and redo (Ctrl+Y) changes in the code we've done, **after** VS Code's been closed and restarted.\r\n\r\nIs it hard to implement?",
        "createdAt": "2018-02-13 03:07:42",
        "state": "open",
        "number": 43555
    },
    {
        "title": "Allow extensions to contribute additional paths to \"quick open\"",
        "description": "In IntelliJ it's possible to include non-project files in the quick-open dialog:\r\n\r\n![screen shot 2018-02-05 at 9 48 59 am](https://user-images.githubusercontent.com/1821610/35817348-5b9261d0-0a5a-11e8-9d7f-e124d67f730d.png)\r\n\r\nIt would be useful to support in Code. For Dart, dependencies are stored outside of the project (similar to the NuGet cache, I guess) but users may wish to open them.\r\n\r\nMaybe an extension could provide a set of additional paths that should be searchable?",
        "createdAt": "2018-02-12 13:19:17",
        "state": "open",
        "number": 43505
    },
    {
        "title": "Markdown syntax highlighting for ~~text with strikethrough~~ and task-items",
        "description": "It would be very nice to see `~~text with strikethrough~~` being greyed out (or somehow highlighted) in source mode (not \"Preview\" mode) \u2013 like `_italic_` and `**bold**` text is.\r\n\r\nAlso greying out finished/checked `* [x] task-items` would be sweet.",
        "createdAt": "2018-02-12 13:12:37",
        "state": "open",
        "number": 43504
    },
    {
        "title": "Option to disable font ligatures in strings",
        "description": "Sometimes you have to list a bunch of characters in a string containing a regular expression and you don't want the characters to merge in order to more easily read the expression. ",
        "createdAt": "2018-02-11 19:12:46",
        "state": "open",
        "number": 43440
    },
    {
        "title": "[css] propose ids used in other selectors",
        "description": "### Issue Type\r\nBug\r\n\r\n### Description\r\n\r\ni have issues when i try to use suggestion for css files. for classes works well but when i'm  using for id i have no suggestions try it with a file with like 500 lines of code\r\n\r\n### VS Code Info\r\n\r\nVS Code version: Code 1.20.0 (c63189deaa8e620f650cc28792b8f5f3363f2c5b, 2018-02-07T17:09:39.780Z)\r\nOS version: Windows_NT x64 10.0.16299\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i5-5200U CPU @ 2.20GHz (4 x 2195)|\r\n|Memory (System)|3.91GB (0.52GB free)|\r\n|Process Argv|C:\\Program Files\\Microsoft VS Code\\Code.exe|\r\n|Screen Reader|no|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (5)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nrainbow-brackets|2gu|0.0.6\r\nvscode-eslint|dba|1.4.5\r\nvsc-material-theme|Equ|1.3.0\r\nprettier-vscode|esb|1.1.3\r\nLiveServer|rit|3.2.0\r\n\r\n\r\n</details>\r\nReproduces without extensions",
        "createdAt": "2018-02-10 01:08:18",
        "state": "open",
        "number": 43365
    },
    {
        "title": "Suggestion: Bind Ctrl-Shift-1, Ctrl-Shift-2 to open Explorer, Search, Source Control, etc.",
        "description": "Today, if I learn that Ctrl-Shift-E is Explorer, I still have to learn something else for Search (which isn't based on \"S\").\r\n\r\nGiven that these icons are ordered in VSCode, it's a natural fit for binding to numbers. Once you know how to use it for one, you know the others.\r\n",
        "createdAt": "2018-02-09 21:51:40",
        "state": "open",
        "number": 43355
    },
    {
        "title": "Make debugger tooltip customisable",
        "description": "### Issue Type\r\nFeature Request\r\n\r\n### Description\r\nMake debugger tooltip (which appears on hover over variables): \r\n- able to be pinned\r\n- able to be floating\r\n- resizable",
        "createdAt": "2018-02-09 14:58:00",
        "state": "open",
        "number": 43326
    },
    {
        "title": "Syntax highlighting in debug console",
        "description": "Hi, it would be nice to have the syntax highlighting on what is typed in debug console, like in Chrome.\r\nThat would be very confortable, for those who use the debug console a lot.\r\n\r\nThanks\r\n\r\nVSCode:\r\n![image](https://user-images.githubusercontent.com/8301962/36025876-fdc11e5a-0d94-11e8-850e-a21cf3f4b8f9.png)\r\n\r\nChrome:\r\n![image](https://user-images.githubusercontent.com/8301962/36025904-0ebfd6ba-0d95-11e8-84db-3b6f5830ccdb.png)\r\n\r\n- VSCode Version: Code 1.19.2 (490ef761b76b3f3b3832eff7a588aac891e5fe80, 2018-01-10T15:49:04.682Z)\r\n- OS Version: Darwin x64 16.7.0\r\n- Extensions: \r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nclipboard-history|Anj|1.0.7\r\nEditorConfig|Edi|0.12.0\r\nquokka-vscode|Wal|1.0.98\r\nvscode-standardjs-snippets|cap|0.7.5\r\nvscode-standardjs|che|1.2.1\r\nvscode-eslint|dba|1.4.5\r\ngitlens|eam|8.0.0\r\nvscode-npm-script|eg2|0.3.3\r\nfile-icons|fil|1.0.7\r\nauto-close-tag|for|0.5.5\r\nvue|jcb|0.1.5\r\ngraphql-for-vscode|kum|1.8.3\r\nvetur|oct|0.11.7\r\napostrophecms-vs-snippets|pun|1.9.2\r\nsass-indented|rob|1.4.6\r\nnunjucks|ron|0.2.3\r\nvscode-todo-highlight|way|0.5.11\r\n",
        "createdAt": "2018-02-09 11:52:27",
        "state": "open",
        "number": 43310
    },
    {
        "title": "Allow customization of search match text color",
        "description": "I couldn't find this by searching, but it would be very good for readability if we could add the option to change the foreground color for find matches (`editor.findMatchForeground`?). Otherwise, we have to pick a background color that won't clash with any possible color in our theme, which is not an easy feat.\r\n\r\nExample of how it works now in VS Code:\r\n![image](https://user-images.githubusercontent.com/4048689/36012056-3802e7ac-0d21-11e8-8a54-49155d6a1f71.png)\r\n\r\nExample of how it works in Sublime:\r\n![image](https://user-images.githubusercontent.com/4048689/36012070-42bbb016-0d21-11e8-8fff-e8030a66ddcf.png)\r\n",
        "createdAt": "2018-02-09 04:42:21",
        "state": "open",
        "number": 43283
    },
    {
        "title": "support code folding with screen reader support enabled",
        "description": "### Issue Type\r\nBug\r\n\r\n### Description\r\n\r\n1. Open VS Code with NVDA Screen Reader running\r\n2. open some source code, I used python file\r\n3. Navigate to the class definition, e.g. class A:\r\n4. press ctrl+shift+[\r\n5. navigate downward\r\n\r\nActual result:\r\nthe class will not be collapsed, cursor goes to next line in the file\r\n\r\nExpected result:\r\nCursor should navigate to the next definition at the same level, e.g. class B:\r\n\r\nadditional info:\r\nI'd like to be able to skip long blocks of code. Please make code folding work with screen reader enabled.\r\n\r\n### VS Code Info\r\n\r\nVS Code version: Code 1.20.0 (c63189deaa8e620f650cc28792b8f5f3363f2c5b, 2018-02-07T17:09:39.780Z)\r\nOS version: Windows_NT x64 10.0.16299\r\n\r\n<details>\r\n<summary>System Info</summary>\r\n\r\n|Item|Value|\r\n|---|---|\r\n|CPUs|Intel(R) Core(TM) i7-7500U CPU @ 2.70GHz (4 x 2904)|\r\n|Memory (System)|15.88GB (8.27GB free)|\r\n|Process Argv|C:\\Program Files\\Microsoft VS Code\\Code.exe|\r\n|Screen Reader|yes|\r\n|VM|0%|\r\n\r\n</details><details><summary>Extensions (2)</summary>\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nGo|luk|0.6.73\r\npython|ms-|2018.1.0\r\n\r\n\r\n</details>\r\nReproduces without extensions",
        "createdAt": "2018-02-08 23:15:16",
        "state": "open",
        "number": 43262
    },
    {
        "title": "Incorrect indentation for single line if/for/while/etc, multiline chaining statements etc",
        "description": "I am experiencing some weird indentation issues. Not using any plugins to prettify or similar.\r\n\r\n```\r\nif (condition) {\r\n    return; // <-- correct indentation\r\n}\r\n```\r\n```\r\nif(condition)\r\nreturn; // <-- incorrect indentation\r\n```\r\nSome ppl claim this should be avoided. I don't agree. Using pair of { } for simple early exits messes up code. Putting the return on the end of the same line can be hard to read if the condition is long.\r\nThis is not exclusive to return. Applies to all single lines. \r\n\r\nsame problems apply to for, while, etc.\r\n\r\n```\r\nvar transformedValues =\r\noriginalValues <-- incorrect should be indented one level.\r\n.where(condition) <-- incorrect, should be indented two levels.\r\n.select(transform); <-- incorrect, should be indented two levels. \r\n\r\nfunction someFunction() {\r\n    callToSomeOtherFunction(\r\n         variableWithLongNameWhichRequiresASeparateLine,\r\n         anotherVariableWithLongNameWhichRequiresASeparateLine);\r\n    }  <-- incorrect should not be indented.\r\n    function ... <-- incorrect the rest of the file is indented. \r\n```",
        "createdAt": "2018-02-08 19:44:18",
        "state": "open",
        "number": 43244
    },
    {
        "title": "Git: Add number of modified lines to scm viewlet",
        "description": "![before](https://user-images.githubusercontent.com/9638156/35985259-4a7d5fd0-0d07-11e8-8619-b9e8654c0987.png)\r\n![after](https://user-images.githubusercontent.com/9638156/35985274-52913c00-0d07-11e8-976f-aa420deefac0.png)\r\n",
        "createdAt": "2018-02-08 16:37:22",
        "state": "open",
        "number": 43231
    },
    {
        "title": "Allow local configuration update in the extension API",
        "description": "Hello, I would like to see in VS Code the ability to set configuration options without them automatically being written in the target configuration file, whether it's the global `settings.json` or workspace settings.\r\n\r\nRight now it's not possible to share your global/workspace settings between several machines and adding machine-specific configuration options (e.g. window.zoomLevel, due to different screen DPI) without issues. I'm currently writing [an extension](https://github.com/Shgck/VsCodeLocalSettings) that will allow users to save some settings in a specific file and load it on top on the user settings ; adding several local files and workspace/folder support can come later once this basic feature is working. If I try to write a locally available configuration option in whatever configuration target with `WorkspaceConfiguration.update`, the result is automatically written in the associated settings file, making common settings file sharing problematic: the settings file will always store the merged configuration (global & local) from the last machine used.\r\n\r\nProposal:\r\n\r\n1. Update current settings with `WorkspaceConfiguration.update` and an option, or a different kind of `ConfigurationTarget`, to not write this new configuration setting.\r\n2. Apply the changes only in memory and not on disk : the configuration will be reset next time VS Code is restarted, or when the window reloads.\r\n\r\nA quick search in the issues tells me that it would be an appreciated feature:\r\n\r\n- https://github.com/Microsoft/vscode/issues/17634\r\n- https://github.com/Microsoft/vscode/issues/37519\r\n- https://github.com/Microsoft/vscode/issues/40233\r\n\r\nThank you!",
        "createdAt": "2018-02-08 15:36:54",
        "state": "open",
        "number": 43226
    },
    {
        "title": "Storage service: Warn about missing defaults for unconfigured settings",
        "description": "I have this setting `update.enableWindowsBackgroundUpdates`:\r\n\r\nhttps://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/update/electron-browser/update.contribution.ts#L62\r\n\r\nWhen the user doesn't configure it, reading this value from the configuration service should return the default value. This works from the renderer process. It doesn't from the main process. Instead of getting the default `false` value, I get `undefined`.\r\n\r\nMaybe regression?",
        "createdAt": "2018-02-08 14:15:17",
        "state": "open",
        "number": 43213
    },
    {
        "title": "Add the case-sensitive text selection",
        "description": "### Issue Type\r\nFeature Request\r\n\r\n### Description\r\n\r\nNow, when I select the \"text\",  \"TEXT\" is also selected, like they are the same variables.\r\nPlease add the case-sensitive selection or option to choose the case-sensitive selection.\r\n\r\n### VS Code Info\r\n\r\nVS Code version: Code 1.20.0 (c63189deaa8e620f650cc28792b8f5f3363f2c5b, 2018-02-07T17:10:15.949Z)\r\nOS version: Linux x64 4.4.0-53-generic\r\n\r\n",
        "createdAt": "2018-02-08 10:41:48",
        "state": "open",
        "number": 43190
    },
    {
        "title": "Allow to open multiple workspaces in the same window",
        "description": "Workspace feature is great because we can grouping projects in a top context (microservices projects in a big API workspace). But, only one workspace can be open. This feature can be powerful if multiple workspaces can be open at the same time (in the same window).\r\n\r\n![test](https://user-images.githubusercontent.com/895661/35967214-7cc92ba0-0cc0-11e8-82b0-6bae8c11ffdb.jpg)\r\n\r\nAnd another request : it will be great if :\r\n- Right click on the workspace name should open menu with a \"settings\" item (which open xxxx.code-workspace).\r\n- Workspace settings should contain a `name` attribute (to clearly identify the workspace in the left pane in VS Code)",
        "createdAt": "2018-02-08 10:13:01",
        "state": "open",
        "number": 43188
    },
    {
        "title": "Titlebar-less view for Linux",
        "description": "Just as Mozilla did in Firefox 59 (you can check it out in Firefox Nightly atm), and someone was doing for the Mac version in #12377, it would be really good to have an option to **integrate the title bar in the same row where the tabs reside**, in order to save some vertical space (which is even more important if like me you usually work on a non-FHD laptop such as an old Thinkpad or a Dell Latitude). \r\n\r\nI said in Gnome cause it's what I use, but maybe it could be made into a more portable solution that has options for all DEs with top bars (be it Mac, Gnome, Xfce...). Like Mozilla did, it could even start to roll out when just some DEs are supported, with the warning that it may not work on all systems.\r\n",
        "createdAt": "2018-02-08 02:28:55",
        "state": "open",
        "number": 43154
    },
    {
        "title": "Ability to override location of tasks.json",
        "description": "### Issue Type\r\nFeature Request\r\n\r\n### Description\r\n\r\nA project I work on has committed a .vscode/tasks.json to make things easy for people to get started using vs code to develop on it. I think that's great, but my preferred tasks setup does not mesh very well with the agreed-upon defaults. Since it's commtted in git, if it changes (rare, admittedly), I lose my changes when updating to the new revision. It would be nice if I could just leave that tasks.json alone, and have a tasks-local.json used instead (or some configurable filename) so that I can have my own default build task, add my own tasks for my own use, etc without having to worry about either accidentally committing to our central repo or losing my changes locally.\r\n\r\n### VS Code Info\r\n\r\nVS Code version: Code - Insiders 1.20.0-insider (f9398645d1d624538708eeebf96e6fdeb546f5d7, 2018-02-06T15:10:07.211Z)\r\nOS version: Darwin x64 17.4.0\r\n\r\n",
        "createdAt": "2018-02-08 00:54:59",
        "state": "open",
        "number": 43151
    },
    {
        "title": "Column selection - cannot paste with virtual whitespace",
        "description": "I have the following bit of data\r\n\r\n```\r\ncol1   col2\r\naaa    bbbbbbbbb\r\ncccccc ddddd\r\nee     fffffffffffff\r\naaa    bbbbbbbbb\r\ncccccc ddddd\r\nee     ffffffffffffffffff\r\n```\r\n\r\nI would like to be able to select the 2nd column (aka col2) and paste it next to the original col2. \r\n\r\nThis operation is quite trivial in editors such as _Visual Studio, UltraEdit, NotePad++, QtCreator, emacs etc.._  The following shows UltraEdit, NotePad++, Visual Studio, QtCreator and Kate column select modes:\r\n\r\n![vscode_column_select_problem01](https://user-images.githubusercontent.com/513642/35946358-92176174-0cb7-11e8-9eda-2faa6ed22c64.png)\r\n\r\n\r\n![msvc](https://user-images.githubusercontent.com/513642/39613166-ba3d0058-4fa8-11e8-8466-e5830f33671a.png)\r\n\r\n![qtcreator](https://user-images.githubusercontent.com/513642/39677997-d1612b08-51c7-11e8-98af-f2f495d3d6a8.png)\r\n\r\n![image](https://user-images.githubusercontent.com/513642/44886538-1e093c00-ad0a-11e8-8ccb-18719c713b66.png)\r\n\r\n\r\n----\r\n\r\nHowever when I try to do it using vscode, I encounter a very _**non-intuitive**_ outcome:\r\n\r\n![vscode_column_select_problem02](https://user-images.githubusercontent.com/513642/35946383-ae44f546-0cb7-11e8-8a12-60e43a913e83.png)\r\n\r\nIs there a plugin or correct way to select a column of text and paste it as-is into a text? _(or the same one)_\r\n\r\n----\r\n\r\n@alexandrudima the  **Problems** and **Issues** observed:\r\n\r\n1. Holes appear in the selected rectangular area\r\n2. Rows are selected at different lengths instead of max number of columns\r\n3. When pasting what has been selected, the result is non-intuitive\r\n4. Behaviour differs when using keyboard only versus keyboard-mouse combination\r\n\r\n\r\n",
        "createdAt": "2018-02-07 23:08:16",
        "state": "open",
        "number": 43145
    },
    {
        "title": "[css] Lab colors and other CSS Color Module Level 4 features",
        "description": "See the [CSS Color Module Level 4](https://drafts.csswg.org/css-color/#specifying-lab-lch) specification.\r\n\r\nWhile the specification is still a draft and browsers don't support these features yet, there already exists a [PostCSS plugin](https://github.com/jonathantneal/postcss-color-lab) that (partially) implements them, so it's actually already possible to use at least a part of them.\r\n\r\n```css\r\n.example {\r\n\tbackground-color: lab(33 43 -47);\r\n\tbox-shadow: 0 0 20px lch(54 107 41 / 10%);\r\n}\r\n```\r\n\r\nWould be nice to get previews for those colors in VS Code like it's shown for rgb/rgba/hsl colors.",
        "createdAt": "2018-02-07 16:50:50",
        "state": "open",
        "number": 43111
    },
    {
        "title": "Extension handlers should be added to HKLM not HKCU",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.19.3\r\n- OS Version: Windows 10 1709\r\n\r\nSteps to Reproduce:\r\n\r\n1. Install VS Code as administrator account (different from your normal every day account).\r\n2. Select to add \"Edit with VS Code\" to context menu\r\n3. Do not get \"Edit with VS Code\" in context menu because they're installed to HKCU instead of HKLM.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\n\r\nThis makes it very frustrating to try and use VS Code in a corporate environment, or an environment where your normal account is not an administrator on the computer. ",
        "createdAt": "2018-02-06 17:51:18",
        "state": "open",
        "number": 43053
    },
    {
        "title": "Provide ability to ignore all whitespace in diff editor (feature request)",
        "description": "Steps to Reproduce:\r\n\r\n1. In settings it's possible to set `\"diffEditor.ignoreTrimWhitespace\": true`\r\n2. There's no option to ignore all whitespace, \r\n\r\nWould it be possible to add `\"diffEditor.ignoreAllSpaces\": true`? I believe the command-line to achieve this would be something like `git diff --ignore-space-at-eol -b -w [commit]...`\r\n\r\nh/t [Daniel Gomez @ coderwall](https://coderwall.com/p/crj69a/from-a-useless-git-diff-to-a-useful-one)\r\n\r\n[edit]\r\nMight only need `-w` ?\r\n[/edit]",
        "createdAt": "2018-02-06 10:03:55",
        "state": "open",
        "number": 43026
    },
    {
        "title": "Context menu contribution does not warn when activation event is missing",
        "description": "- Generate Yeoman sample extension.\r\n- Add a context menu contribution\r\n\r\n``` TS\r\n    \"activationEvents\": [\r\n        \"onCommand:extension.sayHello\"\r\n    ],\r\n    \"main\": \"./out/extension\",\r\n    \"contributes\": {\r\n        \"menus\": {\r\n            \"explorer/context\": [\r\n                {\r\n                    \"command\": \"extension.foobar\",\r\n                    \"group\": \"1_modification\"\r\n                }\r\n            ]\r\n        },\r\n        \"commands\": [\r\n            {\r\n                \"command\": \"extension.foobarCon\",\r\n                \"title\": \"Hello World\"\r\n            }\r\n        ]\r\n    },\r\n```\r\n\r\n``` TS\r\n'use strict';\r\n\r\nimport * as vscode from 'vscode';\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n    let disposable = vscode.commands.registerCommand('extension.foobar', () => {\r\n        vscode.window.showInformationMessage('Hello World!');\r\n    });\r\n\r\n    context.subscriptions.push(disposable);\r\n}\r\n```\r\n\r\n- Run the extension, open the context menu in the explorer, select Hello World\r\n- Nothing happens, no error message.\r\n- Run the hello world command from the command menu, error appears as expected.",
        "createdAt": "2018-02-05 14:28:50",
        "state": "open",
        "number": 42971
    },
    {
        "title": "[Feature Request] Allow to define and select Debug and Release build configurations",
        "description": "It would be great to have support for **Debug** and **Release** configurations similar to:\r\n* [How to: Set debug and release configurations in Visual Studio](https://docs.microsoft.com/en-us/visualstudio/debugger/how-to-set-debug-and-release-configurations)\r\n* or [Xcode build schemes and configurations](https://medium.com/practical-ios-development/some-practical-uses-for-xcode-build-schemes-and-build-configurations-swift-e50d15a1304f)\r\n\r\nThis is useful for compiled programming language projects written in C/C++ for example.",
        "createdAt": "2018-02-05 13:29:31",
        "state": "open",
        "number": 42967
    },
    {
        "title": "pass selected tree item context to view/title commands",
        "description": "I would like to have the selected context passed to view commands so that I can act on the selected node in the tree. for example, let's say I want to have a command in the Docker explorer Navigation area (next to where it says \"DOCKER\" on the sash) that runs the selected image in the tree.\r\n\r\n``` json\r\n      \"view/title\": [\r\n        {\r\n          \"command\": \"vscode-docker.explorer.run\",\r\n          \"when\": \"view == dockerExplorer\",\r\n          \"group\": \"navigation\"\r\n        }\r\n      ],\r\n```\r\n\r\nI would register my command:\r\n\r\n`vscode.commands.registerCommand('vscode-docker.explorer.run', (context?: any, selectedContext?: any[]) => dockerExplorerProvider.run(context, selectedContext));`\r\n\r\nAnd then in my command I can get the selected node(s) from the tree\r\n\r\n``` javascript\r\nbuild(context?: any): void {\r\n   if (selectedContext.length >0) {\r\n     // work on multi selected images\r\n   }\r\n  ...\r\n   if (context) {\r\n      // work on selected image\r\n   } else {\r\n      // pop a quick pick to list images\r\n   }\r\n   // ...\r\n}\r\n```\r\n",
        "createdAt": "2018-02-04 01:03:30",
        "state": "open",
        "number": 42903
    },
    {
        "title": "Have a history for recently edited editors",
        "description": "It seems the following 2 features are missing from vscode:\r\n\r\n1. a dedicated list for recently **edited** files, excluding the files opened only for readonly view\r\n2. recent **edit positions**, an action to jump back to recent cursor positions where changes were done, should support jumping through multiple files.\r\n\r\nWhen working on a project with lots of files, one might need to jump through many files, but only edit a few, the list of *recent files* could help but it would be great to have a dedicated action to list only **recently edited files**, and to navigate through them.\r\n\r\nAnd jumping back to previous edit positions allows one to be right back on the spot, immediately, to resume previous work when briefly interrupted for API lookup or similar things, thus it would be very helpful for one to be able to navigate through the places where modifications has been done recently.\r\n\r\nFor reference, such features already exist in IntelliJ IDEA, see: https://www.jetbrains.com/help/pycharm/navigating-to-recent-file.html\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.19.3\r\n- OS Version: macOS 10.13",
        "createdAt": "2018-02-03 12:04:06",
        "state": "open",
        "number": 42880
    },
    {
        "title": "Icon theme: hidesExplorerArrows is not applied to all trees",
        "description": "Steps to Reproduce:\r\n\r\n1. have an icon theme that sets `hidesExplorerArrows: true`\r\n2. run a search\r\n\r\n=> notice how the search uses twistie while the explorer does not\r\n\r\nNot sure about custom views (cc @sandy081)\r\n\r\n",
        "createdAt": "2018-02-02 06:59:49",
        "state": "open",
        "number": 42793
    },
    {
        "title": "[json] Automatically add required fields to object",
        "description": "Since the editor has access to the schema for the file it should be easy to make the object that is suggested by intellisense to add all the \"required\" fields.\r\n\r\nSo if my Schema was\r\na.json\r\n```json\r\n{\r\n    \"type\": \"object\",\r\n    \"required: [\r\n        \"id\"\r\n    ],\r\n    \"properties\": {\r\n        \"id: {\r\n            \"type\": \"string\"\r\n        }\r\n    }\r\n}\r\n```\r\nI would expect intellisense to suggest \r\n```json\r\n{ \"id\": \"$1\" }\r\n```\r\n\r\ninstead of just `{}`. So I would want anything that is required to become an autogenerated default snippet. Given my interactions with @aeschli this might be out of scope for the project.",
        "createdAt": "2018-02-02 03:35:03",
        "state": "open",
        "number": 42786
    },
    {
        "title": "Backspace at end of empty line doesn't delete whole line and go to end of above line",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.19.2\r\n- OS Version: W10LTSB\r\n\r\nSteps to Reproduce:\r\n\r\n1. Create a new line of a block of multi-line code like an opening div tag or JavaScript or PHP function, then hit Enter.\r\n2. If you have an indent, continue to step 3. If not, create an indent with Tab or 4 spaces (whatever your religion is).\r\n3. Hit the Backspace key; notice it merely removes an indent each time instead of deleting the whole line and putting your cursor at the end of the previous line like awesome JetBrains software does. Realize how many unnecessary keystrokes you'll now have to deal with (and Ctrl+Shift+Up-End each line is still a lot).\r\n4. Continue to use VS Code because nobody can afford to buy another JetBrains license for your new job.\r\n\r\nThis should be standard logic in all editors; there's zero functional or stylistic reason to want to just delete indents on an empty line with Backspace (unless there's too many indents there which is rare, or your editor auto-indented wrong), and even if for some Pan-like reason you need to use that regressive space, you can just use Ctrl+Home to delete the line then indent where you want (or Shift+arrow, or just arrow if you're a weirdo).\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2018-02-02 03:28:28",
        "state": "open",
        "number": 42785
    },
    {
        "title": "Extension Authoring - Access Configuration Property from Package.json",
        "description": "Is it possible to access settings defined in configuration in the package.json?\r\n\r\nI would like something like:\r\n```json\r\n    \"contributes\": {\r\n        \"jsonValidation\": [\r\n            {\r\n                \"fileMatch\": \"{{config.my.prop}}\",\r\n                \"url\": \"someSchema\"\r\n            }\r\n        ],\r\n        \"configuration\": {\r\n            \"title\": \"My Config\",\r\n            \"properties\": {\r\n                \"my.prop\": {\r\n                    \"type\": \"string\",\r\n                    \"default\": \"*.json\",\r\n                    \"description\": \"Something\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n```",
        "createdAt": "2018-02-02 02:38:34",
        "state": "open",
        "number": 42779
    },
    {
        "title": "[json] improve property suggestions with oneOf",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: Version 1.20.0-insider\r\n- OS Version: 10.13.3\r\n\r\nSteps to Reproduce:\r\n\r\n1. Use this JSON schema\r\n\r\n```json\r\n{\r\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r\n    \"type\": \"object\",\r\n    \"oneOf\": [\r\n        {\r\n            \"title\": \"Wrapper\",\r\n            \"type\": \"object\",\r\n            \"required\": [\r\n                \"asset\"\r\n            ],\r\n            \"properties\": {\r\n                \"asset\": {\r\n                    \"type\": \"object\"\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"title\": \"No Wrapper\",\r\n            \"type\": \"object\",\r\n            \"properties\": {\r\n                \"id\": {\r\n                    \"type\": \"string\"\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n2. Start writing JSON using this schema and type: \r\n\r\n```json\r\n{\r\n    \"\"\r\n}\r\n```\r\n\r\n3. Only id is suggested as an option, I expect both asset and id to be suggestions\r\n\r\nNOTE: if i make \"id\" also required I get the correct suggestions. \r\n\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes/No\r\nYes",
        "createdAt": "2018-02-01 18:41:33",
        "state": "open",
        "number": 42758
    },
    {
        "title": "Separate tab size and indent size",
        "description": "Visual Studio Code have not appear to have the ability to do the Tools->Options Tab settings of Visual Studio Professional where you can specify that tabs are 8 spaces but the indent size if 4? All our code uses that style and many other editors let you do this, but Visual Studio Code doesn't seem to support this. I've tried lots of things in Visual Studio Code but not found any combination of settings that work.\r\n\r\nUsing Visual Studio Code 1.19.3 (and also Visual Studio 2015 (and Professional 2012)).\r\n\r\nIn Visual Studio, setting tabs at 8 and spaces at 4 means (for a blank line):\r\n- Press tab key once, indent of 4 spaces.\r\n- Press tab again, indent of tab (removes 4 spaces, adds tab)\r\n- Press tab third time, indent is tab + 4 spaces.\r\n",
        "createdAt": "2018-02-01 14:42:21",
        "state": "open",
        "number": 42740
    },
    {
        "title": "Detect indentation when pasting into an empty file",
        "description": "When copying code to a new file, it would be great if the indentation detection was rerun after pasting.",
        "createdAt": "2018-02-01 14:13:31",
        "state": "open",
        "number": 42735
    },
    {
        "title": "Syntax highlight regex in find in file/s when regex is enabled",
        "description": "<!-- Do you have a question? Please ask it on https://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.19.3\r\n- OS Version: Ubuntu 16.04.3 x64\r\n\r\nIt would look nice if VS Code syntax highlighted regex in the find in file/s text fields when regex is enabled.\r\n",
        "createdAt": "2018-02-01 09:46:33",
        "state": "open",
        "number": 42715
    },
    {
        "title": "When find/replace could take long, show progress bar",
        "description": "Testing #42357\r\n\r\nWhen I do a find/replace for a word that occurs around 20k times, it takes 2-3 seconds, which is amazing. But still during that time the editor looks like it's stuck.\r\n\r\nThink would be better if we could show a progress bar when the operation takes more than 1 second.",
        "createdAt": "2018-01-31 20:00:41",
        "state": "open",
        "number": 42670
    },
    {
        "title": "Support workspace-level terminal.integrated.cwd in multi-root workspaces",
        "description": "",
        "createdAt": "2018-01-31 19:03:56",
        "state": "open",
        "number": 42661
    },
    {
        "title": "Introduce \"Go Back\" and \"Go Forward\" to navigate between recent edits",
        "description": "- VSCode Version: Code 1.19.3 (7c4205b5c6e52a53b81c69d2b2dc8a627abaa0ba, 2018-01-25T10:25:01.248Z)\r\n- OS Version: Darwin x64 16.4.0\r\n\r\nThe existing `Go Back` and `Go Forward` commands navigate between recent points where the cursor has been. It would be great if there was an addition to these commands to navigate only between points where edits have been made (ie. ignoring points where the cursor has been but not made an edit).\r\n\r\nI often find that I make an edit, then perform several pieces of code navigation, and then want to quickly jump back to my previous editing location. If I'm in the same file I usually do a quick undo and redo to move the cursor back to the previous editing position.",
        "createdAt": "2018-01-31 11:30:28",
        "state": "open",
        "number": 42617
    },
    {
        "title": "No keyboard friendly way to open multiple files in the current editor group",
        "description": "Testing #41473\r\n\r\n- Use multi select to select a few files\r\n- The context menu has option to `Open to Side`, but there is no way to open in the current editor group\r\n- Pressing Enter without opening the context menu opens the last file in the selection\r\n\r\nWhen `\"workbench.editor.enablePreview\": false`, I'd have expected pressing Enter to have opened all the selected files in the current editor group.\r\nSingle click or Enter on a file opens it, so shouldnt the multi-select follow the same?\r\n\r\nWe sure can drag the files to the current editor group, but thats not keyboard friendly\r\n",
        "createdAt": "2018-01-30 23:28:45",
        "state": "open",
        "number": 42573
    },
    {
        "title": "Support suppressing commit character from being inserted during completion",
        "description": "I have a completion provider that inserts parens when completing method calls, eg. `myFunc()`. Today I tried adding `(` as a commit character so that if I've typed `myFun` and press `(` then it'll still complete. However this results in `myFunc()()` because the completion text includes the parens, the commit character then gets added, and then the automatic closing paren.\r\n\r\nAlthough I could remove the parens from the completion, then they wouldn't be inserted if you hit `<enter>` either.\r\n\r\n@mjbvz suggested raising this as he may have had a similar issue with snippets in JS/TS.\r\n\r\nIs there a good workaround for this, or can the API be extended in some way to handle this?",
        "createdAt": "2018-01-30 21:03:59",
        "state": "open",
        "number": 42544
    },
    {
        "title": "Schema for scope-property in global snippet files",
        "description": "Testing #42330\r\n\r\nAdd diagnostics to the snippets file so that wrongly typed language ids in the scope field get shown as error",
        "createdAt": "2018-01-30 19:52:19",
        "state": "open",
        "number": 42537
    },
    {
        "title": "Extensions: \"group\" should provide intellisense to show valid groups to contribute menus to",
        "description": "![image](https://user-images.githubusercontent.com/900690/35570021-2f201ad8-05ce-11e8-8cdf-c7903449d14b.png)\r\n\r\n/cc @jrieken ",
        "createdAt": "2018-01-30 13:59:56",
        "state": "open",
        "number": 42475
    },
    {
        "title": "[folding] Allow folding block comment that starts in the middle of the line",
        "description": "An additional request on top of now-closed feature-request [11524](https://github.com/Microsoft/vscode/issues/11524). \r\n\r\nI sometimes like to write my block comments in this form: \r\n```\r\nlet someflag : boolean = false;/*\r\n    this flag does blah blah\r\n    blah blah blah blah*/\r\nlet somethingelse : string;\r\n```\r\n\r\nSo that folding that comment completely removes it from view outside of that trailing start marker. However, the implementation to feature-request 11524 does not detect this type of block comment and only seems to pick up on block comments started on their own new line. I am not sure how popular that style of commenting is, but it would help me a lot of it could be picked up by that feature. \r\n\r\nThanks.",
        "createdAt": "2018-01-29 02:07:08",
        "state": "open",
        "number": 42287
    },
    {
        "title": "Allow for smaller or larger tab height size",
        "description": "Height of tabs and tab container currently is fixed. It would be nice to allow for the option to have a smaller height size of tab container by possibly having an option to set it in settings. Maybe even offer option for larger as well. One might also be able to have the option of disabling file icons to provide even more of a xsmall option. All this provides more real estate to editor instead.\r\n\r\n**Current:**\r\n<img width=\"875\" alt=\"before\" src=\"https://user-images.githubusercontent.com/6380855/35474566-9bd7856a-0355-11e8-9fb3-b7ae986d1936.png\">\r\n\r\n**Quick modified version of a solution. Line height still needs to be adjusted to be centered though.**\r\n<img width=\"876\" alt=\"after\" src=\"https://user-images.githubusercontent.com/6380855/35474567-9fd87fde-0355-11e8-994a-bce7990de8db.png\">\r\n\r\n\r\n- VSCode Version: Latest\r\n- OS Version: Latest\r\n",
        "createdAt": "2018-01-27 17:32:40",
        "state": "open",
        "number": 42253
    },
    {
        "title": "Support assigning numeric value to \"editor.wrappingIndent\"",
        "description": "- VSCode Version: 1.19.3\r\n\r\n`editor.wrappingIndent` is currently supporting `\"none\"`, `\"same\"`, `\"indent\"`.\r\n\r\nThe problem with `\"same\"` is that it is difficult to know where the new line starts, and the problem with `\"indent\"` is that it is difficult to know where the new block starts. (Also, I don't like `\"none\"` \ud83d\ude1c)\r\n\r\nMany IDEs and editors support custom numeric value for wrapping indent.\r\nI hope this feature is also supported in Visual Studio Code.\r\n\r\n**Current:** `\"editor.wrappingIndent\": \"same\"`\r\n![Current](https://user-images.githubusercontent.com/2531397/35442210-c0ee2cbc-02e9-11e8-8678-9a85dcbf0795.png)\r\n\r\n**Desired:** `\"editor.wrappingIndent\": 1`\r\n![Desired](https://user-images.githubusercontent.com/2531397/35442235-ddcd1fb4-02e9-11e8-8973-ff836bedca8b.png)\r\n",
        "createdAt": "2018-01-26 13:26:33",
        "state": "open",
        "number": 42203
    },
    {
        "title": "Allow to set files.autoSave as language specific or folder setting",
        "description": "- VSCode Version: Code 1.19.3 (7c4205b5c6e52a53b81c69d2b2dc8a627abaa0ba, 2018-01-25T10:36:34.867Z)\r\n- OS Version: Windows_NT x64 10.0.16299\r\n- Extensions: \r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-styled-jsx|bla|0.2.2\r\nsimple-react-snippets|bur|1.1.1\r\narm|dan|0.1.2\r\nvscode-eslint|dba|1.4.4\r\nprettier-vscode|esb|1.1.2\r\nsublime-babel-vscode|jos|0.2.9\r\nGo|luk|0.6.73\r\npython|ms-|0.9.1\r\nmaterial-icon-theme|PKi|3.2.1\r\npython|tht|0.2.3\r\ntiger-vscode|yun|0.0.1\r\nJavaScriptSnippets|xab|1.5.0\r\n\r\n(1 theme extensions excluded)\r\n\r\n\r\n---\r\n\r\nSteps to Reproduce:\r\n\r\n1. Search for the \"Configure language specific settings\" command by pressing Ctrl+Shift+P\r\n2. Select any language\r\n3. In the configuration specific to that language, paste the line `\"files.autoSave\": \"afterDelay\"`\r\n4. VSCode reports \"Unknown editor configuration setting\", but the global setting for \"files.autoSave\" works\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes",
        "createdAt": "2018-01-25 22:44:11",
        "state": "open",
        "number": 42170
    },
    {
        "title": "Terminal shell, shellArgs and cwd settings should work in folder scope",
        "description": "Currently `terminal.integrated.cwd` only work when opening the folder directly instead of in workspace.\r\n\r\nI think it should support into mutli-root workspace.\r\n\r\ne.g. I have a workspace with two folders:\r\n\r\n```sh\r\nprojectA\r\n- .vscode/settings.json\r\n- a/b/c/d/e\r\n\r\nprojectB\r\n- .vscode/settings.json\r\n- x/y/z\r\n```\r\n\r\nI want the terminal to starts at `a/b/c/d/e` for projectA, and `x/y/z` at projectB.\r\n\r\nSince when we open a new terminal, it asks which project to open the terminal with,\r\nthe setting should be supported.\r\n\r\nAlternatively, we can specify it in the workspace setting:\r\n\r\n```js\r\n{\r\n  \"folders\": [\r\n    {\r\n      \"path\": \"...projectA\",\r\n      \"terminal.integrated.cwd\": \"a/b/c/d/e\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nbut honoring the settings.json in each folder is more idea because I don't have to specify the same thing in two different locations.\r\n\r\n\r\n",
        "createdAt": "2018-01-25 20:27:47",
        "state": "open",
        "number": 42165
    },
    {
        "title": "Allow 100% panel width and height",
        "description": "\r\nVSCode Version:VS code Insiders (1.20.0)\r\nOS Version: Windows &\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open VS code\r\n2.Open Integrated terminal window\r\n3. expand Explorer view\r\nresult: the Integrated terminal view shrinks to allow the explorer view to take the full height. \r\nexpected: the explorer view adjusts its height as (window_height - Integrated terminal Height). allowing the integrated terminal to have a 100% window width.\r\n\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n",
        "createdAt": "2018-01-25 11:34:49",
        "state": "open",
        "number": 42149
    },
    {
        "title": "Path abbreviation relative to project folders",
        "description": "Very long filenames have display issues: #10941, #33068, #20598, #6993. My own problem is that they get clipped in the quick file search (cmd+P). E.g. I cannot tell if foo.ts is under tests/ or src/. Sometimes I cannot even tell which workspace folder it's in. This is even worse when I've loaded a remote folder that has a long hostname.\r\n\r\nI have a suggestion on how to abbreviate these paths: skip the chunk of path leading up to the workspace folder name.\r\n\r\nFor example, if I have loaded folder /a/b/c/d/e/f/g/foo, then /a/b/c/d/e/f/g/foo/tests/foo.c would be abbreviated as .../**foo**/tests/foo.c or **foo**/tests/foo.c.\r\n\r\nIn general, scheme://hostname/[in-between-path]/project-folder/[path-to-file] would be abbreviated as scheme://hostname/.../**project-folder**/[path-to-file], or **project-folder**/[path-to-file] (at least when the path is local). Bonus points if you render project-folder with emphasis.",
        "createdAt": "2018-01-24 15:41:30",
        "state": "open",
        "number": 42101
    },
    {
        "title": "Drag and drop outside content",
        "description": "Hi!\r\n\r\nThere's a feature important to me that is missing: to drag and drop text from other apps.\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.19.2\r\n- OS Version: MacOS 10.13.2\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open the browser\r\n2. Select some text\r\n3. Drag and drop the selected text into editor\r\n\r\nExpected behavior:\r\n\r\n3. Drag it until the cursor reaches the desired position\r\n4. Drop the content\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: I couldn't run it this way on my mac.\r\n\r\nThank you!",
        "createdAt": "2018-01-24 13:20:41",
        "state": "open",
        "number": 42094
    },
    {
        "title": "Support reading/writing chunks in remote fs",
        "description": "This is a follow up from #32503 where `IFileService.updateContent()` now accepts a `ITextSnapshot` to prevent loading the entire buffer into memory. I left a TODO [here](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/services/files/electron-browser/remoteFileService.ts#L366) to use `ITextSnapshot` directly and not the current fallback `snapshotToString`",
        "createdAt": "2018-01-22 17:23:18",
        "state": "open",
        "number": 41985
    },
    {
        "title": "Provide API to access and change editor tab labels",
        "description": "Feature Request\r\n\r\nThe Atom has the ability to customize the tabs, it's so powerful for some requirements. For example, there is an extension [nice-index](https://github.com/joshwcomeau/nice-index) in Atom that could be able to rename tabs of many opened editors have same name `index.js`, rename them to the names of their parent folder.\r\n\r\n![image](https://user-images.githubusercontent.com/10795207/35185156-a959e6b2-fe3a-11e7-9e33-70b541dc4e14.png)\r\n\r\n![image](https://user-images.githubusercontent.com/10795207/35185159-b852ce68-fe3a-11e7-8fda-6c4a41fff04a.png)\r\n\r\nIt's very useful that if we could do so. \r\n\r\n@bpasero I got it that the feature requested by #32836 will not be considered in the first half year of 2018. I think my feature request is very similar with that, so may I ask you when the ability to customize tabs in VSC would be added into the roadmap ?\r\n\r\nI was excited when I start to think how can I implement a extension like `nice-index` in VSC, but after I involved in the documents about customizing a VSC extension, I just found that I can not achieve this. I hope that you could consider this feature request, thanks for all of your great works ~ \ud83d\ude4f",
        "createdAt": "2018-01-20 15:33:03",
        "state": "open",
        "number": 41909
    },
    {
        "title": "Allow to \"Scope to this\" in explorer",
        "description": "I'd like to have the \"scope\" feature in the tree view to \"isolate\" a directory in order to have a \"cleaner\" view. For example, if my project root directory has 2 main sub-directories: \"public\" and \"admin\":\r\n\r\n      main-dir\r\n\r\n          \\___ admin\r\n\r\n          \\___ public\r\n\r\n\r\n and I want to work only to the \"public\" directory I'd right-click the \"public\" directory in the tree view and choose \"Scope to this\" and then the tree view would show only the \"public\" directory. ",
        "createdAt": "2018-01-19 10:15:55",
        "state": "open",
        "number": 41860
    },
    {
        "title": "Simplify --goto to open file at specific line and column without --goto",
        "description": "At the moment files can be opened at a specific line and column like this:\r\n\r\n`code --goto src/app/pages/main.tsx:24:9`\r\n\r\nWhy not omit `--goto` like Atom does it:\r\n\r\n`atom src/app/pages/main.tsx:24:9`\r\n\r\nSee: https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_command-line\r\n\r\nRelated tickets:\r\n[Simplify --goto's usage](https://github.com/Microsoft/vscode/issues/3567)\r\n[Opening a file from command line with line number (--goto) is broken](https://github.com/Microsoft/vscode/issues/39891)\r\n",
        "createdAt": "2018-01-19 09:51:03",
        "state": "open",
        "number": 41858
    },
    {
        "title": "Add option to ignore all notification messages from an extension",
        "description": "Sometimes a plugin is broken but you don't want to spend the time to dig into it. It would be great if we could disable notifications from popping up with a user preference setting.",
        "createdAt": "2018-01-17 19:27:39",
        "state": "open",
        "number": 41767
    },
    {
        "title": "Allow me to disable project-wide auto-save when running a build task",
        "description": "- VSCode Version: 1.19.2\r\n- OS Version: Windows 10\r\n\r\nI have a large project with about ten sub-project folders (some TypeScript, some JavaScript) and often have numerous files from different sub-projects open in various states of non-completion. I have a few tasks configured for building each of the TypeScript projects when I need to. I'll then make an edit to one of those projects and want to build it so that it becomes available to the other projects, but the act of calling that build task causes all open files to be saved, regardless of whether they're relevant to the build, or whether I actually wanted to save them yet.\r\n\r\nThe main place where this causes an issue is in projects where I'm running webpack-dev-server (or some other watch process), which reloads the page when it detects changes. I'll be in the process of writing some JavaScript code and realise I need a small change to one of my TypeScript projects in order to complete my edits. If I save prematurely, my webpack project will reload and display errors. VS Code's hot-exit feature keeps my unsaved code safe for the moment, so declining to save just yet is fine. I want to be able to modify and build the relevant TypeScript sub-project and then continue the edits I was making to my webpack project, and *then* hit save when I'm ready. Unfortunately building the TypeScript project forces all files across the entire project to save, which causes my local dev server to reload the page and display errors before I was able to complete my changes.\r\n\r\nI have looked for a setting related to this, and all I can find is the general auto-save setting, which doesn't seem to be related to build-related auto-saving.",
        "createdAt": "2018-01-17 18:32:05",
        "state": "open",
        "number": 41764
    },
    {
        "title": "Feature Request: Contribute commands with additional arguments",
        "description": "Hello, I'm creating an extension to provide easily accessible documentation shortcuts from the command palette in the editor. Currently it does not seem possible to do something like this (where `otherArg` would be an arbitrary argument in package.json):\r\n```\r\n    \"contributes\": {\r\n        \"commands\": [\r\n            {\r\n                \"command\": \"extension.doSomething\",\r\n                \"title\": \"Example Title\",\r\n                \"otherArg\": \"some other argument\"\r\n            }\r\n        ]\r\n    },\r\n```\r\n\r\nI see that a similar question has been asked here https://github.com/Microsoft/vscode/issues/26436 and also in a resulting (unanswered) SO post here https://stackoverflow.com/questions/43909741/can-i-pass-arguments-to-command-in-contributes-block.\r\n\r\nIs this a feature that would be considered? If not, how might this type of thing be accomplished from the extension developer's perspective? I see there is an `args` parameter for command handler functions, but I'm not seeing a way to call `executeCommand` from the package.json file. \r\n\r\nFor reference, here is a screenshot of how my equivalent package looks in the command palette in sublime text:\r\n![image](https://user-images.githubusercontent.com/575421/35001510-27321b58-faa4-11e7-9f4b-c26b05408730.png)\r\n\r\nThanks!\r\n",
        "createdAt": "2018-01-16 17:09:36",
        "state": "open",
        "number": 41692
    },
    {
        "title": "New \"pipe into code\" feature should open in Untitled file",
        "description": "Love the new \"pipe into code\" feature!\r\n\r\nThe scenario I was messing around with was like...\r\n```\r\ncurl https://some-cool-raw-script.com | code -\r\n```\r\n\r\nactual example that downloads a [PowerShell script from gist](https://gist.github.com/tylerl0706/a1f2e0c9f0219051a06fa5c409307846):\r\n```\r\ncurl https://gist.githubusercontent.com/tylerl0706/a1f2e0c9f0219051a06fa5c409307846/raw/a7199adc2a3150d886518361feb8ec27958417dc/TweetScript.psm1 | code-insiders -\r\n```\r\n\r\nAfter I run that, I'd like to be able to easily change the language to the language of the script. This is possible, but some debuggers are not able to handle the fact that you have `.txt` as an extension but the language set in code to whatever language... for example, a PowerShell script with `.txt` as the file extension but PowerShell set as the language.\r\n\r\nHowever, what I have noticed is that debuggers often support Untitled files that have the language set in code.\r\n\r\nIf the \"pipe into code\" piped the text into an Untitled file, rather than a `.txt` debuggers would probably be happier \ud83d\ude03 \r\n\r\nAgain, thanks for the awesome feature!\r\n",
        "createdAt": "2018-01-15 09:55:19",
        "state": "open",
        "number": 41614
    },
    {
        "title": "Can we get a few more pixels for clicking the cursor at the beginning of a line?",
        "description": "\r\nHello!\r\n\r\nI'm routinely frustrated when trying to click on the beginning of a line of text to place the cursor or start a selection - I aim for it but it is very narrow (first half of the first character) and I miss and either hit the code-folding vertical or I get text-column two instead.   Can that be made a little wider please?\r\n\r\n![image](https://user-images.githubusercontent.com/17498172/34908005-b51c6f4a-f856-11e7-88a4-ca4360f28edf.png)\r\n\r\nThanks!",
        "createdAt": "2018-01-13 16:43:00",
        "state": "open",
        "number": 41574
    },
    {
        "title": "Provide update notifications for portable mode",
        "description": "If you are using VS Code in portable mode, there is no convenient method to get a notification about an update:\r\n\r\n- no notification / check in the app itself\r\n- no RSS feed with releases or something similar (at least I haven't found anything)",
        "createdAt": "2018-01-11 13:17:04",
        "state": "open",
        "number": 41470
    },
    {
        "title": "Add \"Last Updated\" to Extensions list",
        "description": "I was looking at an extension pack today and I wasn't sure if it was the one I needed - specifically it was one that was mentioned by someone on Twitter as being updated today. I noticed then that when VSC renders extension/pack info, it doesn't tell you when the extension was last updated. This seems like useful information on par w/ the number of downloads and stars. ",
        "createdAt": "2018-01-10 14:53:29",
        "state": "open",
        "number": 41404
    },
    {
        "title": "Sort folders/projects in multi-root workspace",
        "description": "Could the ability be added to some way sort the list of folders/projects that are in a multi-root workspace? From what it seems, they only stay arranged in the order in which they are added.",
        "createdAt": "2018-01-09 16:10:01",
        "state": "open",
        "number": 41351
    },
    {
        "title": "Heterogeneous DPI support on Linux",
        "description": "- VSCode Version: Code 1.19.1 (0759f77bb8d86658bc935a10a64f6182c5a1eeba, 2017-12-19T09:41:01.414Z)\r\n- OS Version: Linux x64 4.14.11-300.fc27.x86_64\r\n\r\nSteps to Reproduce:\r\n\r\n1. A Wayland desktop session on a multi-display setup with heterogeneous DPI scaling. Mine is a HiDPI laptop display scaled at 200% and an external monitor using 100% scaling, resulting in xwayland scaled at 100% on all displays. gnome-shell is the compositor.\r\n2. Launch Visual Studio Code.\r\n3. Move the IDE window between the displays.\r\n\r\nLike any other X11 application, Visual Studio Code cannot adapt to heterogeneous scaling.\r\nWayland support, discussed in #1739, is needed to enable this. I feel that opening a new issue is justified by the problem described, which was not mentioned by the commenters on that issue.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes",
        "createdAt": "2018-01-09 15:08:44",
        "state": "open",
        "number": 41345
    },
    {
        "title": "editor.multiCursorModifier is too restrictive for users on Kubuntu as ALT is taken over by KWIN.",
        "description": "<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.19.1\r\n- OS Version: Kubuntu 17.10\r\n\r\nUnfortunately when it comes to **editor.multiCursorModifier** as well as click to go through to definition there is a slight but on Kubuntu.\r\n\r\nThe problem occurs that you cannot exactly use both. \r\n\r\nSay if I wanted to have ctrl + click to go to definition which most editors use that would be fine. But it means that the only other option for **editor.multiCursorModifier** is ALT.\r\n\r\nThe problem here is that ALT in Kubuntu is taken over by KWin and it is used to move a window. You can click anywhere on the application and not just on the title bar. So these two functionalities are used in conjunction even though CTRL is really the only option.\r\n\r\nIs there a way to set the go to definition to \"shift + click\" ? Or \"shift + ctrlCmd\" as it is rather limited. \r\n\r\nSteps to Reproduce:\r\n\r\n1. Install Kubuntu\r\n2. Try ALT and Click on a definition to see if you can click through\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes/No\r\n\r\nYes.",
        "createdAt": "2018-01-09 07:33:30",
        "state": "open",
        "number": 41329
    },
    {
        "title": "[xml] add on enter rules",
        "description": "- VSCode Version: Code 1.19.1 (0759f77bb8d86658bc935a10a64f6182c5a1eeba, 2017-12-19T09:46:23.884Z)\r\n- OS Version: Windows_NT x64 10.0.16299\r\n- Extensions: \r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nxml|Dot|1.9.2\r\nauto-close-tag|for|0.5.5\r\nauto-complete-tag|for|0.0.2\r\nauto-rename-tag|for|0.0.15\r\nbeautify|Hoo|1.1.1\r\ncsharp|ms-|1.13.1\r\nqub-xml-vscode|qub|1.2.8\r\n\r\n\r\n\r\n---\r\n\r\nSteps to Reproduce:\r\n\r\n1. Automatic indentation does not work when writing XML(appending child).\r\n2. Automatic indentation works when writing HTML.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes/No",
        "createdAt": "2018-01-09 02:18:08",
        "state": "open",
        "number": 41320
    },
    {
        "title": "Add an optional configurable toolbar below the menu",
        "description": "Whole my life I used ide where there was a customizable toolbar. I starded to use vscode and stopped to use it after one day. It is impossible to remember all shorcuts. In any other popular ide you can put any menu item on toolbar and use it from time to time.\r\n\r\n**visual vtudio:**\r\n![screen010](https://user-images.githubusercontent.com/1822063/34688686-a1e85dce-f4bb-11e7-9e6b-18f1e5d8bbd8.png)\r\n\r\n**idea:**\r\n![screen013](https://user-images.githubusercontent.com/1822063/34688708-ad8a2d9c-f4bb-11e7-803d-9d9d392ff648.png)\r\n\r\n**eclipse:**\r\n![screen015](https://user-images.githubusercontent.com/1822063/34688749-d3b8d69e-f4bb-11e7-84a5-9ca616d19c41.png)\r\n\r\n**netbeans:**\r\n![screen014](https://user-images.githubusercontent.com/1822063/34688729-c364237a-f4bb-11e7-95f0-e635d19b9642.png)\r\n\r\n**code blocks:**\r\n![screen012](https://user-images.githubusercontent.com/1822063/34688805-ff927a18-f4bb-11e7-8f42-7baf93c8b215.png)\r\n\r\n**komodo ide:**\r\n![screen016](https://user-images.githubusercontent.com/1822063/34688767-e4a208f4-f4bb-11e7-8b95-71f24091def2.png)\r\n\r\n**atom:**\r\n![screen](https://i.github-camo.com/8387595328108e1dce2b658a6827140047e286e9/687474703a2f2f636c2e6c792f696d6167652f3277307533633178314b33572f53637265656e73686f742d323031352d30342d32312d31362e34362e34392e706e67)\r\n\r\n**notepad++:**\r\n![notepad++](https://user-images.githubusercontent.com/1822063/80743463-a8c8bc80-8b25-11ea-859c-67ce80e8dd06.png)\r\n\r\n**gedit:**\r\n![gedit](https://user-images.githubusercontent.com/1822063/80744149-e5e17e80-8b26-11ea-9afc-9503808d9564.png)\r\n\r\n**github:**\r\n![github](https://user-images.githubusercontent.com/1822063/80748470-a5393380-8b2d-11ea-97de-6846daa1674a.png)\r\n\r\nWTF MS? VS code? VS users?\r\n\r\nDon't tag it \"out-of-scope\" as you did before with similar requests. Even simple editors have toolbar.\r\nIt isn't advanced feature it's basic feature for most people.\r\nUsing ide without toolbar is not user friendly for most users. It is vim way.\r\n\r\n**People really need it like \"exit from vim\":**\r\n![vim](https://user-images.githubusercontent.com/1822063/80748203-39ef6180-8b2d-11ea-942a-9e3d9ee30b4a.png)\r\n\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n\r\n**FAQ FOR PEOPLE WHO ARE AGAINST THE TOOLBAR**:\r\n\r\n>I don't want to use toolbar so I am against that feature-request.\r\n\r\nIt is not a problem \"it is optional toolbar\". If you don't want you can don't use it.\r\n\r\n>If you want it so why don't you form a team and submit a PR?\r\n\r\nPeople have offered, go look at the many other bug reports made on the same issue. MS has said they would likely reject it. They don't even want to add hooks to make a plugin possible. So it's not a resource issue, it's an ideological one.\r\n\r\n![isidorn](https://user-images.githubusercontent.com/1822063/80746062-ef201a80-8b29-11ea-87ac-369040264a24.png)\r\n\r\n**Temporary workaround by @GorvGoyl:**\r\n>It seems like it won't be the high priority feature in foreseeable future so I made this extension which adds handy buttons like beautify, list files, undo, redo, save all etc to the editor menu bar in the VSCode. [Shortcut Menu Bar](https://marketplace.visualstudio.com/items?itemName=jerrygoyal.shortcut-menu-bar)\r\n![toolbar](https://user-images.githubusercontent.com/7106086/93354639-d905c300-f85a-11ea-86fe-d0ce79922e69.png)",
        "createdAt": "2018-01-08 19:54:14",
        "state": "open",
        "number": 41309
    },
    {
        "title": "Allow to open the same file in multiple editors of the same group",
        "description": "I wish I could open the same file in multiple tabs. Basically, I want the same functionality as cmd+2 gives me, but without creating a split.\r\n\r\nIn another editor that I use, my workflow consists of this rather than splits or bookmarks. I \"duplicate\" the current view, scroll to the other place in the file that I want to inspect and to \"go back\", I just close the tab again. Once you are used to it, it's a very nice workflow.\r\n\r\nNow, as far as I can tell, this is not really possible? I'll gladly create an extension if possible. I guess I could allow opening files with an additional query-parameter or something, effectively showing two copies of the same file. However, I worry that this would give me constant \"this file was changed outside\" dialogs which is not what I want -- I want the buffers synchronized the way splits are. \r\n\r\nCan someone help me in the right direction?\r\n",
        "createdAt": "2018-01-08 14:41:02",
        "state": "open",
        "number": 41289
    },
    {
        "title": "duplicating line produces extra duplicate lines",
        "description": "- VSCode Version: Code 1.19.1 (0759f77bb8d86658bc935a10a64f6182c5a1eeba, 2017-12-19T09:46:23.884Z)\r\n- OS Version: Windows_NT x64 10.0.16299\r\n- Extensions: \r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\npolymer-snippets|chi|1.0.1\r\nlanguage-polymer|jon|1.0.3\r\npolymer-ide|pol|0.6.0\r\nvscode-icons|rob|7.19.0\r\n\r\n\r\n\r\n---\r\n\r\nSteps to Reproduce:\r\n\r\n1. On Windows, select multiple portions of the same line \r\n2. Use the \"Alt+Shift+Down\" arrow combination to duplicate a line\r\n3. it creates 2 new lines that are the same as the original.\r\n\r\nlets assume I have an import line of code, that the file path is like `elements/paper-item/paper-item.html`. and I want to import a new item, I would select both paper-item words, create a new line, and it would keep my cursor location so I could start typing. This is how it currently works, however it adds an extra import line.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes/No",
        "createdAt": "2018-01-08 11:16:11",
        "state": "open",
        "number": 41277
    },
    {
        "title": "Group some common settings for languages",
        "description": "Can anyone please explain why we can't group some common settings for languages like this:\r\n```\r\n  \"[c,cpp]\": {\r\n    \"editor.formatOnSave\": true\r\n  }\r\n```\r\n\r\nThanks!",
        "createdAt": "2018-01-05 23:29:41",
        "state": "open",
        "number": 41209
    },
    {
        "title": "[html] code completion replaces text after cursor",
        "description": "- VSCode Version: 1.19.1\r\n- OS Version: MacOS Sierra \r\n\r\nSteps to Reproduce:\r\n\r\n1. Put some html in and html page with some text  `<div>Hello my name is ....</div>`\r\n2. Then before hello type a tag (ie strong \"<str\" ) \r\n3. Hit tab to have it expand strong. \r\n4. Notice that hello is consumed. \r\n\r\nHere is a video that shows the bug in action. \r\n\r\nhttps://dev-dynactivesoftware.appspot.com/?blobWSK=ahdzfmRldi1keW5hY3RpdmVzb2Z0d2FyZXKkAgsSEUJsb2JzdG9yZU1ldGFkYXRhIowCQU1JZnY5NVpoMndHX0RzVVJyaFJObFN2OV9pOWlBR2dsQm5BMHhzNWRFT1ZELS04Rmd2SnI2Mk52N0VESFI4S0Z2MnhZLUI1RFp0NGFUT3pOa3BvUnpFRUR0MHJFQy1PQ0JlQkRlalFYVmdZR0poV1liVUJfWDhXTUpjYmRJYXVVckFBTG1BZjhJODM1NFBLVDhuY0NDOWdkb05HN0F5NkZhVm9XT3hUcThVakVUNHZZUERIWTVHcHI3LXZUZjE2Y2Ixay02aVNtQXdYN0EybkdfNmF3aTUyajlxRm9wcDU4eUtodHo3dEVEd0FKdXFsckE5UFVwUGZsX3k3UVE0TTRPZnJKWnZXTHd0RwyiAQZkcy5jbXM\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes/No\r\n\r\nI didn't check because I couldn't figure out how to do this. I opened the command typed the suggested line and I got. \r\n\r\n-bash: code: command not found\r\n\r\n\r\n  ",
        "createdAt": "2018-01-05 22:24:06",
        "state": "open",
        "number": 41206
    },
    {
        "title": "[html] extract class name to css file",
        "description": "Steps to Reproduce:\r\n\r\n1. click &lt;html&gt; tag;\r\n2. light icon showing, click to show extract menu: \r\n    menuitem: extract class name to style tag;\r\n    menuitem: extract class name to css file;\r\n\r\ndemo:\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n   <div class=\"a\">\r\n      <div class=\"a-1\">\r\n      </div>\r\n   </div>\r\n   <div class=\"b\">\r\n       <div class=\"b-1\">\r\n       </div>\r\n   </div>\r\n</body>\r\n</html>\r\n```\r\n\r\nextract result:\r\n```\r\n.a {\r\n}\r\n.a-1 {\r\n}\r\n\r\n.b {\r\n}\r\n.b-1 {\r\n}\r\n```",
        "createdAt": "2018-01-04 08:13:03",
        "state": "open",
        "number": 41134
    },
    {
        "title": "when writing a new CompletionItemProvider it is very hard debug as to why the item is not being offered",
        "description": "Whenever I try to write a new CompletionItemProvider, I always have to bang my head against the table many times because there are many rules which hide your item from the completion menu.\r\n\r\nI get that these rules are needed, but it is often frustrating for a developer to just see his completion items disappear. Could we get some kind of `debug` mode for CompletionItemProvider so that we can more easily see what is going on with our Completion items?\r\n\r\nIt would be great to have it something like:\r\n\r\n```javascript\r\nclass CompletionItemProvider {\r\n  static debug = true\r\n  provideCompletionItems(document, position: Position, token) {}\r\n}\r\n```\r\n\r\nthen VSCode would log all reasons why any completion item from this provider was hidden.\r\nCould we have this feature please?",
        "createdAt": "2018-01-02 09:22:28",
        "state": "open",
        "number": 41022
    },
    {
        "title": "Don't use denying settings texts - Always use \"approving\" names",
        "description": "_\"Denying options ain't no good\"_ ... Many options in Visual Studio Code settings force the developer to double-deny his choice:\r\n\r\n    \"Don't use ...\" : True\r\n    \"Don't vote for ...\" : False\r\n    \"Disable logging ...\": False\r\n\r\n_\"I didn't say I didn't do it\"_ is so much more awkward than just writing: _\"I said I did it\"_.\r\n\r\nEstablish a coding guidline to refrain from using denying options. I.e.: change all options from \"Don't\" to \"Do\":\r\n\r\n    \"Use ...\" : False\r\n    \"Vote for ...\" : True\r\n    \"Enable logging ...\": True\r\n\r\nSee also [here](https://visualstudio.uservoice.com/forums/121579-visual-studio-ide/suggestions/32776153-don-t-use-denying-option-texts-always-use-appro).",
        "createdAt": "2017-12-31 13:49:15",
        "state": "open",
        "number": 40987
    },
    {
        "title": "Suggestion: Use RegEx classes in \"editor.wordSeparators\" settings",
        "description": "It looks like the settings string for \"editor.wordSeparators\" contains (almost) any punctuation character.\r\n\r\nWouldn't it make more sense to introduce the ability to utilize [regular expression character classes](https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions) for this purpose?",
        "createdAt": "2017-12-31 13:02:49",
        "state": "open",
        "number": 40983
    },
    {
        "title": "Dictation support for visual studio code",
        "description": "Hi, \r\n\r\nI wish to lodge a request to have VS Code updated so that it can accept dictation input. Currently, if you try to dictate into VS Code using software like Dragon (the industry standard), nothing happens. \r\n\r\nThis is important to fix for people like myself who have long term hand injuries and are trying to figure out ways to program by voice. People have managed programming by voice in these situations, but the solutions are difficult to develop and not pretty. \r\n\r\nTo be clear, I'm not asking that you develop voice commands to input symbols by voice, only that the text boxes in VS Code (and/or Visual Studio) can accept dictation input by Dragon (preferably with full 'select-and-say' support). Voice programmers can take care of the rest. \r\n\r\nDoes it have to be Dragon? Not necessarily. It could be any local speech recognition engine with good accuracy (I'd argue that the decade old Windows Voice Recognition isn't quite there yet) and the ability to write custom voice commands. \r\n\r\nWhile there are few people using such technologies today, it is a subject of interest to all programmers, because they may need it in the future. \r\n\r\n- Jole \r\n\r\n",
        "createdAt": "2017-12-31 02:43:36",
        "state": "open",
        "number": 40976
    },
    {
        "title": "Project minification on save (support on save execution)",
        "description": " It would be nice to have built-in project minification feature like the one Brackets has :-)\r\n\r\n\u0141ukasz D\u0105browski\r\nSoftware Engineer\r\n",
        "createdAt": "2017-12-30 21:16:59",
        "state": "open",
        "number": 40970
    },
    {
        "title": "NodeJS debugger doesn't properly handle launched apps that restart on file change.",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\nI've included additional details here Microsoft/vscode-recipes#52\r\n\r\nI assume a property would need to be added to the node launch config to allow this to work correctly, and that this property doesn't already exit.\r\n\r\nI did attempt to use `restart: true`, but that didn't correct anything.\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.91.1\r\n- OS Version: 10.12.6\r\n\r\nSteps to Reproduce:\r\n\r\n1. Clone the sample project `git clone https://github.com/SteelPhase/vscode-meteor-test vscode-meteor-test`\r\n2. CD into the directory `cd vscode-meteor-test`\r\n3. install npm dependencies `meteor npm install`\r\n4. open vscode without extentions `code --disable-extensions .`\r\n5. launch `Meteor: Node` launch config\r\n6. wait util meteor launch, and debugger attaches\r\n7. modify `!! Change me !!` on line 6 of server/main.js to any value\r\n8. save file\r\n9. wait for `=> Server modified -- restarting...`\r\n10. debugger will disconnect, and in doing so kills the npm, and meteor node processes\r\n\r\nExpected end result:\r\nMeteor should restart as usual with the file change, and either the node debugger should detach, or reattach as the debugger becomes available again.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes\r\n",
        "createdAt": "2017-12-28 21:49:49",
        "state": "open",
        "number": 40917
    },
    {
        "title": "Setting for Selection Dragging Scroll Speed",
        "description": "As someone else [documented on Stack Overflow](https://stackoverflow.com/questions/47767227/visual-studio-code-dragging-to-highlight-text-moves-way-too-fast-at-edges), when attempting to highlight code and scrolling above/below the current view, the scroll speed makes it impossible to accurately highlight the desired lines of code.\r\n\r\nThe expected behavior is a more controlled speed, similar to many other editors.\r\n",
        "createdAt": "2017-12-28 08:19:12",
        "state": "open",
        "number": 40890
    },
    {
        "title": "Support to call system-installed URL handlers",
        "description": "- VSCode Version: Code 1.19.1 (0759f77bb8d86658bc935a10a64f6182c5a1eeba, 2017-12-19T09:35:14.671Z)\r\n- OS Version: Darwin x64 17.3.0\r\n- Extensions: \r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nerb|Cra|0.0.1\r\nxml|Dot|1.9.2\r\nbeautify|Hoo|1.1.1\r\nvscode-docker|Pet|0.0.22\r\nprettier-eslint-vscode|Rob|0.7.3\r\nvscode-wakatime|Wak|1.1.22\r\nvagrant|bbe|0.5.0\r\nvscode-eslint|dba|1.4.3\r\ngithistory|don|0.2.3\r\ntslint|eg2|1.0.24\r\nvscode-great-icons|emm|2.1.22\r\ngit-project-manager|fel|1.4.0\r\nfile-icons|fil|1.0.7\r\nvscode-ghc-mod|hoo|1.2.0\r\ncsharpextensions|jch|1.3.0\r\nlanguage-haskell|jus|2.4.0\r\ndocomment|k--|0.0.17\r\nnet-core-project-manager|ksu|0.3.6\r\ncoffeelinter|lky|1.2.0\r\nVS-code-vagrantfile|mar|0.0.7\r\ndotenv|mik|1.0.0\r\nruby-rubocop|mis|0.5.0\r\nprettify-json|moh|0.0.3\r\npython|ms-|0.9.1\r\nazure-account|ms-|0.2.2\r\ncsharp|ms-|1.13.1\r\nPowerShell|ms-|1.5.1\r\nadvanced-new-file|pat|1.1.0\r\nRuby|reb|0.15.0\r\njava|red|0.16.0\r\nrust|rus|0.3.2\r\nfinal-newline|sam|0.3.2\r\nRustyCode|sav|0.19.1\r\nvscode-nginx|sha|0.4.1\r\ntrailing-spaces|sha|0.2.11\r\ncode-spell-checker|str|1.6.2\r\nvscode-gfm-preview|tom|0.1.2\r\nvscode-java-debug|vsc|0.5.0\r\nvscode-java-pack|vsc|0.2.0\r\ngitblame|wad|2.2.0\r\nmarkdown-pdf|yza|0.1.7\r\n\r\n(4 theme extensions excluded)\r\n\r\n## Steps to Reproduce:\r\n\r\n1. Cmd-click on a \"onepassword\" link.\r\n2. You get an error as above. Full stack trace below:\r\n\r\n```\r\n[76132:1227/095005.696199:INFO:CONSOLE(38)] \"[uncaught exception]: ENOPRO: no provider for onepassword://search/7B761EB044694029AD8E0CE1559EBE89\", source: file:///Volumes/extra/git/3rd-party/vscode/out/vs/workbench/electron-browser/bootstrap/index.js (38)\r\n[76132:1227/095005.696267:INFO:CONSOLE(41)] \"ENOPRO: no provider for onepassword://search/7B761EB044694029AD8E0CE1559EBE89\r\n    at file:///Volumes/extra/git/3rd-party/vscode/out/vs/workbench/services/files/electron-browser/remoteFileService.js:112:31\r\n    at CompletePromise_ctor.CompletePromise_then [as then] (file:///Volumes/extra/git/3rd-party/vscode/out/vs/base/common/winjs.base.raw.js:1566:49)\r\n    at RemoteFileService._withProvider (file:///Volumes/extra/git/3rd-party/vscode/out/vs/workbench/services/files/electron-browser/remoteFileService.js:109:100)\r\n    at RemoteFileService._doResolveContent (file:///Volumes/extra/git/3rd-party/vscode/out/vs/workbench/services/files/electron-browser/remoteFileService.js:204:25)\r\n    at RemoteFileService.resolveStreamContent (file:///Volumes/extra/git/3rd-party/vscode/out/vs/workbench/services/files/electron-browser/remoteFileService.js:198:29)\r\n    at TextFileService.resolveTextContent (file:///Volumes/extra/git/3rd-party/vscode/out/vs/workbench/services/textfile/electron-browser/textFileService.js:36:37)\r\n    at TextFileEditorModel.loadFromFile (file:///Volumes/extra/git/3rd-party/vscode/out/vs/workbench/services/textfile/common/textFileEditorModel.js:252:18)\r\n    at file:///Volumes/extra/git/3rd-party/vscode/out/vs/workbench/services/textfile/common/textFileEditorModel.js:237:30\r\n    at CompletePromise_ctor.CompletePromise_then [as then] (file:///Volumes/extra/git/3rd-party/vscode/out/vs/base/common/winjs.base.raw.js:1566:49)\r\n    at TextFileEditorModel.loadWithBackup (file:///Volumes/extra/git/3rd-party/vscode/out/vs/workbench/services/textfile/common/textFileEditorModel.js:219:77)\", source: file:///Volumes/extra/git/3rd-party/vscode/out/vs/workbench/electron-browser/bootstrap/index.js (41)\r\n```\r\n\r\n### More details\r\n\r\n[1Password](https://1password.com/) is a popular password manager for Windows, Mac and others.\r\n\r\nThey have their own URL scheme which has the format onepassword://search/uuid, where the uuid is a UUID-resembling identifier identifing an individual password entry. Being able to link to these is a very useful feature when working together in a team.\r\n\r\nThese URLs get registered on the system (macOS in this case) so copy-pasting an URL like this into Spotlight _works_, it does the right thing. But Cmd-clicking such a link in vscode does not.\r\n\r\nI debugged this very briefly in a local vscode checkout, and concluded that this scheme (`onepassword:`) is seemingly not registered with the `RemoteFileService` class. How to fix this is beyond my knowledge of the VSCode internals though, I was hoping to submit a PR for this but I don't  really know where to start.\r\n\r\nCould it be that VSCode does not pick up the system-registered URLs as expected?\r\n\r\nIf someone reading this knows how to fix it, _please let me know_ and suggest a path forward! I'll gladly cooperate with Microsoft and others on sorting this out, eventually submitting a PR to fix this.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes, tested - same behavior.",
        "createdAt": "2017-12-27 08:05:10",
        "state": "open",
        "number": 40858
    },
    {
        "title": "Caret Position - Virtual Space",
        "description": "- VSCode Version: Code 1.19.1 (0759f77bb8d86658bc935a10a64f6182c5a1eeba, 2017-12-19T09:46:23.884Z)\r\n- OS Version: Windows_NT x64 10.0.16299\r\n- Extensions: \r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\ntslint|eg2|1.0.24\r\ncsharp|ms-|1.13.1\r\n\r\n\r\n\r\n---\r\n\r\nFrom : https://github.com/OmniSharp/omnisharp-vscode/issues/1680\r\n\r\nThe c# extension removes the spaces in empty lines in formatting. But VSCode must place the caret position even if there are no spaces, similar to the virtual caret position in Visual Studio.",
        "createdAt": "2017-12-21 22:23:06",
        "state": "open",
        "number": 40676
    },
    {
        "title": "insertSnippet produces trailing spaces",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: Version 1.19.1 (1.19.1)\r\n- OS Version: macOS 10.13.2\r\n\r\nThe `insertSnippet` function in the vscode api takes a snippet and inserts it at the given position with the indentation of the position prepended to each line. This is great, except that it also adds the indentation to any blank lines in the snippet causing unnecessary trailing spaces. The logic also doesn't respect carriage return special chars like `\\r`. \r\n\r\nThis problem has been touched upon before in this issue: https://github.com/Microsoft/vscode/issues/20112",
        "createdAt": "2017-12-21 02:02:54",
        "state": "open",
        "number": 40613
    },
    {
        "title": "[json] suggest used values when property name has already been used",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.19.0 and 1.19.1\r\n- OS Version: Windows 10 Home 64 bit\r\n\r\nSteps to Reproduce:\r\n\r\nvscode used to show autocomplete option for words that existed int the file. I use vscode for keep track of my notes. I keep my plain texts (*.txt) with language mode html. Same thing is happening in JSON files.\r\nI write a property (e.g. BusNumber) and when I try to retype the property it doesn't show up in autocomplte dropdown when I am typing in JSON and I have to retype the whole property again. It used to show up as soon as I started typing two letters. In plain text if an word existed in the file it used to come as an option for autocomplete now it is not. \r\n\r\nI use vscodevim and Prettify JSON. Even after disabling those I am having the issue.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes",
        "createdAt": "2017-12-20 22:39:54",
        "state": "open",
        "number": 40604
    },
    {
        "title": "Editing large files - not work to replace all",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.19.0\r\n- OS Version: Windows 10 Pro\r\n\r\nThe function does not work to replace all substrings in lines in a file with 2 million lines (2 million occurrences)\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes",
        "createdAt": "2017-12-20 13:34:09",
        "state": "open",
        "number": 40580
    },
    {
        "title": "Feature Request: Allow extensions install globally on per-machine basis",
        "description": "VS Code extensions are currently installed per user. It would be convenient in some usage scenarios cases to install the extensions for all users on the machine so that everyone is automatically setup with the set of extensions. ",
        "createdAt": "2017-12-18 23:12:26",
        "state": "open",
        "number": 40464
    },
    {
        "title": "Keybindings aren't respecting `when clause` when showing shortcut keys in menus",
        "description": "- VSCode Version: Code - Insiders 1.20.0-insider (08ec16001adaab8a86183431f6aec09209caa4ab, 2017-12-15T05:15:38.886Z)\r\n- OS Version: Windows_NT x64 10.0.17046\r\n---\r\n\r\nOriginally reported https://github.com/eamodio/vscode-gitlens/issues/229\r\n\r\n>Steps to Reproduce:\r\n>\r\n>1. I set it up \"gitlens.keymap\": \"none\" or \"gitlens.keymap\": \"standard\"\r\n>2. The shortcut menu of the editor menu does not change.\r\n![1](https://user-images.githubusercontent.com/4232281/33921773-13f8cce8-e001-11e7-94cc-d275ed810d15.png)\r\n![2](https://user-images.githubusercontent.com/4232281/33921775-170c70c4-e001-11e7-9fef-51ad9b77faa1.png)\r\n\r\nFor context, I've recently added a new setting (and associated command context) to control the set of keybindings GitLens adds. It seems that when menu items for a command that also has a keybinding, doesn't honor the `when` clause of the keybinding (for showing the shortcut in the menu). Instead it seems to just grab the last keybinding found for that command in the `package.json`\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: No",
        "createdAt": "2017-12-17 19:18:36",
        "state": "open",
        "number": 40389
    },
    {
        "title": "[folding] configure initial collapse state",
        "description": "Maybe I missed something ... I recently migrated my javascript project from netbeans to visual studio code ... in netbeans we use \r\n```\r\n//<editor-fold defaultstate=\"collapsed\" desc=\"MySection\">\r\n...\r\n//</editor-fold>\r\n```\r\nfor defining regions ... I saw I could modify javascript-language-configuration.json to\r\n```\r\n\t\"folding\": {\r\n\t\t\"markers\": {\r\n\t\t\t\"start\": \"^\\\\s*//\\\\s*(?:(?:#?region\\\\b)|(?:<editor-fold\\\\b))\",\r\n\t\t\t\"end\": \"^\\\\s*//\\\\s*(?:(?:#?endregion\\\\b)|(?:</editor-fold>))\"\r\n\t\t}\r\n\t}\r\n```\r\nSO my request includes 2 questions : \r\n1. Is it possible to add the editor fold tag to the javascript language configuration (Identical as the configuration for java)\r\n2. Could a defaultstate be added to regions, so when a file is opened regions will be either collapsed or expanded",
        "createdAt": "2017-12-16 08:30:32",
        "state": "open",
        "number": 40338
    },
    {
        "title": "Installing new VSIX should be blocked while waiting for another VSIX install.",
        "description": "VSCode Version: Insiders 1.19.0\r\nOS Version: MacOS\r\n\r\nSteps to Reproduce:\r\n\r\nInstall a large extension from vsix (> 100mb such that it takes a long time).\r\nBefore the confirmation message, try to install it again.\r\n\r\nExpected: User should be blocked on waiting, before he is able to install the second time.\r\nActual: Same VSIX can be installed again, corrupting the installation.\r\n\r\n@ramya-rao-a",
        "createdAt": "2017-12-16 00:24:58",
        "state": "open",
        "number": 40326
    },
    {
        "title": "Allow to close multiple tabs without moving the mouse after closing one",
        "description": "Hi! I love the new `shrink` tab sizing in the latest version of Code. It feels much more natural to me because I now have a much better idea of which editors are open in which pane and how many are open in total.\r\n\r\nThere's an awesome thing that Chrome does when you're closing tabs \u2013 it doesn't resize the tabs while you're closing them. This allows you to close many tabs by just clicking repeatedly. It's a small details but it makes the experience a lot smoother in my opinion:\r\n\r\n![close-multiple-tabs-chrome](https://user-images.githubusercontent.com/3694962/34039865-9138b01a-e191-11e7-88dd-d27439e85094.gif)\r\n\r\nFor comparison, here is how closing multiple tabs currently behaves in VS Code:\r\n\r\n![close-multiple-tabs-code](https://user-images.githubusercontent.com/3694962/34039937-ddd04a46-e191-11e7-8fb4-6bd636085b4c.gif)\r\n\r\nI think the behaviour is something like this:\r\n\r\n```\r\nIf the user just closed a tab by clicking, and there is a tab to the right,\r\ndon't resize the tabs until the user moves the mouse pointer out from the tabs bar.\r\n\r\nWhen you close a tab that is currently active, select the tab\r\nto the right next (not the previously selected tab).\r\n```",
        "createdAt": "2017-12-15 11:20:29",
        "state": "open",
        "number": 40290
    },
    {
        "title": "Feature Request: Enable/disable extensions from config file",
        "description": "- VSCode Version: 1.18.1\r\n- OS Version: Windows 10 FU\r\n\r\n### Explain: \r\n\r\nThere are certain extensions that play well together, and it would be useful to be able to set a config file to enable and disable certain extensions in that workspace. This would be a config file, like the extensions recommendations, but with a series of parameters that would allow to enable and disable certain extensions. \r\n\r\nThis would be like a config file for the \"[Dis]Allow (Workspace)\" setting. ",
        "createdAt": "2017-12-15 01:34:15",
        "state": "open",
        "number": 40239
    },
    {
        "title": "[Feature] Local Workspace settings",
        "description": "I would like to be able to configure settings that are specific to my user and to a particular workspace. So, 'local' workspace settings?\r\n\r\nSo there would be three locations for settings (for a single-folder workspace):\r\n\r\n  * user settings\r\n  * `${workspaceRoot}/.vscode/settings.json`\r\n  * `${workspaceRoot}/.vscode/settings.local.json`\r\n\r\nThis way, I can add `.vscode/settings.json` to git, and share project settings such as \"exclude node_modules\" but I can gitignore `.vscode/settings.local.json` and add things specific to that project that I don't want to share, such as git autofetch.\r\n\r\nI originally thought to suggest `.vscode/settings.user.json`, similar to how VS Pro handles similar configuration, but that might be confusing.",
        "createdAt": "2017-12-14 22:18:17",
        "state": "open",
        "number": 40233
    },
    {
        "title": "Separate editorGutter.modifiedBackground for saved/unsaved changes",
        "description": "It would be great to be able to see in the gutter at a glance and specify in a theme, etc. whether a line had been modified _but not_ saved, or modified _and_ saved. I vaguely remember Sublime doing this, but could be wrong. For example:\r\n\r\n```\r\n\"editorGutter.modifiedBackground\": \"#ebcb8b\",\r\n\"editorGutter.modifiedBackgroundDirty\": \"#dbeb8b\"\r\n```\r\n\r\nOr perhaps for better backwards compatibility:\r\n\r\n```\r\n\"editorGutter.modifiedBackground\": \"#ebcb8b\",\r\n\"editorGutter.modifiedBackgroundClean\": \"#ebcb8b\",\r\n\"editorGutter.modifiedBackgroundDirty\": \"#dbeb8b\"\r\n```\r\n\r\nThis may clash with Code's ability to distinguish between added/modified/deleted changes.",
        "createdAt": "2017-12-12 19:37:14",
        "state": "open",
        "number": 40132
    },
    {
        "title": "Wrap with abbreviation history",
        "description": "Coming from atom this is a feature that i miss. \r\n\r\nWhen wrapping with abbreviation you could use the up and down arrows to go through previously used abbreviations.\r\n\r\nSo if you had created a long abbreviation and it was slightly wrong or you wanted to reuse you wouldn't have to type it out all over again.",
        "createdAt": "2017-12-12 14:21:35",
        "state": "open",
        "number": 40096
    },
    {
        "title": "Minimap Enhancement: Show Preview Tooltip",
        "description": "Using VS Code 1.18.1\r\n[This is an idea for a new feature, not an issue]\r\n\r\nVisual Studio's enhanced scrollbar allows you to hover the minimap and get a full sized preview of the 7-8 lines under your cursor. I would love to see this feature added to the minimap in VS Code. Or perhaps, as some others have suggested, an API for the minimap so extension developers could add this functionality.\r\n\r\nThanks!\r\n\r\nHere's what it looks like in VS2017.\r\n\r\n![image](https://user-images.githubusercontent.com/811177/33853611-c3053ac8-de7b-11e7-8f91-2563f3985f01.png)\r\n",
        "createdAt": "2017-12-11 21:02:42",
        "state": "open",
        "number": 40048
    },
    {
        "title": "Allow multi-line input box",
        "description": "The git commit message input box allows multiline input, but this does not seem to be available from `window.showInputBox`. This would be very useful for extensions.",
        "createdAt": "2017-12-09 17:16:44",
        "state": "open",
        "number": 39969
    },
    {
        "title": "Feature Request: Keybinding Overloading",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\nI'm *not* asking for the ability to run multiple commands *in sequence*, as mentioned in\r\n\r\n* https://github.com/Microsoft/vscode/issues/18621\r\n* https://github.com/Microsoft/vscode/issues/871\r\n* https://github.com/Microsoft/vscode/issues/171\r\n\r\nor as addressed with the [macros extension](https://marketplace.visualstudio.com/items?itemName=geddski.macros)\r\n\r\nI'd like to be able to assign a given keybinding to multiple different commands ***separately***, and if multiple commands are applicable in the current context when the keystroke is used, present the user with a menu of the options, *rather than considering it a conflict*, where only one can \"win\".\r\n\r\nThere are *many* ***significant*** benefits to this:\r\n\r\n* You don't have to worry about keybindings from your multiple extensions conflicting with each other.\r\n* All extension authors can add the keybinding they think makes the most sense, instead of telling you to manually add it in your own personal keybindings.json.\r\n* You don't have to worry about your personal keybindings clobbering a default keybinding (this sort of conflict does not appear when you use \"Show Conflicts\"\u2014at least it did not in my tests).\r\n* You will never accidentally use the wrong command because of a conflict in which you expected another command to be triggered by your keybinding.\r\n* You can purposefully add multiple related commands to the same keybinding, so that you have fewer bindings to memorize.  For example, \r\n  + you could assign all of your Git-related commands to <kbd>\u2318</kbd><kbd>\u2325</kbd><kbd>G</kbd>, or, for more focused groupings, \r\n  + you could assign all variations of Git commands related to adding files to <kbd>\u2318</kbd><kbd>\u2325</kbd><kbd>A</kbd>, and those related to commiting to <kbd>\u2318</kbd><kbd>\u2325</kbd><kbd>C</kbd>, and so forth.\r\n* You can experiment with changed keybindings without having to change the whole world in order to accommodate the change you think you might prefer.\r\n\r\nSince there may be people who have grown accustomed to existing conflicts in their keybindings (and accustomed to the current winner) it would make sense for this behavior to have a setting to turn it on or off, so that they are not presented with a menu containing what used to be considered \"conflicts\" but under the new behavior are simply alternate options assigned to the same keystroke.",
        "createdAt": "2017-12-07 19:39:06",
        "state": "open",
        "number": 39888
    },
    {
        "title": "Sort Lines getting confused by indentation",
        "description": "- VSCode Version: Code 1.18.1 (929bacba01ef658b873545e26034d1a8067445e9, 2017-11-16T18:23:26.125Z)\r\n- OS Version: Darwin x64 16.7.0\r\n- Extensions: \r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nreact-native-react-redux|EQu|1.4.1\r\nEditorConfig|Edi|0.11.1\r\nvsc-material-theme|Equ|1.1.2\r\nhtml-css-class-completion|Zig|1.14.0\r\nvscode-mjml|att|0.0.9\r\nnpm-intellisense|chr|1.3.0\r\npath-intellisense|chr|1.4.2\r\ngitignore|cod|0.5.0\r\nvscode-eslint|dba|1.4.3\r\nmjml-syntax|dig|0.0.1\r\ngithistory|don|0.2.3\r\ngitlens|eam|6.3.0\r\nvscode-html-css|ecm|0.1.8\r\nvscode-npm-script|eg2|0.3.3\r\nphp-debug|fel|1.12.1\r\nphp-intellisense|fel|2.0.4\r\nphp-pack|fel|1.0.1\r\nwordpress|hri|1.0.1\r\nsublime-babel-vscode|jos|0.2.9\r\nvscode-styled-components|jpo|0.0.10\r\nvscode-todo-parser|min|1.9.1\r\nvscode-apache|mrm|1.1.1\r\nvscode-scss|mrm|0.6.2\r\nsublime-keybindings|ms-|3.0.3\r\ncolor-highlight|nau|2.3.0\r\nphp-docblocker|nei|1.3.2\r\nvscode-code-outline|pat|0.0.12\r\nvscode-versionlens|pfl|0.19.1\r\nstylelint|shi|0.31.0\r\nguides|spy|0.9.1\r\nvscode-todo-highlight|way|0.5.11\r\nvscode-import-cost|wix|2.5.1\r\nReactSnippets|xab|1.7.0\r\nmarkdown-all-in-one|yzh|0.11.2\r\n\r\n(2 theme extensions excluded)\r\n\r\n\r\n---\r\n\r\nSteps to Reproduce:\r\n\r\n1. Initial JSON file (notice the tab in indentation)\r\n![image](https://user-images.githubusercontent.com/6603389/33726928-c0cd762e-db76-11e7-9c30-bb4a3383f01d.png)\r\n2. After `Sort Lines Ascending` command (tab-indented line is first, should be third)\r\n![image](https://user-images.githubusercontent.com/6603389/33726972-edbcdc06-db76-11e7-9a5e-664c8568ed74.png)\r\n\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes",
        "createdAt": "2017-12-07 16:52:56",
        "state": "open",
        "number": 39878
    },
    {
        "title": "Watch extensions folder when code is open and revalidate cache",
        "description": "Testing #39593\r\n\r\nWhen code is open, it would be cool if we detect the changes on the folder directly and reset the caches that will also prevent the message to restart",
        "createdAt": "2017-12-06 14:14:30",
        "state": "open",
        "number": 39795
    },
    {
        "title": "There's no way to navigate to the extension editor from the Running Extensions view",
        "description": "Testing #39568\r\n\r\nThere seems to be no way to open the extension editor from the Running Extensions view. I want to see the extension's details in the Marketplace, when I see it in this view.\r\n\r\n<img width=\"1559\" alt=\"image\" src=\"https://user-images.githubusercontent.com/22350/33599525-b60b221c-d9a6-11e7-90be-894965e8a2df.png\">\r\n",
        "createdAt": "2017-12-05 09:27:08",
        "state": "open",
        "number": 39621
    },
    {
        "title": "Symbol navigation and context",
        "description": "Feature request redirected from the C/CPP extension project:\r\nhttps://github.com/Microsoft/vscode-cpptools/issues/1283\r\n\r\n**Copied the issue from cpptools:**\r\n- Ubuntu 17.10\r\n- vscode 1.18.1\r\n- C/C++ 0.14.2\r\n\r\nOften times when I browse all symbols using CTRL-T, the dropdown list cannot hold both the symbol name and its path. The path gets truncated (not viewable), which complicates navigation in e.g multi-target projects that may have the same symbol defined in different files.\r\n\r\n![symbols](https://user-images.githubusercontent.com/33813608/33601968-3474e046-d9ae-11e7-9458-5bbecca16f49.png)\r\n\r\n\r\nWould it be possible to:\r\n- 'Pop-out' the selected symbol with full symbol name and path\r\n- Increase the size of the navigation dropdown list\r\n- Let the user resize the dropdown list\r\n- List the symbols in a new message box\r\n- ...?",
        "createdAt": "2017-12-05 06:35:19",
        "state": "open",
        "number": 39605
    },
    {
        "title": "settings.json --> no highlighting of matched words in the scrollbar area",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.19.0-ins\r\n- OS Version: win7x64\r\n\r\nFor example, I'm trying to look for word \"terminal\" in my settings, to organize options that belong to terminal. But there is no highlighting of found word in the scrollbar area:\r\n\r\n![image](https://user-images.githubusercontent.com/24613274/33550302-1179d190-d8f6-11e7-9f61-669d401ca2f7.png)\r\n",
        "createdAt": "2017-12-04 11:26:33",
        "state": "open",
        "number": 39543
    },
    {
        "title": "Consider showing completion item detail if available for all list items",
        "description": "Take the following completion list.\r\n\r\n![screenshot from 2017-12-02 09-22-52](https://user-images.githubusercontent.com/5885195/33506169-c31c764c-d742-11e7-8a8d-4def058470f7.png)\r\n\r\nEach `Client` item belongs to a different namespace. If the completion item detail was shown immediately for each item then users could, at a glance, easily identify the relevant item out of a list of similarly labeled items. I suppose the argument against is that this can be done by modifying the label to include this, but then what is the role of the detail property?\r\n",
        "createdAt": "2017-12-01 22:35:29",
        "state": "open",
        "number": 39441
    },
    {
        "title": "Support hyperlink ansi escapes in the integrated terminal",
        "description": "Cross-posting from xterm.js for discovery. Hope that's ok.\r\n\r\n> Terminal emulators are [starting to support hyperlinks](https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda). While many terminals have long detected URL's and linkified them, allowing you to Command-Click or Control-Click them to open a browser, you were forced to print the long unsightly URL's on the screen. As of spring 2017 [a few terminals](https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda) began supporting HTML like links, where the link text and destination could be specified separately.\r\n\r\n> Example from iTerm2 3.1:\r\n> <img width=\"1004\" alt=\"screen shot 2017-11-28 at 12 08 20\" src=\"https://user-images.githubusercontent.com/170270/33316814-8b35c2d4-d435-11e7-8524-da4fa076e6fb.png\">\r\n\r\nhttps://github.com/xtermjs/xterm.js/issues/1134\r\n",
        "createdAt": "2017-11-28 18:54:03",
        "state": "open",
        "number": 39278
    },
    {
        "title": "Smart loading of extensions based on manifest",
        "description": "Extensions part of vscode requires overhaul; and extension.json manifest files might be great way to fix this.\r\n\r\nIt would be great if it were possible to add manifest of extensions in project settings. So when project or workspace is open; vscode loads only extensions mentioned in either project level or workspace level or user level.\r\n\r\nIf the extension is not yet present; vscode could pulls it from internet but only load the one required as per extension.json manifest.\r\n\r\nThis will improve the performance of vscode as user if choose can put majority of extensions need for project in project setting i.e it goes into git repo itself. This will also create consistent dev experince as they are no required to manually install recommend extensions.\r\n\r\nThis approach automatically fixes setting sync issue; as all of things about vscode is manifest in files which can in turn life in github.\r\n\r\nThx\r\n",
        "createdAt": "2017-11-28 16:52:33",
        "state": "open",
        "number": 39272
    },
    {
        "title": "Extension Market Search for Identifier",
        "description": "- VSCode Version: Code - Insiders 1.19.0-insider (3c470706ded48fc75c05f86bc4f9c7b0f4d6c708, 2017-11-27T05:14:17.223Z)\r\n- OS Version: Windows_NT x64 6.1.7601\r\n- Extensions: \r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nmarkdown-checkbox|bie|0.0.5\r\njshint|dba|0.10.15\r\nvscode-eslint|dba|1.4.3\r\ngithistory|don|0.2.3\r\nxml|Dot|1.9.2\r\ngitlens|eam|6.2.0\r\ntslint|eg2|1.0.24\r\nvscode-abap|lar|0.1.0\r\nGo|luk|0.6.69\r\npostscript|max|1.0.0\r\ncode-beautifier|mic|1.7.2\r\ndebugger-for-chrome|msj|3.5.0\r\nvscode-docker|Pet|0.0.22\r\nvscode-icons|rob|7.18.1\r\nvscode-table-formatter|shu|1.2.1\r\naddDocComments|ste|0.0.8\r\nhtml-preview-vscode|tht|0.1.1\r\nvscode-import-cost|wix|2.5.1\r\n\r\n(1 theme extensions excluded)\r\n\r\n\r\n---\r\n\r\nFeature Request: It should be possible to search in the Extension Marketplace for an ID like `ms-vscode.cpptools` without using `@id`. Currently there will be not the correct one found.",
        "createdAt": "2017-11-28 08:21:38",
        "state": "open",
        "number": 39236
    },
    {
        "title": "Git: Support git subtree",
        "description": "- VSCode Version: Code - Insiders 1.19.0-insider (89b158e11cb1c3fe94a3876222478ed2d0549fc8, 2017-11-24T05:14:03.606Z)\r\n- OS Version: Windows_NT x64 10.0.15063\r\n- Extensions: \r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nmarkdown-mermaid|bie|0.1.1\r\nteam|ms-|1.122.0\r\ndebugger-for-chrome|msj|3.5.0\r\n\r\n\r\n\r\n---\r\n\r\nSteps to Reproduce:\r\n\r\n1. Ctrl-shift-P\r\n2. type \"Git:\"\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes\r\n\r\nGit [git subtree](http://alistra.ghost.io/2014/11/30/git-subtree-a-better-alternative-to-git-submodule/) commands is currently missing in the git command list and wasn't included in the git sync button.\r\n\r\nSubtree is great for maintaining a monorepo for large projects where there is a single source of truth for all the code. \r\n\r\nCurrently this issue impacts developers experience as it is tedious to do manual sync of all the changes in the subtree with the original git repo of the project for the subtree. \r\n\r\nProposal:\r\n1. Add all the git subtree command (add, push, pull) ",
        "createdAt": "2017-11-26 13:50:21",
        "state": "open",
        "number": 39152
    },
    {
        "title": "Allow multiple cursors between split panes",
        "description": "When working with a large file, I often use split panes to see multiple parts of the file simultaneously to avoid lots of navigating back and forth.\r\n\r\nSometimes I find the need to use multiple cursors where one part of the code is in one pane, and another part of the code is in another pane.\r\n\r\nI don't believe that it's possible to work with multiple cursors across multiple panes, but it would be great if it was possible. The shortcut for adding multiple cursors across panes would probably have to be different from the default, to avoid unexpected behaviour.",
        "createdAt": "2017-11-21 16:53:55",
        "state": "open",
        "number": 38893
    },
    {
        "title": "Tab groups \"for components\"",
        "description": "Hi,\r\n\r\nI was looking to do an extension for vs code. I'm currently developing with Angular 1.6 and i'm building many components. Each one of them as 4 files : index.js, ctrl.js, template.pug, style.scss. I open a lot of tabs and i just end up not using them cause i have too many.. So i just search the file in the tree instead it's quicker.\r\n![image](https://user-images.githubusercontent.com/10903391/33082494-efd55b36-ceaa-11e7-9457-b7d1d20ee58e.png)\r\n![image](https://user-images.githubusercontent.com/10903391/33082533-070b76be-ceab-11e7-89eb-fab0fa8a3f97.png)\r\n\r\nI'm sure we could do something about that ! My main idea is to add tab groups. This is an example of what i mean :\r\n![image](https://user-images.githubusercontent.com/10903391/33084279-86a9b6d4-ceaf-11e7-9d80-e17475c64490.png)\r\n\r\nIt would need to be configurable because, we don't all have the same structure..  With all the component base frameworks out there i think there is definitely a lot of people that would benefit from this :)\r\n\r\nBut i have no experience with vs code extensions and i think there is no way of doing this since we don't have DOM access :/. So what do you guys think of this ?",
        "createdAt": "2017-11-21 16:37:25",
        "state": "open",
        "number": 38889
    },
    {
        "title": "Use .gitignore to hide files in explorer",
        "description": "Forking https://github.com/Microsoft/vscode/issues/23804 [on the advice of @isidorn](https://github.com/Microsoft/vscode/issues/23804#issuecomment-345280932) as it was conflating two issues - colouring and hiding gitignored files in the file explorer.\r\n\r\n* Greying/colouring works great as of [1.18](https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/v1_18.md#git-status-in-file-explorer).\r\n* Hiding them completely still requires an extension or manually syncing ignored patterns with the `files.exclude` setting.\r\n\r\nI would love a separate setting which completely hides files instead of just greying them out. Thanks.",
        "createdAt": "2017-11-21 14:15:21",
        "state": "open",
        "number": 38878
    },
    {
        "title": "Feature request: Update on next restart",
        "description": "<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.18\r\n- OS Version: Win 10\r\n\r\nSteps to Reproduce:\r\n\r\nHello guys\r\n\r\nRight now there is an option for \"Restart to Update\", usually we are in middle of work and we prefer not to restart in that moment, later on for some reason we restart vscode (due to crash or ...) to continue work and again there is not time for update\r\n\r\nI would suggest adding anther option below \"Restart to Update\" called \"Update on next restart\", so when user choose that option it won't restart at the moment, but it will update on next time that vscode is starting\r\n",
        "createdAt": "2017-11-21 13:34:05",
        "state": "open",
        "number": 38876
    },
    {
        "title": "Add Mouse Clicks to Configurable 'Keyboard' Shortcuts",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.18.1\r\n- OS Version: Windows 10\r\n\r\nIt would be nice to have mouse clicks (left & right) as configurable keybindings under the keyboard shortcuts settings. I really like Ctrl + LeftClick for go-to-definition and would like to be able to map Ctrl + RightClick to the go-back command (which is default mapped to Alt + LeftArrow).\r\n\r\nHaving configurable mouse bindings may also cover some of the other issues/requests made by users (#38588 for instance).\r\n",
        "createdAt": "2017-11-21 06:47:48",
        "state": "open",
        "number": 38849
    },
    {
        "title": "ANSI color support in edit buffer",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\nNow ANSI colors are supported in the debug console, I'd like to see it in the editor, something like [SublimeANSI](https://github.com/aziz/SublimeANSI).\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.19\r\n- OS Version: macOS\r\n\r\nSteps to Reproduce:\r\n\r\n1. open a file which contains ANSI color escape sequence, or simply `ls --color | code`\r\n2. colorless raw ANSI code displayed, rather than colored text.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes\r\n\r\n",
        "createdAt": "2017-11-21 04:00:42",
        "state": "open",
        "number": 38834
    },
    {
        "title": "activationEvents.workspaceContains:{value from configuration} ",
        "description": "Say i have this contributions in my extension:\r\n```json\r\n{\r\n  \"configuration\": {\r\n    \"properties\": {\r\n      \"some.property\": {\r\n        \"type\": \"string\",\r\n        \"default\": \"a/b/c\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\ni know, that i can enable extension when file `a/b/c` exists:\r\n```json\r\n{\r\n  \"activationEvents\": [\r\n    \"workspaceContains:a/b/c\"\r\n  ]\r\n}\r\n```\r\nbut i dont know, how to combine these two - something like:\r\n\r\n```json\r\n{\r\n  \"activationEvents\": [\r\n    \"workspaceContains:{vscode.workspace.getConfiguration('some').get('property')}\"\r\n  ]\r\n}\r\n```\r\nwith will activate extension only if file defined by path in `some.property` exists (path is relative to `vscode.workspace.rootPath`)\r\n\r\ncurrently im always activating extension and having `if(!file.exists(...)) return;` in `activate` method a a workaround\r\n\r\nPS: dont tell me to post this on vscode-extension-vscode because [#85](https://github.com/Microsoft/vscode-extension-vscode/issues/85)",
        "createdAt": "2017-11-17 15:06:44",
        "state": "open",
        "number": 38626
    },
    {
        "title": "CLI: code --install-extension should show reload button if vscode is open",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: `1.18.1`\r\n- OS Version: macOS High Sierra 10.13.1\r\n\r\nIf you use the CLI command `code --install-extension <extension>` in a terminal while vscode is open, it would be very useful that vscode realise that an extension have been updated/installed - and so shows the \"reload\" button, so you don't have to manually close and open vscode in order for the extension to work. Just like if you updated or installed an extension through vscode itself.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes",
        "createdAt": "2017-11-17 10:46:00",
        "state": "open",
        "number": 38607
    },
    {
        "title": "Badges in custom views and containers",
        "description": "Follow up to https://github.com/Microsoft/vscode-extension-samples/issues/41\r\n\r\nAs a ~~user~~ extension developer I'd like to be able to display a \"countBadge\" in the TreeView label.\r\nMy use case scenario - I have two TreeViews filled with data from a given REST API response.\r\nI'd like to know how many items are in the tree.\r\n\r\nSee the following screen demonstrating [openHAB extension](https://marketplace.visualstudio.com/items?itemName=openhab.openhab).\r\n\r\n![](https://i.imgur.com/SZkmQCt.gif)\r\n\r\n\r\nA badge like that is visible e.g. in the Git extension:\r\n![](https://user-images.githubusercontent.com/2270505/32796947-785e8652-c970-11e7-8b6f-27167b8854bf.png)\r\n\r\nThank you for your hard work!",
        "createdAt": "2017-11-15 16:22:13",
        "state": "open",
        "number": 38426
    },
    {
        "title": "Can we get a ${dirSep} variable for use in tasks.json and launch.json?",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.18.0\r\n- OS Version: Windows 10 FCU\r\n\r\nSteps to Reproduce:\r\n\r\n1.  You have a tasks.json file with a bunch of tasks and separate OS configurations for the path to the exe defined once at the top of the file.\r\n2. In a few tasks you need to pass the path to an output dir, so you try `${workspaceFolder}/debug` which works on Linux/macOS but not on Windows because the underlying utility we use (rcedit) rejects the path.\r\n\r\nWhat I'd like to be able to do is specify `${workspaceFolder}${dirSep}debug` and not have to worry about the vagaries of OS dir separators.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: N/A",
        "createdAt": "2017-11-15 04:56:20",
        "state": "open",
        "number": 38381
    },
    {
        "title": "Autoclosing pairs should be configurable",
        "description": "I've mentioned this in #15899, but this should really be a new issue. Just like Atom, Code should have an option to configure autocomplete characters. Currently, only brackets are auto-completed (and wrapped around selections), but it would be really useful if this also worked with quotes and backticks (especially in Markdown documents).\r\n\r\nHere's the relevant settings page in Atom:\r\n![screen shot 2017-11-14 at 22 26 26](https://user-images.githubusercontent.com/4377312/32806059-9fd20298-c98b-11e7-9cca-ce5010288eda.png)\r\n",
        "createdAt": "2017-11-14 21:32:13",
        "state": "open",
        "number": 38352
    },
    {
        "title": "Git: Provide navigation through git merge conflicts",
        "description": "This is not a bug but a feature request.\r\n\r\nIt will be very nice if VSCode provides an easy way to navigate through conflicts. Something like a button to go to the next conflict. Currently there is hotkey support only, which is nice but having a visual representation will be useful too. \r\nSomething similar to what is possible on git diff right now.\r\n\r\nRegars",
        "createdAt": "2017-11-14 13:42:45",
        "state": "open",
        "number": 38321
    },
    {
        "title": "[folding] Hover can show region description on `#endregion`",
        "description": "It would be great if the description of `region` pops up when mouse hovering on `#endregion`. To clarify, in `#region Great Stuff`, the description text is `Great Stuff`.",
        "createdAt": "2017-11-12 11:02:37",
        "state": "open",
        "number": 38149
    },
    {
        "title": "[icons] allow name specific root folder icons",
        "description": "- VSCode Version: 1.18.1\r\n- OS Version: Windows 10\r\n\r\nI use muli-root workspace, and lost the specific icon defined for some folders:\r\n\r\n![image](https://user-images.githubusercontent.com/16486407/32697388-caffcc5a-c78f-11e7-8b12-f2fa956e1e9f.png)\r\n\r\nI use my own icon theme and specify\r\n```\r\n    \"folderNames\": {\r\n        \"db\": \"_fd_red\",\r\n        \"server\": \"_fd_green\"\r\n    }\r\n```\r\nNow, with multi-workspace, they are no longer used.\r\n\r\nThere is a setting `rootFolder` but no` rootFolderNames`. \r\n\r\nI would like a setting taking account **name of folder** or **name defined in .code-workspace.** to get something like this:\r\n![image](https://user-images.githubusercontent.com/16486407/32697563-54be0c38-c793-11e7-8f08-b029157b792c.png)\r\n\r\n\r\n\r\n \r\n\r\n",
        "createdAt": "2017-11-12 09:36:24",
        "state": "open",
        "number": 38145
    },
    {
        "title": "[Extensions] Bind package.config's activation onLanguage to configuration",
        "description": "- VSCode Version: 1.18.0 dcee22\r\n- OS Version: macOS 10.13.1\r\n\r\nSteps to Reproduce:\r\n\r\n1. Have an extension that has `\"activationEvents\": [ \"onLanguage:markdown\" ]` but allow users to [override the languages it works for via configuration](https://github.com/TravisTheTechie/vscode-write-good/blob/master/package.json#L22), e.g. adding text\r\n2. The user now must load a markdown file before it will activate for text files\r\n\r\nIt would be awesome if I could bind activation to whatever languages the user has configured instead of having to bind it to [every event](https://code.visualstudio.com/docs/extensionAPI/activation-events#_activationevents). Is this possible in some way that I can't find?  \r\n\r\nReproduces without extensions: No, it's extension related",
        "createdAt": "2017-11-11 16:14:58",
        "state": "open",
        "number": 38125
    },
    {
        "title": "SCM: Support keyboard shortcuts for inline change review commands",
        "description": "Steps to Reproduce:\r\n\r\n1. Set this in keybindings\r\n\r\n```json\r\n{\r\n    \"key\": \"alt+cmd+z\",\r\n    \"command\": \"git.revertChange\"\r\n}\r\n```\r\n\r\n2. \r\n![revert-changes](https://user-images.githubusercontent.com/8818340/32689259-66f17cc6-c6e1-11e7-929b-6e14a16de720.gif)\r\n\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes",
        "createdAt": "2017-11-11 12:09:32",
        "state": "open",
        "number": 38113
    },
    {
        "title": "MacOS - use of non-command key related short-cuts should be avoided",
        "description": "\r\n- VSCode Version: 1.17.2\r\n- OS Version: MacOS X 10.13.1\r\n\r\nSteps to Reproduce:\r\n\r\n1. Use a US Keyboard layout\r\n2. I need to type the character \u00cf in a .js document\r\n2. I type option-shift-i\r\n\r\nProblem: Document gets reformatted \r\n\r\nExpected: To be able to type a foreign accent key.\r\n\r\nIn general I would say that allowing any keyboard short-cut that doesn't involve the ctrl or command keys are problematic. The 'option' key on the Mac is used for getting to alternative printing characters on the keyboard, when used without ctrl or command keys. \r\n\r\nSuggestion: Possibly change to be command-option-shift-i, to prevent adverse impacts in internationalisation contexts.\r\n\r\nReproduces without extensions: Yes\r\n\r\nI have looked through existing issues and could not find anything corresponding",
        "createdAt": "2017-11-10 21:32:01",
        "state": "open",
        "number": 38092
    },
    {
        "title": "Git: Support nested git repositories",
        "description": "- VSCode Version: Code 1.18.0 (dcee2202709a4f223185514b9275aa4229841aa7, 2017-11-08T21:22:49.932Z)\r\n- OS Version: Windows_NT x64 6.1.7601\r\n- Extensions: \r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\ncpptools|ms-|0.14.0\r\n\r\n\r\n\r\n---\r\n\r\nSteps to Reproduce:\r\n\r\nWe use some command line tools from ARM to organise our project. This tools rely on special lib files to establish dependencies between modules. Each module should be an independent repository (git repositories in our case). So once all the references are deployed (the tools will \"git clone\" the indicated repositories in the lib files) the folder structure would look like this (folders in bold):\r\n\r\n> - **project_folder** (git repo)\r\n>     - module1.lib\r\n>     - module2.lib\r\n>     - **module1** (git repo)\r\n>          - module3.lib\r\n>          - **module3** (git repo)\r\n>    - **module2** (git repo)\r\n\r\nIf we add **project_folder** as the root folder, the source control tab will only track the changes done in **project_folder**. \r\n\r\nIf we use the new multi-root project feature and also add **module1**, **module2**, and **module3** to the workspace; we still find that only the changes in **project_folder** are tracked.\r\n\r\nNevertheless, if we add the folder in an strict reverse nesting order in the following manner:\r\n1. With an empty project open **module3** as root folder\r\n2. Add folder to workspace... **module2** \r\n3. Add folder to workspace... **module1**\r\n4. Add folder to workspace... **project_folder**\r\n\r\nThen we see that the source control view displays the several source control providers correctly.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes",
        "createdAt": "2017-11-09 13:49:50",
        "state": "open",
        "number": 37947
    },
    {
        "title": "Ship Appdata file in Linux packages",
        "description": "The github repository of vscode does include appdata.xml file which ensures integration with Linux app stores, but it's not shipped in Linux packages. It's easy, you just need to install the file into this path: /usr/share/metainfo/%{id}.appdata.xml.\r\nUpstream docs: https://www.freedesktop.org/software/appstream/docs/chap-Quickstart.html#sect-Quickstart-DesktopApps\r\n\r\nFedora guidelines: https://fedoraproject.org/wiki/Packaging:AppData\r\n\r\nWithout this, we can't nicely integrate vscode with our app store in Fedora and it will help users on all other distributions as well since AppStream format is nowadays de facto standard for desktop app metadata.\r\n\r\n- VSCode Version: 1.17.2\r\n- OS Version: Fedora 27\r\n\r\n",
        "createdAt": "2017-11-08 10:21:09",
        "state": "open",
        "number": 37813
    },
    {
        "title": "Suggestion: improve command line options for extensions",
        "description": "A few improvements to command line options for extensions to allow debugging and issue reporting to be easier;\r\n\r\n1) `code --list-extensions` - report versions also\r\n2) `code --disable-extensions --enable-extension <extension-name` -- allow a single extension to be run\r\n3) `code --list-extensions` - show enabled/disabled status\r\n\r\nHTH",
        "createdAt": "2017-11-03 16:20:51",
        "state": "open",
        "number": 37620
    },
    {
        "title": "Add relative directory/filepath support to snippets",
        "description": "- VSCode Version: Code 1.17.1 (1e9d36539b0ae51ac09b9d4673ebea4e447e5353, 2017-10-10T14:24:41.632Z)\r\n- OS Version: Windows_NT ia32 6.3.9600\r\n\r\nCurrently, snippets allow you to resolve the current directory or filepath with `TM_DIRECTORY` and `TM_FILEPATH` respectively. It would be great to be able to get the path for these relative to the root folder, whether directly (e.g. `TM_DIRECTORY_REL`) or by providing a variable with the root folder.\r\n\r\nI'm trying to write a snippet to create a new C# file. Visual Studio will auto-populate the file with `namespace Directory.Structure.Here`, but that doesn't seem possible in Visual Studio Code right now.",
        "createdAt": "2017-11-03 01:12:25",
        "state": "open",
        "number": 37570
    },
    {
        "title": "b\u00e9po keyboard layout: cut / copy / paste  shortcuts",
        "description": "Hello,\r\n\r\nI've got a \"special\" keyboard, b\u00e9po layout, my ctrl+c and ctrl+v are quite unusable with one hand on the keyboard and the other one on mouse, I've got shortcuts (built in the keyboard to emulate cut/copy/paste) , I assume dvorak may be the same, my keyboard's shortcuts work right in the editor but I cannot use them in the vs code explorer to copy/paste files\u2026\r\n\r\nRegards.",
        "createdAt": "2017-11-02 19:17:14",
        "state": "open",
        "number": 37549
    },
    {
        "title": "Odd rendering of whitespace for grayed out launch.json properties",
        "description": "Steps to Reproduce:\r\n\r\n1. Set `\"editor.renderWhitespace\": \"all\",`\r\n2. Open a launch.json. \r\n3. Add some spaces in the value of a property such as `type` or `request`\r\n\r\n**Bug**\r\n![screen shot 2017-11-01 at 6 20 12 pm](https://user-images.githubusercontent.com/12821956/32305230-7f31a23c-bf31-11e7-9aa1-2f34760f1b9f.png)\r\n \r\nWhitespace indicators in these properties is the same as the text. Normally whitespace indicators are subdued",
        "createdAt": "2017-11-02 01:22:56",
        "state": "open",
        "number": 37459
    },
    {
        "title": "Support Git conflict resolution tool similar to IntelliJ, WebStorm",
        "description": "IntelliJ, and all other IntelliJ-based IDE such as WebStorm, support a git merge's conflict resolution tool that it shows the conflict in three columns:\r\n- the first column for Local Changes\r\n- the third column for Changes from Server\r\n- the second column for Conflict Resolution Result\r\n\r\nPlease see my attached file.\r\n![merge-conflict-resolution](https://user-images.githubusercontent.com/1470309/32250860-c677e4ce-bec0-11e7-82b5-0196d981cc28.png)\r\n\r\nI find that it's super easy for us to resolve conflict, because I can compare the Local Changes and the Server Changes on the same windows, and I can see the Resolution Result immediately.\r\n\r\nCan we please support that?",
        "createdAt": "2017-10-31 21:55:53",
        "state": "open",
        "number": 37350
    },
    {
        "title": "Option to auto-update extensions based on semver",
        "description": "As an extension author, I'd like to make some breaking changes to my extension. As a user, I'd hate to have an extension automatically updated with breaking changes.\r\n\r\nWhat would be nice is an option in VSCode to only auto-update minor or patch versions (or maybe even patch versions, or completely disable) of extensions and show updates (for manual update) for major versions with some workflow to show the changelog of breaking changes (if the developer authored any).\r\n\r\nFor example, `extensions.autoUpdate` could be changed from a boolean to an enumeration with backward compatibility to a boolean. I seem to recall another similar change but it was long ago enough I don't remember. IIRC, there is precedence to change the type.\r\n\r\nI didn't see any request like this already, though a possible implementation might overlap with #30579 if auto-update for installed prerelease versions could be disabled entirely.",
        "createdAt": "2017-10-30 16:23:48",
        "state": "open",
        "number": 37162
    },
    {
        "title": "Improve keybindings.json UI to show extension changing the shortcuts in `Source` column",
        "description": "When you enabled a keymap extension https://github.com/k--kato/vscode-intellij-idea-keybindings , that changed the default shortcuts. But on the keybindings.json UI, it always shows \"Default\" for \"Source\" column. It's misleading\r\n\r\n- VSCode Version: 1.17.2\r\n- OS Version: Windows 10\r\n\r\nSteps to Reproduce:\r\n\r\n1. Install an extension: https://github.com/k--kato/vscode-intellij-idea-keybindings\r\n2. Open Keyboard Shortcuts UI\r\n3. To check the key changed by above plugin. It's all \"Default\" for \"Source\" column",
        "createdAt": "2017-10-27 11:00:43",
        "state": "open",
        "number": 37034
    },
    {
        "title": "Carat movement past EOL",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: VSCode 1.18 Insider\r\n- OS Version: macOS 10.13.0 High Sierra\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open file to edit - I tend to edit .go files\r\n2. Place carat on any line, and press cursor down.\r\n3. I would like the ability to move the cursor down regardless of line length, entering the space beyond end-of-line if necessary.\r\n4. Delphi has always allowed this, and I think, as an option, it would improve the perceived speed of the editor\r\n5. Visual Studio has it - it's known as Virtual Space there.\r\n\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nN/A",
        "createdAt": "2017-10-26 21:19:57",
        "state": "open",
        "number": 37007
    },
    {
        "title": "Allow to configure a list of encodings to use when guessing",
        "description": "The `files.autoGuessEncoding=true` doesn't work well in some circumstances. \r\n\r\nI think that would be good if you guys add some features like `files.forceEncoding=\"encode1:encode2,encode3:encode4\"`.\r\n\r\nSo it can force 'encode1' to 'encode2'. That's a solution for wrong encoding detection I think.",
        "createdAt": "2017-10-26 05:31:42",
        "state": "open",
        "number": 36951
    },
    {
        "title": "Git: Support to compare with arbitrary commit instead of the current HEAD",
        "description": "Currently numerous places (explorer, gutters, etc.) will display changes since the last commit. I believe it would be useful to allow to show the same annotations but related to a different branch or tag. I am currently working on a large pull request and find myself constantly running `git diff master` in a console.",
        "createdAt": "2017-10-25 11:15:13",
        "state": "open",
        "number": 36893
    },
    {
        "title": "renderLineHighlight should highlight logical line ",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version:  1.17.2\r\n\r\n- OS Version: Windows 7\r\n\r\nWhen word wrap is on, renderLineHighlight should highlight the whole logical line, not just the physical line. (When word wrap is off, these are the same thing.) This makes it clear that the commands 'cut' and 'move line up' affect the logical line.\r\n\r\nSteps to Reproduce:\r\n\r\n1. Enable word wrap\r\n2. Move cursor to a long line\r\n\r\nExpected:\r\n\r\n3. See whole logical line is highlighted\r\n\r\nActual:\r\n\r\n3. Only physical line is highlighted\r\n\r\n![image](https://user-images.githubusercontent.com/105314/31957290-373675da-b8e6-11e7-8152-7097ed6439ce.png)\r\n",
        "createdAt": "2017-10-24 17:11:03",
        "state": "open",
        "number": 36839
    },
    {
        "title": "Have Shift+Tab remove whitespace within a line",
        "description": "Extracted from https://github.com/Microsoft/vscode/issues/32280#issuecomment-333843440\r\n\r\nFrom @martinsuchan\r\n\r\n---\r\n\r\nShift+Tab does not outdent. Tested in *.ps1 files. No idea if this has worked in previous versions, just noticed it now.\r\n\r\nEdit it works when I'm on the  start of the line, but not in between strings. In VS2017 it works even between strings. Not sure it this is native VS behavior or ReSharper, but I use it a lot.\r\n![tab gif](https://user-images.githubusercontent.com/3041397/31128017-c61d4572-a850-11e7-9764-94ba5aa75685.gif)\r\n\r\n\r\n- VSCode Version: Code 1.16.1 (27492b6bf3acb0775d82d2f87b25a93490673c6d, 2017-09-14T16:38:23.027Z)\r\n- OS Version: Windows_NT x64 10.0.15063\r\n- Extensions: \r\nKotlin|mat|1.3.0\r\ncsharp|ms-|1.12.1\r\nPowerShell|ms-|1.4.3\r\njava|red|0.11.0",
        "createdAt": "2017-10-24 10:23:43",
        "state": "open",
        "number": 36809
    },
    {
        "title": "Support envfile for tasks.json",
        "description": "The node and Go debuggers both support specifying an env file for environment variables instead of the `env` hash. It would be great if we could use the same file in tasks.json to have a single source of truth that can also be used by non-vscode scripts",
        "createdAt": "2017-10-23 18:47:59",
        "state": "open",
        "number": 36769
    },
    {
        "title": "Allow to split an editor into two without creating separate tabs",
        "description": "VsCode has the ability to horizonatally split an editor window. When you execute `code --diff file1 file2` both files are opened side by side in a single editor window with a single header tab. A similar view is presented when you edit the VsCode settings.\r\n\r\nThis is splitting. It would be nice to be able to do this for my own files to have multiple views of the same file. What would make it actually usable would be the following three enhancements.\r\n\r\n1. The option to split either horizontally or vertically.\r\n1. The ability to move focus from one split pane to another.\r\n1. The ability to unsplit (revert the editor back to a single pane).\r\n\r\nWhat we currently have is a keyboard shortcut \"workbench.action.splitEditor\" which doesn't actually split an editor at all, instead it just opens the same file in another editor in a different editor group. This is not editor splitting which by definition should occur in the same editor tab.\r\n\r\nCalling opening a file in another editor group 'splitting' when there is already nascent functionality to support proper splitting is a pointless ambiguity that serves only to reduce the possibility that the editor will ever support proper splitting any time in the near future.\r\n\r\nProposal:\r\n\r\n1. Rename \"workbench.action.splitEditor\" to \"workbench.action.openInNewEditorGroup\"\r\n2. Make the VsCode diff view usable by adding a keyboard shortcut to permit cycling focus from one editor pane to the other.\r\n3. Add support to split open editor vertically or horizontally by the addition of the additional keyboard shortcuts \"editor.action.splitHorizontal\", \"editor.action.splitVertical\" and \"editor.action.unsplit\".\r\n",
        "createdAt": "2017-10-22 10:33:58",
        "state": "open",
        "number": 36700
    },
    {
        "title": "Feature request: update on close",
        "description": "- VSCode Version: 1.17.2\r\n- OS Version: Windows 10 Pro Version 1703 (build 15063.674)\r\n\r\nSome Windows software, such as Paint.NET, has an option to \"update on close\" when a new update is available. The only way to make the update notification disappear in VSCode is to update now or dismiss the notification (and, in the latter case, probably forget to update by the time you finish working in the app).\r\n\r\nIt'd be great if VSCode could add an option to the update notification to install the update once the current VSCode session is closed.",
        "createdAt": "2017-10-21 12:49:31",
        "state": "open",
        "number": 36680
    },
    {
        "title": "[folding] Expose folding regions in API",
        "description": "I maintain a code structure visualizing plugin ([Code Outline](https://marketplace.visualstudio.com/items?itemName=patrys.vscode-code-outline)) that would benefit from having access to the named regions introduced in one of the recent versions (see [related issue](https://github.com/patrys/vscode-code-outline/issues/50)).",
        "createdAt": "2017-10-20 14:30:10",
        "state": "open",
        "number": 36638
    },
    {
        "title": "Have a history per editor for in-editor navigation",
        "description": "Could we have an option to stay in the current file when navigating back or forward using the following commands:\r\n* workbench.action.navigateBack <kbd>Alt</kbd><kbd>\u2190</kbd>\r\n* workbench.action.navigateForward <kbd>Alt</kbd><kbd>\u2192</kbd>\r\n\r\nCurrently, it navigates across all files, even the ones that have been closed.",
        "createdAt": "2017-10-20 12:43:11",
        "state": "open",
        "number": 36634
    },
    {
        "title": "Double Clicking words on the edge is impossible",
        "description": "- VSCode Version: Code 1.17.2 (b813d12980308015bcd2b3a2f6efa5c810c33ba5, 2017-10-16T13:59:46.104Z)\r\n- OS Version: Windows_NT x64 10.0.15063\r\n- Extensions: \r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nspellright|ban|1.2.22\r\ncode-runner|for|0.7.3\r\nvscode-autohotkey|sle|0.2.1\r\n\r\nI often have text on the edge of the screen that I would like to select by double clicking it. but the scroll into view sort of interferes with that\r\n\r\nhttps://youtu.be/zpP00Fc9SEU\r\n\r\nSorry for OBS turning my ibeam cursor black\r\n\r\nLooks like there is a hscroll condition if you mouse down inside a virtual margin on the left\r\nIs there a way to disable the hscroll when I click inside that margin?\r\n\r\n---\r\n\r\nSteps to Reproduce:\r\n\r\n1. Try to double click a word that is mostly hidden on the left side the edit window as video shows\r\n2.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes/No",
        "createdAt": "2017-10-20 08:14:13",
        "state": "open",
        "number": 36621
    },
    {
        "title": "Allow folding in output channels",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.17\r\n- OS Version: all\r\n\r\nSteps to Reproduce:\r\n\r\n1. Write some foldable content to an output channel.\r\n2. Folding doesn't work in the output channel.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes\r\n\r\nFor some reason folding is disabled in output channels -\r\n https://github.com/Microsoft/vscode/blob/e8f7ac78b782e157ef56c0d16de994bb54443646/src/vs/workbench/parts/output/browser/outputPanel.ts#L84\r\n\r\n![screen shot 2017-10-20 at 1 12 32 pm](https://user-images.githubusercontent.com/979966/31803758-e5e1a786-b598-11e7-8082-94b47505fb2f.png)\r\n",
        "createdAt": "2017-10-20 03:17:05",
        "state": "open",
        "number": 36609
    },
    {
        "title": "Search and Replace opens every file affected without changes saved",
        "description": "It seems unrealistic to expect the user to go through each tab and save it, or to save all tabs at once, which might save changes in unaffected files you didn't want to save.\r\n\r\nThe behavior of TextMate 2 works well, where clicking the Replace All button performs the replacements without showing them, unless the affected files are already open.\r\n\r\n---\r\n\r\nSteps to Reproduce:\r\n\r\n1. Search and replace something in 100 files.\r\n2. Observe those 100 files opened with the replacements made and the changes unsaved.\r\n\r\nReproduces without extensions: Yes\r\n\r\n---\r\n\r\n- VSCode Version: Code 1.17.2 (b813d12980308015bcd2b3a2f6efa5c810c33ba5, 2017-10-16T13:47:41.889Z)\r\n- OS Version: Darwin x64 16.7.0\r\n- Extensions: \r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-docker|Pet|0.0.20\r\nsort-lines|Tyr|1.3.0\r\ngithistory|don|0.2.3\r\nmarkdown-table-formatter|jos|0.2.3\r\nGo|luk|0.6.66\r\nprettify-json|moh|0.0.3\r\nazure-account|ms-|0.1.3\r\nrewrap|stk|1.5.2\r\ngitblame|wad|2.2.0\r\nvscode-proto3|zxh|0.1.2",
        "createdAt": "2017-10-19 23:29:21",
        "state": "open",
        "number": 36600
    },
    {
        "title": "Support fontName in textMateRules",
        "description": "This is a feature request, and I am not sure how it will be received. Probably not overwhelmingly positive, but nonetheless:\r\n\r\nI would like to have support to change font family in my textmate theme. Right now you support `fontStyle`, `fontSize` and `foreground`. I believe the correct term is `fontName` as per https://github.com/textmate/markdown.tmbundle/issues/7 which would control the css `font-family` property,\r\n\r\nE g something like\r\n\r\n```\r\n  \"editor\": {\r\n    \"fontFamily\": \"Fira Code\",\r\n    \"fontSize\": \"16\",\r\n    \"tokenColorCustomizations\": {\r\n      \"textMateRules\": [\r\n        {\r\n          \"name\": \"Variables\",\r\n          \"scope\": \"variable\",\r\n          \"settings\": {\r\n            \"fontName\": \"Script12 BT\",\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n```\r\n\r\nThis would be in order to conditionally change font-family and be able to support more creative themes. \r\n",
        "createdAt": "2017-10-18 19:38:23",
        "state": "open",
        "number": 36512
    },
    {
        "title": "Feature Request: Default settings.json file for new user profiles",
        "description": "Please provide a mechanism for specifying a default settings.json file for new user profiles.\r\n\r\nExample:\r\nI'd like to be able to set \"update.channel\": \"none\" by default for new users that log on to a shared system. Currently I have to script around this in order to have it set by default. I'd like to see a per-machine copy of the settings.json file somewhere under C:\\Program Files\\Microsoft VS Code\\ that gets copied to %appdata%\\Code\\User\\ at initial launch.",
        "createdAt": "2017-10-18 15:50:59",
        "state": "open",
        "number": 36499
    },
    {
        "title": "Silent Installation Issue",
        "description": "It looks like at the end of your Inno Setup script you have a run action to launch Code.exe (as well as perhaps a second run action to launch a URL?)\r\n\r\nI'm looking at doing a silent installation using SCCM and it would be helpful if these process launches would be suppressed. It looks like there's a skipifsilent flag that can be set in the [run] section of your setup script that would suppress at least the Code.exe launch during a silent installation. Please consider adding that to your install script.\r\n\r\nhttp://www.jrsoftware.org/ishelp/topic_runsection.htm",
        "createdAt": "2017-10-18 14:58:12",
        "state": "open",
        "number": 36494
    },
    {
        "title": "[theming] editor.selectionForeground is not working",
        "description": "- VSCode Version: Code 1.17.2 (b813d12980308015bcd2b3a2f6efa5c810c33ba5, 2017-10-16T13:57:00.652Z)\r\n- OS Version: Linux x64 4.8.0-59-generic\r\n\r\n---\r\n\r\nSteps to Reproduce:\r\n\r\n1. Add customization for `workbench.colorCustomizations.editor.selectionForeground`\r\n2. Save settings\r\n\r\nExpected result: a text selection should use the configured foreground color\r\nActual result: it doesn't.\r\n\r\nI notice that the tooltip in the settings editor says \"Color of the selected text for high contrast\". I'm not sure what that means, my only thought was that it might apply to the \"High Contrast\" theme I see mentioned in the docs. I tried to switch to that theme, but it doesn't make any difference whatsoever (seriously, none at all - it's weird because I thought I did that before and things looked different then - is high contrast broken now?).\r\n\r\nIn any case, I'd like to see selection foreground color implemented regardless of theme. For presentation purposes, I want a bright selection background color (my preference is bright yellow), and this is generally incompatible with any kind of syntax-highlight colored text.\r\n\r\n![image](https://user-images.githubusercontent.com/4730969/31724478-b77f65f2-b419-11e7-9944-998d784acd6b.png)\r\n",
        "createdAt": "2017-10-18 14:35:10",
        "state": "open",
        "number": 36490
    },
    {
        "title": "Interaction of json editor with tasks",
        "description": "I've noticed interesting side effect of choosing name `taskName` instead of plain `name`:\r\n\r\nThe Json editor built in VS Code treats `\"name\"` node specially and allows quick navigation inside file via `Ctrl+Shift+O`.\r\n\r\nFor example in `launch.json`:\r\n![image](https://user-images.githubusercontent.com/7413219/31655788-4fa4ca48-b32a-11e7-9c2a-ee6419dc2ede.png)\r\n\r\nIf I try to find task with same name in `tasks.json` I get an empty list.\r\n\r\nI'm not sure if it is possible to change schema at this stage, but it would be nice usability improvement.\r\nMaybe it is possible to patch up Json editor a bit and consider this 'feature' in future.",
        "createdAt": "2017-10-17 09:03:36",
        "state": "open",
        "number": 36398
    },
    {
        "title": "[html] JSON edit support inside HTML document / script tag with type=\"application/json\"",
        "description": "There are scenarios where it is useful to embed JSON inside an html document, such as for the [amp-bind element](https://www.ampproject.org/docs/reference/components/amp-bind):\r\n\r\n```html\r\n<amp-state id=\"myAnimals\">\r\n  <script type=\"application/json\">\r\n    {\r\n      \"dog\": {\r\n        \"imageUrl\": \"/img/dog.jpg\",\r\n        \"style\": \"greenBackground\"\r\n      },\r\n      \"cat\": {\r\n        \"imageUrl\": \"/img/cat.jpg\",\r\n        \"style\": \"redBackground\"\r\n      }\r\n    }\r\n  </script>\r\n</amp-state>\r\n```\r\n\r\nProviding syntax coloring / error checking would be very beneficial in these cases.",
        "createdAt": "2017-10-14 14:41:36",
        "state": "open",
        "number": 36280
    },
    {
        "title": "Terminal should support workbench.fontAliasing",
        "description": "https://github.com/Microsoft/vscode/issues/2577\r\nhttps://twitter.com/_developit/status/918488307968937984\r\n",
        "createdAt": "2017-10-13 18:43:13",
        "state": "open",
        "number": 36249
    },
    {
        "title": "Allow to detect encoding from contents in the file",
        "description": "- VSCode Version: Code 1.17.1 (1e9d36539b0ae51ac09b9d4673ebea4e447e5353, 2017-10-10T14:10:17.189Z)\r\n- OS Version: Darwin x64 16.7.0\r\n- Extensions: the listing length exceeds browsers' URL characters limit\r\n---\r\n\r\nThe `files.autoGuessEncoding=true` not looks to `xml`'s processing instructions (header with encoding).\r\n\r\nFor document with header `<?xml version=\"1.0\" encoding=\"windows-1251\"?>` encoding must be `windows-1251/cp1251` for example.\r\n\r\nBecause processing instructions and `encoding` attribute is optional we should use standard existing solution to determine encoding as fallback if `encoding` attribute doesn't exists.\r\n\r\nSteps to Reproduce:\r\n[test.xsd.zip](https://github.com/Microsoft/vscode/files/1382715/test.xsd.zip)\r\n\r\n0. add `\"[xml]\": { \"files.autoGuessEncoding\": true },` into the settings json. (maybe same for `xsd`)\r\n1. open attached xml `test.xsd`\r\n2. encoding will `maccirillic` instead `cp1251`\r\n\r\nReproduces without extensions: Yes\r\n\r\n- - -\r\n\r\n_I think this issue can be reproduced for other markups/ langs such as:_\r\n- xml-family: xml, xsd, html-family, svg, php, mxml,..\r\n- eml (look to `charset=..`)\r\n- yaml maybe\r\n- what have I forgotten",
        "createdAt": "2017-10-13 13:21:48",
        "state": "open",
        "number": 36230
    },
    {
        "title": "Provide squiggles in .code-workspace file if the path is invalid",
        "description": "More details https://github.com/Microsoft/vscode/issues/35075",
        "createdAt": "2017-10-11 16:27:19",
        "state": "open",
        "number": 36079
    },
    {
        "title": "[folding] allow defining folding regions in user settings and/or extensions",
        "description": "Would it be able to abstract out the language specifics and treat code folding similar to how `emmet` handles it...\r\ni.e.\r\n```\r\n    \"emmet.includeLanguages\": {\r\n        \"php\": \"html\",\r\n        \"blade\": \"html\",\r\n        \"javascript\": \"javascriptreact\"\r\n    },\r\n```\r\nSo for code folding it could be...\r\n```\r\n    \"codeFolding.IncludeLanguages\": {\r\n        \"php\": {\r\n            \"openTag\": \"//#region\",\r\n            \"closeTage\": \"//#endregion\"\r\n        },\r\n        ...etc...\r\n    }\r\n```\r\n\r\nThis is just an off the cuff idea for implementing this and I'm not sure that it's possible, but the goal would be to not be dependent on the language plugin developers to implement the feature.",
        "createdAt": "2017-10-10 19:35:10",
        "state": "open",
        "number": 36002
    },
    {
        "title": "Create groups to organize installed extensions",
        "description": "I would like to be able to create groups/subfolders for my installed extensions. Most importantly to seperate color themes from other utility extensions.",
        "createdAt": "2017-10-09 10:29:30",
        "state": "open",
        "number": 35891
    },
    {
        "title": "Can we support CR line endings as well as LF and CRLF?",
        "description": "VSCode supports LF line endings, and CRLF line endings, but it doesn't support CR line endings.\r\n\r\nAny chance of support for this? There _are_ some exotic platforms which still require them, such as e.g. pre OSX MacOS, and the amount of work involved ought to be trivial. This is ff=mac mode in vim.\r\n\r\nI've tried manually setting files.eol to \"\\r\", but the value is rejected as being invalid. \r\n\r\nRight now, if you try to open a CR file in VSCode it gets normalised to CRLF, which is incorrect. At the very least stopping this from happening would be nice.",
        "createdAt": "2017-10-07 15:43:03",
        "state": "open",
        "number": 35797
    },
    {
        "title": "Input box completion support",
        "description": "- VSCode Version: 1.17.0\r\n- OS Version: Windows 10 x64\r\n\r\nI'm not sure if I'm searching for the right terms, but there doesn't seem to be a way to get an extension to show an input box with completion entries, similar to the 'Show all commands' dropdown, or the 'Go to symbol in workspace' dropdown:\r\n\r\n![image](https://user-images.githubusercontent.com/5137410/31306887-c0be31c0-aba4-11e7-93c7-52a484d0222d.png)\r\n\r\nThe closest that I can get is to use `showInputBox` with a `validateInput` input validator, but this only allows you to return one entry, which doesn't work well if there's multiple options that could be possible. There's also the quick picker, but as far as I know, it doesn't allow you to dynamically update the available options depending on what has been typed in.\r\n\r\nIs it possible to expose a similar sort of functionality in the vscode API?\r\n",
        "createdAt": "2017-10-07 10:17:26",
        "state": "open",
        "number": 35785
    },
    {
        "title": "Customizable status bar item locations",
        "description": "Hello\r\n\r\nIt would be really nice if one could customize the location of the items in the status bar at the bottom of the editor.  For instance, I would want to have git branch information on the right, text encoding and position on the left, etc.\r\n\r\nMaybe allow people to sort things with something like \r\n```javascript\r\n\"window.statusBar.items\": {\r\n    \"left\" : [\"cursorPosition\", \"tabWidth\"],\r\n    \"right\": [\"textEncoding\", \"gitBranch\", \"feedbackButton\" ] \r\n}\r\n```\r\n\r\n",
        "createdAt": "2017-10-06 16:19:47",
        "state": "open",
        "number": 35744
    },
    {
        "title": "SCM: Support input box spell checking",
        "description": "For longer commit messages it would be great to have a spell checker there. Ideally, VSCode would provide that out of the box but if the direction is to leave spell checking up to extensions (and there are already some great ones out there, like [Spell Right](https://marketplace.visualstudio.com/items?itemName=ban.spellright) by @bartosz-antosik), there could be an API for that.\r\n\r\nPossibly related: Offline spell checker for VSCode #20266",
        "createdAt": "2017-10-04 11:52:01",
        "state": "open",
        "number": 35571
    },
    {
        "title": "Can we have a better mouse to caret positioning?",
        "description": "- VSCode Version: Code 1.16.1 (27492b6bf3acb0775d82d2f87b25a93490673c6d, 2017-09-14T16:38:23.027Z)\r\n- OS Version: Windows_NT x64 10.0.15063\r\n- Extensions: \r\n\r\nI know this convention is half one way, half the other...\r\n\r\nFor as long as text editors have existed there has been 2 conventions on mouse to caret positioning\r\n\r\nOne, which is what Code used now, is the annoying clicking anyway on a character places the caret in front of the character (Notepad)\r\n\r\nThe other, better imho, is if you click on a character, which ever side of the character, the left or the right, the mouse is, that is where the caret will be placed. (Notepad ++, this one seem to place the caret to the front clicking on the left 2/3rd of the character and to the back clicking the right 1/3rd). Which reduces the selection error quite drastically. \r\n\r\nIs there a way to set that up in the settings?\r\n\r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-autohotkey|sle|0.2.1\r\n\r\n\r\n\r\n---\r\n\r\nSteps to Reproduce:\r\n\r\n1.\r\n2.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes/No",
        "createdAt": "2017-10-01 22:51:27",
        "state": "open",
        "number": 35468
    },
    {
        "title": "Can't reset font size after zooming with mouse wheel",
        "description": "- VSCode Version: Code 1.16.1 (27492b6bf3acb0775d82d2f87b25a93490673c6d, 2017-09-14T16:38:23.027Z)\r\n- OS Version: Windows_NT x64 6.1.7601\r\n- Extensions: \r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nvscode-eslint|dba|1.3.2\r\nblock-travel|sas|0.0.2\r\nselectline-statusbar|tom|0.0.2\r\n\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes\r\n\r\n---\r\n\r\nCurrently there are two ways to change font size: by zooming the UI with keyboard shortcuts or menu options and by ctrl+scrolling with `\"editor.mouseWheelZoom\": true` . But it is impossible to reset the zoom level after zooming with mouse wheel except by restarting the editor. \r\n\r\nThe issue stems from this: ctrl+scrolling changes the font size independent from the UI zoom level, and \"Zoom In/Zoom Out/Reset Zoom\" actions change the UI zoom level (which affects visible font size) but not the font size set by the former.\r\n\r\nHere's a recording of me (using a fresh VS Code Insiders 1.17.0 build) ctrl+scrolling (zooming out) then changing the UI zoom level then ctrl+scrolling again (zooming in). You can see that the changes to font size are impossible to reset, they don't even register in the settings file.\r\n\r\n![2017-09-28_15-33-29](https://user-images.githubusercontent.com/7759622/30966831-f10a2a8a-a462-11e7-8328-797380aca23b.gif)\r\n",
        "createdAt": "2017-10-01 14:12:46",
        "state": "open",
        "number": 35456
    },
    {
        "title": "Disable fading scrollbars",
        "description": "There should be a way to disable fading scrollbars.  I like the scrollbars to always appear so I can always see at-a-glance where I am in the document.",
        "createdAt": "2017-10-01 12:20:22",
        "state": "open",
        "number": 35454
    },
    {
        "title": "Support edit time browsing of source-maps of node_modules/ dependencies when source maps are available?",
        "description": "- VSCode Version: 1.16.1 (1.16.1)\r\n- OS Version: macOS 10.12.6\r\n\r\nSome npm modules ship with sourcemaps (.map files or inline sourcemaps) and compiled js.  When source maps are present vscode is quite successful at presenting the sourcemapped codebase when debugging.\r\n\r\nThere are still gaps in the experience though when I want to set a breakpoint somewhere in one of my compiled node_modules/ packages.   I have to navigate to the compiled code, set a breakpoint somewhere in the compiled output, start the debugger, and then I'll end up in the original source through sourcemap translation with a  nice debugger experience ...  It would be amazing if vscode offered a mechanism that allowed directly navigating the sourcemaps of npm modules when available (in some kind of non-editable mode since changes to such a source-mapping presentation would of necessity not behave as expected without integration with the module's build process).  This way I could set breakpoints in a representation of the original source rather than it's compiled output.\r\n\r\nThis feature would also provide better readability ergonomics for browsing the code of my project's npm dependencies.  There's a large speed and convenience difference between peaking at the code on my disk in my editor vs (1) figuring out the version of the project on my disk and then (2) navigating to that version of that project's codebase wherever it happens to live (in practice this experience usually means opening the project on github and having a much worse code navigation experience than exists in vscode).",
        "createdAt": "2017-09-30 21:36:24",
        "state": "open",
        "number": 35439
    },
    {
        "title": "Per-editor/tab background color",
        "description": "It would be awesome to have the ability to change the background color of an editor/tab on a per-editor/tab basis, programmatically. The use case I'm thinking about is ToDo files, but there might be others. \r\n\r\nFor instance this is what a todo file might look like in VSC:\r\n\r\n<img width=\"726\" alt=\"screen shot 2017-09-29 at 15 35 41\" src=\"https://user-images.githubusercontent.com/1812093/31018423-55ed50ca-a52c-11e7-9df3-d199e016c6c2.png\">\r\n\r\n<img width=\"726\" alt=\"code-tabs\" src=\"https://user-images.githubusercontent.com/1812093/31019036-a8b8ab72-a52e-11e7-90de-65f3bdd2ffaa.png\">\r\n\r\nThis is what it looks like in Sublime:\r\n\r\n<img width=\"726\" alt=\"screen shot 2017-09-29 at 15 35 51 1\" src=\"https://user-images.githubusercontent.com/1812093/31018432-5e2291a6-a52c-11e7-92ff-b56c62cc6a22.png\">\r\n\r\n<img width=\"726\" alt=\"sublime-tabs\" src=\"https://user-images.githubusercontent.com/1812093/31019041-ac6fc57a-a52e-11e7-933e-c4927efe23fe.png\">\r\n\r\nHaving those editors/tabs in a different color makes them stand out. \r\n\r\nAlso, some decorators used by the VSC [extension](https://marketplace.visualstudio.com/items?itemName=fabiospampinato.vscode-todo-plus) in the screenshot are necessarily dynamic, and because of #32813 the colors used in them are provided via the settings. This means that if a user changes its theme he/she will also need to change those settings for those decorators to not look out of place. With the ability to set a custom background colors those decorators will look right no matter the theme.",
        "createdAt": "2017-09-29 14:02:16",
        "state": "open",
        "number": 35379
    },
    {
        "title": "File extension specific settings",
        "description": "This was discussed here:\r\nhttps://github.com/Microsoft/vscode/issues/1587\r\n\r\nbut instead what was implemented was language specific settings. That doesn't help us where we have the same language in files with different extensions but what to impose different settings on them.\r\n\r\n(ex. I have a DSL like language that looks like JS, I want to make it syntax highlight as JS, but disable validation because some things aren't quit right. Having to fork the JS language bindings for that and maintain it is unfortunate.)",
        "createdAt": "2017-09-29 02:08:36",
        "state": "open",
        "number": 35350
    },
    {
        "title": "Add control to open file shown in \"replace preview\" editor when performing project-wide find/replace",
        "description": "While performing a project-wide find/replace, opening an occurrence from the search sidebar opens a \"replace preview\" diff editor. This view is not editable, so if the user would like to edit the displayed file, the only current way to do so is manually either from the explorer sidebar or the quick-open palette.\r\n\r\nPer @roblourens' suggestion in #35323, \"There should be a working Open File button that always appears, git repo or not, in the replace diff editor.\"",
        "createdAt": "2017-09-28 18:21:17",
        "state": "open",
        "number": 35337
    },
    {
        "title": "Improve Configure Default Build task in multi root setup",
        "description": "Also, I should be able to configure multiple build tasks, but when I run \"Configure default build task\", it shows a message that there is already a task marked as the default build task.\r\n\r\nSee https://github.com/Microsoft/vscode/issues/35187\r\n",
        "createdAt": "2017-09-28 12:35:42",
        "state": "open",
        "number": 35312
    },
    {
        "title": "Git: Preserve open files list when switching branches",
        "description": "I suggest for saving file opening status each git branches. I think the each branches need different files on the branches. If I changed branches and close and open files every time. Next time if I changed branch again, next process is closing opening files and opening files needed to edit. And next time...",
        "createdAt": "2017-09-28 08:53:35",
        "state": "open",
        "number": 35307
    },
    {
        "title": "Extension host shouldn't exit after 5 seconds in shutdown when in debug mode",
        "description": "Otherwise it is very hard to debug a async deactivate method.",
        "createdAt": "2017-09-28 08:40:01",
        "state": "open",
        "number": 35306
    },
    {
        "title": "Source origin is not shown for \"loaded script\"",
        "description": "- Debug a node app with node2\r\n- Open `fs.js` from the sidebar, or from the loaded sources picker\r\n- It doesn't show the origin, `read-only core module`\r\n\r\nIf I open a node_internals script from the callstack, it does show the origin.\r\n\r\nThe loaded source event looks like `{\"seq\":0,\"type\":\"event\",\"event\":\"loadedSource\",\"body\":{\"reason\":\"new\",\"source\":{\"name\":\"fs.js\",\"path\":\"<node_internals>/fs.js\",\"sourceReference\":1022,\"origin\":\"read-only core module\"}}}`",
        "createdAt": "2017-09-28 00:26:10",
        "state": "open",
        "number": 35277
    },
    {
        "title": "Render find next/prev in the touchbar when focus is in the find widget",
        "description": "",
        "createdAt": "2017-09-26 15:39:56",
        "state": "open",
        "number": 35137
    },
    {
        "title": "Allow to switch to folder/workspace without window reload",
        "description": "#34774\r\n\r\n1. VSCode, open a no folder vscode\r\n2. Click on the big open folder button in the explorer\r\n3. Notice that VSCode reloads - unlike most other scenarios where we are adding aditional folders where this just happens",
        "createdAt": "2017-09-26 12:52:42",
        "state": "open",
        "number": 35109
    },
    {
        "title": "FindWidget navigate shortcuts not working in WebViews",
        "description": "Refs: #33296\r\n\r\nOS X\r\n\r\n1. Notice how you can use F3 and Shift F3 to find next / previous in editor find widget\r\n2. Notice how this is not working when find widget is invoked in Web Views (terminal, extension, md preview)\r\n3. No other find widget keyboard shortcut works for me",
        "createdAt": "2017-09-26 10:53:47",
        "state": "open",
        "number": 35079
    },
    {
        "title": "Add 'Collapse All' to Explorer panel",
        "description": "Now that the Explorer panel allows for extensions to add their own items, it can get quite cluttered, showing for example, open files, project files, code outline, git log, bookmarks, Docker containers, etc, etc.\r\n\r\nIt would be helpful to have a Collapse All button at the top of this list (or wherever is deemed appropriate), along with Collapse Other buttons on each section, to quickly de-clutter this view.",
        "createdAt": "2017-09-25 15:10:56",
        "state": "open",
        "number": 34972
    },
    {
        "title": "[RFE] Shortcut for selecting all lines with multi-cursor",
        "description": "Would be nice to have a shortcut to select all file lines at once using [Multiple Selections](https://code.visualstudio.com/docs/editor/codebasics#_multiple-selections-multicursor) feature.\r\n\r\nIt'd be very convenient especially on files with 1k+ lines.",
        "createdAt": "2017-09-21 20:18:50",
        "state": "open",
        "number": 34782
    },
    {
        "title": "Delete matching parentheses, brackets, or braces",
        "description": "- VSCode Version: Code 1.16.1 (27492b6bf3acb0775d82d2f87b25a93490673c6d, 2017-09-14T16:38:23.027Z)\r\n- OS Version: Windows_NT x64 6.3.9600\r\n- Extensions: Extensions are disabled\r\n---\r\n\r\nSteps to Reproduce:\r\n\r\n1. Create a new file.\r\n2. Paste the following code: `var foo = (1 + bar) + baz;`.\r\n3. Position the cursor before the first `(`. It and its matching parenthesis should highlight.\r\n4. Hit the delete key.\r\n5. Only the first parenthesis is deleted.\r\n\r\nIt would be useful if the corresponding parenthesis, brace, or bracket were deleted when the targeted one was.\r\n\r\nI see two ways to accomplish this:\r\n1. Add a shortcut for both backspace and delete that does the operation on the matching character.\r\n2. Automatically do the deletion. This could be an extension of the already-existing \"editor.autoClosingBrackets\" setting or (more likely) a new setting that governs this behavior.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes",
        "createdAt": "2017-09-21 14:12:03",
        "state": "open",
        "number": 34757
    },
    {
        "title": "Support Jupyter Notebook Interactive Computing paradigm",
        "description": "Around 500,000 VSCode users have been relying on Don Jayamanne has \"vscodeJupyter\" extension to connect to Jupyter Notebooks and execute code in an interactive environment.  (https://github.com/DonJayamanne/vscodeJupyter)\r\n\r\nWith rapid continuing growth of Python, Data Science, and Deep Learning communities, Jupyter Notebooks and interactive computing need to be promoted to a first class citizen of VS Code, rather than being an extension developed by a volunteer.  \r\n\r\nPlease refer to Atom + Hydrogen integration, and upcoming JupyerLab projects for ideas on how to integrate Notebooks inside Visual Studio Code.\r\n\r\nThank you!",
        "createdAt": "2017-09-21 08:46:57",
        "state": "open",
        "number": 34739
    },
    {
        "title": "Display line number as hybrid styles",
        "description": "I believe there is currently no option to display both absolute and relative line numbers. Available options for vscode are: 'on', 'off', and 'relative'.\r\n\r\nThe relative shows the relative line numbers for all lines except the current line. The current line is displayed as absolute number.\r\n\r\n![vscode](https://user-images.githubusercontent.com/31377202/30665564-05f0bbd2-9e17-11e7-9b37-770ef39fd0a7.png)\r\n\r\nIt would be nice, however, if we could have both absolute lines and relative lines displayed simultaneously. Here are two examples:\r\n\r\n![vs](https://user-images.githubusercontent.com/31377202/30665590-19191e2a-9e17-11e7-9689-d03460126959.png)\r\n\r\n![extension](https://user-images.githubusercontent.com/31377202/30665581-12cc620c-9e17-11e7-89d8-965a1682c14d.png)\r\n\r\nThe above images are from an extension of Visual Studio and the deprecated extension [Relative Line Numbers](https://marketplace.visualstudio.com/items?itemName=extr0py.vscode-relative-line-numbers). The extension is deprecated since VS Code 1.6 where the line number setting was officially supported.\r\n\r\nIn addition, some of additional features that would be great to have are:\r\n\r\n1. to customise the colours of line numbers, preferably to different colours as shown in the 2nd image\r\n1. to customise the positions of the two line numbers so we can choose to place absolute lines at left or right\r\n\r\nSince this feature was already supported by an old extension, I imagine it would not be so hard to implement. Would it be possible to support Hybrid Line Number feature in VS Code?",
        "createdAt": "2017-09-20 20:27:56",
        "state": "open",
        "number": 34715
    },
    {
        "title": "Support symbolic link folders in areas like debug, extensions",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.16.1\r\n- OS Version: macOS sierra 10.12\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open a empty workspace\r\n2. Create a file and create a symlink to this file in workspace.\r\n3. On opening the file, the linked file will be open in the editor. The path (on hovering over the opened file name) will be shown for the symlink and opening the file in Finder by right clicking will also open the symlink's parent folder. \r\n\r\nThe issue with this is it also causes inconsistency with Git markers in enhanced scrollbar and all extensions which operate on open file (like gitlens for `git blame`).\r\n\r\nThere should be a editor property to configure this path to be set as original file's path or the symlink's path.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes",
        "createdAt": "2017-09-19 11:22:17",
        "state": "open",
        "number": 34627
    },
    {
        "title": "Explorer Viewlet: Allow to set to hidden by default",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.16.1 (1.16.1) 27492b6bf3acb0775d82d2f87b25a93490673c6d\r\n- OS Version: macOS Sierra 10.12.6 (16G29)\r\n\r\nBy default, VSCode allow users to hide/show custom explorer views, however its behaviour is to always show all explorer views on a newly opened project. Since not all extension developer make an option to hide these custom views, doing the hiding stuffs is quite tedious when work with a lot of projects. By allowing users to set their default showing preferences, this help reduce time to do unnecessary stuffs a lot.\r\n",
        "createdAt": "2017-09-18 04:21:50",
        "state": "open",
        "number": 34557
    },
    {
        "title": "Implement privacy mode",
        "description": "There should be a configurable privacy flag preventing Visual Studio Code from making any outbound connections similar to macOS firewall stealth mode. This would be useful to prevent someone with access to github operations data or an administrator of github accounts from tracking you.\r\n\r\nVisual Studio Code immediately on launch makes various outbound tcp connections over https to Microsoft Corporation\r\n\r\nSome Visual Studio Code out-of-the-box behavior has been seen to contact github every 3 minutes\r\n\r\n- VSCode Version: 1.16.0\r\n- OS Version: Linux",
        "createdAt": "2017-09-16 00:53:16",
        "state": "open",
        "number": 34503
    },
    {
        "title": "Sort installed extension list to show  ones with updates first",
        "description": "",
        "createdAt": "2017-09-15 14:38:58",
        "state": "open",
        "number": 34471
    },
    {
        "title": "Prompt user if there is a collision in file to language association (two extensions registering different languages for a file extension)",
        "description": "Hi, I am trying to write an extension that recognizes \".spec\" files as [Gauge](https://getgauge.io/) language. However, if a user has installed some plugins the file association is overridden by the other extension. I noticed that my extension does not even get activated in this case. Is there any way that this can be prevented, other than the user changing the settings per workspace? Something that can be done in the extension itself would be useful.\r\nOr when a new extension is installed, can the user choose the default file association if there are conflicts. ",
        "createdAt": "2017-09-15 10:42:24",
        "state": "open",
        "number": 34450
    },
    {
        "title": "Extract the integrated terminal",
        "description": "\"Feature\" request.\r\n\r\nThe integrated terminal grows in functionality, to the point that it could soon become very useful standalone, as its *own app*. I'm only a casual VScode user (using vim most of the time), but I would definitely be interested in a well-behaved, consistent, reactively-configurable, multi-platform terminal not tied to the editor.\r\n\r\nObviously if such a situation were to unfold, the shared component (not entirely dissimilar to VTE) should be jointly developed and shared with VScode. Both could be able to leverage a common configuration so that whether a terminal leveraging such a theoretical common component is spawned within VScode or standalone, they behave the same.",
        "createdAt": "2017-09-15 09:46:22",
        "state": "open",
        "number": 34442
    },
    {
        "title": "Allow \"empty\" as a choice in snippets",
        "description": "I have the following snippet:\r\n```json\r\n\t\"Create Prototype Method\": {\r\n\t\t\"prefix\": \"prot\",\r\n\t\t\"body\": [\r\n\t\t\t\"${1:ClassName}.prototype.${2:functionName} = function $1$$2(${3|...args|}) {$0};\"\r\n\t\t],\r\n\t\t\"description\": \"Create prototype method\"\r\n\t},\r\n```\r\n\r\nWhat I would like to achieve is that I can choose between `...args` and *nothing* for `$3`. But whatever I try to signal *empty*, it results in unwanted behavior. So I'm assuming it's not supported right now.",
        "createdAt": "2017-09-14 10:38:35",
        "state": "open",
        "number": 34368
    },
    {
        "title": "Word selection when holding Ctrl and dragging with mouse",
        "description": "in VS2015 you can select whole words by holding down CTRL and do selection, it's faster and easier !!\r\n\r\nyou can also CTRL + CLICK to select a whole word. \r\n\r\nMAKE IT SO ... please :) ",
        "createdAt": "2017-09-14 08:16:45",
        "state": "open",
        "number": 34354
    },
    {
        "title": "Provide different settings for color picker and color preview (that square showing color)",
        "description": "Right now in settings there is only one setting to toggle both color picker and that square which is shown at the left of the color. I found `vscode-colorize` better, which shows color behind the text and is better than a square which pops up everytime when it identifies a color. The problem is that I still want to use that in-built color picker, but as they are toggled with same setting I'm unable to do so.",
        "createdAt": "2017-09-14 02:39:00",
        "state": "open",
        "number": 34341
    },
    {
        "title": "Allow CompletionItem.detail to show syntax coloring",
        "description": "## Feature request\r\nProvide an api for syntax coloring the `.detail` section in a `CompletionItem`. For example, in:\r\n\r\n<img width=\"722\" alt=\"screen shot 2017-09-11 at 7 27 40 pm\" src=\"https://user-images.githubusercontent.com/12821956/30305478-f19206fa-9727-11e7-9d07-26be0bc0b3fe.png\">\r\n\r\nThe `function alert(message?: any): void` text would be colorized as `typescript` code.\r\n\r\nTwo possible ideas on how this could be implemented:\r\n\r\n## Proposal 1\r\nAllow detail to be a `MarkdownString`\r\n\r\n```ts\r\nexport class CompletionItem {\r\n     ...\r\n    detail?: string | MarkdownString;\r\n    ...\r\n}\r\n```\r\n\r\n**Pros**\r\n- Support other text markup such as bolding text\r\n\r\n**Cons**\r\n- Perhaps too flexible since the detail text should always be a single line and should not contain things like images or bullet points\r\n\r\n\r\n## Proposal 2\r\nAdd a new language field for the detail string:\r\n\r\n```ts\r\nexport class CompletionItem {\r\n    ...\r\n    detail?: string;\r\n    detailLanguage?: string;\r\n    ...\r\n}\r\n```\r\n\r\n**Pros**\r\n- Standardized API that makes it very clear what the intended use case is\r\n\r\n**Cons**\r\n- Less flexibility\r\n\r\n\r\n\r\nI'm more in favor of something along the lines of the second proposal",
        "createdAt": "2017-09-12 02:37:23",
        "state": "open",
        "number": 34188
    },
    {
        "title": "TreeDataProvider: allow specifying a command to execute when a TreeItem is highlighted",
        "description": "This would allow extensions that use tree views for navigation match the behavior of the Quick Pick panel.\r\n\r\nRelated: https://github.com/patrys/vscode-code-outline/issues/5",
        "createdAt": "2017-09-11 09:55:39",
        "state": "open",
        "number": 34131
    },
    {
        "title": "Selection, highlighting and search colors conflict with each other",
        "description": "- VSCode Version: Code 1.16.0 (787b31c0474e6165390b5a5989c9619e3e16f953, 2017-09-06T16:27:49.891Z)\r\n- OS Version: Windows_NT x64 6.1.7601\r\n- Extensions: \r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\nintellij-idea-keybindings|k--|0.2.13\r\nselectline-statusbar|tom|0.0.2\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes\r\n\r\n---\r\n\r\nBackground colors for the editor selection, word highlighting and search matches all conflict with each other in an unexpected way, which seems to be caused by multiple bugs in color priorities and mixing rules.\r\n\r\n### Text selection color is not restored after searching\r\nThe following rules set all three highlighting colors to `#FF0000` and text selection to `#00FF00` on a black background. \r\n\r\n    \"workbench.colorCustomizations\": {\r\n        \"editor.background\": \"#000000\",\r\n        \"editor.foreground\": \"#FFFFFF\",\r\n        \"editor.lineHighlightBackground\": \"#000000\",\r\n        \"editor.selectionHighlightBackground\": \"#FF0000\",\r\n        \"editor.findMatchBackground\": \"#FF0000\",\r\n        \"editor.findMatchHighlightBackground\": \"#FF0000\",\r\n        \"editor.findRangeHighlightBackground\": \"#000000\",\r\n        \"editor.selectionBackground\": \"#00FF00\",\r\n        \"editor.inactiveSelectionBackground\": \"#00FF00\"\r\n    }\r\n\r\nNormal selection works as expected:\r\n\r\n![2017-09-11_00-37-43](https://user-images.githubusercontent.com/7759622/30253230-6a5fb4aa-9689-11e7-9587-d2fa735e04d0.gif)\r\n\r\n**Case 1**: put the cursor at the start of the second line and press Ctrl+D (\"Add Selection To Next Find Match\") three times, none of the three selections become partially or completely green. Since there's no search bar opened, I expect the text selection color to apply here. Pressing Shift+Left to shrink selection re-applies the selection color:\r\n\r\n![2017-09-10_20-48-29](https://user-images.githubusercontent.com/7759622/30251514-5631aa30-9669-11e7-8102-1d6e204be5e5.gif)\r\n\r\nChanging both `editor.findMatch*` settings to different colors and repeating the steps above doesn't change anything, selected regions are still red.\r\n\r\nThis is even more confusing if you use the search bar, because multiple cursors for Ctrl+D don't get drawn or animated in that mode (**case 2**). \r\n\r\n**Case 3**: put the cursor at the start of the file, press Ctrl+F, type \"aaa\", press Esc (here I expect green color to be applied to the selection, but it doesn't), press Shift+Left. Only then the selection color appears.\r\n\r\n![2017-09-10_20-22-40](https://user-images.githubusercontent.com/7759622/30251300-c0cafa9e-9665-11e7-904f-08a5c39d1103.gif)\r\n\r\nThis looks a bit different if `editor.findMatchBackground` is set to `#0000FF`, but the green color is still not applied after hitting Esc:\r\n\r\n![2017-09-10_21-12-57](https://user-images.githubusercontent.com/7759622/30251654-c1c89134-966c-11e7-8fca-f7f83f566549.gif)\r\n\r\n**Case 4**: while \"aaa\" is still the last searched term, put the cursor at the start of the file, press F3 (\"Find Next\") and then Esc. This is the only way I could force the green selection color to appear right after using the search:\r\n\r\n![2017-09-10_20-34-21](https://user-images.githubusercontent.com/7759622/30251443-eec11fa8-9667-11e7-83c7-222bca9740c5.gif)\r\n\r\n**Case 5**: there's something weird going on with the first match. If you repeat the steps from the case above but press F3 several times, after hitting Esc the color of the first match disappears completely:\r\n\r\n![2017-09-10_20-42-42](https://user-images.githubusercontent.com/7759622/30251498-e0786bf8-9668-11e7-95aa-58011f9d4894.gif)\r\n\r\n---\r\nExpected behavior for all cases above: `editor.selectionBackground` color should be applied to all selected regions when the selection is made without opening the search bar or after it was closed.\r\n\r\n### Inconsistent blending of `findMatch*` colors\r\nThe following rules set text selection to `#303030` (to affect other colors as little as possible), regions with the same content as selection to `#FF0000`, and current/other search matches to `#0000FF`/`#00FF00`. \r\n\r\n    \"workbench.colorCustomizations\": {\r\n        \"editor.background\": \"#000000\",\r\n        \"editor.foreground\": \"#FFFFFF\",\r\n        \"editor.lineHighlightBackground\": \"#000000\",\r\n        \"editor.selectionHighlightBackground\": \"#FF0000\",\r\n        \"editor.findMatchBackground\": \"#0000FF\",\r\n        \"editor.findMatchHighlightBackground\": \"#00FF00\",\r\n        \"editor.findRangeHighlightBackground\": \"#000000\",\r\n        \"editor.selectionBackground\": \"#303030\",\r\n        \"editor.inactiveSelectionBackground\": \"#303030\"\r\n    }\r\n\r\nIn this setup, depending on how and where the search bar is opened, the highlighting of matches changes in an unpredictable and seemingly random way.\r\n\r\n**Case 6**: remove the last searched term from the search bar, put the cursor at the start of the file, press Ctrl+F, type \"aaa\", press Enter or F3 several times. Both `editor.findMatch*` are blended with alpha 50% with the red `editor.selectionHighlightBackground` .\r\n\r\n![2017-09-10_22-49-54](https://user-images.githubusercontent.com/7759622/30253129-7e2c12aa-9687-11e7-887a-ce320d84756a.gif)\r\n\r\n**Case 7**: while \"aaa\" is the last searched term, put the cursor at the start of the file, press Ctrl+F, then F3 or Enter several times. Unblended green `editor.findMatchHighlightBackground` appears until you select search matches, then it changes to blended colors from the previous case. \r\n\r\n![2017-09-11_00-10-25](https://user-images.githubusercontent.com/7759622/30253025-83d9a520-9685-11e7-9e08-01a563346a71.gif)\r\n\r\n**Case 8**: while \"aaa\" is the last searched term, put the cursor at the start of the file and press F3 several times (same as in case 5). All colors are unblended, but  `editor.findMatch*` apply only to the first match.\r\n\r\n![2017-09-11_00-20-51](https://user-images.githubusercontent.com/7759622/30253093-fd4c348a-9686-11e7-9580-ce571d190c68.gif)\r\n\r\n**Case 9**: put the cursor at the start of the second line and press F3 several times. None of `editor.findMatch*` apply at all.\r\n\r\n![2017-09-11_00-29-05](https://user-images.githubusercontent.com/7759622/30253159-244ce290-9688-11e7-99f2-223c125777c9.gif)\r\n\r\n---\r\nIn all four cases the expected behavior would be to apply `editor.findMatch*` correctly no matter how the search was triggered. Also, blending is undocumented and very unexpected: `editor.selection*` and  `editor.findMatch*` pairs seem to be designed to mirror each other, with each active only in their respective editor mode. But only `editor.selectionHighlightBackground` is blended with one or both colors from the other pair, and there's no way to influence or override this. Since there are two pairs, blending seems completely unnecessary to me.",
        "createdAt": "2017-09-10 21:54:38",
        "state": "open",
        "number": 34105
    },
    {
        "title": "Support ligatures in terminal",
        "description": "Regresses with performance improvements in terminal's renderer https://github.com/Microsoft/vscode/pull/33954",
        "createdAt": "2017-09-10 18:59:57",
        "state": "open",
        "number": 34103
    },
    {
        "title": "Feature request - undo after moving cursor should optionally just put the cursor back, without undoing",
        "description": "There's a feature I'm missing that I've used in other IDE's, when finishing typing, moving somewhere else (for example to select+copy some variable name), then pressing CMD+Z should bring the cursor back to the last edit location without actually undoing the typing there.\r\n\r\nI know there's some \"last cursor position\" keyboard shortcut, but I believe this should be a first-class functionality of the undo, like it is in other editors (I remember this from webstorm, but I'm pretty sure the muscle memory for doing this comes from way before webstorm).\r\n\r\nWhat do you think? \r\nThanks\r\n\r\n- VSCode Version: 1.16\r\n- OS Version: OSX 10.11\r\n\r\n",
        "createdAt": "2017-09-10 08:19:53",
        "state": "open",
        "number": 34093
    },
    {
        "title": "Enable fuzzy matching for picker",
        "description": "Have a quick pick control with these values `[\"hello\", \"hello_there\"]`\r\n\r\nType `ht` or `hello_` -> `hello_there` will show up\r\nType `he_` -> no results",
        "createdAt": "2017-09-10 06:06:18",
        "state": "open",
        "number": 34088
    },
    {
        "title": "ibus-gtk not working",
        "description": "Hello. The problem I'm facing now is when I installed ibus-gtk, I cannot type Chinese characters or any other foreign language characters in VS Code. The purpose of ibus-gtk is to allow the candidate panel to appear as I type. Here are two screenshots of the problem.\r\n\r\n![problem2](https://user-images.githubusercontent.com/25891418/30241973-2aef5ca4-95c0-11e7-86c5-f7d493fae7dd.png)\r\n\r\n![problem](https://user-images.githubusercontent.com/25891418/30241972-1e1d7ca4-95c0-11e7-89bc-707085e9fcc5.png)\r\n\r\nAs you can see from the first image, the candidate panel appears at the bottom of the screen. However, if I install ibus-gtk, I cannot type chinese characters in VS Code.\r\n\r\nI don't know how to fill in the Steps to Reproduce. Sorry.\r\n\r\n--The End--\r\n\r\n- VSCode Version: Code 1.16.0 (787b31c0474e6165390b5a5989c9619e3e16f953, 2017-09-06T16:19:37.192Z)\r\n- OS Version: Linux x64 4.4.0-53-generic\r\n- Extensions: \r\n\r\nExtension|Author (truncated)|Version\r\n---|---|---\r\npython|don|0.7.0\r\ncpptools|ms-|0.12.3\r\ncsharp|ms-|1.12.1\r\ndebugger-for-chrome|msj|3.2.1\r\nvscode-icons|rob|7.12.0\r\n\r\n(1 theme extensions excluded)\r\n\r\n\r\n---\r\n\r\nSteps to Reproduce:\r\n\r\n1.\r\n2.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes/No",
        "createdAt": "2017-09-09 16:41:27",
        "state": "open",
        "number": 34079
    },
    {
        "title": "Let user to set the mouse keys as keybindings (feature request)",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.17.0-ins\r\n- OS Version: win7x64\r\n\r\nHow about to let user to set mouse keys as keybindings?\r\n\r\nFor example, people who have the mouse-wheel like this:\r\n\r\n![image](https://user-images.githubusercontent.com/24613274/30194175-3c6122f4-945a-11e7-9f2b-2aa53cf06ab7.png)\r\n\r\nwould have +2 often used commands in VS Code, bound to these \"Shift to the Left\" of the wheel, and \"Shift to the Right\".\r\n\r\nAnd the owners of the mouse like that:\r\n\r\n![image](https://user-images.githubusercontent.com/24613274/30194328-2dc80aa4-945b-11e7-9715-70e2dfb1a333.png)\r\n\r\nwould have +4 (or even 5) more chances to bind all necessary commands to the keys.\r\n",
        "createdAt": "2017-09-08 03:04:45",
        "state": "open",
        "number": 33985
    },
    {
        "title": "Smart Tabs - Feature Request",
        "description": "Some editors support what's called \"smart tabs.\" The spec for vscode might look like the following:\r\n\r\n>Indentation defined by the nesting of code blocks is made of tabs, while any alignment that follows is made only of spaces.\r\n\r\nConceptually, this would ensure that mixed tabs and spaces for indentation would never occur.\r\n\r\n![tabs-vs-spaces](https://cloud.githubusercontent.com/assets/1058243/18036844/49a9426c-6d3b-11e6-98ae-2c9c3db623ae.gif)\r\n\r\n[IntelliJ IDEA | Tabs and Indents | Smart Tabs](https://www.jetbrains.com/help/idea/2017.1/code-style-java.html#tabs_and_indents)\r\n_Related discussion: https://github.com/editorconfig/editorconfig/issues/323#issuecomment-327935294_",
        "createdAt": "2017-09-07 23:34:31",
        "state": "open",
        "number": 33974
    },
    {
        "title": "introduce \"pathMapping\" as a more powerful replacement for \"remoteRoot/localRoot\"",
        "description": "Currently the node/chrome debuggers support two models of mapping paths between the backend/runtime and the VS Code workspace:\r\n- Node Debug: \"remoteRoot/localRoot\" \r\n- Debugger for Chrome: \"pathMapping\"\r\n\r\nSince the \"pathMapping\" supports multiple mappings and users are asking for it, we should support this across the board.\r\n\r\n/cc @roblourens ",
        "createdAt": "2017-09-05 22:05:36",
        "state": "open",
        "number": 33861
    },
    {
        "title": "Inline decorations can conflict with one another",
        "description": "- VSCode Version: Code - Insiders 1.16.0-insider (1452d0a8f75cc7be3f8ab735af3a198a0f11aff6, 2017-09-04T20:15:38.808Z)\r\n- OS Version: Windows_NT x64 10.0.16281\r\n---\r\n\r\nI have both **GitLens** and **Import Cost** extensions installed and the decorators added to the end of the line by both seem to conflict as can be seen below.\r\n\r\n![decorators](https://user-images.githubusercontent.com/641685/30073490-fe4bd614-923b-11e7-97f9-5064b6eaa5c3.gif)\r\n\r\nI would have either expected the GitLens decoration to no appear at all (less than ideal imo) or that the GitLens decoration (since it was being added last) would win (and once it was removed it would revert to the previous one). But currently it looks like some properties between the 2 decorators get merged which looks far less than ideal \ud83d\ude04 \r\n\r\nOriginally reported here: https://github.com/eamodio/vscode-gitlens/issues/131\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: No",
        "createdAt": "2017-09-05 17:17:55",
        "state": "open",
        "number": 33852
    },
    {
        "title": "Better verbosity in errors with extensions",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.15.3\r\n- OS Version: windows 10\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: No\r\n\r\nWith extensions package, can you give more capacities for logging ?\r\nI've one extension crash but I can't determine the guilty because I don't have any informations on this in logs :\r\n![image](https://user-images.githubusercontent.com/331816/30066021-fe8a2340-9256-11e7-8bc6-2a1ed165014b.png)\r\n\r\n\r\n",
        "createdAt": "2017-09-05 14:35:10",
        "state": "open",
        "number": 33847
    },
    {
        "title": "Allow an indent increase pattern to span multiple lines",
        "description": "Refs:https://github.com/Microsoft/vscode/issues/31869 #30859 \r\nFixes reffed issue, automatically indents next line after an html tag is opened\r\n\r\nThe changes allow a language to supply a `partialEndOfIncreaseIndentPattern` RegExp.\r\nWhen supplied, vscode will use this pattern to determine whether or not to test `increaseIndentPattern` against more lines.\r\n\r\nFor example if we have\r\n```\r\n<div data-foor=\"foo\"\r\n        data-bar=\"bar\">\r\n```\r\nHitting return when the cursor is ahead of the `>` will now correctly indent the new line (it did not previously)\r\n\r\nAs mentioned in the commit, this is also fixes the reffed issue, when now a `</div>` will be correctly indented\r\n \r\nOne unfortunate issue I see is that github makes my changes look much more dramatic than they actually are.\r\nTo display the changes as intended use visual studio code and you'll get a cleaner diff\r\n\r\nOne basic change I made to the function I had to add my changes to is change something like this.\r\n```\r\nif(condition){\r\n      return val;\r\n} else if (condition2){\r\n      return val2;\r\n} else {\r\n      return val3\r\n}\r\n```\r\n\r\nto\r\n\r\n```\r\nif(condition){\r\n      return val;\r\n} \r\n\r\nif (condition2){\r\n      return val2;\r\n} \r\n\r\nreturn val3\r\n```\r\n\r\n\r\nThe reason I did this is because one of the conditions required a little more logic than what can be squeezed in into an expression within the parentheses of an if, and I noticed that a lot of the logic for the last else was squeezed into the function rather than being factored out in a separate method (which is what I could have also done while maintaining the previous condition structure)\r\n\r\nLet me know if any changes are required\r\n\r\nCheers",
        "createdAt": "2017-09-05 02:53:50",
        "state": "open",
        "number": 33821
    },
    {
        "title": "Create an option to position the intellisense parameter info top or bottom.",
        "description": "Currently the parameter info tooltip is always placed above the cursor. This is often quite annoying since it completely blocks code in the above lines and you sometimes need to look at your context to know what values to give the parameters.\r\n\r\nExample:\r\n![image](https://user-images.githubusercontent.com/702922/30005026-e9034dec-9096-11e7-80c0-1a23814ca15c.png)\r\n",
        "createdAt": "2017-09-03 16:58:55",
        "state": "open",
        "number": 33752
    },
    {
        "title": "Allow to hide editor title section entirely (tabs, breadcrumbs)",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.15.0\r\n- OS Version: Manjaro Linux x64 Gellivara\r\n\r\nSteps to Reproduce:\r\n\r\n1. Configure `settings.json`\r\n\r\n```\r\n{\r\n  \"workbench.editor.showTabs\": false\r\n}\r\n```\r\n\r\n2. Tabs are hidden but tabs section still fill the space.\r\n\r\nReproduces without extensions: Yes\r\n\r\nSome captures:\r\n\r\n1. Face to face with Vim\r\n\r\n![screenshot_20170831_111904](https://user-images.githubusercontent.com/3067335/29933705-34de99d4-8e3e-11e7-81aa-2a01efef8049.png)\r\n\r\n2. Proposed setting:\r\n\r\n```\r\n{\r\n  \"workbench.editor.showTabs\": \"none | one | all\"\r\n}\r\n```\r\n\r\nWith `\"workbench.editor.showTabs\": \"none\"` then\r\n\r\n![screenshot_20170831_112820](https://user-images.githubusercontent.com/3067335/29934088-8081d7c4-8e3f-11e7-8654-c36488789f65.png)\r\n",
        "createdAt": "2017-08-31 16:30:38",
        "state": "open",
        "number": 33607
    },
    {
        "title": "Git: Support commit message intellisense",
        "description": "GitHub uses excellent system of closing issues, by providing the commit with appropriate text: \"Closes #xx\", \"Close #xx\" etc.\r\n\r\nIt would be quite useful for VS Code to also integrate with the issues system, and suggest the issues just like the GitHub's textarea does during commenting or whatever.\r\n\r\nFeature:\r\nEnable integration with GitHub issue system if `origin` is GH server. Retrieve all issues, and suggest them after entering \"#\" into commit message.",
        "createdAt": "2017-08-29 23:01:23",
        "state": "open",
        "number": 33465
    },
    {
        "title": "[folding] Automatic function/method folding",
        "description": "Please consider automatic function folding, based on the current cursor location.\r\n\r\nI think it can be a great way to help developers maintain a high level mental map of source files and ease navigation between functions/methods. While it builds on existing building blocks already present in many code editors (block folding, tracking language specific scopes, ...) it may also be a novel approach (I'm not aware of any existing implementation)\r\n\r\nThe core idea is to edit source code with all functions folded by default, and expand the \"current\" function when the cursor enters it, then fold it back when the cursor leaves the function region. Explicit pins can allow developers to keep key functions expanded.\r\n\r\n[Full description of the proposal](https://docs.google.com/document/d/13L_xmx64E-2Y8lHRX7wzJOXVteVMTApeUhcF4RSKU-w/edit?usp=sharing)",
        "createdAt": "2017-08-29 20:20:17",
        "state": "open",
        "number": 33449
    },
    {
        "title": "Allow to name workspaces",
        "description": "It would be nice to be able to associate a label with a workspace. The label can be presented in the window title and in the recently opened list\r\n\r\n<img width=\"1120\" alt=\"screen shot 2017-08-29 at 11 00 17\" src=\"https://user-images.githubusercontent.com/5047891/29813131-4c5380ca-8ca9-11e7-930a-8f47e6c557c0.png\">\r\n",
        "createdAt": "2017-08-29 09:01:38",
        "state": "open",
        "number": 33340
    },
    {
        "title": "Some punctuation causes incorrect wrapping when followed by quote.",
        "description": "\r\n- VSCode Version: Code 1.15.1 (41abd21afdf7424c89319ee7cb0445cc6f376959, 2017-08-16T18:05:38.342Z)\r\n- OS Version: Windows_NT ia32 10.0.14393\r\n\r\n---\r\n\r\nSteps to Reproduce:\r\n\r\n1. Create or open a file of any type compatible with VS Code that uses text, preferably .md or .txt but other file types work.\r\n2. Insert text mixed with white space to ensure proper wrapping behavior.\r\n3. At the end of the line, for the last character before wrapping would occur, insert a comma (`,`), a question mark (`?`), or an ampersand (`&`).\r\n4. Follow that character with one of the above listed characters or with a double quotation mark (`\"`) or single quotation mark (`'`) or a space (` `) with no other characters between.\r\n\r\nExpected result: The entire chunk of punctuation wraps as though it were a single word.\r\nActual Result: The second punctuation mark wraps as though the previous mark was whitespace.\r\n\r\n![wrapping](https://user-images.githubusercontent.com/31398891/29760298-480a0a4e-8b77-11e7-8fc9-0d39c3860c03.png)\r\n\r\n\r\nThis is particularly annoying when writing dialogue using markdown, as it causes the quotation mark to wrap and look odd.\r\n",
        "createdAt": "2017-08-28 05:30:39",
        "state": "open",
        "number": 33236
    },
    {
        "title": "Missing \"Set Explorer's Views Configuration as Default\" option",
        "description": "It's cool that we can customize which and in what order explorer's views are displayed, but I switch between tens of projects, and without an option for setting the current layout for every project this feature becomes unusable, I can't spend an afternoon setting the same layout for every project, only to find out that I have to do it all over again if I ever decide to change it.\r\n\r\nI hope you would consider an option for making the current configuration the default one across all projects.",
        "createdAt": "2017-08-27 10:54:22",
        "state": "open",
        "number": 33212
    },
    {
        "title": "Group Policies (GPO) support",
        "description": "I need to pre-configure and force-configure settings in VSCode for a larger team. We need to make sure all of them are using the same settings or we end with a mess of tabs/spaces (2/4/8) just as one example.\r\n\r\nSome other things that come in mind are:\r\n- disable automatic update\r\n- add required addons\r\n- disable bad addons\r\n- all settings that can be made in the json file.\r\n\r\nIf this is already possible and I just missed the documentation let me know, please.",
        "createdAt": "2017-08-26 09:31:25",
        "state": "open",
        "number": 33185
    },
    {
        "title": "MSI based Windows setup",
        "description": "I need to install VS Code for our developers. They are not allowed to install software. As we are only using AD deployment this requires a proper MSI setup that installs _per machine_. In the installer I need to be able to disable automatic updates on machine level.\r\n\r\nI have only seen a bad InnoSetup setup that cannot deployed via AD. Can you create a modern installer based on WiX toolkit, please? If you need help I may be able to help.",
        "createdAt": "2017-08-26 09:08:53",
        "state": "open",
        "number": 33184
    },
    {
        "title": "Feature request: Add \"Open with VS Code\" to Windows Explorer without reinstall",
        "description": "I've mentioned this before in another issue, but I though I'd make a new issue since the other one is unrelated & got closed.\r\n\r\nAnyways, the only way to add the \"Open with VS Code\" context menu option to Windows Explorer is to re-install the application. It would be ideal if there was some way to do this in the app without reinstalling it.\r\n\r\nFor example, Atom has a way to do this in its settings page. Maybe something similar could be done with VS Code.",
        "createdAt": "2017-08-25 06:13:36",
        "state": "open",
        "number": 33125
    },
    {
        "title": "Synchronized Scrolling in Split Editor",
        "description": "I have a feature request related to synchronized scrolling in the Split Editor. I checked for extensions and didn't see any. Was wondering if this is the pipeline or not.",
        "createdAt": "2017-08-24 21:01:32",
        "state": "open",
        "number": 33110
    },
    {
        "title": "Marketplace: add support for <details> and <summary> tags",
        "description": "###### _This is probably not the right repository for this issue, but I haven't been able to find a better one._\r\n\r\nGitHub's Markdown (and probably pretty much any other Markdown flavor) supports the `details` and `summary` tags. They are pretty useful, especially when writing long documents:\r\n\r\n<details>\r\n  <summary>Click to show more</summary>\r\n  More\r\n</details>\r\n\r\n\r\n### This is what the Marketplace renders:\r\n\r\n<img width=\"749\" alt=\"screen shot 2017-08-24 at 17 07 49\" src=\"https://user-images.githubusercontent.com/1812093/29673249-eefc6d1e-88ee-11e7-8913-d9870bf71fc3.png\">\r\n\r\n### Instead of:\r\n\r\n<img width=\"848\" alt=\"screen shot 2017-08-24 at 17 08 02\" src=\"https://user-images.githubusercontent.com/1812093/29673259-f9505cd0-88ee-11e7-8a91-b3f7641a8d27.png\">\r\n\r\n<img width=\"846\" alt=\"screen shot 2017-08-24 at 17 08 12\" src=\"https://user-images.githubusercontent.com/1812093/29673261-fc3bb7b4-88ee-11e7-80b3-e21736377a98.png\">\r\n",
        "createdAt": "2017-08-24 15:13:07",
        "state": "open",
        "number": 33094
    },
    {
        "title": "Inline text adornments break word wrapping",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.15.1\r\n- OS Version: Windows 10 x64\r\n\r\nSteps to Reproduce:\r\n\r\n1. Settings:\r\n```\r\n    \"editor.wordWrap\": \"on\",\r\n    \"css.colorDecorators.enable\": true\r\n```\r\n2. Code example:\r\n```\r\n   .form-control:focus { border-color: #141d36; box-shadow: 0 1px 1px rgba(0, 0, 0, 0.075) inset, 0 0 4px rgba(165,128,57,0.6); -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, 0.075) inset, 0 0 4px rgba(165,128,57,0.6); }\r\n```\r\n\r\nWith colorDecorators disabled word wrapping works fine. After enabling it wordWrap completely ignores the width of added decorators and wrapes the code as they are not there what makes parts of the code to be pushed out of viewport.\r\n\r\nI think it would be better to just underline the colors accordingly instead adding new elements next to it.\r\nAlso it would be great to add some margin between wrapped code and minimap (or whatever is on the right).\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes\r\n\r\n**Edit**: Added a screenshot to demonstrate the issue:\r\n<img width=\"1072\" alt=\"screen shot 2018-05-15 at 1 09 33 am\" src=\"https://user-images.githubusercontent.com/8781353/40044668-f200623c-57dc-11e8-841f-a32a06e54b5a.png\">",
        "createdAt": "2017-08-20 22:55:03",
        "state": "open",
        "number": 32856
    },
    {
        "title": "Drag markdown preview to New Window",
        "description": "- VSCode Version: 1.15.1, 64 bit\r\n- OS Version: Windows 10 64 bit\r\n\r\nSteps to Reproduce:\r\n1. Open markdown file, click the preview button\r\n2. File/New Window\r\n3. Try and drag just the preview part to the new window\r\n\r\nIt would be really nice if I could drag the markdown preview to a new window so I can edit the markdown on one monitor and see the preview result on another monitor.\r\n",
        "createdAt": "2017-08-19 07:30:39",
        "state": "open",
        "number": 32818
    },
    {
        "title": "[theming] Access theme's colors programmatically ",
        "description": "I think we should add support for accessing theme's colors programmatically. \r\n\r\nFor instance let's take as an example the popular [OneDark Pro](https://github.com/Binaryify/OneDark-Pro/blob/master/themes/OneDark-Pro.json) theme, I'd like to access colors defined under [tokenColors](https://github.com/Binaryify/OneDark-Pro/blob/master/themes/OneDark-Pro.json#L67).\r\n\r\nMy use case: I'm making an extension that decorates some tokens, and I'd like them to have the same color that comments have in my theme, the problem is that the regex I use to find those tokens depends on some configurable value, so I cannot pre-compute it in advance and just put it in a `.tmLanguage` file.\r\n\r\nIt's already possible to somehow access colors defined under the [colors](https://github.com/Binaryify/OneDark-Pro/blob/master/themes/OneDark-Pro.json#L4) key, via something like `new vscode.ThemeColor ( 'activityBar.background' )`, adding support for this sounds like a useful generalization to me.\r\n\r\nWhat do you think?",
        "createdAt": "2017-08-19 00:53:04",
        "state": "open",
        "number": 32813
    },
    {
        "title": "No way to have tab show as eight spaces, indent with something else",
        "description": "It does not appear to me that there is a way to make it so tabs show up as 8 spaces distinct from the actual indent size or tabs/spaces preference.\r\n\r\nPretty simple feature request, actually.  I have an existing codebase that I am converting over piecemeal to use 4 space indents.  Trouble is, the codebase is already full of a mixture of spaces and tabs which assumes that a tab character indents by 8 spaces, despite nominally having an indent of four spaces.  So you get fun horrors like:\r\n\r\n```\r\n\u00b7\u00b7\u00b7\u00b7foo();\r\n\u00b7\u00b7\u00b7\u00b7if (bar) {\r\n\u2b7e       baz();\r\n\u00b7\u00b7\u00b7\u00b7}\r\n```\r\n\r\nIt'd be nice to have it both ways.  VS Community seems to allow this, but I haven't found a combination of features that allows this in VS Code",
        "createdAt": "2017-08-19 00:28:23",
        "state": "open",
        "number": 32811
    },
    {
        "title": "Monolithic structure, multiple project settings",
        "description": "I was wondering if it is possible for VSCode to pick up on multiple `.vscode/settings.json`\r\n\r\nFor instance if you are working in an monolithic environment with multiple smaller projects inside it, and each have their own `.vscode/settings.json`.\r\nCan VSCode pickup on that, and apply the settings from the smaller projects `.vscode/settings.json` to their subtree and descendant files?\r\n\r\n```\r\nmonolithic-project/\r\n\u251c\u2500\u2500 small-project1/\r\n\u2502   \u251c\u2500\u2500 .vsocde\r\n\u2502   \u2502   \u2514\u2500\u2500 settings.json\r\n\u2502   \u2514\u2500\u2500 src/\r\n\u2502       \u2514\u2500\u2500 index.ts\r\n\u2514\u2500\u2500 small-project2/\r\n    \u251c\u2500\u2500 .vsocde\r\n    \u2502   \u2514\u2500\u2500 settings.json\r\n    \u2514\u2500\u2500 src/\r\n        \u2514\u2500\u2500 index.ts              \r\n```\r\n\r\n**Wanted effect:**\r\n`monolithic-project/small-project1/.vscode/settings.json` applies to `monolithic-project/small-project1` and all descendant files.\r\n`monolithic-project/small-project2/.vscode/settings.json` applies to `monolithic-project/small-project2` and all descendant files.",
        "createdAt": "2017-08-17 06:19:24",
        "state": "open",
        "number": 32693
    },
    {
        "title": "Debug console: be able to disable automatic scrolling to end",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: Version 1.15.0 (1.15.0)\r\n- OS Version: Darwin ecvaawplun5.local 16.7.0 Darwin Kernel Version 16.7.0: Thu Jun 15 17:36:27 PDT 2017; root:xnu-3789.70.16~2/RELEASE_X86_64 x86_64\r\n\r\nSteps to Reproduce:\r\n\r\n1. Run a debug session that generates a lot of output.\r\n2. The debug console will automatically scroll to the end.\r\n\r\nReproduces without extensions: No\r\n\r\n<img width=\"1376\" alt=\"image\" src=\"https://user-images.githubusercontent.com/630613/29359808-cf34f9cc-8288-11e7-8f83-a952f74f4256.png\">\r\n\r\nThis has been tested with https://github.com/rubyide/vscode-ruby, but I would guess the same happens with other languages as well. When the debug console receives lots of output (say 10s or 100s of lines), it automatically scrolls to the bottom.\r\n\r\nFor me, this is annoying since the errors I am most interested in are most likely at the _beginning_ of the output. Means I have to scroll up manually every time.\r\n\r\nCould we make this an option? (Auto-scroll on/off)\r\n",
        "createdAt": "2017-08-16 10:43:27",
        "state": "open",
        "number": 32632
    },
    {
        "title": "Add drag and drop for contributed tree views",
        "description": "We've been using new Tree View API to provide structured view of F# projects - in F# project files needs to be ordered according to compilation order so this additional view gives users better information about their project. We also include in the view list of project references, and assembly references so it's really similar to the Visual Studio solution explorer.\r\n\r\nIt looks like following:\r\n![image](https://user-images.githubusercontent.com/5427083/29336346-be4fc22a-820d-11e7-9ea6-abe8b185989d.png)\r\n\r\nAs I've mentioned - ordering of files is really important for the F# projects, and we provide couple of helper commands to manage it (move file up/down etc).  Those commands work more or less, but I don't think it's best UX.\r\nI think it would be super nice if users had ability to use normal drag and drop to manipulate the order - just as they are able to manipulate files in normal file explorer (drag and drop files to move them to subfolder for example)",
        "createdAt": "2017-08-15 21:05:00",
        "state": "open",
        "number": 32592
    },
    {
        "title": "Add Opacity & Variable Height to Minimap",
        "description": "I'm looking for a way to change my VSCode Editor Minimap to behave more like the Atom Minimap.\r\n\r\nSpecifically, to have container opacity and variable height as the file grows in length. The opacity is what is most important to me, but the variable container length would help a lot as well.\r\n\r\nCurrently, my Atom minimap allows opacity and only grows in length as needed.  \r\n![capture](https://user-images.githubusercontent.com/21133719/29327005-e4b47bee-81aa-11e7-8cd9-52cb6411d8c0.JPG)\r\n\r\nWhile my VSCode minimap covers my code and maintains full pane height no matter how many lines are in the file. \r\n![capture1](https://user-images.githubusercontent.com/21133719/29327030-f82e16b2-81aa-11e7-8107-07972643f65f.JPG)\r\n\r\n\r\nI tried asking a question about this on [stackoverflow](https://stackoverflow.com/questions/45685834/vscode-minimap-creating-opacitylimited-height-like-atom-minimap-package) and looking through these issues. So far the closest I've found to this question is issue [#21255](https://github.com/Microsoft/vscode/issues/21255), which points to issue [#21229](https://github.com/Microsoft/vscode/issues/21229) and then to issue [#21359](https://github.com/Microsoft/vscode/issues/21359), which lead to the implementation of a box shadow to make the minimap separation more prominent.\r\n\r\nUnfortunately, the box shadow doesn't allow me to recover that text editor width while keeping my minimap enabled. This makes the difference between being able to see all my code using 2 panes and having my code cut off by the minimap.\r\n\r\nI'm sure a lot of people transitioning from Atom to VSCode would appreciate being able to maintain this editor workspace, particularly when working with a lot of smaller files.\r\n\r\nEDIT:\r\n\r\nAdding what information I can in case you consider feature implementation:\r\n\r\nAtom uses a gear icon that appears over the minimap on mouseover allows for 'absolute-mode' to be toggled on and off. This option toggles between a VSCode-like minimap and the one I showed above.\r\n![capture3](https://user-images.githubusercontent.com/21133719/29331547-062e4f02-81ba-11e7-89a2-2bdfa4bc8e17.JPG)\r\n\r\nFrom what I understand of the VSCode design paradigm so far, I think a similar feature could be toggled as a User Setting such as `\"editor.minimap.absolutePosition\": true,`",
        "createdAt": "2017-08-15 17:20:12",
        "state": "open",
        "number": 32581
    },
    {
        "title": "[themes] Disable Italic Option Feature Request",
        "description": "- VSCode Version: 1.15.0\r\n- OS Version: Windows 10 Version 1703 Build 15063.540\r\n\r\nSteps to Reproduce:\r\n\r\n1.\r\n2.\r\n\r\nReproduces without extensions: Yes/No\r\n\r\nSometimes authors of themes use italic for `comments`, `language keywords` and for other things. In some cases that's looks not so good (as example what I mean you can read my issue/feature-request on Material Theme https://github.com/equinusocio/vsc-material-theme/issues/81). Of course we can change this in theme source code manually but it will be great to have `Disable Italic Option` in vscode config file.\r\n\r\nFor example in Sublime Text 3 we have `no_italic` font option to disable italic at all:\r\n\r\n```\r\n\"font_options\":\r\n[\r\n\t\"no_italic\"\r\n],\r\n```\r\n\r\nRelated issue: https://github.com/Microsoft/vscode/issues/25895\r\n\r\nFira Code don't have Italic too.\r\n",
        "createdAt": "2017-08-15 16:54:22",
        "state": "open",
        "number": 32579
    },
    {
        "title": "Save Proxy Credentials",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.15\r\n- OS Version: MacOS Sierra 10.12.6\r\n\r\nIt would be nice if Code could save my proxy credentials for a certain proxy address. It is a bit intrusive having to enter my credentials every time I hop onto my corporate proxy.",
        "createdAt": "2017-08-15 15:09:50",
        "state": "open",
        "number": 32566
    },
    {
        "title": "Toggle the block comment without having to select it",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.15.0\r\n- OS Version: windows10\r\n\r\n\r\n\r\nThere is a problem that bothers me. **If I want to remove the block comment, I have to select it**, like this:\r\n\r\n![](http://oe9d7h5y3.bkt.clouddn.com/select.png)\r\n\r\nIf I do not select it, and go to toggle block comment, it becomes:\r\n\r\n![](http://oe9d7h5y3.bkt.clouddn.com/select2.png)\r\n\r\nHave you a good idea to solve it?\r\n\r\n**PS**: I use this hot key `ctrl+shift+/` to toggle block comments, which was bound to the command  `editor.action.blockComment`\r\n\r\n\r\nReproduces without extensions: Yes\r\n\r\n",
        "createdAt": "2017-08-15 11:58:51",
        "state": "open",
        "number": 32541
    },
    {
        "title": "Ability to not to show the outdated extensions badge",
        "description": "VSCode version: 1.13.1\r\n\r\n![image](https://user-images.githubusercontent.com/22401916/29551351-f8118be4-871a-11e7-92de-1d917ce87a3b.png)\r\nA feature request: option to switch off the notifier (in screenshot above - 3) of the available updates for extensions.\r\n\r\nThanks\r\n",
        "createdAt": "2017-08-14 20:55:29",
        "state": "open",
        "number": 32505
    },
    {
        "title": "[json] no quick suggestions when in a string literal",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.15\r\n- OS Version: win7x64\r\n\r\nSuggestions in settings - pretty nice idea. BUT. There will be no suggestions after you will remove 1 or more letters after typing something.\r\n\r\nFor example, I type \"snipp\", then remove one letter to \"snip\", and that's it! VS Code will not show you any suggestions after this. Until you will remove everything including quote marks. That's annoying, guys!\r\n\r\n![settings - suggestions](https://user-images.githubusercontent.com/24613274/29276499-7a363444-8117-11e7-95f8-0d87c60bec56.gif)\r\n",
        "createdAt": "2017-08-14 14:44:14",
        "state": "open",
        "number": 32480
    },
    {
        "title": "Cleanup ExtensionContext.workspaceState when a workspace no longer exists",
        "description": "",
        "createdAt": "2017-08-14 09:37:55",
        "state": "open",
        "number": 32461
    },
    {
        "title": "Can't drag selected text with Ctrl to second file",
        "description": "- VSCode Version: Code 1.14.2 (cb82febafda0c8c199b9201ad274e25d9a76874e, 2017-07-19T23:34:09.706Z)\r\n- OS Version: Windows_NT ia32 6.3.9600\r\n------------------------------------------------\r\nHi,\r\nSee this gif:\r\n![mgh](https://user-images.githubusercontent.com/5067331/29243110-db90592a-7fac-11e7-82b8-72ae0f6a8826.gif)\r\n\r\nThanks\r\n@bpasero @rebornix @alexandrudima\r\n",
        "createdAt": "2017-08-12 17:54:32",
        "state": "open",
        "number": 32387
    },
    {
        "title": "[GRIPE] \"editor.mouseWheelScrollSensitivity\" setting is not respected while making a text selection",
        "description": "the editor scrolls insanely fast while selecting large blocks of text which is quite unwieldy, so i tried to see if i could affect this behavior with the setting `editor.mouseWheelScrollSensitivity`, but it had no effect. please make a setting to control the sensitivity of scrolling while selecting text.",
        "createdAt": "2017-08-11 01:25:16",
        "state": "open",
        "number": 32267
    },
    {
        "title": "SCM: Support altCommand for SCM resources",
        "description": "Feature suggestion. Implement some keyboard button+Click combination on a file in Git Sidebar to `Open File` (not `Open Change`, which is being used by default by just clicking on a file). For example: Ctrl+Click (Command+Click), Option+Click (Alt+Click) or something like that.\r\n\r\nMake a life a bit easier for a user when he tries to open files, which has been already edited by him, for further edition. :)",
        "createdAt": "2017-08-08 10:02:13",
        "state": "open",
        "number": 32129
    },
    {
        "title": "Provide an API to show hover-like tooltip",
        "description": "Please provide an API to trigger a hover-like tooltip.\r\n\r\nUse case:\r\nIn my language extension, I want to let users know the type of the expression by pressing a combination of keys. This is similar to what hover does but:\r\n- It is triggered by pressing a shortcut\r\n- When the same shortcut is pressed again I want to widen the scope of the expression and show the type of a \"bigger\" expression, etc.\r\n\r\nBeing able to show custom tooltips is also useful in different scenarios for providing extra information about the code.\r\n\r\n- VSCode Version: 1.14.2\r\n- OS Version: MacOS ",
        "createdAt": "2017-08-07 14:05:05",
        "state": "open",
        "number": 32088
    },
    {
        "title": "Show externalised strings in extension editor contributions tab",
        "description": "- VSCode Version: Version 1.14.2 (1.14.2)\r\n- OS Version: All OS\r\n\r\nSteps to Reproduce:\r\n\r\n1. Externalize a package.json using package.nls.json. In this case, we have a setting that uses a string. See https://github.com/forcedotcom/salesforcedx-vscode/blob/develop/packages/salesforcedx-vscode-apex/package.json#L65\r\n\r\n```\r\n \"configuration\": {\r\n      \"type\": \"object\",\r\n      \"title\": \"%configuration_title%\",\r\n      \"properties\": {\r\n        \"salesforcedx-vscode-apex.java.home\": {\r\n          \"type\": [\r\n            \"string\",\r\n            \"null\"\r\n          ],\r\n          \"default\": null,\r\n          \"description\": \"%java_home_description%\"\r\n        }\r\n      }\r\n    },\r\n```\r\n\r\n2. Open the extension view and go to the \"Dependencies\" tab. Notice that it is not picking up the externalized text. See screenshot below.\r\n\r\n\r\n![screen shot 2017-08-03 at 12 10 03 pm](https://user-images.githubusercontent.com/54414/28939037-cfd98e7c-7844-11e7-8c03-a0959a7601f5.png)\r\n\r\n\r\n3. The externalized string is honored in the Setting view but **not** the Extensions view. See screenshot below.\r\n\r\n![screen shot 2017-08-03 at 12 10 07 pm](https://user-images.githubusercontent.com/54414/28939015-c0b92074-7844-11e7-87d3-a90a03b56440.png)\r\n\r\n",
        "createdAt": "2017-08-03 19:11:22",
        "state": "open",
        "number": 31993
    },
    {
        "title": "[folding] show comment first line for folded sections",
        "description": "I think it could be really useful to change the multiline comment folding.\r\n\r\nWhen you fold a comment like this (like above php function) : \r\n```\r\n/**\r\n * Print person name on terminal\r\n *\r\n * @param person $p\r\n * @return void\r\n */\r\n```\r\n\r\nYou see this : \r\n```\r\n/** ...\r\n```\r\nIn some editors like phpStorm or Eclipse, it's folded like this : \r\n```\r\n* Print person name on terminal ...\r\n```\r\nThat's very more useful  ;)\r\n\r\nIs it possible to implement this kind of folding ?",
        "createdAt": "2017-08-03 10:15:20",
        "state": "open",
        "number": 31966
    },
    {
        "title": "Be proactive about defending against unauthorized telemetry collection",
        "description": "In the past couple of weeks we've seen plugins in two popular editors taken over by a commercial entity, who has then added seemingly identifiable telemetry collection to those plugins:\r\n\r\n- Atom (atom-minimap and autocomplete-python): https://github.com/atom-minimap/minimap/issues/588, summary: https://theoutline.com/post/1953/how-a-vc-funded-company-is-undermining-the-open-source-community\r\n> Back to autocomplete-python. A number of developers who reviewed the tool found that the changes Kite made were far more invasive than what it had done to Minimap. The new version of autocomplete-python demoted the open source engine it had been using, called Jedi, and enabled Kite\u2019s engine by default.\r\n> \r\n> Kite\u2019s engine required code be processed on Kite\u2019s cloud server, while the previous version did this work on the user\u2019s machine. This is a crucial difference because sending data to the cloud is a privacy issue, especially given the wide-ranging access permission requested by the tool. Developers said they worried that various scenarios could lead to medical data, payment data, and other data that should be kept private being uploaded to Kite. Furthermore, many private companies have policies against uploading data to third parties, which would make Kite unusable for developers at those companies.\r\n\r\n- Sublime Text (SideBarEnhancements package): https://forum.sublimetext.com/t/rfc-default-package-control-channel-and-package-telemetry/30157, summary: https://www.reddit.com/r/programming/comments/6qwtfz/kite_injected_telemetry_into_the_third_most/dl0psv0/\r\n\r\nWith the revelation that this has not been limited to one editor, I think it's important that Visual Studio Code implements a proactive policy to either scan uploaded extensions for telemetry collection or sandbox extensions with a permissions system similar to Chrome Extensions / WebExtensions.\r\n\r\nI realise that this is a significant undertaking, but with what's come to light in recent weeks, there's a non-zero chance that this is occurring in Visual Studio extensions as well, without user knowledge.",
        "createdAt": "2017-08-02 03:44:05",
        "state": "open",
        "number": 31891
    },
    {
        "title": "multiCursorModifier should be ctrlCmd by default for *nix users",
        "description": "- VSCode Version: Code - Insiders 1.15.0-insider (6328bae2bf8382fd4abd054c14976548eaea66cf, 2017-07-27T07:00:51.592Z)\r\n- OS Version: Linux x64 4.10.0-28-generic\r\n- Extensions: none\r\n---\r\n\r\nFollowing on the heels of #21506, I feel that the default click action for *nix users should not be alt-click, but ctrl-click.\r\n\r\nWhat's odd is I only see references to ctrl-click in the issue, but somehow...\r\n\r\n![selection_017](https://user-images.githubusercontent.com/923011/28844323-423fc932-76d2-11e7-8d30-12afd24e0370.png)\r\n\r\nAlt-click is mapped by default in Ubuntu window manager to move windows, so alt-click in this case does nothing (or rather, it moves the vscode window)\r\n\r\nPerhaps this is more a question than a bug, but:\r\n\r\n1. Is this configurable in `settings.json`, so it is ctrl-click?\r\n2. If not, can the default be changed to ctrl-click so it functions on Ubuntu at least?",
        "createdAt": "2017-08-01 19:57:36",
        "state": "open",
        "number": 31852
    },
    {
        "title": "Add more progress UI locations, e.g editor and sidebar",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: Code - Insiders 1.15.0-insider (0e7546c978fa1b62dbf36f07a77d1b9a4241d6f7, 2017-07-28T11:23:06.089Z)\r\n- OS Version: Windows_NT x64 10.0.16251\r\n\r\nCurrently `withProgress` supports 2 locations: `SourceControl` which shows a nice \"progress bar\" on the source control activity, and `Window` which shows a spinner and message in the statusbar (imo this should be called `StatusBar`). I would love to have 1 or 2 additional locations -- something like `SideBar` where it would show the \"progress bar\" on any activity currently active in the the side bar, and/or `Editor` (would call it `Window` but that is used) where it would show the similar \"progress bar\" but instead of in the side bar, it would be on the active editor.\r\n\r\nAs an aside, I also found it confusing that when using `SourceControl` no progress message or anything needs to be set, but to use `Window` you must set at least 1 progress message otherwise no indicator shows.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes/No",
        "createdAt": "2017-07-28 13:25:21",
        "state": "open",
        "number": 31664
    },
    {
        "title": "Color Picker: Pressing RETURN should accept the current value and dismiss the picker",
        "description": "I can dismiss the picker when pressing ESCAPE I would have expected that I can also accept the current value by pressing ENTER/RETRUN.",
        "createdAt": "2017-07-28 10:06:30",
        "state": "open",
        "number": 31651
    },
    {
        "title": "Change all occurrences in a single 100MB line leads to a crash when autosave on",
        "description": "Testing #30243.\r\n\r\n32-bit Windows\r\n\r\n0. Enable autosave. \r\n1. Open 100MB file generated by Dummy File Creator (non-random content). I got single line generated.\r\n2. Type 'sd' in several places on the same line.\r\n3. Do an edit via 'Change all occurrences' from the context menu.\r\nObserve crash.\r\n\r\nShould we disable triggering autosave for large files?\r\n",
        "createdAt": "2017-07-27 09:56:29",
        "state": "open",
        "number": 31545
    },
    {
        "title": "Inspector loaded scripts: Hide <eval> for scripts from the debug adapter",
        "description": "Refs: #31327\r\n\r\n1. Debug a node app (for instance our smoke test repo)\r\n2. Open the loaded scripts view\r\n3. Notice the <eval> folder\r\n\r\nThose scripts always seem useless to me and do not provide any real value.\r\nIs it common practice to also show these scripts or should we hide them?\r\n\r\nSince it is a tree, the user can always just collapse them so maybe showing them is a better choice then implicitly hidding. Though still creating this as a question.",
        "createdAt": "2017-07-27 09:27:35",
        "state": "open",
        "number": 31537
    },
    {
        "title": "Allow to auto resize a custom view or take initial size as input from custom view contributions.",
        "description": "#31327\r\n\r\nStart node debugging, hit a brekapoint, notice the loaded scripts view is very small. Expand an element in the loaded scripts -> you do not see anything.\r\nOptimally the loaded scripts view should also resize a bit in this case.\r\n\r\nAn alternative is that loaded scripts by default has a bit more space",
        "createdAt": "2017-07-27 09:14:51",
        "state": "open",
        "number": 31532
    },
    {
        "title": "[icons] Support to allow re-using VSCode icons in user extensions",
        "description": "It would be nice if there's a supported API to access VSCode inbox icons.\r\n\r\n**Expected**:\r\n\r\nI want to reuse icons in the IntelliSense suggestion window outside of completion items (for example a TreeDataProvider).\r\n\r\n**Actual**:\r\n\r\nI had to copy the icon files to my extension project to use them\r\n",
        "createdAt": "2017-07-26 16:53:37",
        "state": "open",
        "number": 31466
    },
    {
        "title": "Incorrectly flag property \"cwd\" as not allowed for node attach in launch.json.",
        "description": "- VSCode Version: 1.14.2\r\n- OS Version: Windows 10\r\n\r\nSteps to Reproduce:\r\n\r\n1. Add configuration to launch.json for node attach\r\n2. Type \"cwd\" as property.\r\n\r\nVSCode would say \"Property cwd is not allowed\".  Actually, the property is required for node attach to work properly with Meteor 1.6-beta.  Without it, break points would not be recognized.  The property should be allowed and intellisense should offer it.",
        "createdAt": "2017-07-26 16:47:40",
        "state": "open",
        "number": 31465
    },
    {
        "title": "cant find \\r in regex mode",
        "description": "- VSCode Version: Insider ae73f8ee6f8ddb87b5e30d31655d9f55a53f4a95\r\nStable: cb82febafda0c8c199b9201ad274e25d9a76874e 1.14.2\r\n\r\nSteps to Reproduce:\r\nselect CRLF for line end sequence\r\nwrite some lines\r\nabc\\r\\n\r\ndef\r\n\r\nctrl + f to open search\r\nselect regex mode (.*)\r\ntry `\\n` (is selected)\r\ntry `\\r` prints alternative fact no results.\r\n\r\nReproduces without extensions: Yes, tested Insiders only.",
        "createdAt": "2017-07-26 12:06:02",
        "state": "open",
        "number": 31449
    },
    {
        "title": "Support workspace projects under different colors in sidebar and tabs",
        "description": "\r\n- VSCode Version: Nightly\r\n- OS Version: Any\r\n\r\nWorkspace feature is really useful as it is today, but could themes API be extended so to display different projects with different colors/nuances? \r\n\r\nSee:\r\n\r\n![projects_with_colors_in_vsc_workspace](https://user-images.githubusercontent.com/11835025/28514861-dd1a39b0-705b-11e7-9ed3-fca12a8cefe3.png)\r\n\r\n\r\nIt would be even better if tabs could have different colors, to resemble the project they belong to:\r\n\r\n![projects_and_tabs_with_colors_in_vsc_workspace](https://user-images.githubusercontent.com/11835025/28514909-062f4fca-705c-11e7-8376-17fbcd1a4130.png)\r\n\r\nThanks for all the beautiful code and the effort you put in this superb project.\r\n\r\nRoberto.\r\n",
        "createdAt": "2017-07-24 08:41:48",
        "state": "open",
        "number": 31308
    },
    {
        "title": "Git: Support interactive rebase",
        "description": "Since it is typical for projects like Code and others to have PRs with a single command\r\nfor brevity and cleanliness, this feature would be really helpful to not have to go into the\r\nterminal.\r\n\r\nWilling to do a PR...",
        "createdAt": "2017-07-20 18:40:42",
        "state": "open",
        "number": 31153
    },
    {
        "title": "[html] provide rename for embedded JavaScript",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: v1.14.1\r\n- OS Version: macOS Sierra v10.12.6\r\n- Reproduces without extensions: Yes\r\n\r\nSteps to Reproduce:\r\n\r\n1. Create these two files:\r\n\r\n`my-custom-element.js`\r\n```javascript\r\nclass MyCustomElement extends HTMLElement {\r\n  static get is() {\r\n    return 'my-custom-element';\r\n  }\r\n}\r\n\r\ncustomElements.define(MyCustomElement.is, MyCustomElement);\r\n```\r\n\r\n`my-custom-element.html`\r\n```html\r\n<script>\r\n  class MyCustomElement extends HTMLElement {\r\n    static get is() {\r\n      return 'my-custom-element';\r\n    }\r\n  }\r\n\r\n  customElements.define(MyCustomElement.is, MyCustomElement);\r\n</script>\r\n```\r\n\r\n2. Try the Rename Refactoring with `F2` in both files:\r\n\r\n<img width=\"514\" alt=\"screen shot 2017-07-20 at 17 48 44\" src=\"https://user-images.githubusercontent.com/1007051/28426567-cabae566-6d73-11e7-99e9-d69cce38a617.png\">\r\n\r\n<img width=\"535\" alt=\"screen shot 2017-07-20 at 17 48 57\" src=\"https://user-images.githubusercontent.com/1007051/28426573-cfe49c76-6d73-11e7-9e64-573b3a8a0a83.png\">\r\n\r\nWith the same code, the \"Rename Refactoring\" doesn't work in HTML language.",
        "createdAt": "2017-07-20 15:50:08",
        "state": "open",
        "number": 31141
    },
    {
        "title": "Installer Not Using Windows \"Restart Manager\" ?",
        "description": "Absolutely loving Visual Studio Code!  The installation experience on Windows - not so much.\r\n\r\nI haven't dug through the MSI, but the dialog in this screenshot seems to indicate that this package has not been authored to enable MSI to use Windows built-in \"Restart Manager\" functionality.\r\n\r\nIt does not seem to matter what I choose on this dialog, the results seem unexpected and bad - compared to most MSI packages I've run over the last decade.\r\n\r\nI believe the lack of using this core Windows platform feature is the reason for many of the other \"installer\" issues that have been opened.\r\n\r\nIf this package is indeed not leveraging MSI's ability to use Restart Manager, here is the starting point: https://msdn.microsoft.com/en-us/library/windows/desktop/aa372466(v=vs.85).aspx\r\n\r\n![image](https://user-images.githubusercontent.com/11597190/28416684-0a02a2d2-6d23-11e7-9c4e-6b53966adca1.png)\r\n",
        "createdAt": "2017-07-20 12:11:33",
        "state": "open",
        "number": 31129
    },
    {
        "title": "Support large documents in extension host",
        "description": "- VSCode Version: 1.14.1\r\n- OS Version: Windows 7 and Windows 10, likely all OSes\r\n\r\nWhen editing documents with very long lines, such as lines containing data-URIs, the property `vscode.window.activeTextEditor` will be `undefined` when it should be defined.\r\n\r\nSteps to reproduce:\r\n\r\n1. Create a new (blank) VSCode extension, and add this command to `extension.ts`:\r\n\r\n```\r\n'use strict';\r\nimport * as vscode from 'vscode';\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n    let disposable = vscode.commands.registerCommand('bigDocTest.runDocTest', () => {\r\n\r\n        let hasActiveTextEditor = (vscode.window.activeTextEditor !== undefined);\r\n\r\n        if (hasActiveTextEditor) {\r\n            vscode.window.showInformationMessage('Success, activeTextEditor is defined.');\r\n        } else {\r\n            vscode.window.showErrorMessage('Oops, activeTextEditor is not defined.');\r\n        }\r\n    });\r\n\r\n    context.subscriptions.push(disposable);\r\n}\r\n\r\nexport function deactivate() {\r\n}\r\n```\r\n\r\n2. Launch this extension, load any normal text file, and run this command, you see the \"Success, activeTextEditor is defined\" information message appear.\r\n\r\n3. But, try loading a file with a very long line contained inside it, such as this one: [MetalRoughSpheres.gltf](https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/9ba6ae1352c8b59f684a11858b152615026660a4/2.0/MetalRoughSpheres/glTF-Embedded/MetalRoughSpheres.gltf).  This file has long lines due to the use of embedded data URIs in the file.  If you run the above sample extension while editing this file, you see \"Oops, activeTextEditor is not defined.\"\r\n\r\nThis makes it difficult for VSCode extensions to work with such files.  I'm the lead dev of the GLTF extension for VSCode, and this prevents my extension from running on GLTF files that embed large images as data URIs.",
        "createdAt": "2017-07-19 22:04:53",
        "state": "open",
        "number": 31078
    },
    {
        "title": "Keyboard shortcut chords with bare shift",
        "description": "I'm very used to the IntelliJ chord \"shift shift\" (pressing shift twice without any other key) to open the search everywhere feature and would like to use the chord in Visual Studio Code to open the \"Go to file\" dialog. Unfortunately bare shifts as keys are not accepted as far as I can tell from the [documentation](https://code.visualstudio.com/docs/getstarted/keybindings#_accepted-keys) and from trying out `    {\r\n        \"key\": \"shift shift\",\r\n        \"command\": \"workbench.action.quickOpen\"\r\n    }` in `keybindings.json`. Would it be possible to add bare shifts as accepted keys for keyboard chords? ",
        "createdAt": "2017-07-19 20:53:52",
        "state": "open",
        "number": 31074
    },
    {
        "title": "Look up word definition on Mac OS Sierra behaving strangely with VS Code text editor",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.14.0\r\n- OS Version: Mac OSX Sierra 10.12.5\r\n\r\nSteps to Reproduce:\r\n\r\n1. Trigger the \"look up & data detectors\" feature with a trackpad. This is typically a force click or three finger tap.\r\n2. When looking up the definition of a word in the text editor, other random tokens in the editor will be looked up instead. This does not happen with any other text editors that I've seen.\r\n",
        "createdAt": "2017-07-19 14:17:29",
        "state": "open",
        "number": 31047
    },
    {
        "title": "Add support for different fonts in the same file",
        "description": "Add support for choosing different font ligatures, than those within the `\"editor.fontFamily\"` selected font. For example, I would really like to use Operator Mono letters together with [Fira Code ligatures](https://github.com/tonsky/FiraCode). Atom-editor lets you do this.\r\n\r\nA hacky workaround is with the `Custom CSS and JS Loader` extension. https://medium.com/@zamamohammed/multiple-fonts-alternative-to-operator-mono-in-vscode-7745b52120a0 @mohammedzamakhan\r\n\r\nThe `Custom CSS and JS Loader` extension makes vscode think it is corrupted, so I'd really prefer avoiding this hack.\r\n\r\nAnother custom workaround, which stopped working: https://gist.github.com/Mikeysax/e707e6971d991a7552017b4c00ef6a97\r\n\r\nSemi-related: https://github.com/Microsoft/vscode/issues/192\r\n\r\nPossibly helpful: https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions\r\n",
        "createdAt": "2017-07-18 11:22:34",
        "state": "open",
        "number": 30925
    },
    {
        "title": "Expose debug status",
        "description": "I've made an [extension](https://marketplace.visualstudio.com/items?itemName=fabiospampinato.vscode-statusbar-debugger) that puts a debugger into the statusbar, in order to workaround a year-old issue with the default floating debugger widget (#2513 #9093) but I cannot quite make it work perfectly because there's no API for getting the status of the debugger.\r\n\r\nIn order to do that it would be necessary to know:\r\n- if a debug session is currently active\r\n- when it started/stopped \r\n- if code execution is paused\r\n\r\nA decent, and maybe more general, starting point might be to expose the switches used in keybindings under the `when` key, like `inDebugMode` for instance. \r\n\r\nWhat do you think?",
        "createdAt": "2017-07-16 15:33:05",
        "state": "open",
        "number": 30810
    },
    {
        "title": "Show tooltip bellow the mouse cursor, instead of above it",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.14.1\r\n- OS Version: Windows 10 build 15063\r\n\r\nHelp tool tip should be placed bellow the mouse cursor on the `settings.json` file, instead of above item. For me it is horribly confusing putting it above it, beyond blocking my vision, as I read what is above my mouse cursor, not bellow it. Perhaps a setting to configure this behavior.\r\n\r\n![image](https://user-images.githubusercontent.com/5332158/28245994-b03f8d9c-69e8-11e7-8208-bb279bd477a2.png)\r\n\r\n* The mouse cursor is where the big red arrow is pointing.\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open the `settings.json`\r\n2. Place the cursor in of of the settings\r\n\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes/No\r\n\r\n___ \r\n\r\nRelated threads:\r\n\r\n1. [Disable tooltip hint in Visual Studio Code](https://stackoverflow.com/questions/41115285/disable-tooltip-hint-in-visual-studio-code)\r\n\r\n",
        "createdAt": "2017-07-16 08:49:25",
        "state": "open",
        "number": 30797
    },
    {
        "title": "Can the VSCode gutter be made smaller, i.e., decreased size/width?",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.14.1\r\n- OS Version: Windows 10 build 15063\r\n\r\nComparing Sublime Text gutter with VSCode gutter, we conclude the VSCode gutter is too big.\r\n\r\n**Sublime Text**\r\n![image](https://user-images.githubusercontent.com/5332158/28245748-85e48dd6-69e3-11e7-86af-66bd172b158a.png)\r\n\r\n**Notepad++**\r\n![image](https://user-images.githubusercontent.com/5332158/28245825-685afdd4-69e5-11e7-8213-ce25215f9856.png)\r\n\r\n**VSCode**\r\n![image](https://user-images.githubusercontent.com/5332158/28245692-17eb3bcc-69e3-11e7-9341-c05cb50aaf06.png)\r\n\r\n\r\nCan the VSCode gutter be made smaller, i.e., decreased size/width?\r\n\r\n\r\n___\r\n\r\nThis question can be found on StackOverflow:\r\n\r\n1. [How do I change the Gutter Width in VS Code?](https://stackoverflow.com/questions/43957564/how-do-i-change-the-gutter-width-in-vs-code)\r\n\r\n\r\n",
        "createdAt": "2017-07-16 07:56:58",
        "state": "open",
        "number": 30795
    },
    {
        "title": "Add border options to `selectionBackground`",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.14.1: \r\n- OS Version: Windows 10 build 15063\r\n\r\nAdd border options to `selectionBackground` and `findMatchBackground`. They would be called like `selectionBorder` and `findMatchBorder`. You cannot find them on:\r\n\r\n1. https://code.visualstudio.com/docs/getstarted/theme-color-reference\r\n\r\nCurrently the selection has no border:\r\n\r\n![image](https://user-images.githubusercontent.com/5332158/28245458-8281e9aa-69dd-11e7-8952-ad69839e7cd4.png)\r\n\r\n\r\nWould be awesome if it has borders like Sublime Text selections:\r\n\r\n![image](https://user-images.githubusercontent.com/5332158/28245453-66aa5410-69dd-11e7-912b-868638cb7ffa.png)\r\n\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes\r\n\r\n___ \r\n\r\nRelated issues:\r\n\r\n1. https://github.com/Microsoft/vscode/issues/8050 additional options for `editor.selectionHighlight`",
        "createdAt": "2017-07-16 07:17:47",
        "state": "open",
        "number": 30793
    },
    {
        "title": "Git: Support editing the commit message in a text editor",
        "description": "When I make a commit, I enjoy writing the commit message in an editor window containing a complete diff of my staged changes. I can do that from the terminal by running the command:\r\n\r\n```\r\ngit commit --verbose\r\n```\r\n\r\nHowever, VSCode doesn't seem to support that commit mode out of the box. Perhaps it could be the fallback behavior if you run one of the `Git: Commit` commands and enter a blank commit message. (Currently, that fails silently.) Or better yet, how about a `git.verboseCommit` setting that, set to `true`, would make the `Git: Commit` commands take me directly to the verbose commit editor?",
        "createdAt": "2017-07-13 02:52:33",
        "state": "open",
        "number": 30562
    },
    {
        "title": "Cannot disable extensions when launching with --disable-extensions",
        "description": "- VSCode Version: 1.14.0\r\n- OS Version: All\r\n\r\nWith the recent issue of the Ruby snippets extension triggering an endless loop in the snippet code it would have been helpful if users could start with `--disable-extensions` and then permanently disable individual extensions through the extensions viewlet.\r\n\r\nThe Disable actions do not seem to work when launched with `--disable-extensions`, uninstalling extensions was the only option to try and find the extension triggering the problem.",
        "createdAt": "2017-07-12 20:51:06",
        "state": "open",
        "number": 30546
    },
    {
        "title": "Dim or otherwise indicate \"inactive\" editor/terminal",
        "description": "One of the best features of VS Code is the built-in terminal. However, I often begin typing in the editor when in fact I think I'm in the terminal - and vice versa. To alleviate this issue, it would be helpful to visually indicate which portion of the IDE is \"active\" vs. \"inactive\". A subtle dimming effect might just do the trick.",
        "createdAt": "2017-07-12 14:46:27",
        "state": "open",
        "number": 30522
    },
    {
        "title": "Make the scroll beyond last line show to two lines of code at the top, not one",
        "description": "I had this at the other day:\r\n\r\nPrerequisites: Uses an empty line feed at every file.\r\n\r\n1. Looks at an empty file in awe, why it's empty...\r\n2. Restarts Code, because that always helps to everything.\r\n3. Still empty file.\r\n4. Checks GitHub, yep the file is there.\r\n5. Comes back to Code and _scrolls up_, the file was there, I just didn't see it because of the empty line at the end.\r\n6. Does a facepalm and realises why Atom shows two lines when scrolling beyond last line: because of the line feed.\r\n\r\n",
        "createdAt": "2017-07-12 10:52:31",
        "state": "open",
        "number": 30499
    },
    {
        "title": "Cannot move last cursor position when using multi-cursor",
        "description": "Hi,\r\n\r\n- VSCode Version:  1.13.1 \r\n- OS Version: macOS Sierra 10.12.5 \r\n\r\nI went through the options available in settings and keyboard shortcuts but didn't find an option to enable this. I also posted on SO tagging `vscode` but no one seems to have an answer for this question. \r\n\r\nIs there a way to enable this option? ",
        "createdAt": "2017-07-10 05:35:49",
        "state": "open",
        "number": 30320
    },
    {
        "title": "Debugging: Add support for annotating stack frames with icons",
        "description": "We should add support for annotating stack frames with icons to enable debugger authors to provide more metadata for a given stack frame.\r\n\r\n**Example:** The stack frame is within EmberJS code, therefore a EmberJS icon is shown next to it.\r\n\r\n![27021463-fb856e3c-4f37-11e7-9012-dfe09645339b](https://user-images.githubusercontent.com/173559/27970927-9460b0a4-6305-11e7-91e2-03164a64feaa.png)\r\n\r\n**Value prop:**\r\nMore metadata for a a given stack frames helps developers understand the context and by highlighting library code we can help developers to navigate their code faster.\r\n\r\nThis feature is inspired by Mozilla's Debugger.html project: https://github.com/devtools-html/debugger.html/pull/3154\r\n\r\n**Steps:**\r\n- Extend stack frame view to render icon if available\r\n- Extend Debugger protocol?\r\n- Prototype library detection in vscode-node-debug or vscode-chrome-debug\r\n\r\nPing @roblourens, @weinand \r\n\r\n\r\n",
        "createdAt": "2017-07-07 18:18:13",
        "state": "open",
        "number": 30261
    },
    {
        "title": "Detect renames of files and folders and handle them",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: Version 1.13.1\r\n- OS Version: macOS 10.12.5 (16F73)\r\n\r\nWhen a file gets moved on the file system without vscode performing the moving action directly, for example with `git mv` in the built-in Terminal, the file in the current workspace is closed. Can the editor keep track of the file and follow it, without closing it?\r\n\r\nSteps to Reproduce:\r\n\r\n1. create a file, open it, and save it\r\n2. from the built in terminal, move the file to another name, or to another folder while keeping the same file name.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes",
        "createdAt": "2017-07-07 10:06:59",
        "state": "open",
        "number": 30240
    },
    {
        "title": "Tasks - show the number of detected/matched  problems in the terminal output",
        "description": "When a task terminates, it would be nice to show the number of problems detected in the terminal.",
        "createdAt": "2017-07-06 14:30:17",
        "state": "open",
        "number": 30193
    },
    {
        "title": "Change Vertical Scrollbar Width",
        "description": "Is there any way to change the width of the vertical scrollbars in Visual Studio Code, especially the one for the left panel?\r\n\r\nI find it so thin that it's a bit fiddly to use.",
        "createdAt": "2017-07-06 14:25:33",
        "state": "open",
        "number": 30191
    },
    {
        "title": "WorkspaceConfiguration.update doesn't work on non-existant settings, but inspect does.",
        "description": "- VSCode Version: 1.13.1 and 1.14.0-Insiders.\r\n- OS Version: Windows (probably Linux/Mac too).\r\n\r\nSteps to Reproduce:\r\n\r\n1. Use some extension code that calls WorkspaceConfiguration.inspect on a setting that exists in the settings.json, but isn't valid (e.g. C_Cpp.foo) and then use WorkspaceConfiguration.update with a value of undefined.\r\n\r\nBug: The update call silently fails, so extensions are unable to remove bogus settings from the settings.json via the vscode WorkspaceConfiguration API, even though that API reports the bogus setting from the inspection call.\r\n\r\nNOTE: We're trying to remove a setting we previously supported, but update doesn't work unless the setting still exists in our package.json. What do you recommend we do?\r\n\r\nReproduces without extensions: Yes",
        "createdAt": "2017-07-06 02:28:43",
        "state": "open",
        "number": 30165
    },
    {
        "title": "Show status when updating VSCode and extensions",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.14.0 - Insiders (6afdf30 - Date 2017-07-05T08:33:33.146Z )\r\n- OS Version: Windows 10\r\n\r\n-- Sorry for the English, I used Google Translator --\r\n\r\nIt may be related to #25632 and #18450.\r\n\r\nIt would be nice to show a percentage (with a progress bar) or estimated time when the VSCode was updated, along with the speed we are downloading.\r\n\r\nYou currently have no indication of the [process](https://msdn.microsoft.com/en-us/library/windows/desktop/dn742475(v=vs.85).aspx).\r\n\r\n![progresstext](https://user-images.githubusercontent.com/19866231/27874582-68c218b4-6186-11e7-8498-646e1c0a07cb.PNG)\r\n\r\n\r\nSo for VSCode when it is downloading I suggest:\r\n\r\n1 - Clicking to check for updates opens a window indicating whether it is in the latest version or not. (I suggest a similar window to About Firefox, even open still allows in browser.)\r\n2 - If the automatic updates are disabled, it should inform you that there is a new version with a button to 'Update'.\r\nIf it is automatic the same should indicate a percentage (with a progress bar) or estimated time to download along with the speed we are downloading.\r\n3 - If the download is happening without the window being opened or closed, in the icon of the gear where a blue notification appears, could have in the same position the following animation showing how much progress has been made.\r\n\r\n![progress](https://user-images.githubusercontent.com/19866231/27874360-a383a158-6185-11e7-8854-4296134d3072.gif)\r\n\r\n\r\n\r\nFor the extensions I suggest (whether automatic or not.):\r\n\r\n1- Have the following animation, but changing for the existing cores.\r\nIn this case I would follow the same layout (two colors) of this gif. As soon as you clicked to install / update\r\nUp to 50% of the bar corresponds to the download, that is to say 'Downloading'. Already the other 50% would be the installation, ie it would be written 'Installing'.\r\nThe first 50% corresponds to 100% of the download and the other 50% corresponds to 100% of the installation.\r\n\r\n![progress2](https://user-images.githubusercontent.com/19866231/27874373-ad33e7bc-6185-11e7-8b13-ba2d4582c5a9.gif)\r\n\r\n\r\n\r\n2- If the download is automatically happening in the icon of the extension where a blue notification appears, it could have in the same position the following animation showing how much has been progressed, of the total extensions that have to update.\r\n\r\n![progress](https://user-images.githubusercontent.com/19866231/27874382-b136ef3a-6185-11e7-874f-df84ea8e87c9.gif)\r\n\r\n\r\n\r\nOther suggestions are welcome !! Any doubts about the text, please ask for there to be no misinterpretation by the use of Google Translate.\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes",
        "createdAt": "2017-07-05 16:36:43",
        "state": "open",
        "number": 30143
    },
    {
        "title": "Show suggestion details always at the bottom",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.14.0 - Insiders (6afdf30 - Date 2017-07-05T08:33:33.146Z )\r\n- OS Version: Windows 10\r\n\r\n-- Sorry for the English, I used Google Translator --\r\n\r\nAs suggested by @ramya-rao-a  after questioning this [comment](https://github.com/Microsoft/vscode/issues/18582#issuecomment-304643762)\r\n\r\nCurrently the same appears side, but I wish there was an option to put on the bottom.\r\n\r\n![2e9e53f4-27ad-11e7-8e73-079325f9d56f](https://user-images.githubusercontent.com/19866231/27873887-fb192a84-6183-11e7-9cfe-7abdf3439e94.gif)\r\n\r\n![8f33c262-28e3-11e7-86ea-4ff5fde304d5](https://user-images.githubusercontent.com/19866231/27873894-0066afc0-6184-11e7-9a03-7c3f71fce96f.gif)\r\n\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes",
        "createdAt": "2017-07-05 16:19:42",
        "state": "open",
        "number": 30140
    },
    {
        "title": "Add events for copy/paste to allow language extensions to bring using/import statements along",
        "description": "Apologies if this already exists, I can't seem to find anything about it (I expected it'd be listed in [complex commands](https://code.visualstudio.com/docs/extensionAPI/vscode-api-commands) if anywhere).\r\n\r\nThe language service I use for Dart is getting a new feature that will allow me to send a command to get data about imports/using statements that apply to a subset of code. It's designed to be run when a user copies a chunk of code to the clipboard. When pasting, this data can be exchanged for a bunch of edits that would add the equivalent imports in the new file to avoid the user ending up having to fire a bunch of \"import xxx\" code actions after pasting.\r\n\r\nIn order to do this I need to know when the user has copied something into their clipboard (including the file and offset/range) and also again after they have pasted (just the file) so I can add some additional edits.",
        "createdAt": "2017-07-03 17:51:09",
        "state": "open",
        "number": 30066
    },
    {
        "title": "Language services should be able to provide debug console IntelliSense",
        "description": "### Scenario\r\nCurrently, debug adapters can provide IntelliSense in the console. This is great for untyped or weakly typed languages like JavaScript/TypeScript. But for statically typed languages, such as C#, the best way to do this is to let the regular language service provide IntelliSense just like in the editor.\r\n\r\n### Basic proposal\r\nIn the language service registration for an extension, a language service can indicate that it supports debug console IntelliSense. If the language of the document of the current stack frame opts into this, then instead of going down the path where completion is requested from debug adapter, it is instead requested from the language service. VS Code would need to provide the location of the active stack frame in the same way that regular intellisense works. Then it would need to provide the text and position of the line being edited in the debug console.\r\n\r\nAssuming that VS Code is eventually interested in supporting this, https://github.com/OmniSharp/omnisharp-vscode/issues/1609 tracks the work in the C# extension to support this.",
        "createdAt": "2017-07-03 17:11:34",
        "state": "open",
        "number": 30065
    },
    {
        "title": "Highlight selected text is not applied to all opened files",
        "description": "<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version: 1.14.0\r\n- OS Version: Windows 10\r\n\r\nSelecting text for highlight(either by marking it or by double clicking) highlight the selected text only in selected opened file but not in all opened files in other panels.\r\nIn addition, the highlight marker is not visible in map preview.",
        "createdAt": "2017-07-02 13:07:34",
        "state": "open",
        "number": 30014
    },
    {
        "title": "Problem matcher errors are unhelpful",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode. -->\r\n\r\n<!-- Use Help > Report Issues to prefill these. -->\r\n- VSCode Version:\r\n- OS Version:\r\n\r\nSteps to Reproduce:\r\n\r\n1. Write a task with a custom problem matcher (which apparently has some issues) as below\r\n1. Try to run it.\r\n\r\n*Expected:*\r\nA helpful error message in the output window that tells me what I did wrong.\r\n*Actual:*\r\nThe error message just echoes my `problemMatcher` config back to me:\r\n~~~\r\nError: the description doesn't define a valid problem pattern:\r\n{\r\n    \"background\": {\r\n        \"activeOnStart\": true,\r\n        \"beginsPattern\": \".*\",\r\n        \"endsPattern\": \".*\"\r\n    }\r\n}\r\n~~~\r\n\r\ntasks.json I'm trying:\r\n```json\r\n{\r\n    \"version\": \"0.1.0\",\r\n    \"command\": \"npm\",\r\n    \"isShellCommand\": true,\r\n    \"showOutput\": \"always\",\r\n    \"suppressTaskName\": true,\r\n    \"tasks\": [\r\n        {\r\n            \"taskName\": \"compile\",\r\n            \"isBuildCommand\": true,\r\n            \"isTestCommand\": false,\r\n            \"showOutput\": \"always\",\r\n            \"args\": [ \"run\", \"local:compile\", \"--\", \"--watch\" ],\r\n            \"isBackground\": true,\r\n            \"problemMatcher\": {\r\n                \"background\": {\r\n                    \"activeOnStart\": true,\r\n                    \"beginsPattern\": \".*\",\r\n                    \"endsPattern\": \".*\"\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}\r\n```\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Yes\r\n\r\n(this issue isn't about what is specifically wrong with this configuration, but the fact that the error message doesn't help me figure that out. But if anyone wants to point me in the right direction, that'd be good too)",
        "createdAt": "2017-06-30 14:29:19",
        "state": "open",
        "number": 29951
    },
    {
        "title": "Provide global setting to specify folder with workspace configuration if .vscode doesn't exist in workspace folder",
        "description": "- VSCode Version: 1.13.1\r\n\r\nHi, \r\nwhen developing for SharePoint I often need to open folder directly from SharePoint document library and work with the files there. I would like to have customized workspace and settings for this but as filenames starting with . are not allowed in SharePoint document libraries I can't copy the .vscode folder there. So I would love to have a global setting to tell Code to check for workspace configuration in a defined folder of the workspace if .vscode doesn't exist in the opened folder..",
        "createdAt": "2017-06-30 08:40:10",
        "state": "open",
        "number": 29918
    },
    {
        "title": "Include cwd in terminal selector dropdown",
        "description": "![image](https://user-images.githubusercontent.com/5555305/27669628-56ce3082-5cba-11e7-97c9-3a1a9d066b66.png)\r\n\r\ncurrently, vscode name the terminal with like 1: bash, 2:bash,  after a while it's hard for to remember which one opening which directory.  how about naming them by the opened folder or pah of the opened folder.\r\n\r\nI also want there could be a simple way to switch focus between the terminal and workspace. currently, I have to use Command+J to hide the terminal or mouse clicking. ",
        "createdAt": "2017-06-29 03:08:43",
        "state": "open",
        "number": 29816
    },
    {
        "title": "Intellisense suggestions should display an horizontal scrollbar if needed",
        "description": "- VSCode Version: 1.13.0\r\n- OS Version: macOS Sierra 10.12.5\r\n\r\nSteps to Reproduce:\r\n\r\n1. install java extension\r\n2. open java file\r\n3. type `import o`, wait for suggestions to show up\r\nsuggestions are truncated because the package names don't fit in the suggestion window, there's no way to scroll horizontally\r\n\r\nSee https://github.com/redhat-developer/vscode-java/issues/249\r\n[![https://gyazo.com/9f0b536a9f71d72a4939ffbb4834340d](https://i.gyazo.com/9f0b536a9f71d72a4939ffbb4834340d.png)](https://gyazo.com/9f0b536a9f71d72a4939ffbb4834340d)\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nReproduces without extensions: Maybe",
        "createdAt": "2017-06-28 13:41:40",
        "state": "open",
        "number": 29757
    },
    {
        "title": "auto indenting issues with C# files",
        "description": "testing #29493\r\n\r\n![image](https://user-images.githubusercontent.com/1487073/27608238-894db968-5b3b-11e7-8cc8-8b204721c1cf.png)\r\n\r\n1. Create a simple C# file that looks like this:\r\n\r\n``` c#\r\nusing System;\r\n\r\nnamespace ConsoleApplication\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            // Console.WriteLine(\"Adfasdf\");\r\n            // Console.WriteLine(\"Hello World!\");\r\n\r\n        }\r\n\r\n    }\r\n}\r\n```\r\n\r\n2. Install the C# extension if not already installed\r\n3. Put cursor on line 12, the most inner closing curly brace\r\n4. Move line up, above the first comment:\r\n\r\n![image](https://user-images.githubusercontent.com/1487073/27608300-c7ead16a-5b3b-11e7-8a33-ef64e72759c9.png)\r\n\r\nResult: Closing brace is indented incorrectly (IMO).  \r\n\r\n5. Move the line back down to where it was:\r\n\r\n![image](https://user-images.githubusercontent.com/1487073/27608485-929f6a24-5b3c-11e7-98bb-213f060ecfcd.png)\r\n\r\nResult: the closing brace is not indented properly\r\n",
        "createdAt": "2017-06-27 20:30:02",
        "state": "open",
        "number": 29669
    },
    {
        "title": "Allow users to choose the character to display invisibles",
        "description": "Personally, I don't really like the &#8594; rendered as tabs in the editor. Adding the ability to let the user choose what is displayed for each of the invisibles would be a great addition, imo.",
        "createdAt": "2017-06-27 15:40:47",
        "state": "open",
        "number": 29634
    },
    {
        "title": "Tasks: Consider introducing \"Add Configuration...\" like in debug",
        "description": "Refs: #29442\r\n\r\nCurrently in debug land I find it easier to add a new configuration due to some UX on top which helps with that.\r\nConsider introducing the same in tasks land.",
        "createdAt": "2017-06-27 10:43:02",
        "state": "open",
        "number": 29571
    },
    {
        "title": "Selection of problem matcher is not very intuitive when running a task",
        "description": "Testing the following in #29442:\r\n> Task > Run Build Task: shows the list again with the task run last listed under recently used tasks. This time select a problem matcher: Enusre that problems are detected (2) and that the tasks.json file opens with a configuration like this...\r\n\r\nI was presented with a list that contains several items that look similar but do not work the same way\r\n![image](https://user-images.githubusercontent.com/2239563/27582143-38bdde48-5b30-11e7-9856-f44f8264b241.png)\r\n\r\nTo me `Gulp TSC Problems [$gulp-tsc]` and `TypeScript problems [$tsc]` problem matchers seemed semantically identical, so I picked up the first one just because I am using gulp task, and I needed to match TSC problems. It did not work, and only then I tried the second one, which worked and matched the problem.\r\n\r\nIf I wouldn't know what problem matchers do, I would not experience any difference whether I selected anything from the list or not.\r\n\r\nHence, two points:\r\n1. If I select a problem matcher that does not find anything because it is wrong, I should have indication of this. \r\nMaybe 'Problems' tab can have a hint, pointing to problem matchers if a task was executed and no problems were detected? Other option is to echo information to the terminal that problem matcher did not find any problems. Otherwise it is very difficult to understand what was the impact of the selected problem matcher. \r\nAlso having a badge with count of 'Problems found' on Problems tab in workbench pane would be beneficial, in order to see the result of problem matcher straight after running a task. Currently you have to move to 'Problems' tab to see problem count.\r\n2. There should be a better way of semantic separation between those two tasks (and maybe any others). This is a difficult thing to do, and I cannot suggest anything at this time but we should be aware of it.",
        "createdAt": "2017-06-27 10:21:24",
        "state": "open",
        "number": 29562
    },
    {
        "title": "[Feature request] Hide cursor while typing",
        "description": "https://superuser.com/questions/928839/what-does-the-hide-pointer-while-typing-feature-actually-do\r\n\r\nCan we get this as an option in VS Code? ",
        "createdAt": "2017-06-23 18:44:09",
        "state": "open",
        "number": 29351
    },
    {
        "title": "Disable auto workspace settings",
        "description": "Is there an option to disable the automatic creation/save of workspace settings files?\r\n\r\nCurrently, if you go to File > Preferences > Settings, and if you accidentally click the Workspace Settings tab, it will automatically create a .json file in your working directory. This gets a bit annoying if the project directory is under some sort of source control (git) as it creates a file that you now need to manage (stage, ignore, delete)\r\n\r\nI know I can just add this to my .gitignore, but its a bit cumbersome if I have many projects under git control, and I have to add this to every gitignore file\r\n\r\nIs there a way to turn this off? Or only create the file on Save so im sure I want the file to exist? (`files.autoSave` is off)",
        "createdAt": "2017-06-22 07:05:07",
        "state": "open",
        "number": 29251
    },
    {
        "title": "[folding] Allow to show amount of lines folded",
        "description": "Hi people!\r\n\r\nI would like to see vscode folding with info about lines folded like Netbeans.\r\n\r\nLooks like this:\r\n\r\n![screenshot_20170620_215124](https://user-images.githubusercontent.com/3067335/27364923-e9a04724-5602-11e7-8c29-4eb09044544a.png)\r\n\r\nBTW: Thank you for this awesome code editor! :smile: \r\n",
        "createdAt": "2017-06-21 02:54:22",
        "state": "open",
        "number": 29155
    },
    {
        "title": "feature-request: possibility to change the size of description popup",
        "description": "Hello, I am creating a snippet for VS Code with long descriptions. I have noticed that the description popup window in VS Code has a scrollbar, but it would be greater if I can enlarge the window. This seems not to be possible in the current version (1.13.1). It would be better if one can either set the height and width in the preferences or change the size of the popup with mouse dynamically.\r\n\r\nRegards steff",
        "createdAt": "2017-06-20 18:07:09",
        "state": "open",
        "number": 29126
    },
    {
        "title": "[themes] Add `editor.findMatchForeground`",
        "description": "When using Find & Replace, I like to highlight the current search match differently. This is particularly helpful when refactoring and proof-reading, especially if there are many matches.\r\n\r\nI can add a colour customisation for `editor.findMatchBackground` to achieve this. However, as the foreground colour is not editable, I have a contrast issue with the default foreground colour in the theme.\r\n\r\nIn my case, I'd prefer to set the background colour to something light, like `#b2b231` and change the foreground colour of the match to `#000000`.\r\n\r\nObviously not a pressing issue; a nice to have \ud83d\udc4d ",
        "createdAt": "2017-06-20 08:42:34",
        "state": "open",
        "number": 29091
    },
    {
        "title": "Uncomment block when caret at any position in that block [feature request]",
        "description": "Uncommenting a block works if whole block selected. Will be more convenient to uncomment block when caret inside block (with no selected text). \r\n\r\nExample: HaxeDevelop allows both ways:\r\n![haxedevelop uncomment block](https://user-images.githubusercontent.com/9349164/27273605-22f70148-5513-11e7-8dfc-b3df6559a634.gif)\r\n\r\n",
        "createdAt": "2017-06-19 07:21:34",
        "state": "open",
        "number": 29004
    },
    {
        "title": "Improve find in terminal",
        "description": "Basic find in terminal functionality was added in https://github.com/Microsoft/vscode/issues/15198. Here are some of the improvements we can make\r\n\r\n- Highlight all instances of term in current viewport\r\n- Use a different selection type so that regular selection isn't hijacked, plus a color with a higher contrast can be used.\r\n- Find multiple instances on the same line\r\n- Find terms that are wrapped across 2 lines\r\n- Options: regex, case sensitivity, match word\r\n- Add \"No results\" label, need to think about what to show in the gap when there are results. We probably shouldn't be searching the entire buffer when we don't have to for performance reasons.\r\n- Add animation to terminal find widget just like it does on editor\r\n\r\nUpstream improve find API issue: https://github.com/sourcelair/xterm.js/issues/705\r\n\r\n/cc @rebornix ",
        "createdAt": "2017-06-15 02:59:13",
        "state": "open",
        "number": 28768
    },
    {
        "title": "Allow changing the background colour in StatusBarItem",
        "description": "Allowing extensions to set the background colour would be useful for things like mode changes in the Vim plugin (https://github.com/VSCodeVim/Vim/issues/1839)\r\n\r\n\r\n\r\n",
        "createdAt": "2017-06-14 18:42:14",
        "state": "open",
        "number": 28739
    },
    {
        "title": "Feature: Setting to hide Vertical Scroll-Bar when the Minimap is Visible",
        "description": "Please can we have a setting to hide the vertical scroll-bar if the very awesome minimap is visible? With the minimap there, the vertical scroll-bar is just a waste of space.\r\n\r\n![capture](https://user-images.githubusercontent.com/6370145/27098953-8b684438-5079-11e7-8a59-bc54529b380a.PNG)\r\n\r\nIt would also be very cool to show the current view-area in the minimap by changing its background colour in that region - like full-fat Visual Studio.",
        "createdAt": "2017-06-13 18:47:45",
        "state": "open",
        "number": 28653
    },
    {
        "title": "Add support for BrowserBack and BrowserForward",
        "description": "- VSCode Version: 1.13.0\r\n- OS Version: amd64 Debian 8 \r\n\r\nSteps to Reproduce:\r\n\r\n1. Have ThinkPad laptop with the next/previous close to the cursor keys\r\n2. Have custom xmodmapings to map them to F14 and F15 keys\r\n\r\n> keycode 166=F14\r\n> keycode 167=F15\r\n\r\n3. Try to assign these keys to some functions (I get \"unknown\" instead of naming the shortcut and I can't assign it to the action)\r\n\r\n",
        "createdAt": "2017-06-13 02:51:46",
        "state": "open",
        "number": 28576
    },
    {
        "title": "[css] Use CSS custom properties imported via @import",
        "description": "Is it possible for VS code to recognize CSS variables declared in a separate CSS file that is imported with `@import` ?\r\n\r\nFor example, I would like to have a `variables.css` file that is all about declaring CSS custom properties. Then I would import that file on top of my main css file, and be able to have intellisense support for those variables.\r\n\r\nThe way things work now, VSCode is not able to recognize those variables. Or maybe I am missing something obvious?",
        "createdAt": "2017-06-11 14:24:05",
        "state": "open",
        "number": 28459
    },
    {
        "title": "Give options to assign more text weights in `tokenColors`",
        "description": "I cannot assign the text weight to, like 500, using the current token theming mechanism.\r\n\r\nSolution: Add `fontWeight` support in `tokenColors.*.settings`, and map that directly into CSS properties.",
        "createdAt": "2017-06-11 13:14:14",
        "state": "open",
        "number": 28457
    },
    {
        "title": "Add \"line_padding_bottom\", \"line_padding_top\" like sublime text",
        "description": "\"Line height\" property In Code is make cursor indicator bigger ,, In Sublime Text\r\n{\"line_padding_bottom\", \"line_padding_top\" } is much better actually\r\n\r\nAll the best ... VS.Code Team.",
        "createdAt": "2017-06-10 06:01:10",
        "state": "open",
        "number": 28409
    },
    {
        "title": "Option to autohide minimap when in split editor view",
        "description": "* VSCode Version: 1.13.0\r\n* OS Version: Windows 10\r\n\r\nSteps to Reproduce:\r\n1. `\"editor.minimap.enabled\": true`\r\n\r\nIdea: There should be an option when user is in Split Editor the minimap will be hidden automatically.\r\nEspecially on smaller resolutions the minimap takes too much space when working in Split Editor view.\r\nFor example something like this: `\"editor.minimap.spliteditorhide\": true`",
        "createdAt": "2017-06-09 07:40:58",
        "state": "open",
        "number": 28310
    },
    {
        "title": "[theme] Request the feature: \"editor.lineHighlightForeground\".",
        "description": "### Request the feature:  \"editor.lineHighlightForeground\"  \r\nSometimes it is essential to adjust the colour of the selected text by:\r\n**'editor.lineHighlightBackground'.**\r\n\r\nColour merges if the highlighting line and text colours are identical.\r\n\r\nAn example:\r\n\r\n`'editor.lineHighlightBackground': '#000000',\r\n'editor.lineHighlightForeground': '#fffffff'`. \r\n\r\nCheers.\r\n",
        "createdAt": "2017-06-09 06:35:08",
        "state": "open",
        "number": 28299
    },
    {
        "title": "Text input using IME become out of wrapped editor",
        "description": "- VSCode Version: 1.13.0-insider\r\n- OS Version: Windows 10 Build 15063\r\n\r\nText input using IME (Chinese and Japanese, Korean not test) are duplicated and do not jump to the next line while typing out of the editor\r\n\r\n<img width=\"758\" alt=\"code - insiders_2017-06-09_13-15-41\" src=\"https://user-images.githubusercontent.com/8264895/26962262-9ace8622-4d17-11e7-8f37-55b2ac22fda5.png\">\r\n\r\n<img width=\"758\" alt=\"code - insiders_2017-06-09_13-17-57\" src=\"https://user-images.githubusercontent.com/8264895/26962265-9dd0233a-4d17-11e7-8866-5456221c471e.png\">\r\n\r\nSteps to Reproduce:\r\n\r\n1.set editor.wordWrap on\r\n2.input some text in one line and greater than the width of editor using IME",
        "createdAt": "2017-06-09 05:35:38",
        "state": "open",
        "number": 28291
    },
    {
        "title": "Provide Task Runner viewlet",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\nWe did a Task 2.0 deep dive today and this issue collects the combined feedback received. \r\n\r\n### Task Properties\r\n\r\n- echo should be true by default so that users get a better idea of the task executed\r\n- we should support flattening the JSON properties as we do with other settings (e.g `\"terminal.echo\": true` instead of `\"terminal\": { \"echo\": true }`\r\n- we should better separate task declaration from task customization. Currently both happens in the tasks array property and the differentiating element is the `customize` property.\r\n\r\n### Task Picker\r\n\r\nThe task picker should support a decription / detail message to better explain what the task does. We also discussed whether the task picker should support MRU which would automatically move the most used tasks up to the top without customization. If we provide a task panel (see below) such a MRU list could be useful there as well.\r\n\r\n### Task Customization\r\n\r\nThe task customization is currently instance based where the task instance is identified by a task id, which can be quite 'cryptic'. An alternative way would be to identify a task based on a type and a key that is defined by the type and therefore can vary from task runner to task runner. So instead of having something like:\r\n```json\r\n\t{\r\n\t\t\"customize\": \"vscode.npm.run build\",\t\r\n\t\t\"taskName\": \"npm: run build\"\r\n\t}\r\n```\r\n\r\na customization would look like this\r\n\r\n```json\r\n\t{\r\n\t\t\"customize\": {\r\n\t\t\t\"type\": \"npm\",\r\n\t\t\t\"file\": \"${workspaceRoot}/package.json\",\r\n\t\t\t\"script\": \"build\"\r\n\t\t},\r\n\t\t\"problemMatcher\": [\"$tsc\"]\r\n\t}\r\n```\r\n\r\nwhere the structure of the identifying attribute is defined by the extension providing the runner support. In the example above the fact that a npm script is identified by the location of the package.json file and the script name comes from the npm extension. This might look different for task contributed by gulp of TypeScript\r\n\r\n### Problem Matchers\r\n\r\nFor task that execute a target of a task runner (e.g. gulp, npm, grunt) VS Code can't decide which problem matchers to attach. Since picking the right problem matcher currently requires editing the tasks.json file we should better support the user with this. We discussed the following ideas:\r\n\r\n- always attach all known problem matchers if a task has no problem matchers. This might result in false positives and might require us to support removing problem matchers via a configuration mechanism.\r\n- we could help the user attaching a problem matcher by generically scanning the output for problems and suggest problem matchers that exactly match these. If selected we update the tasks.json file for the user.\r\n\r\n### Task panel\r\n\r\nIt was suggested to run tasks in its own panel instead of reusing the terminal panel. They should still be executed using the terminal to get ANSI control character support and other nice terminal features (e.g. Ctrl+C). The panel could offer additional features like:\r\n\r\n- a task summary (execution time, exit code, ...)\r\n- the output of a task could be folded (like travis does for example)\r\n- allow for in place customization of a task (for example attach a problem matcher) without the user being forced to edit a tasks.json file.\r\n\r\nWe also discussed the need of a task viewlet but decided that this will not add any big additional value over the task picker and a separate panel.\r\n\r\n### Top Level Menu\r\n\r\nWe were also discussing whether the tasks deserve a top level menu. In general this was consider a good idea. However such a menu should be semantically not technical. So instead of naming it Tools or Tasks it would be better to offer top level menus like Build, Rebuild All, Clean, Run Tests. The downside of such an approach is that such a menu looks out of place if none of these entries trigger any meaningful action in the workspace (e.g. if a simple JS project is open at lease Build, Rebuild All and Clean don't make any sense) \r\n\r\n### Better Selfhosting\r\n\r\nWould be great if we can improve the self hosting coverage of tasks. This is currently hard to do due to the fact how we build. But @dbaeumer will tweak our tasks.json to support more tasks currently run in the terminal (e.g run tests, linting, ...)",
        "createdAt": "2017-06-08 13:14:54",
        "state": "open",
        "number": 28235
    },
    {
        "title": "Add weight/priority to code lens providers",
        "description": "- VSCode Version: Code - Insiders 1.13.0-insider (c8123b036b66ca6e319bae00bfd7c34bb1ad977b, 2017-06-06T21:31:11.642Z)\r\n- OS Version: Windows_NT ia32 10.0.16199\r\n---\r\n\r\nMaybe I'm imagining it (or maybe it was only for code lens from the same provider), but I thought code lens where show in order based on their range.\r\n\r\nI quickly hacked vscode to display the range at the end of the code lens -- and you can see here that the implementation and references code lens have a cols that are before the GitLens ones.\r\n\r\n![image](https://user-images.githubusercontent.com/641685/26865320-20d87b64-4b2a-11e7-8eba-2bde8bc802f8.png)\r\n\r\nIn the latest (beta) of GitLens I was trying to force my code lens to always be at the end of the line (because I would MUCH rather have implementations and references at the start), but even with adding the code lens range at the end of the line, it doesn't seem to help the ordering. I'm really hoping to be able to provide at least some level of consistency to the positioning of the code lens if at all possible.\r\n\r\nDid this change? Is there any way to get this behavior?\r\n\r\n//cc @jrieken ",
        "createdAt": "2017-06-07 06:39:33",
        "state": "open",
        "number": 28166
    },
    {
        "title": "Activate extension with workspaceContains when a matching file is added to the workspace",
        "description": "If I have `\"workspaceContains:**/*.md\"` as an activationEvent, it would be useful for it to fire when a matching file is added to the workspace, not just when a workspace with matching file is opened.\r\n\r\nhttps://github.com/Microsoft/vscode/issues/27665#issuecomment-306394054",
        "createdAt": "2017-06-06 16:53:28",
        "state": "open",
        "number": 28122
    },
    {
        "title": "Feature: Copy all in debug console as plain text",
        "description": "In debug console, can we add a \"Copy All (Unformatted)\" or \"Copy All (Plain text)\" function to the right button menu?\r\nWhen I copy/paste the log into text editor (like Notepad++), there are characters that editor can't display. It would be a lot easier to analyze the log if we can just copy the log as plain text.\r\n\r\n@isidorn ",
        "createdAt": "2017-06-06 09:12:15",
        "state": "open",
        "number": 28094
    },
    {
        "title": "[decorations] Support hover decorations over the line numbers (i.e. gutter)",
        "description": "- VSCode Version: Code - Insiders 1.13.0-insider (9a107453944f25e6019b08615e20d63545584855, 2017-06-05T18:21:57.187Z)\r\n- OS Version: Windows_NT ia32 10.0.16199\r\n---\r\n\r\nIt would be great to be able to provide hover decorations to just the gutter -- this is something I would jump on immediately for GitLens :)",
        "createdAt": "2017-06-06 03:13:17",
        "state": "open",
        "number": 28080
    },
    {
        "title": "See values in dec or hex in the debugger",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\nI'd like to be able to select in which format I see the values of local and watched variables in the debugger. It would be preferred to have a generic setting but be able to change it per variable.\r\n\r\nThe way that it is now I often need to use a exteral dec-to-hex converter and copy the values from VS Code. Being able to see them in hex directly in the debugger would be a great help!\r\n\r\nI mostly debug C/C++ programs but I imagine that this is generic for all languages.\r\n\r\n- VSCode Version: 1.12.2\r\n- OS Version: Linux Ubuntu 16.04 LTS\r\n\r\nSteps to Reproduce:\r\n\r\n1.  Start debugging\r\n2. Add a watched variable or two.\r\n3. Set a breakpoint and run\r\n4. When stopping at the breakpoint, take a look at the values of the watched and local variables. They are all given in decimal values (except pointers that are hex).\r\n",
        "createdAt": "2017-06-05 07:44:33",
        "state": "open",
        "number": 28025
    },
    {
        "title": "Include support for system-wide mandatory/default settings",
        "description": "- VSCode Version: 1.12.2\r\n- OS Version: Windows 10\r\n\r\nSteps to Reproduce:\r\n\r\n1. Install vscode as an administrator\r\n2. Launch vscode as a different (regular) user\r\n\r\nIt is currently not possible for an administrator to define mandatory and/or default settings that apply to all users/workspaces. This would be very helpful in a corporate/enterprise setting where we want users to have a consistent experience, or where the infrastructure demands certain configs (e.g. `\"update.channel\": \"none\"`).\r\n\r\nSuggestion:\r\na) Define an environment variable that points to a json file with mandatory settings, which override user/workspace settings.\r\nb) Define another environment variable that points to a json file with default settings, which get copied to the user settings file when a user launches vscode for the first time.\r\n\r\nIf suggestion a) is difficult to implement I will settle for b) and use an extension (e.g. [Fetch User Environment](https://marketplace.visualstudio.com/items?itemName=michaelnewton.fetch-user-environment)) to manage the mandatory settings.\r\n",
        "createdAt": "2017-06-03 16:12:20",
        "state": "open",
        "number": 27972
    },
    {
        "title": "Have ctrl+click work the same way as in Visual Studio",
        "description": "we use  dblclick LBtn to select a word, but using ctrl +LBtn  is a good way,\r\nin vs studio we could do the following:\r\n1. basic:  press  ctrl and click a word,  the word is selected.\r\n2. advanced: when a word is selected ,  press ctrl+shift and select another word,   so we could select from the start of the  first word to the end of the last word\r\n3.advanced: with ctrl down, we clicked a word, don't release the LBtn, move the mouse to  some where in the middle of the next word ,  the whole next word will be  selected.  this is the same effect as the  \"ctrl + right\"\r\n",
        "createdAt": "2017-06-02 10:16:38",
        "state": "open",
        "number": 27905
    },
    {
        "title": "Mac services not picking up selected text from editor ",
        "description": "Testing #1628\r\n\r\n**steps to reproduce**\r\n- On a mac, open a text file and try selecting a line of text in the editor\r\n- Run the `create sticky note` service. This is under the `code -> Services` menu or can be triggered with `cmd + shift + y`\r\n\r\n**Expected**\r\nThe selected text in the editor is opened in a new sticky note\r\n\r\n**Actual**\r\nSome other text is opened in the new sticky note. I'm not sure where we are getting it from",
        "createdAt": "2017-06-01 00:47:08",
        "state": "open",
        "number": 27799
    },
    {
        "title": "Align explorer sorting with platform sorting",
        "description": "It looks like our file sorting in the explorer does not match platform beahviour in some cases.\r\n\r\n**Windows:**\r\n* a file `foo.ts` is sorted before `foo_test.ts` but we sort it the other way around\r\n\r\n**Linux:**\r\n* a file `foo.ts` is sorted before `foo_test.ts` but we sort it the other way around\r\n* a lowercase file seems to be sorted before an upper case file but we seem to mix the sorting independent of the casing (e.g. folders `[out, outb, outd, Outa, Outc]` are showing up as `[out, OutA, outb, Outc, outd]`\r\n\r\n**macOS:**\r\n* seems to be OK\r\n\r\nWe use a JavaScript [`Collator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator) for the comparing [here](https://github.com/Microsoft/vscode/blob/master/src/vs/base/common/comparers.ts#L19). \r\n\r\nUnfortunately I am not able to tweak the Collator options to bring me the desired result...\r\n",
        "createdAt": "2017-05-31 16:58:27",
        "state": "open",
        "number": 27759
    },
    {
        "title": "Add a way to bind a keybinding for a command from the F1 list",
        "description": "I think we've discussed this, but we've never written it down.\r\n\r\nIMHO, it would be very helpful to have an alternative action next to each command in the F1 list (similar how open to the side is an alternative action in the ctrl+p file list) that when executed would bring up the keybindings editor with the action selected and will execute the \"edit\" action on that command.\r\n\r\ne.g. I use `Git: Stage Selected Ranges` and today I always run it from the F1 list because it is not bound. It would be nice to have an action that allows me to record a keybinding for it such that I can easily map it.",
        "createdAt": "2017-05-31 09:47:22",
        "state": "open",
        "number": 27716
    },
    {
        "title": "Consider allowing to provide context menu commands in code",
        "description": "re #27467\r\n\r\nI like how I can have the primary `command` for a TreeItem, esp. with arguments and I think we should discuss again if we should have that also for context menu actions",
        "createdAt": "2017-05-30 10:40:24",
        "state": "open",
        "number": 27536
    },
    {
        "title": "Extension editor: scroll position is not restored.",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\nTesting: #27350 \r\n\r\n- VSCode Version: 1.13 insider\r\n- OS Version: Linux Fedora\r\n\r\nSteps to Reproduce:\r\n\r\n1. open extension editor\r\n1. scroll the content\r\n1. switch to another editor in the same group\r\n1. switch back to extension editor\r\n\r\nObserve: scroll position is not restored\r\n",
        "createdAt": "2017-05-30 08:47:25",
        "state": "open",
        "number": 27498
    },
    {
        "title": "Add option to use windows keymap on MacOS",
        "description": "- VSCode Version: 1.12.2\r\n- OS Version: macOS Sierra \r\n\r\nWe can write `keybindings` in `package.json` (Extension Manifest File).\r\n```json\r\n\"keybindings\": [\r\n    {\r\n        \"win\": \"ctrl+y\",\r\n        \"mac\": \"cmd+backspace\",\r\n        \"linux\": \"ctrl+y\",\r\n        \"command\": \"editor.action.deleteLines\",\r\n        \"when\": \"editorTextFocus && !editorReadonly\"\r\n    }\r\n]\r\n```\r\nI got a request from some developers that they are using macOS but they want to use Windows keybindings. See [Add option to use windows keymap on MacOS](https://github.com/k--kato/vscode-intellij-idea-keybindings/issues/67).\r\n\r\nSo, I'd like to switch `mac` and `win` in `settings.json` or something. Can I do this?\r\n",
        "createdAt": "2017-05-28 02:34:37",
        "state": "open",
        "number": 27385
    },
    {
        "title": "Feature Request: Zero-latency Typing",
        "description": "Following articles goes into length describing the issue in general. \r\n\r\n- https://pavelfatin.com/typing-with-pleasure/\r\n- https://blog.jetbrains.com/idea/2015/08/experimental-zero-latency-typing-in-intellij-idea-15-eap/\r\n- https://news.ycombinator.com/item?id=10787812\r\n\r\nThe subtle typing lag is observed in VS Code in same machine in which the typing is lag free with sublime text and even eclipse. This feature request is to look into the issue and address it if feasible. \r\n\r\n",
        "createdAt": "2017-05-27 20:53:32",
        "state": "open",
        "number": 27378
    },
    {
        "title": "Task Quick Open Sort Order",
        "description": "With the TSC task provider, I was trying to get the `tsconfig.json` for the current file to always show up first in the `tsc` section of the `task` quick open. Even if I return the tasks in the expected order, it looks like they are sorted by name: https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/tasks/browser/quickOpen.ts#L69\r\n\r\nIs there a way to control the sort order within a group? ",
        "createdAt": "2017-05-26 22:27:02",
        "state": "open",
        "number": 27351
    },
    {
        "title": "Improve ranking of elements in quick open",
        "description": "**Numerous** issues have been filed on this topic, merging them into one:\r\n\r\n**File Picker**\r\n* [ ] Improve sorting of files in quick open #27028\r\n* [ ] Improved search in \"Go to file\" panel #25925\r\n* [ ] Prioritize filetypes containing code in Quick open / Go to file #49853\r\n* [ ] Quick Open strange highlighting #56667\r\n* [ ] Provide an option to disable fuzzy matching in file picker #2705\r\n* [ ] Add a setting to disable fuzzy matching in quick open #99171\r\n* [ ] Search for files should prefer findings in one piece #69648\r\n* [ ]\u00a0index.js index.ts file should show at top of file picker when searching for the name of the directory #72514\r\n* [ ] Unexpected order of fuzzy find results with many consecutive matches #103889\r\n* [ ] Restrict quick open file to project files #19762\r\n* [ ] Bump quickOpen suggestions from current workspace to the top #38128\r\n* [ ] Sort results in \"Go to file\" by how close they are to the working file (usability) #5806\r\n* [ ] Rank exact match over history matches #106786\r\n* [x] Allow additional fuzzy search within files found via CTRL+P #39542\r\n* [x] Go to file: prefix with / to prefer results in root #81250\r\n* [x] Allow quick open to filter on folder names by typing folder name after the file #30404\r\n* [x] Scorer is not very good for matching on filenames #12095\r\n* [x] Sort order for file quickopen should prefer shorter paths #17443\r\n* [x] Quick open highlight should match consecutive characters better #21019\r\n* [x] Improve quick find algorithm to prioritize exact matches better #26649\r\n* [x] QuickOpen (Ctrl+P) search matching logic needs to be improved #33247 \r\n* [x] How to locate one of several files of the same name #32918\r\n* [x] File list order not correct in go to file #34210\r\n* [x] fuzzy searching problem #36119\r\n* [x] Fuzzy search results are not prioritized well. #36166\r\n\r\n**Command Palette**\r\n* [ ] Command palette should rank results with closer search terms higher #14727\r\n* [ ] Add fuzzy search to commands in palette #1964\r\n* [ ] Adaptive abbreviation search for quick open commands #17697\r\n* [ ] Command Palette should be filterable/customized by user-settings #38841\r\n* [ ]\u00a0Adjacent characters are given a lower rank in command palette than distant #40044\r\n* [ ] Improve Command Palette search experience for word permutations #99685\r\n* [ ]  Favorite Commands #101616\r\n* [x] Quick commands fuzzy search doesn't work for text in brackets #27636\r\n\r\n**Picker (extensions)**\r\n* [ ] Support custom QuickPick filter logic #90521\r\n* [ ]\u00a0Ability to apply a final sort to QuickPick results #63050\r\n* [ ] Enable fuzzy matching for picker #34088\r\n* [ ] Broken fuzzy search highlighting/ranking for trimable strings #62918\r\n\r\n**Editor History**\r\n* [ ] Allow for camel case matches in editor history #108446\r\n* [ ] Fuzzy search also in editor history #100590\r\n* [x] Sort recently opened files by recency after I start typing #35610\r\n* [x] Allow disable of recent history in \"go to file\" command #30770\r\n* [x] Quick open changes order for matching elements #10690\r\n* [x] Unintuitive result scoring with Ctrl-P in recent history #20546\r\n* [x] Recently opened files is just a bucket and not sorted by recency #31591\r\n\r\n**Symbols**\r\n* [ ] Allow extensions to fully control workspace symbol search (matching and highlights) #98125\r\n* [ ] Allow fzf style query in workspaceSymbols #106788\r\n* [x] Add fuzzy search to search by symbol #33746\r\n* [x] Lift the 60 chars limit on the camel case matcher #43338\r\n* [x] Allow fuzzy result on searching symbol in file #62435\r\n* [x] Allow to configure that \"Go to symbols\" sorts symbols by fuzzy match #69062\r\n* [x]  Improve ordering of \"Go to symbol in workspace\" results #71951",
        "createdAt": "2017-05-26 06:47:20",
        "state": "open",
        "number": 27317
    },
    {
        "title": "Explorer / Opened Editors Sorting",
        "description": "Numerous issues have been filed on this topic, merging them into one.\r\n\r\n**Done**\r\n* [x] Option for sorting files by type in Explorer #5222\r\n* [x] Give an option to show files before directories in file explorer #22529\r\n* [x] Make listing directories first an option #29329\r\n* [x] Add option to sort files in Explorer side-bar by date modified #11823\r\n\r\n**Open**\r\n* [ ] Align explorer sorting with platform sorting #27759\r\n* [ ] Feature Request: api to custom files sort order at the sidebar #12345\r\n* [ ] Add sorting to Open Editors list #12453\r\n* [ ] Choose a sort order of directories and files according to the settings pattern #23231\r\n* [ ] Feature to assign a particular file name to appear first in a directory listing #25724\r\n* [ ] Explorer order files names with underline #40679\r\n",
        "createdAt": "2017-05-25 18:04:22",
        "state": "open",
        "number": 27286
    },
    {
        "title": "Match whole word doesn't work in search for non-latin characters",
        "description": "#3623\r\n\r\nhttps://github.com/Microsoft/vscode/commit/f151b3ef1fff3f25b02b4f3416888a4fdb5a3011",
        "createdAt": "2017-05-25 16:05:56",
        "state": "open",
        "number": 27280
    },
    {
        "title": "macOS Native Tabs not restored when restarting app",
        "description": "- VSCode Version: 1.12.2\r\n- OS Version: macOS 10.12.5\r\n\r\nSteps to Reproduce:\r\n\r\n1. Create few windows and drag the tab headers to create a tabbed in one window\r\n1. Quit vscode\r\n1. Run vscode and noticed each native tabs becomes a separate window",
        "createdAt": "2017-05-25 00:43:47",
        "state": "open",
        "number": 27222
    },
    {
        "title": "Status bar: allow extensions to contribute context menu entries on items",
        "description": "Now that VS Code provides a \"Manage Extension\" right-click context menu off of each status bar item provided by an extension, can extension authors get the ability to extend it?  I'd like to be able to add commands, custom text and a tooltip to the menu (much like SCM context menus) to provide additional functionality.  (I get frequent requests for functionality that would be perfect there in lieu of continually adding new status bar items.)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/2796865/26404934/9c975186-4061-11e7-8a9c-9b2e0538d2c6.png)\r\n",
        "createdAt": "2017-05-24 13:18:11",
        "state": "open",
        "number": 27196
    },
    {
        "title": "Variable substition: ${packagePath}",
        "description": "In the spirit of https://github.com/Microsoft/vscode/issues/396, please consider adding a new variable that can be used in launch.json and that will refer to the package directory (`packageRoot`) of the currently opened file within the editor.\r\n\r\nThis is going to be useful to reduce the number of profiles necessary to debug each package. As an example, here's what we have to do currently such that we can debug our tape unit tests directly from the code editor:\r\n\r\nGiven that we have a mono repo structure like this:\r\n\r\n```\r\nRoot\r\n  package.json\r\n  Packages\r\n    api\r\n      package.json\r\n      src\r\n      dist\r\n    orm\r\n      package.json\r\n      src\r\n      dist\r\n```\r\n\r\nGiven we develop in Typescript and we resolve the current file name using `${fileBasenameNoExtension}`, Given we have both a \"api\" package and a \"orm\" package in a git mono repo,\r\nWe are stuck doing this to debug our tests inside the code editor:\r\n\r\n```\r\n{\r\n        \"type\": \"node\",\r\n        \"request\": \"launch\",\r\n        \"name\": \"Debug::api current test\",\r\n        \"sourceMaps\": true,\r\n        \"protocol\": \"inspector\",\r\n        \"stopOnEntry\": false,\r\n        \"program\": \"${workspaceRoot}/node_modules/tape/bin/tape\",\r\n        \"args\": [\r\n          \"${workspaceRoot}/packages/api/dist/_test/**/${fileBasenameNoExtension}.js\"\r\n        ],\r\n        \"cwd\": \"${workspaceRoot}/packages/api\",\r\n        \"console\": \"internalConsole\"\r\n      },\r\n      {\r\n        \"type\": \"node\",\r\n        \"request\": \"launch\",\r\n        \"name\": \"Debug::orm current test\",\r\n        \"sourceMaps\": true,\r\n        \"protocol\": \"inspector\",\r\n        \"stopOnEntry\": false,\r\n        \"program\": \"${workspaceRoot}/node_modules/tape/bin/tape\",\r\n        \"args\": [\r\n          \"${workspaceRoot}/packages/orm/dist/_test/**/${fileBasenameNoExtension}.js\"\r\n        ],\r\n        \"cwd\": \"${workspaceRoot}/packages/orm\",\r\n        \"console\": \"internalConsole\"\r\n      }\r\n```\r\n\r\nThe request is for a variable that identifies the root directory of each package so that we could re-write our launch.json like this:\r\n\r\n```\r\n {\r\n        \"type\": \"node\",\r\n        \"request\": \"launch\",\r\n        \"name\": \"Debug unit test with tape\",\r\n        \"sourceMaps\": true,\r\n        \"protocol\": \"inspector\",\r\n        \"stopOnEntry\": false,\r\n        \"program\": \"${workspaceRoot}/node_modules/tape/bin/tape\",\r\n        \"args\": [\r\n          \"${packageRoot}/dist/_test/**/${fileBasenameNoExtension}.js\"\r\n        ],\r\n        \"cwd\": \"${packageRoot}\",\r\n        \"console\": \"internalConsole\"\r\n      }\r\n```",
        "createdAt": "2017-05-23 20:51:06",
        "state": "open",
        "number": 27162
    },
    {
        "title": "PreLaunchTask: support passing parameters from configuration to preLaunchTask",
        "description": "Currently when invoking preLaunchTask, the only possible is the task name. It would be great if properties in the associated configuration can be passed to preLaunchTask.\r\n\r\nScenario: \r\n  I am writing a pre-launch task to automate remote node.js debugging. The pre-launch task will launch the node.js process remotely and establish a SSH tunnel (port forwarding) back to local computer. And then debugger connects to that forwarded port to start debugging. \r\n  The node.js debugger port is specified in launch.json file, and there is no good way for the pre-launch task to get the debugger port. \r\n\r\nThe problem can be solved if preLaunchTask can take parameters from the configuration. For example, tasks.json allow '$config.port' as args:\r\n\r\n           {\r\n                \"command\": \"dotnet\",\r\n                \"taskName\": \"prepareDebug\",\r\n                \"suppressTaskName\": true,\r\n                \"args\": [ \"/myhelper.dll\", \"debug\", \"start\", \"$config.port\" ],\r\n                \"isBuildCommand\": false,\r\n                \"showOutput\": \"always\",\r\n                \"options\": {\r\n                    \"cwd\": \"${workspaceRoot}\"\r\n                }\r\n            }\r\n\r\n@isidorn @weinand ",
        "createdAt": "2017-05-23 18:52:03",
        "state": "open",
        "number": 27157
    },
    {
        "title": "Uninstall or Disable Multiple extensions at once",
        "description": "There should be a way that user selects the multiple extension inside the vs code and select uninstall or disable.\r\nDialog box should appear at once with all the extensions summary that these will be remvoed / disabled.",
        "createdAt": "2017-05-23 16:29:02",
        "state": "open",
        "number": 27147
    },
    {
        "title": "Add a jump back command from goto definition",
        "description": "This is a feature request.\r\n\r\nI'd like to have a command like `workbench.action.navigateback` but that would only take into account the `go to`/`jump` commands (go to definition, implementation, type definition, start of function, ...) and no cursor move.\r\n\r\nFor example, I could jump from a function call to the definition of the function, then move my cursor down three times. If I navigate back, my cursor will go up by one line. But instead I would like to jump back to the function definition and then to the function call.\r\n",
        "createdAt": "2017-05-23 03:58:16",
        "state": "open",
        "number": 27112
    },
    {
        "title": "API: Support glob pattern \"**/!(*.min).js\" for file watchers",
        "description": "I am trying to write an extension, and I am wondering how I can take this pattern:\r\n\r\n```js\r\nglob(vscode.workspace.rootPath + '/**/!(*.min).js', (err, files) => {\r\n    console.log(files);\r\n})\r\n```\r\nAnd use it here:\r\n```js\r\nlet watcher = vscode.workspace.createFileSystemWatcher('**/!(*.min).js', true, false, true);\r\n```\r\n\r\nIt seems as if the `!(*.min)` is not supported. It would be nice if either:\r\n\r\n**A** `!()` was supported\r\nOR\r\n**B** There is another parameter for ignoring files similar to `vscode.workspace.findFiles()`",
        "createdAt": "2017-05-22 03:59:26",
        "state": "open",
        "number": 27051
    },
    {
        "title": "Inconsistent undo/redo behavior in Ctrl-F field",
        "description": "- VSCode Version: 1.12.2\r\n- OS Version: Windows 10\r\n\r\nSteps to Reproduce:\r\n\r\n1. Press Ctrl-F\r\n2. Type something into the field\r\n3. Select some text in the file being edited\r\n4. Press Ctrl-F again\r\n5. Try to undo/redo using keyboard shortcuts\r\n\r\nCharacters will be deleted and added almost at random, based on the field's state before the contents were replaced in step 4. This seems to be because the undo/redo history stores characters being entered and deleted, but the replacement of the entire field contents *is not stored* on the field's history stack. If it were, an undo would simply revert the Ctrl-F field to its earlier state.\r\n\r\nOther fields may have the same problem - the basic issue here is that an operation isn't being pushed to the history stack.",
        "createdAt": "2017-05-21 16:28:14",
        "state": "open",
        "number": 27035
    },
    {
        "title": "[macOS] Make keyboard shortcuts input source-agnostic",
        "description": "- VS Code Version: 1.12.2\r\n- OS Version: macOS 10.12.5\r\n\r\nI have multiple input sources (languages): `U.S. International - PC` and `Russian - PC`. The keyboard shortcuts work fine when `U.S. International - PC` is active and don't work when `Russian - PC` is active. So it is requested to make the keyboard shortcuts **input source-agnostic** so they can work always.\r\n\r\nP. S. On Windows 8.1 I have the same input sources and keyboard shortcuts work fine there regardless of currently active language. \r\n",
        "createdAt": "2017-05-21 10:50:58",
        "state": "open",
        "number": 27023
    },
    {
        "title": "Feature Request: allow extension filter exclusions",
        "description": "\r\n- VSCode Version: 1.12.2\r\n- OS Version: Ubuntu 16.10\r\nSteps to Reproduce:\r\n\r\n1. Open Extensions (CTRL-SHIFT-X)\r\n2. Filter on 'color', see many extensions to do with 'theme'\r\n3. add filter '-theme' and see that '-' has been ignored, the filter is now essentially 'color theme'.\r\n\r\nPlease add the ability to exclude words from the filter results.\r\n",
        "createdAt": "2017-05-20 09:41:40",
        "state": "open",
        "number": 26988
    },
    {
        "title": "SCM: Support past commit messages navigation",
        "description": "- VSCode Version: 1.13.0-insider\r\n- OS Version: any\r\n\r\nThis is a feature request. \r\n\r\nIn the search boxes (both local and multifile) you can use ALT-\u2191 to navigate through your search history. I suggest the same is implemented for the commit message box in the git sidebar. This should be no cheap `git log` substitute - you should only see the (last X?) commit messages you have entered yourself on that machine, in the order in which you have entered them. Just a local history of what was entered in that box.\r\n\r\nThis is somewhat similar to https://github.com/Microsoft/vscode/issues/6190, but different - it has no relation to undoing a commit, it should be there in the commit message box even if there is nothing to commit.\r\n\r\nThanks\r\n",
        "createdAt": "2017-05-19 16:59:21",
        "state": "open",
        "number": 26952
    },
    {
        "title": "See git diff of two files in horizontal layout",
        "description": "I followed the thread of impementing horizontal window splitting, thank you for that.\r\n\r\nI don't seem to be able to achieve the same effect with the git diff view:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/8936090/26190163/535845a6-3ba8-11e7-99b8-c65047c9987d.png)\r\n\r\nAm I missing something? I know there's a toggle inline diff, but that's not the solution.\r\n\r\nIf it's not implemented I think it should be, for the same reasons.",
        "createdAt": "2017-05-18 07:02:00",
        "state": "open",
        "number": 26856
    },
    {
        "title": "Feature Request: Reload when extensions update finishes ",
        "description": "While extensions are installed / updated, the Extension icon changes to have a small clock.\r\nWhen done it swaps to original icon.\r\n\r\nPlease add a new icon with a similar color exclamation mark or checkmark to denote that ALL updates/installs have finished, and add an event that clicking it will cause a reload message and reload upon accepting it. Instead of me having to scroll again in the extension list and find the first updated extension i can and click its own green \"reload\" button.\r\n\r\nI could trace that to the  ExtensionEditor.css file, adding a new style like:\r\nextension-editor > .body > .content.loading.done  or .content.loading.complete (what ever the right way to name it) and adding a new file loadingdone.svg as its background url.\r\nI just have no idea how to create an actionable event that pressing that button will be the equivalent to reloading VS.\r\n\r\nWish i had more time to make a PR, so instead i just created this issue hoping someone can continue this :)\r\n\r\nAlternatively or complimentary, having an option to set in the configuration that it will auto reload upon completing all updates.",
        "createdAt": "2017-05-17 18:22:32",
        "state": "open",
        "number": 26835
    },
    {
        "title": "Allow multiple views to show at the same time",
        "description": "Would be nice to be able to have both a left and right sidebar i,e file tree in left and VSC in right.\r\n\r\nKinda vibing off the multi panel layout of atom with github / git integration\r\n\r\nSomething like this \r\n\r\n![lol screen shot 2017-05-17 at 10 19 26 copy](https://cloud.githubusercontent.com/assets/896954/26130863/cd656144-3aea-11e7-8fc2-120581ec8888.png)\r\n",
        "createdAt": "2017-05-16 22:25:46",
        "state": "open",
        "number": 26777
    },
    {
        "title": "Semantic scroll - keep containers headers visible when scrolling",
        "description": "This is a feature request. Starting with an example. Suppose we have following c# file-\r\n```csharp\r\nusing System;\r\n\r\nnamespace ExampleNamespace\r\n{\r\n    class ExampleClass\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n\r\n        static void ExampleMethod1()\r\n        {\r\n            Console.WriteLine(\"ExampleMethod1\");\r\n        }\r\n\r\n        static void ExampleMethod2()\r\n        {\r\n            var methodName = \"ExampleMethod2\";\r\n\r\n            foreach(var c in methodName)\r\n            {\r\n                if(char.IsUpper(c))\r\n                {\r\n                    Console.WriteLine(\"Upper case\");\r\n                }\r\n                else\r\n                {\r\n                    Console.WriteLine(\"Lower case\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\nIf we are browsing the file at the end, it looks like this now-\r\n![current](https://cloud.githubusercontent.com/assets/751732/26113648/f35eef8c-3a7c-11e7-8e9e-d52971278bb7.PNG)\r\n\r\nAnd with this feature, I wish it to look something like this-\r\n![requested](https://cloud.githubusercontent.com/assets/751732/26113706/176d1dc2-3a7d-11e7-99eb-2e2ac0176a0b.PNG)\r\n\r\nIt means the parent syntax nodes of the area being browsed is automatically freezed, so that the user can easily guess the context of the current code, regardless of how far the parent nodes are. Some points being-\r\n- I think this should be a toggle keystroke to on/off feature, may or may not backed by a setting.\r\n- The parent syntax nodes should smoothly stack up or goes out of stack while scrolling.\r\n- This should be tied with the current viewport and not current cursor position in my opinion.\r\n- It would be nice to have previous sibling nodes included in the stack for if-else chains and switch cases.\r\n- By default, this can be solely based on indentation instead of actual syntax tree of the language, just like how folding currently works in vscode.\r\n- There should be a minimum height of the viewport with actual code (without parent nodes). Or maximum height of parent node (header) lines. When that value will be reached (like for heavily nested code), furthest or top most parent nodes can be hidden in that order. The closes parent nodes will remain visible.\r\n\r\n**Edit:**\r\nFound a nice illustration for this feature [from this tweet](https://twitter.com/jckarter/status/1140131108564062213)-\r\n\r\n![freeze_header](https://user-images.githubusercontent.com/751732/59565046-02d8a480-9070-11e9-9e4c-ad3b97962949.gif)\r\n",
        "createdAt": "2017-05-16 15:22:37",
        "state": "open",
        "number": 26757
    },
    {
        "title": "VS Code keyboard shortcuts suggestion to learn",
        "description": "Keyboard shortcuts are central part of VS Code, there are a lot of them and I think I use only a fraction of them. It would be awesome if VS Code could suggest what shortcut should I learn, based on how I use the app with mouse. For example if  I click between editors a lot, then VS Code could somehow tell me to use `ctrl+1` and `ctrl+2`. This way I could gradually learn shortcuts that would increase my productivity the most. \r\n",
        "createdAt": "2017-05-16 08:24:21",
        "state": "open",
        "number": 26729
    },
    {
        "title": "Create snippets from editor selection",
        "description": "In the edit mode, I think it would be better if user take right mouse button click to define a custom code snippet.\r\n\r\nOne of the situations would be like this:\r\nThe user can select multiple line of the code and click right mouse button, then popup a menu and select \"convert to code snippet\" or something else.\r\n\r\nAll in all, we want a simple and fast way to create custom code snippet",
        "createdAt": "2017-05-16 01:50:04",
        "state": "open",
        "number": 26706
    },
    {
        "title": "Continue comment when enter is pressed",
        "description": "- VSCode Version: 1.12.1\r\n- OS Version: Arch Linux\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open editor in a language that supports comments (say `foo.c`)\r\n2. Type a line that starts with `//`\r\n3. Press `enter`\r\n4. Next line *should* automatically be started with `//` (or at least this should be possible to configure). Instead, the next line is empty.\r\n",
        "createdAt": "2017-05-15 22:00:26",
        "state": "open",
        "number": 26694
    },
    {
        "title": "Can't see Newlines when Render Control Characters is turned on",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: 1.12.1\r\n- OS Version: Win 10 15063.296\r\n\r\nSteps to Reproduce:\r\n\r\n1. turn on render control chars in settings\r\n\r\n    \"editor.renderControlCharacters\": true\r\n\r\n2. open a file with newlines\r\n\r\nExpect to see some visual representation of newlines like in Notepad++ or Atom's similar features\r\n\r\n![image](https://cloud.githubusercontent.com/assets/8959496/26049192/0189cd62-390f-11e7-9114-e8218917fb40.png)\r\n\r\n\r\nBut instead see nothing...\r\n\r\n![image](https://cloud.githubusercontent.com/assets/8959496/26049182/f7d629b4-390e-11e7-88ba-8cea22755db2.png)\r\n\r\n",
        "createdAt": "2017-05-15 08:38:53",
        "state": "open",
        "number": 26646
    },
    {
        "title": "Marked brackets range on scrollbar",
        "description": "- VSCode Version:1.12.1\r\n- OS Version:Linux\r\n\r\nSteps to Reproduce:\r\n\r\n1. Click on the code, inside the brackets.\r\n2. Marked brackets range on scrollbar.\r\nInternal bracket marked with a main color.\r\nExternal brackets in gray (all). Same with more nesting brackets.\r\n![brackets-range-on-scrollbar](https://cloud.githubusercontent.com/assets/16800535/26028968/9dececb0-382a-11e7-814b-fff32eecd0be.png)\r\n3. As soon as one brackets, it's just the main color.\r\n![brackets-range-on-scrollbar2](https://cloud.githubusercontent.com/assets/16800535/26028965/97c3ada6-382a-11e7-81fa-c72370054c10.png)\r\n\r\n\r\nThis will be very useful. Particularly for longer code blocks, so that you can easily see where it ends and where it starts.\r\n\r\n",
        "createdAt": "2017-05-13 20:18:05",
        "state": "open",
        "number": 26604
    },
    {
        "title": "Show quick pick always in context where it was opened",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version:1.12.1\r\n- OS Version:Linux\r\n\r\nSteps to Reproduce:\r\n\r\n1. When mouse click on \"Indentation\" in statusbar, the \"Command Palette\" should appear next to the clicked button.\r\n![contextshowing-commandpalettepopup](https://cloud.githubusercontent.com/assets/16800535/26025820/1d047850-37f0-11e7-95b0-85640caf9154.png)\r\n\r\n2. The same should happen when you click on other buttons that call up the \"Command Palette\". Of course not all but the ones that fit. For example, from the menu> View> Command Palette, it should be old.\r\n3. The popup with the \"Command Palette\" should adjust to the width of the content. It will look aesthetically.\r\n4. It could create a new Extension API that will pop up a Command Palette contextually, with the addition of a button extension.",
        "createdAt": "2017-05-13 13:28:58",
        "state": "open",
        "number": 26596
    },
    {
        "title": "Find in Files \"files to include\" override .gitignore",
        "description": "VSCode 1.12: I have a TypeScript project with a `src` folder and a `.gitignore` file containing this:\r\n\r\n```\r\n/src/**/*.js\r\n```\r\n\r\nIf I search for something, it is OK with 'files to include' is empty:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/101152/26018250/f378953e-376d-11e7-9e6d-cc61369f10cd.png)\r\n\r\n\r\nbut it is not OK if I scope the search:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/101152/26018286/2c8b59f6-376e-11e7-8a14-284fce7f5d61.png)\r\n\r\nWhile I'm searching only in some sup-tree of my project, all .gitignore rules should still be taken into account.\r\n\r\n",
        "createdAt": "2017-05-12 21:54:19",
        "state": "open",
        "number": 26574
    },
    {
        "title": "Multiple cursors + Word wrap",
        "description": "The current behaviour in VSCode with `\"editor.wordWrap\": \"on\" ` is like this:\r\n![Image](https://cloud.githubusercontent.com/assets/5332158/19222557/a85d2168-8e31-11e6-985a-e328a6c3b11c.gif)\r\n\r\nBut I would prefer an option for this\r\n![Image](https://cloud.githubusercontent.com/assets/5332158/20053063/ffbafc3a-a4bd-11e6-9f92-80733ca6c606.gif)\r\n\r\nNote I used the gif from [here](https://github.com/SublimeTextIssues/Core/issues/1054) which I found while looking for a solution. ",
        "createdAt": "2017-05-10 14:38:47",
        "state": "open",
        "number": 26393
    },
    {
        "title": "Git: Support file stat mode changes",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version:\r\n1.12.1\r\n- OS Version:\r\nwin7(with cygwin), and linux ubuntu \r\nSteps to Reproduce:\r\nIf I change filestat modes on files aka \"chmod ugo-x dsfmocklist.py\" vsc indicated diff, but it does not say\r\nanywhere that this is the case. Discard changes do nothing either\r\n\r\nEnclosed is a screenshot the M flag is set, but I cant see any changes, not any description execution bit having changed.\r\n\r\n![vsc-diff-on identical-file](https://cloud.githubusercontent.com/assets/11349883/25888050/dec46df8-3564-11e7-97a1-ad8dab310c5b.jpg)\r\n\r\nplain git diff shows this (in cygwin on same dir)\r\nmobj@BPOLMOBJ1:tools> git diff dsfmocklist.py\r\ndiff --git a/tools/dsfmocklist.py b/tools/dsfmocklist.py\r\nold mode 100755\r\nnew mode 100644\r\n\r\ngit --version\r\ngit version 2.8.3\r\n\r\nBitbucket after commit and push shows this:\r\n![vsc_changes-exec](https://cloud.githubusercontent.com/assets/11349883/25888339/0e0e20a8-3566-11e7-808e-92552007d5b7.jpg)\r\n\r\n\r\n",
        "createdAt": "2017-05-10 08:08:25",
        "state": "open",
        "number": 26360
    },
    {
        "title": "Add support for local history",
        "description": "I would love to be able to see my local history for a file like you can do in intelliJ.",
        "createdAt": "2017-05-09 23:20:17",
        "state": "open",
        "number": 26339
    },
    {
        "title": "[html] Javascript intellisense in inline scripts from external references",
        "description": "This request is to provide intellisense capabilities for referenced script tags on inline javascript, for example:\r\n\r\n```\r\n<script src=\"myJs.js\">  \r\n<script>\r\n   myJs.IntellisenseGoesHere\r\n</script>\r\n```\r\n\r\nIdeally typings files are also supported for an even better experience\r\n\r\nI could not find an open issue on this so per @aeschli 's comment on the last ticket related to this #15377 , I am creating a new feature request here",
        "createdAt": "2017-05-09 22:43:25",
        "state": "open",
        "number": 26338
    },
    {
        "title": "[json] use the schemastore catalog",
        "description": "The JSON server should use http://schemastore.org/api/json/catalog.json for schema associations",
        "createdAt": "2017-05-09 10:16:48",
        "state": "open",
        "number": 26289
    },
    {
        "title": "CodeLens on hover",
        "description": "- VSCode Version: Version 1.12.1 (1.12.1)\r\n- OS Version: macOS Sierra 10.12.4 (16E195)\r\n\r\nCodeLens could be on-demand, instead of always showing all references to all items, the references view could be shown on mouse over instead, or at least have an option for mouse over.  Now view feels very cluttered with it, but needs unnecessary steps if it's completely disabled.",
        "createdAt": "2017-05-08 10:48:05",
        "state": "open",
        "number": 26204
    },
    {
        "title": "Feature request: Drag files for  automatic relative paths",
        "description": "- VSCode Version: Code 1.12.1 (f6868fce3eeb16663840eb82123369dec6077a9b, 2017-05-04T21:26:50.689Z)\r\n- OS Version: Windows_NT ia32 6.1.7601\r\n- Extensions: \r\n\r\n|Extension|Author|Version|\r\n|---|---|---|\r\n|vscode-javascript-snippet-pack|akamud|0.1.5|\r\n|project-manager|alefragnani|0.13.2|\r\n|vscode-great-icons|emmanuelbeziat|1.1.44|\r\n|beautify|HookyQR|0.8.8|\r\n|composer|ikappas|0.5.0|\r\n|yii2-snippets|imanilchaudhari|0.0.5|\r\n|typings-autoinstaller|jvitor83|1.2.0|\r\n|gitignore|michelemelluso|1.0.1|\r\n|vscode-todo-parser|minhthai|1.8.7|\r\n|debugger-for-chrome|msjsdiag|2.6.0|\r\n|bootstrap-3-snippets|wcwhitehead|0.0.9|;\r\n\r\n\r\nWould it be possible to Drag files from the tree-view  to create HTML tags with automatic relative paths for css and js ?\r\n\r\nSteps to Reproduce:\r\n\r\n1.\r\n2.",
        "createdAt": "2017-05-06 20:11:08",
        "state": "open",
        "number": 26134
    },
    {
        "title": "[theming] Theming for workbench icons",
        "description": "Give one way to specify UI icons.",
        "createdAt": "2017-05-06 17:59:46",
        "state": "open",
        "number": 26130
    },
    {
        "title": "[theming] Allow theming workbench fonts",
        "description": "Including\r\n\r\n- Family\r\n- Weight\r\n- Style/Variant/Features\r\n- Include typeface files in theme pack\r\n- Per-language settings (to support fallbacks, cf. #5260)",
        "createdAt": "2017-05-06 17:59:43",
        "state": "open",
        "number": 26128
    },
    {
        "title": "SCM: Add \"stage ranges\" action/button to diff view",
        "description": "Inspired by [GitX](https://rowanj.github.io/gitx/), it would be useful to add a \"stage lines\" action/button for the selected lines in diff view. This would make the partial commit feature much more discoverable.\r\n\r\nGitX:\r\n![timey branch master 2017-05-05 11-26-15](https://cloud.githubusercontent.com/assets/173559/25759088/e220a5bc-3185-11e7-9814-8058ed04e5ea.png)\r\n\r\nMock:\r\n![server js working tree - timey 2017-05-05 11-29-00](https://cloud.githubusercontent.com/assets/173559/25759178/20b0080e-3186-11e7-9f8b-bc2b8ca67f29.png)\r\n",
        "createdAt": "2017-05-05 18:29:44",
        "state": "open",
        "number": 26067
    },
    {
        "title": "Allows conflicting key bindings",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: 1.12.1(April 2017)\r\n- OS Version: Windows 10\r\n\r\nSteps to Reproduce:\r\n\r\n1. Add a new keybinding with the same key combination as an existing keybinding. e.g.\r\n\r\n![vs_code_keybinding_bug](https://cloud.githubusercontent.com/assets/28432978/25738921/7b6edd56-3177-11e7-9062-4ea0740f5d2b.PNG)\r\n\r\nA warning should probably be given to prevent this.\r\n\r\n",
        "createdAt": "2017-05-05 08:45:59",
        "state": "open",
        "number": 26005
    },
    {
        "title": "[theming] Separate workbench theme and syntax theme",
        "description": "After upgrading to VS Code 1.12, I noticed that the workbench theme of the built-in **Monokai** color theme had been changed. However, I preferred the default workbench theme a lot.\r\n\r\nBut in VS Code, there are only two types of themes: **Color Theme** and **Icon Theme**, and the workbench theme is tightly coupled with the syntax theme in the Color Theme category.\r\n\r\nIn contrast, Sublime Text separates theme into `color_scheme` and `theme` in the preferences. For example, I can choose Material style for the workbench and Monokai for the syntax highlighting. Does the team have plan to separate them and let users have more flexibility to customize their editor?\r\n\r\nBy the way, I found that some of theme extensions use `.json` as their theme file (including the built-in [Monokai](https://github.com/Microsoft/vscode/blob/master/extensions/theme-monokai/themes/monokai-color-theme.json)), but the official documentation only mentions that we can use `yo code` to generate theme extension with an existing `.tmTheme` file. Is there any documentation for clarifying their difference and also the schema of the `.json` file?",
        "createdAt": "2017-05-05 06:23:23",
        "state": "open",
        "number": 25986
    },
    {
        "title": "Improved search in \"Go to file\" panel",
        "description": "Would love to see a more accurate search for what I'm actually searching for. For example when I'm searching for \"archive\" and I'am in mid sentence i get these results:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/8997319/25721150/bc83aa46-310f-11e7-9edf-6ce228bd7ec4.png)\r\n\r\nI think, at least for me that the index.js inside the archive folder file is much more relevant than the .babelrc and yarn.lock. Sublime on the other hand does exactly what I want. \r\n\r\n![image](https://cloud.githubusercontent.com/assets/8997319/25721267/16265666-3110-11e7-8bda-1f630b3f81f6.png)\r\n\r\nThis change would make the workflow with VS Code even better than it already is \ud83d\ude04 \r\n",
        "createdAt": "2017-05-04 19:30:47",
        "state": "open",
        "number": 25925
    },
    {
        "title": "[html] provide translations of tag documentation",
        "description": "- VSCode Version: Code 1.11.2 (6eaebe3b9c70406d67c97779468c324a7a95db0e, 2017-04-13T08:03:11.395Z)\r\n- OS Version: Windows_NT ia32 10.0.14393\r\n- Extensions: none\r\n---\r\n\r\nSteps to Reproduce:\r\nAlmost stuffs are displayed in Korean becuase dispaly language is already configured to \"ko(Korean)\". But intelliSense of HTML is not.  \r\n\r\n1.  Mouse over HTML tag.\r\n2. The information popped up under the cursor is not displayed in Korean.\r\n3. \r\n![vscode4](https://cloud.githubusercontent.com/assets/5915404/25708782/7992b9f8-3122-11e7-8e35-7578a1f3063d.png)\r\n",
        "createdAt": "2017-05-04 14:36:28",
        "state": "open",
        "number": 25898
    },
    {
        "title": "Stop rendering pseudo-italic fonts when italic is not available",
        "description": "When using fonts which don't have italic variants, such as Fira Mono, VScode renders them anyway, using a simple skew. Goes the same for emojis.\r\n\r\nThis looks quite bad, and should be avoided. \r\n",
        "createdAt": "2017-05-04 13:13:38",
        "state": "open",
        "number": 25895
    },
    {
        "title": "Copy/replace/add left <-> right in compare views",
        "description": "In the compare views, it would be nice to have \r\n\r\n* \"Copy to left/right\"\r\n* \"Replace left (with right)/right (with left)\"\r\n* \"Add above/down left/right\"\r\n\r\nin *all* views, i.e. the side-by-side and the unified view (there with other text than \"left/right\").\r\n\r\nNow, I need to select the text and copy-paste it. In the unified view, I even can't select the text from the compared file (\"left\" file in side-by-side view).\r\n\r\nA nice UI would be the one as in [Meld](http://meldmerge.org/):\r\n![image](https://cloud.githubusercontent.com/assets/5795847/25697422/2cdf426e-30bb-11e7-91ba-af67bdebe88d.png)\r\n\r\nRelated: #24390 (but only wanted for staging VCS diffs)\r\nBlocked by: https://github.com/Microsoft/vscode/issues/4180 ?\r\n",
        "createdAt": "2017-05-04 10:37:32",
        "state": "open",
        "number": 25887
    },
    {
        "title": "[Feature Request] Problem view should update immediately when compile problems occur",
        "description": "Right now, the problem view only updates when the build task has completely finished. For big projects and depending on the build system, this can be significantly later than when the compile warnings and errors actually occur (up to a minute for me), which pushes me to look into the build output to find the problems manually. It would be nice if the problem view updated as soon as problem occur.\r\n\r\nFWIW, sample task definition (note that I'm compiling in a terminal):\r\n\r\n{\r\n  \"version\": \"0.1.0\",\r\n  \"_runner\": \"terminal\",\r\n  \"showOutput\": \"always\",\r\n  \"echoCommand\": true,\r\n  \"tasks\": [\r\n  {\r\n    \"taskName\": \"task1\",\r\n    \"command\": \"some_build_command\",\r\n    \"isShellCommand\": true,\r\n    \"problemMatcher\": {\r\n        ..\r\n      }\r\n    }\r\n  },\r\n",
        "createdAt": "2017-05-04 07:56:43",
        "state": "open",
        "number": 25875
    },
    {
        "title": "[theming] when completing color keys in settings, fill in current value",
        "description": "That would be very helpful \ud83d\udc4d ",
        "createdAt": "2017-04-28 17:08:53",
        "state": "open",
        "number": 25633
    },
    {
        "title": "Support to attach to an electron spawned node process using the picker",
        "description": "Currently you cannot attach to an electron spawned node process like the TypeScript server using the picker, that is using a launch config like:\r\n```json\r\n        {\r\n            \"type\": \"node\",\r\n            \"request\": \"attach\",\r\n            \"name\": \"Attach to process\",\r\n            \"processId\": \"${command:PickProcess}\",\r\n            \"port\": 5859,\r\n            \"protocol\": \"legacy\"\r\n\r\n        }\r\n```\r\n",
        "createdAt": "2017-04-28 10:08:39",
        "state": "open",
        "number": 25618
    },
    {
        "title": "Problem saving keybindings",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: 1.11.2 and 1.12.0 - insiders\r\n- OS Version: Windows 10\r\n\r\n-- Sorry for the English, I used Google Translator --\r\n\r\nWhen I set a shortcut, if you press <kbd>Ctrl</kbd> + <kbd>k</kbd>, the VSCode is waiting for a second combination. Which works great.\r\n\r\n\r\nBut if I press any keyboard and then <kbd>Ctrl</kbd> + <kbd>k</kbd>, this key takes the function of <kbd>Ctrl</kbd> + <kbd>K</kbd> and always waits for a second combination.\r\n\r\nExample: <kbd>n</kbd> <kbd>Ctrl</kbd> + <kbd>k</kbd>\r\n\r\nIf you type a text and press <kbd>n</kbd> it is waiting for the second combination.\r\n\r\nI know the same open multiple ports for shortcuts, but maybe one maybe a setting where I only limit use to <kbd>Ctrl</kbd> + <kbd>k</kbd> to receive a second combination.\r\n\r\nMy suggestion is (I do not know if it's possible):\r\n\r\n1- Limit second combination only to <kbd>Ctrl</kbd> + <kbd>k</kbd>, or until the user changes.\r\n2- Whenever you have this situation, reverse the shortcuts automatically, either on the new screen or manually. If you typed <kbd>n</kbd> <kbd>Ctrl</kbd> + <kbd>k</kbd> it should interpret or edit the file for <kbd>Ctrl</kbd> + <kbd>k</kbd> <kbd>n</kbd>\r\n3 - Prevent saving the shortcut key if it is wrong or prevents it from working.\r\n",
        "createdAt": "2017-04-26 00:57:36",
        "state": "open",
        "number": 25356
    },
    {
        "title": "can't copy multiple 'problems'",
        "description": "- VSCode Version:\r\n1.11.2\r\n\r\n- OS Version:\r\nwindows 10 CU\r\n\r\nSteps to Reproduce:\r\n1. produce multiple 'problems'\r\n2. attempt to select multiple problems\r\n\r\nExpect:\r\nI expect to be able to select all/multiple problems in the problems pane, in the normal ways - ie by selecting one, and shift-select another and ctrl-c; or by ctrl-a, ctrl-c\r\n",
        "createdAt": "2017-04-25 12:31:28",
        "state": "open",
        "number": 25290
    },
    {
        "title": "Render current line highlight in the gutter for multiple selections",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: 1.11.2\r\n- OS Version: Windows 10\r\n\r\nSteps to Reproduce:\r\n\r\n1. Use CTRL+D to select multiple occurences of highlighted string under cursor\r\n2. get lost in the selection hell\r\n\r\nIssue:\r\nIt's hard to tell where the occurences are in VSCode. My suggestion is to highlight the row in gutter as seen in second screenshot of ST3.\r\n\r\nScreenshot from VSCode\r\n![image](https://cloud.githubusercontent.com/assets/2313018/25328793/7c4beeea-28d9-11e7-8dd5-d090a1927a72.png)\r\n\r\nScreenshot from Sublime Text 3\r\n![image](https://cloud.githubusercontent.com/assets/2313018/25328804/8a5546d0-28d9-11e7-89f3-0f7c143d44aa.png)\r\n",
        "createdAt": "2017-04-24 08:38:56",
        "state": "open",
        "number": 25221
    },
    {
        "title": "Support development extension installations",
        "description": "VSCode Version: 1.11.2\r\n\r\nI have the [vshaxe](https://github.com/vshaxe/vshaxe) extension cloned into `.vscode/extensions/vshaxe`, which is the usual workflow for working on extensions as far as I can tell. I didn't have the most recent commit pulled yet, so the version in my local `package.json` was behind the officially relased one. This leads to VSCode actually asking me to update the extension (which doesn't make a lot of sense for an extension installed from source):\r\n\r\n![](http://i.imgur.com/MC22OEx.png)\r\n\r\nWhen you do this, VSCode installs the extension as it usually would, into a `nadako.vshaxe-1.5.1` folder, which then actually _overrides_ the development installation of the extension on the next restart. This alone wouldn't be a huge issue, but I had `\"extensions.autoUpdate\": true` in my settings, so **this happened without me realizing it**.\r\n\r\nIt seems that there's an assumption here somewhere that a development installation of an extension will always have a version that's >= the version of the latest release. However, there are a number of reasons why this might not be the case:\r\n\r\n- As an extension developer, you might not have pulled the most recent commit(s) yet.\r\n- As an extension developler, you might want to check out out older commits to `git bisect` something.\r\n- As an extension user, you might want to install an extension from source to be able to roll back to an earlier version of it because the most recent version broke something (I don't think there's currently another way to install older versions of extensions? Related: #25142). ",
        "createdAt": "2017-04-21 20:55:57",
        "state": "open",
        "number": 25159
    },
    {
        "title": "Provide for cancellation of extension download",
        "description": "- VSCode Version: 1.11.2\r\n- OS Version: Linux Mint 18.1\r\n\r\n**Steps to Reproduce:**\r\n\r\n1. Go to extensions (Ctrl+Shift+X).\r\n2. Search for \"@sort:installs\" (or any other query that shows extensions you do not have installed).\r\n3. Click the green install button next to an extension.\r\n\r\n**Actual Results:**\r\n\r\nButton \"dims\" and changes the displayed text to \"Installing\" until the extension has been installed.\r\n\r\n**Desired Behavior:**\r\n\r\nA cancel button appears or at least clicking on the \"Installing\" button opens a menu with a cancel option.\r\n\r\n**Rationale:**\r\n\r\nInstall can be hit accidentally, [extensions can be large](https://github.com/Microsoft/vscode/issues/18146), and in many places bandwidth is still capped/limited; thus, it would be nice to have a recourse other than exiting VS Code to abort the download.",
        "createdAt": "2017-04-20 18:08:18",
        "state": "open",
        "number": 25089
    },
    {
        "title": "full width tab glyph for editor.renderWhitespace",
        "description": "When viewing invisible characters (editor.renderWhitespace), I would like the character/glyph used for tabs to extend across the full width of the tab (N spaces / to the next tab stop). Sublime Text 3 uses what looks like an emdash(?) or essentially a line than runs to the next tab stop. VSCode uses a single character width arrow. \r\n\r\nIn descending order of preference:\r\n\r\n  - a line that extends the full tab width (to the next tab stop) like ST3\r\n  - an arrow that extends the full tab width (to the next tab stop)\r\n",
        "createdAt": "2017-04-19 16:16:18",
        "state": "open",
        "number": 25021
    },
    {
        "title": "keyboard shortcuts to choose an intellisense suggestion?",
        "description": "Was abit surprised that the intellisense suggestions weren't keyed with a number or something where the user could say `Ctrl+5` and choose the fifth suggestion - has this been considered?",
        "createdAt": "2017-04-17 22:05:57",
        "state": "open",
        "number": 24918
    },
    {
        "title": "SCM: Support keyboard shortcuts",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: 1.11.2\r\n- OS Version: macOS Sierra 10.12.4\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open a project under git, with some changed files\r\n2. Ctrl-Shift-G to open the SCM view.  It has a commit message at the top and a list of Changes below.\r\n3. Tab to go to the list of Changes.\r\n4. Cursor down until an interesting file is selected.\r\n\r\nNow I can do Return to see a diff.  After that, the file is highlighted and there are icons in the SCM view for reverting this file (curved arrow) or for staging it (plus sign).\r\n\r\nBut I can't find a keyboard shortcut for the \"stage\" icon.  I tried Return, Ctrl-Return, Space, Ctrl-Space, S, Shift-S, the Plus key, Cmd-Down (because that opens a file in Explorer view), Cmd-Up, Cmd-Right, Cmd-Left.\r\n\r\nI also tried Cmd-Shift-P to find the command, but it doesn't have a keyboard shortcut printed.  I also tried to right-click the file, which gave me a context menu (with \"stage\" in it), again without keyboard shortcut.\r\n",
        "createdAt": "2017-04-17 21:13:34",
        "state": "open",
        "number": 24916
    },
    {
        "title": "[json] option to format code with leading commas",
        "description": "Can we get an option in VS Code to have it format all lists by using leading commas instead of trailing commas?\r\n\r\nThis would so much simplify editing code and it would also greatly simplify the IDE's automatic code completion (e.g. the VS Code Settings editor).\r\n\r\nWith the suggested option set to `true`, comma separated lists would proposedly be formatted like this:\r\n\r\n```json\r\n{ \"workbench.iconTheme\": \"vs-seti\"\r\n, \"editor.lineNumbers\": \"off\"\r\n, \"editor.tabSize\": 2\r\n, \"editor.insertSpaces\": false\r\n, \"editor.autoClosingBrackets\": false\r\n}\r\n```\r\n\r\nFunction calls using line wrapping for their arguments would look like this:\r\n\r\n```js\r\ncall( 1\r\n    , \"test\"\r\n    , new Console()\r\n    );\r\n```\r\n\r\na nested sample would look like this:\r\n\r\n```json\r\n{ \"version\": \"0.2.0\"\r\n, \"configurations\":\r\n  [ { \"type\": \"node\"\r\n    , \"request\": \"launch\"\r\n    , \"name\": \"Programm starten\"\r\n    , \"program\": \"${file}\"\r\n    }\r\n  , { \"type\": \"node\"\r\n    , \"request\": \"attach\"\r\n    , \"name\": \"An den Port anf\u00fcgen\"\r\n    , \"address\": \"localhost\"\r\n    , \"port\": 5858\r\n    }\r\n  ]\r\n}\r\n```\r\n<hr/>\r\nThis formatting style would result in much cleaner, tidier code.\r\n<hr/>\r\n\r\n### Moreover, adding a new property to an object would be a snap:\r\n\r\nEither copy/paste from an existing property (=> no more syntax errors due to redundant trailing commas, see screenshot below):\r\n\r\n![comma error](https://cloud.githubusercontent.com/assets/9283914/25074723/8e40d278-2302-11e7-94d8-d8b35d3321ce.png)\r\n\r\n...  or create a new property and you might immediately get IntelliSense right after typing the leading comma of the property to create.\r\n<hr/>\r\n\r\n### The suggested formatting style is applicable to all languages\r\nE.g. T-SQL:\r\n```sql\r\nCREATE TABLE\r\n  ( id INT PRIMARY KEY IDENTITY\r\n  , name NVARCHAR(100) NOT NULL UNIQUE CHECK(LEN(name) > 0)\r\n  , created DATETIME NOT NULL DEFAULT(GETDATE())\r\n  , updated DATETIME NOT NULL DEFAULT(GETDATE())\r\n  )\r\n```",
        "createdAt": "2017-04-16 22:14:52",
        "state": "open",
        "number": 24869
    },
    {
        "title": "Global task properties",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: 1.11.x\r\n- OS Version: Ubuntu 14.04\r\n\r\nSeveral task properties , you would think are global, but are not, such as `options` and `problemMatcher`. For example, in the following `task.json` file, `options` and `problemMatcher` are ignored. In order for these properties to work, they must be replicated across all tasks in the task array, which really sucks, especially when you have 5+ tasks, each sharing the same set of problem matchers and options. What makes this even worse, is that you can't reference problem matchers by name, which means you have to type out the entire problem matcher definition, which is like 10+ lines, for each and every task.\r\n\r\n```json\r\n{\r\n    \"version\": \"0.1.0\",\r\n    \"command\": \"echo\",\r\n    \"isShellCommand\": true,\r\n    \"args\": [],\r\n    \"showOutput\": \"always\",\r\n    \"echoCommand\": true,\r\n    \"suppressTaskName\": true,\r\n    \"options\": {\r\n        \"env\": {\r\n            \"VAR\": \"xyz\"\r\n        }\r\n    },\r\n    \"problemMatcher\": [{\r\n        ...\r\n    }, {\r\n        ...\r\n    }],\r\n    \"tasks\": [\r\n        {\r\n            \"taskName\": \"hello\",\r\n            \"args\": [\"Hello World\"]\r\n        },\r\n        {\r\n            \"taskName\": \"bye\",\r\n            \"args\": [\"Good Bye\"]\r\n        }\r\n    ]\r\n}\r\n```",
        "createdAt": "2017-04-16 19:13:05",
        "state": "open",
        "number": 24865
    },
    {
        "title": "More font options",
        "description": "A lot of people use fonts like Fira Code, which doesn't has italics. Wouldn't that be great to have options to force no_italics, no_bold, etc?",
        "createdAt": "2017-04-15 16:36:01",
        "state": "open",
        "number": 24830
    },
    {
        "title": "Allow to reset \u201cDon't Show Again\u201d preference",
        "description": "VSCode\u2019s \u201ctop banner\u201d often includes a \u201cDon't Show Again\u201d button. However it's not clear how a user should undo this action.\r\n\r\nWould it be possible to save these preferences to the user's workspace settings, perhaps? Then it is easy for the user to undo this action.\r\n\r\nAn example of a user needing this: https://github.com/Microsoft/vscode/issues/23314",
        "createdAt": "2017-04-15 10:40:31",
        "state": "open",
        "number": 24815
    },
    {
        "title": "[json] preserve comments of last property when adding a new property",
        "description": "- VSCode Version: Code - Insiders 1.12.0-insider (d1b315f03013b72d0fbb0a5c8ccc08088de315eb, 2017-04-13T06:10:58.128Z)\r\n- OS Version: Windows_NT ia32 10.0.14393\r\n\r\n---\r\n\r\nSteps to Reproduce:\r\n\r\n1. Have a setting with //comment behind it\r\n2. Add a new setting by clicking pencil\r\n3. Comment is stolen from previous setting\r\n\r\n![image](https://cloud.githubusercontent.com/assets/5593825/25003722/1aca9062-2051-11e7-87d0-6f38ef57d5b5.png)\r\n",
        "createdAt": "2017-04-13 11:59:16",
        "state": "open",
        "number": 24676
    },
    {
        "title": "[html] Add Surround With",
        "description": "#18246 \r\nThere's a feature that I miss in VS Code.\r\nThis feature is \"Surround With\". It help when I need to add a parent tag for a element block.\r\n\r\n- VSCode Version: 1.11.1\r\n- OS Version: Windows 10 Pro\r\n\r\n",
        "createdAt": "2017-04-11 20:46:16",
        "state": "open",
        "number": 24551
    },
    {
        "title": "Feature: The ability to provide a workspace relative path to Recommended Workspace Extensions",
        "description": "Our team has private extensions that are designed to work in our particular workspace (build commands, testing, etc.). The extensions are checked into source control in the workspace, not published to the store. It would be nice if I could get these to show up in Recommended Workspace Extensions. Seems simple enough to detect if the extension name is a workspace relative path to a vsix file.\r\n",
        "createdAt": "2017-04-11 17:41:44",
        "state": "open",
        "number": 24542
    },
    {
        "title": "Provide extension recommendations for files in workspace",
        "description": "while testing https://github.com/Microsoft/vscode/issues/22277:\r\n\r\n- open VS Code on MERN starter workspace\r\n- run \"Show Recommended Extensions\"\r\n\r\nObserve: nothing shows up\r\n\r\nsince the project has an `.eslintrc`, `.babelrc`, and `Dockerfile` file I would expect that at least the corresponding extensions show up.",
        "createdAt": "2017-04-11 14:18:50",
        "state": "open",
        "number": 24519
    },
    {
        "title": "[folding] Folding HTML tags should hide the closing tag. ",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: 1.11.1\r\n- OS Version: Windows\r\n\r\ninstead of showing:\r\n< div ... >\r\n< /div>\r\n\r\njust show \r\n< div ...>\r\n\r\nwhen folded \r\n",
        "createdAt": "2017-04-11 13:55:25",
        "state": "open",
        "number": 24515
    },
    {
        "title": "Support args for `editor.action.trimTrailingWhitespace` command",
        "description": "- VSCode Version: 1.11.1\r\n- OS Version: Windows 10 Pro\r\n\r\n## Feature Request\r\nSupport 2 additional args for the `editor.action.trimTrailingWhitespace` command:\r\n```js\r\ncommands.executeCommand(\r\n    'editor.action.trimTrailingWhitespace',\r\n    uri,  // (optional, but useful when the doc in question is not within an active editor)\r\n    reason  // (manual, auto-save, etc.), useful for NOT trimming auto whitespace\r\n);\r\n```\r\n",
        "createdAt": "2017-04-10 05:53:00",
        "state": "open",
        "number": 24400
    },
    {
        "title": "SCM: Support workspace diff navigation",
        "description": "- Please improve the source control view by making it searchable, folder-wise grouping, bulk select. \r\n- Allowing to write git commands right there would be great.\r\n- Keyboard shortcuts to navigate through changed files\r\n\r\n",
        "createdAt": "2017-04-10 03:04:41",
        "state": "open",
        "number": 24389
    },
    {
        "title": "Ability to detect a Mean project and provide extension recommendations",
        "description": "Testing #22279 \r\n\r\nVS Code should be able to detect MEAN project/application and recommend extensions for the workspace.",
        "createdAt": "2017-04-07 08:47:17",
        "state": "open",
        "number": 24193
    },
    {
        "title": "[Feature] Option to disable cmd+click trigger for goToDefinition",
        "description": "Starting ~2 weeks ago, I have been plagued by this feature. Somehow I manage to trigger this feature about 60% of the time when I am trying to copy+paste. It is the same issue as reported here, but in the editor so am creating this ticket as suggested by @bpasero .\r\n\r\nhttps://github.com/Microsoft/vscode/issues/7827#issuecomment-238237206\r\n\r\n- VSCode Version: Version 1.10.2 (1.10.2)\r\n- OS Version: OS X 10.11.6 (15G31)\r\n\r\nSteps to Reproduce:\r\n\r\n1. Cmd+click a followable definition.\r\n2. Unexpectedly arrive somewhere deep in node_modules.\r\n\r\nDon't get me wrong, I love this feature but whatever changes were made recently seem to be incompatible with my muscle memory when copying text. So, I would like to change the keybinding, or at the very least turn it off altogether.\r\n\r\n",
        "createdAt": "2017-04-05 21:30:34",
        "state": "open",
        "number": 23957
    },
    {
        "title": "Symbol outline multi-line highlight is visually inconsistent when interleaved with code lens",
        "description": "If the symbol outline is highlighting an entry that spans multiple lines and there is a code lens within that range, the code lens line is not highlighted. See attached image.\r\n\r\nIt seems like the code lens line should also be highlighted in the same color.\r\n\r\n- VSCode Version: 1.10.2, happens on 1.11 insiders as well.\r\n- OS Version: Win10\r\n\r\n![image](https://cloud.githubusercontent.com/assets/356714/24696929/29556e48-19a0-11e7-9522-1894e91ab250.png)\r\n\r\n",
        "createdAt": "2017-04-05 08:41:01",
        "state": "open",
        "number": 23921
    },
    {
        "title": "Terminal confirmOnExit should only warn when the terminal shell is running something",
        "description": "We could check if the shell process from node-pty has any child processes using something like `pgrep -P <pid>`. If we do this confirmOnExit=true may be better off as the default.",
        "createdAt": "2017-04-01 23:55:21",
        "state": "open",
        "number": 23808
    },
    {
        "title": " Line height and font size are too large by default",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: 1.10.2\r\n- OS Version: win10 x64\r\nMy monitor native resolution is 1920x1200\r\n\r\n<br>\r\n\r\nWhen opening any file in VSCode, it shows only **56 lines** at any time.\r\nI feel that the current line height and font size are too much by default.\r\n\r\n_For reference:_\r\n\r\n```\r\nSublime Text 3: 71 lines \r\n Notepad++ 6.9: 65 lines\r\n      gVim 7.4: 66 lines \r\n  UltraEdit 23: 67 lines\r\n```\r\n_In contrast, Atom 1.15 displays even less: 49 lines_\r\n\r\n<br>\r\n\r\nBy default VSCode has in its settings:\r\n\r\n```\r\n\"editor.fontSize\":  14,    // Controls the font size in pixels.\r\n\"editor.lineHeight\": 0     // Controls the line height. Use 0 to compute the lineHeight from the fontSize.\r\n```\r\n\r\nIf I set them to **13** and **15** respectively\r\nthen the visible lines area becomes on par with the other editors: 71 lines.\r\n\r\n<br>\r\n\r\nAlso, _(while using the default `Dark+` theme\r\nand the default setting `  \"editor.fontFamily\": \"Consolas, 'Courier New', monospace\"`)_\r\nwith my suggested settings, 13pt Consolas *I think* it is appears a bit boldish.\r\n_Changing the value`\"editor.fontWeight\": \"normal\"` to anything below 400 doesn't make a difference. (related issue: #381)_\r\nThat's why I believe that, in conjunction with the above two suggested changes, \r\nit would be even better to switch to a slightly different font that would support setting `fontWeight` below 400 e.g. something like \"Consolas Light\" -I know that this font currently doesn't exit- )\r\n\r\n<br>\r\n\r\n**So, my suggestion is to change the default values of these settings to 13 and 15 respectively, \r\nplus lower the `fontWeight` value somehow**\r\n\r\n\r\n-----\r\nHere is VSCode with its default settings:\r\n[screenshot 682](https://cloud.githubusercontent.com/assets/723651/24582811/7b7b0e24-1740-11e7-92d0-b488b89e6de9.png)\r\n\r\n\r\n\r\nAnd here is comparison of VSCode with my suggested settings vs Sublime Text 3:\r\n\r\n[screenshot 678](https://cloud.githubusercontent.com/assets/723651/24582818/a8b5cb2c-1740-11e7-95de-ee34554b7b72.png)\r\n[screenshot 678b](https://cloud.githubusercontent.com/assets/723651/24582821/bfba6350-1740-11e7-8451-9aaec3773127.png)",
        "createdAt": "2017-04-01 22:24:16",
        "state": "open",
        "number": 23806
    },
    {
        "title": "Extensions: Allow for multiple publishers in extension / display on Marketplace",
        "description": "package.json `publisher` type is string. Needs to be `string[]` or add new element `publishers` of type `string[]`. In the marketplace display the publishers there or have a section like http://npmjs.com for collaborators pulling from the contributors node, or maintainers node.",
        "createdAt": "2017-04-01 18:34:37",
        "state": "open",
        "number": 23801
    },
    {
        "title": "Bind all keybindings with numbers also to the numpad keys out of the box",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: 1.11.0 - insiders\r\n- OS Version: Windows 10\r\n\r\n-- Sorry for the English, I used Google Translator --\r\n\r\nAllow all numbered shortcut combinations to work also with the numeric keypad.",
        "createdAt": "2017-03-31 22:26:34",
        "state": "open",
        "number": 23770
    },
    {
        "title": "Allow project specific keybindings",
        "description": "same as the settings.json, I should be able to specify a local keybindings.json that overrides user keybindings and global keybindings. \r\n\r\nA prompt alerting the user to the override and asking which to use might be appropriate.",
        "createdAt": "2017-03-31 17:51:40",
        "state": "open",
        "number": 23757
    },
    {
        "title": "Several fonts at the same time for different elements of the code",
        "description": "Please create a way to give themes and/or users the possibility of using several fonts at the same time. Please check this article that describes how this is possible to achieve on the Atom editor.\r\n\r\nhttps://medium.com/@peterpme/operator-mono-fira-code-the-best-of-both-worlds-191be512fd5e\r\n\r\nIn this example, this allows the user the define one font for certain elements in the code, while using another fonts as the main one for the rest of the code.\r\n\r\n> If Operator Mono and Fira Code spent a lot of time together and had a baby, you\u2019d get [something that looks like this](https://cdn-images-1.medium.com/max/800/1*hE_nLB776KUDXPERE_3cXw.png).",
        "createdAt": "2017-03-30 23:14:14",
        "state": "open",
        "number": 23707
    },
    {
        "title": "Keyboard layout changes are not detected on Linux",
        "description": "- VSCode Version: Code - Insiders 1.11.0-insider (6b9548065ad3e31fca4f0e91cf882505fe8c30cf, 2017-03-30T06:18:34.366Z)\r\n- OS Version: Linux x64 3.13.0-108-generic\r\n- Extensions: none\r\n---\r\n\r\nFound verifying #1549\r\n\r\nSteps to Reproduce on Linux under Parallels with a US keyboard (did not reproduce on Mac):\r\n\r\n1. Start with US layout\r\n2. Navigate in code to populate navigation history\r\n3. Navigate back / forward with keyboard shortcut (Ctrl + Alt + Minus, Ctrl + Shift + Minus)\r\n4. Switch to German layout\r\n5. Navigate back / forward now works with both the German location of Minus (expected) and the US location of Minus (unexpected)\r\n6. Reload window\r\n7. Now navigation only works with the German location of Minus (expected)\r\n\r\nIt seems like the layout switch doesn't clear out the old binding.",
        "createdAt": "2017-03-30 18:21:00",
        "state": "open",
        "number": 23690
    },
    {
        "title": "showInputBox should have the ability to have an array of quickpick options as well",
        "description": "If you do showInputBox, you can receive input from a user.\r\n\r\nIf you do showQuickPick you can have the user choose from a list.\r\n\r\nThere is no way to receive input from a user AND show a list of choices.\r\n\r\nIf you try this with showQuickPick, and the user enters something that is not in the array, undefined is returned.\r\n\r\nI think that showInputBox should have an overload that displays options just like in showQuickPick and returns the value instead of undefined if it is not an entry from the array.",
        "createdAt": "2017-03-30 02:50:02",
        "state": "open",
        "number": 23633
    },
    {
        "title": "Extension Editor: Show default values properly when they are not simple type in Settings contribution ",
        "description": "\r\nBelow is an example for the Go extension\r\n\r\n![image](https://cloud.githubusercontent.com/assets/16890566/24481365/92b71e10-149e-11e7-82a9-8f1df9828ddf.png)\r\n\r\n\r\n",
        "createdAt": "2017-03-29 23:41:48",
        "state": "open",
        "number": 23627
    },
    {
        "title": "Cursor up/down jumps visually left/right when using a proportional font",
        "description": "Same underlying issue as https://github.com/Microsoft/vscode/issues/2654\r\nMake a document with two lines; one filled with \"WWWWW\" and other line filled with \"iiiiiii\". Press the down arrow key, and the cursor will jump left and right, because the cursor position is counted in characters instead of pixels.",
        "createdAt": "2017-03-29 22:32:34",
        "state": "open",
        "number": 23625
    },
    {
        "title": "Feature: option to configure renderIndentGuides",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\nVSCode Version: Version 1.10.2 (1.10.2)\r\nOS Version: Mac OS 10.4\r\n\r\nconfigure options to renderIndentGuides\r\n1. set colors based on the depth hierarchy\r\n2. highlight options on matching braces\r\n3. different line options - dashed, solid etc..\r\n",
        "createdAt": "2017-03-29 19:12:22",
        "state": "open",
        "number": 23609
    },
    {
        "title": "Mouse down (drag) + hitting PgUp, PgDn, Home and End should continue selecting",
        "description": "Currently when selecting text and then hitting PgUp to scroll one page up resets the selection.\r\nIt would make more sense to keep selecting more text, as there's no other reason to hit those buttons while selecting text. Multiline selection should work the same way. If the functionality is not desired then creating a setting to allow that would also be good.",
        "createdAt": "2017-03-27 12:01:24",
        "state": "open",
        "number": 23273
    },
    {
        "title": "[json] formatter should keep empty lines",
        "description": "- VSCode Version: 1.11.0-insider\r\n\r\nSteps to Reproduce:\r\n\r\n1. `\"json.format.enable\": true`\r\n2. Place some new lines inside a JSON and press save. New lines are removed.\r\n\r\nUse case:\r\n\r\nIn bigger JSON files - especially ones that allow commenting (e.g. JSON5 or `.vscode/settings.json`) - it is useful, if we could use new lines, but still benefit from formatting.\r\n",
        "createdAt": "2017-03-27 08:32:17",
        "state": "open",
        "number": 23260
    },
    {
        "title": "Support Platform Specific Extensions",
        "description": "I can't find answer from stack overflow, so I open a issue.",
        "createdAt": "2017-03-27 05:16:23",
        "state": "open",
        "number": 23251
    },
    {
        "title": "Terminal task runner: multiple parallel tasks and the spinner",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\nWe need to decide how to provide user feedback about running tasks. With the old output runner there was only one active task presented by the spinner. With the new terminal task system there can be n active parallel tasks which can not be represented by one spinner.\r\n\r\nMay be it would be cool to have something in the terminal UI for this and only show the spinner for build tasks. If terminals would be tabs we could add a batch to the tab to indicate activity like in the side bar.\r\n\r\n@Tyriar FYI.",
        "createdAt": "2017-03-24 14:18:31",
        "state": "open",
        "number": 23160
    },
    {
        "title": "Provide command line switch that specifies a path to custom settings.json file",
        "description": "I now use VSCode in a number of different ways and will be opening new instances of VSCode through different methods. Would be nice if it was possible to pass to the code.exe command a parameter that specifies a path to a custom settings.json file that could be used for these different methods to override the default user settings.json file.\r\n\r\nFor instance, I utilize the PowerShell extension a lot. Most of the time I will want the PowerShell extension to load the PowerShell session it uses to handle IntelliSense, code navigation, integrated console, etc. For me this takes a considerable amount of time as my profile must connect to Active Directory, Exchange, Lync, etc. in order to load modules for the services I develop for. This is perfectly fine when I am about to work on some project where I need all of those remote PowerShell sessions loaded. However, ever since VSCode started getting much faster start up times I have also started using VSCode to quickly view PowerShell files using the context menu in Windows Explorer. I just right click a file and say \"Open in VSCode\". However, loading all these remote sessions just to quickly view a file is problematic for a number of reasons.\r\n\r\nThe PowerShell extension now provides a setting, `\"powershell.startAutomatically\": true`. Now I can set that setting to false to prevent the automatic loading of these session and I can also manually start it on demand with the `PowerShell: Restart Current Session` command. However, it would be nice if I could just have a separate settings.json file that has it disabled and then point the registry for the VSCode context menu to use this separate settings.json file via a command line switch. \r\n\r\nI realize this use case is fairly unique but I could imagine providing such a command line switch would be useful in a number of other circumstances.",
        "createdAt": "2017-03-23 19:22:11",
        "state": "open",
        "number": 23113
    },
    {
        "title": "Allow to configure editor auto reload behaviour",
        "description": "**VSCode Version:** 1.10.2\r\n**OS Version:** macOS 10.12.3\r\n\r\n**Steps to Reproduce:**\r\n1. Open editor\r\n2. Modify a file in your git repository, but don't save it\r\n3. Checkout a different branch that touches the same file\r\n4. Go back to the editor and try to save\r\n5. ERROR: \"Failed to save 'file1': The content on disk is newer. Click on Compare to compare your version with the one on disk.\"\r\n\r\nPersonally I would like to see the files being reload from the disk every time. With git I don't have to worry about losing history. Similar to how SublimeText works. If the files change in disk (ex, change of branches), they should automatically get reloaded, independently of their current state in the editor. I prefer this behaviour, rather than having to confirm reloads from popups.\r\n\r\nWith that said however, there should be options for other use cases.\r\nAdd an `editor.autoReload` parameter in order to control this behaviour. Possible values:\r\n* `Always` - reload from disk\r\n* `Confirm` - show a popup/toast notification\r\n* `Never` - current behaviour?\r\n\r\nTook the idea from @rmunn on [#23043](https://github.com/Microsoft/vscode/issues/23043#issuecomment-288601201) issue. Decided it was best to create a separate issue for this.\r\n",
        "createdAt": "2017-03-23 16:02:24",
        "state": "open",
        "number": 23107
    },
    {
        "title": "Add dropdown for search input history",
        "description": "- VSCode Version: 1.10\r\n- OS Version: Windows 10\r\n\r\nVery closely related to https://github.com/Microsoft/vscode/issues/18735\r\n\r\nThis is a feature request.  The UX around `find` is the one place where VS Code is not quite perfect - which speaks volumes to how wonderful this editor is.  Wonderful job.\r\n\r\nBasically, it would be great if, inside the `Find` box you could hit the down arrow and get a dropdown of prior searches which you could navigate between to re-search.",
        "createdAt": "2017-03-23 14:25:08",
        "state": "open",
        "number": 23099
    },
    {
        "title": "`editor.fontFamily` in settings should suggest list of available monospace fonts",
        "description": "_From @letientai299 on March 16, 2017 9:57_\n\n\n\n_Copied from original issue: Microsoft/vscode-docs#889_",
        "createdAt": "2017-03-20 22:17:55",
        "state": "open",
        "number": 22917
    },
    {
        "title": "Support open on fullscreen when open vscode via CLI",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: 1.10.2\r\n- OS Version: macOS Sierra\r\n\r\nSteps to Reproduce:\r\n\r\nHi, I need submit feature request.\r\nI think if you have flag `-f` to directly open vscode on fullscreen mode it will be nice\r\n\r\nHere's available CLI command on **vscode@1.10.2** \r\n\r\n```bash\r\n\u276f code --help\r\nVisual Studio Code 1.10.2\r\n\r\nUsage: code [options] [paths...]\r\n\r\nOptions:\r\n  -d, --diff                  Open a diff editor. Requires to pass two file paths as arguments.\r\n  -g, --goto                  Open the file at path at the line and character (add :line[:character] to path).\r\n  --locale <locale>           The locale to use (e.g. en-US or zh-TW).\r\n  -n, --new-window            Force a new instance of Code.\r\n  -p, --performance           Start with the 'Developer: Startup Performance' command enabled.\r\n  -r, --reuse-window          Force opening a file or folder in the last active window.\r\n  --user-data-dir <dir>       Specifies the directory that user data is kept in, useful when running as root.\r\n  --verbose                   Print verbose output (implies --wait).\r\n  -w, --wait                  Wait for the window to be closed before returning.\r\n  --extensions-dir <dir>      Set the root path for extensions.\r\n  --list-extensions           List the installed extensions.\r\n  --show-versions             Show versions of installed extensions, when using --list-extension.\r\n  --install-extension <ext>   Installs an extension.\r\n  --uninstall-extension <ext> Uninstalls an extension.\r\n  --disable-extensions        Disable all installed extensions.\r\n  --disable-gpu               Disable GPU hardware acceleration.\r\n  -v, --version               Print version.\r\n  -h, --help                  Print usage.\r\n```",
        "createdAt": "2017-03-19 01:11:53",
        "state": "open",
        "number": 22841
    },
    {
        "title": "Linkify terminal paths without any path separators",
        "description": "Follow up from https://github.com/Microsoft/vscode/issues/22528, https://github.com/Microsoft/vscode/pull/22602\r\n\r\nCurrently we're limited to the current workspace (knowledge of shell's cwd is blocked on https://github.com/Microsoft/vscode/issues/20676), but it would be good to linkify files in the current directory that don't have path separators. This would linkify the files in `ls` for example:\r\n\r\n```\r\n\u276f ls\r\nbuild       node_modules  scripts  appveyor.yml     issue_template.md  npm-shrinkwrap.json  product.json           tsfmt.json\r\nextensions  out           src      CONTRIBUTING.md  jsconfig.json      OSSREADME.json       README.md              tslint.json\r\ni18n        resources     test     gulpfile.js      LICENSE.txt        package.json         ThirdPartyNotices.txt\r\n```",
        "createdAt": "2017-03-17 02:48:37",
        "state": "open",
        "number": 22772
    },
    {
        "title": "Allow sorting keybindings by column in new keybindings editor?",
        "description": "Sorting by source in particular would be useful.",
        "createdAt": "2017-03-16 17:10:32",
        "state": "open",
        "number": 22748
    },
    {
        "title": "Stack for goto definition to allow return from it",
        "description": "- VSCode Version: Code 1.10.2 (8076a19fdcab7e1fc1707952d652f0bb6c6db331, 2017-03-08T14:02:52.799Z)\r\n- OS Version: Windows_NT ia32 6.1.7601\r\n- Extensions: \r\n\r\n|Extension|Author|Version|\r\n|---|---|---|\r\n|language-x86-64-assembly|13xforever|2.2.9|\r\n|read-only-indicator|alefragnani|0.6.0|\r\n|alignment|annsk|0.3.0|\r\n|Doxygen|bbenoist|1.0.0|\r\n|vscode-astyle|chiehyu|0.6.2|\r\n|python|donjayamanne|0.6.0|\r\n|EditorConfig|EditorConfig|0.6.2|\r\n|matlab|Gimly81|0.5.0|\r\n|triggertaskonsave|Gruntfuggly|0.1.1|\r\n|status-bar-tasks|GuardRex|0.2.0|\r\n|vscode-dimmer|hoovercj|2.1.0|\r\n|docthis|joelday|0.4.3|\r\n|cpptools|ms-vscode|0.10.4|\r\n|vscode-clearcase|OpenNingia|1.8.0|\r\n|vscode-icons|robertohuertasm|7.3.0|\r\n|theme-cyanicpastels|SamuelLampa|0.0.9|\r\n|indenticator|SirTori|0.2.1|\r\n|vscode-hexdump|slevesque|1.2.1|\r\n|code-spell-checker|streetsidesoftware|1.0.1|\r\n|comment-snippets|Tobiah|0.2.0|\r\n|selectline-statusbar|tomoki1207|0.0.2|\r\n|dark-plus-material|vangware|0.3.1|\r\n|change-case|wmaurer|1.0.0|\r\n|highlight-trailing-white-spaces|ybaumes|0.0.2|;\r\n---\r\n\r\nSteps to Reproduce:\r\n\r\n1. Press F12 to goto to a (for example) a function.\r\n2. Do some editting or just move around.\r\n3. Now need to return where the function was called. No way of doing this.\r\nIn SlickEdit there is Ctrl+. to goto a definition and Ctrl+, to return from that.",
        "createdAt": "2017-03-16 14:49:30",
        "state": "open",
        "number": 22739
    },
    {
        "title": "Focus current symbol when opening symbols list",
        "description": "- VSCode Version: 1.10.2\r\n- OS Version: 10.12.1\r\n\r\nSteps to Reproduce:\r\n1. Put caret inside a function in a PHP file with many functions.\r\n2. Open symbols list.\r\n\r\nCurrent behavior: Symbols list opens without any symbol selected. Pressing \u2193 selects the first symbol in a list.\r\n\r\nWanted behavior: The current symbol is selected. Pressing \u2191 or \u2193 selected the previous or next symbol in the file. This is how Sublime Text works. Quick way to figure out what function you are in!\r\n",
        "createdAt": "2017-03-15 20:57:27",
        "state": "open",
        "number": 22689
    },
    {
        "title": "Allow to open a workspace without restoring any state",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: 1.10.2\r\n- OS Version: OS X 10.11.6\r\n\r\nIs it possible to init the code editor from terminal `code .` with a new session?\r\n`code . -n` doesn't work, it still remembers the last files and project tree I had open.",
        "createdAt": "2017-03-14 15:16:11",
        "state": "open",
        "number": 22613
    },
    {
        "title": "Add padding when pressing space between a pair of curly braces",
        "description": "When I type `{` to create a pair of curly braces:\r\n```\r\n{}\r\n```\r\n...and then when I press space, I would like 2 spaces to be inserted with the cursor in the middle:\r\n```\r\n{ | }\r\n  ^ cursor\r\n```\r\nCurrently it just inserts a single space, so getting the same result requires pressing space twice then the back arrow once. Or otherwise setting:\r\n```\r\n\"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets\": true\r\n// or \"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets\": true\r\n```\r\n...then formatting the line once there's already stuff inside it.\r\n\r\nI believe pressing space between a pair of brackets with nothing between them (`{}`) is more-or-less an unambiguous signal (in pretty much any language) that the user intends to have a padding space at both ends. It's also very similar to the already-covered case where someone instead presses enter to produce:\r\n```\r\n{\r\n  | <- cursor\r\n}\r\n```\r\n\r\nIn Sublime Text I was able to add the functionality myself using a keybinding that looked (in their format) like:\r\n```\r\n{ \"keys\": [\"space\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \" $0 \"}, \"context\":\r\n  [\r\n    { \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\r\n    { \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"\\\\{$\", \"match_all\": true },\r\n    { \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\}\", \"match_all\": true }\r\n  ]\r\n}\r\n```\r\n...but in VS Code there doesn't seem to be enough functionality available to add a keybinding like this - I can insert a snippet but can't see anything that would allow me to limit the context to the inside of a pair of brackets.\r\n\r\nIf someone points me to the place in the codebase where the similar behavior for pressing \"enter\" is defined, I might be able to open a PR myself.",
        "createdAt": "2017-03-14 05:19:39",
        "state": "open",
        "number": 22583
    },
    {
        "title": "Perhaps not an issue regarding minmap hover-appear request",
        "description": "I like the minmap but I was wondering if it was possible to have it appear only when you hover over the scrollbar and then mouse over to the minmap to use it. Otherwise it takes up a lot of space.\r\n\r\nIf this can already be done how do I enable the hover-appear instead of just constantly displayed?\r\n\r\nI like using it, overview of the code/seeing code groups/fast scrolling.",
        "createdAt": "2017-03-11 13:33:51",
        "state": "open",
        "number": 22446
    },
    {
        "title": "Git: Support cherry-pick",
        "description": "Ability to use the cherry pick command directly in vscode.\r\nActually, vscode users still have to cherry pick with the command lines :\r\n```\r\ngit checkout master\r\ngit cherry-pick <commit-hash>\r\n```",
        "createdAt": "2017-03-10 22:26:18",
        "state": "open",
        "number": 22426
    },
    {
        "title": "Keyboard combination Alt + arrows in the editor",
        "description": "- VSCode Version: Code 1.10.2 (8076a19fdcab7e1fc1707952d652f0bb6c6db331, 2017-03-08T14:02:52.799Z)\r\n- OS Version: Windows_NT ia32 10.0.14393\r\n- Extensions: \r\n\r\n|Extension|Author|Version|\r\n|---|---|---|\r\n|plantuml|jebbs|1.2.5|\r\n|cpptools|ms-vscode|0.10.2|\r\n|debugger-for-chrome|msjsdiag|2.6.0|\r\n|language-vscode-javascript-angular2|nwallace|0.0.11|\r\n|language-plantuml|qhoekman|0.0.3|\r\n|nativescript|Telerik|0.6.1|;\r\n\r\n---\r\n\r\nOld schoold people like me, still want the numlock key disabled. This means that \"ALT + arrows\" (and using the arrows on the numpad of a desktop keyboard) results in inserting an ascii code instead in addition to the keyboard shortcut defined in VSCode.\r\n\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open the editor with some text separated by newlines\r\n2. ALT + Up arrow and ALT + Down arrow move the lines up and down\r\n3. Now turn off the numlock on the keyboard\r\n4. repeat the step at point (2):\r\n   ALT + Up Arrow (on the numpad) lead to inserting the character \u25d8\r\n   ALT + Down Arrow (on the numpad) lead to inserting the character \u263b\r\n\r\nI expect the behavior is consistent with Visual Studio where ascii characted are never injected on these keyboard combinations.\r\n\r\nThanks\r\n\r\n\r\n",
        "createdAt": "2017-03-10 08:57:49",
        "state": "open",
        "number": 22364
    },
    {
        "title": "Feature request: highlight problem indicator with color when problems exist",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: 1.10.2\r\n- OS Version: Windows 7 SP 1 & Windows 10\r\n\r\nFor a better callout (those icons aren't very noticeable normally), it would be nice if when there are errors or warnings detected, it highlighted the respective icon (yellow for warning, red for error).\r\n",
        "createdAt": "2017-03-10 02:38:02",
        "state": "open",
        "number": 22346
    },
    {
        "title": "Support title from xterm.js",
        "description": "From @pharmmd-rich in https://github.com/Microsoft/vscode/issues/22319\r\n\r\n> The dropdown list currently displays a list of processes, however, I like giving my terminals custom names in OS-X. The drop down list does not appear to honor these names. (they are set using: printf '\\033]0;title\\007'\".\r\n\r\nOpen to PRs, we will want to handle `xterm.on('title', listener)` inside `TerminalInstance` and use that over the pty name if it's set. Currently I'm assuming this will only fire if the user has set up a title they want to use, whether of not the event is guarenteed to fire on new terminals might change my thinking on how it works. ",
        "createdAt": "2017-03-09 19:25:16",
        "state": "open",
        "number": 22325
    },
    {
        "title": "Investigate better UX for previewing things",
        "description": "~~People use `previewHtml` for building UI which does't work well. We should investigate different options~~~\r\n\r\nWe will tackle the problem from the other side: https://github.com/Microsoft/vscode/issues/22068#issuecomment-293903020",
        "createdAt": "2017-03-06 12:03:16",
        "state": "open",
        "number": 22068
    },
    {
        "title": "Trigger save even if file is not dirty through API",
        "description": "https://code.visualstudio.com/updates/v1_10#_manually-trigger-save-actions\r\n\r\nI read this so I assumed the save() command from the API does the same thing.\r\n\r\nhttps://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L124\r\n\r\nThe comment here makes it seem like it doesn't. Does this call trigger a save even if the document is not dirty? ",
        "createdAt": "2017-03-06 02:08:46",
        "state": "open",
        "number": 22040
    },
    {
        "title": "Outline matching selections instead of highlight",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: 1.10.1\r\n- OS Version: macOS 10.12.2\r\n\r\nSteps to Reproduce:\r\n\r\n1. Highlight a selection with multiple instances. \r\n2. Look how hard it is to distinguish which instance is selected.\r\n\r\n![screen shot 2017-03-03 at 7 33 55 am](https://cloud.githubusercontent.com/assets/10407384/23555115/e1ab96e6-ffe4-11e6-9d82-687e859a8f26.png)\r\n![screen shot 2017-03-03 at 7 36 55 am](https://cloud.githubusercontent.com/assets/10407384/23555118/e38522ac-ffe4-11e6-968d-7913e65f2b49.png)\r\n\r\nThere are three fundamental issues that this request entails:\r\n\r\n1. When you make a selection and there are multiple instances, it's extremely hard to distinguish which one is actually selected. This image shows VSCode's standard Monokai theme. This is not a \"theme\" issue, users should be able to use any theme that is available in the marketplace. \r\n\r\n2. When you make a selection, matching instances shouldn't be highlighted at all. Being highlighted indicates that they are also selected, which is not the case. So when I double click on a single word to select it, all the matching instances get highlighted too, creating the appearance that they are all selected.\r\n\r\n3. The check that looks for matching instances should be _case sensitive_, so that when I select `contract`, a camel-case instance of `newContract` should not have that instance of contract highlighted.",
        "createdAt": "2017-03-03 14:38:53",
        "state": "open",
        "number": 21898
    },
    {
        "title": "Feature Request: Support for private marketplace/gallery",
        "description": "We have created several VSIX extension that have no use to anybody else except our company. We would like to host our own private extension gallery and have an ability to specify alternative extension gallery paths (like \"Additional Extension Galleries\" in Visual Studio 2015).\r\n\r\n- VSCode Version: 1.10.1\r\n- OS Version: Windows 10\r\n",
        "createdAt": "2017-03-02 22:44:55",
        "state": "open",
        "number": 21839
    },
    {
        "title": "Add option to always show word based suggestions",
        "description": "- VSCode Version: 1.9.1\r\n\r\nSteps to Reproduce:\r\n\r\n1. Go to an empty TypeScript file\r\n2. Enter `fooBarBaz`\r\n3. Enter a new line and then type `fooBa`\r\n\r\nExpected result: word based quick suggestions should show.\r\n\r\nActual result: no quick suggestions. Ctrl+space shows a popup with content 'No suggestions'.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/921609/23452439/37f59c98-fe5c-11e6-8582-9591f4f2c498.png)\r\n\r\nTry the same in a JavaScript file and it works.\r\n\r\nI would like IntelliSense and word based suggestions for my TypeScript.\r\n",
        "createdAt": "2017-03-01 08:51:13",
        "state": "open",
        "number": 21611
    },
    {
        "title": "Offer to open changelog when an extension is updated",
        "description": "With every update to VS Code, users now get a prompt to read the release notes.\r\nIt would be nice to have the same feature for extensions. Prompt to read the Changelog (if exists) on every update to the extension\r\n\r\nEdit:\r\nPrompt might be a bit much, too many notifications. Instead a \"What's new\" button or a similar option when clicking on the gear icon would be better",
        "createdAt": "2017-03-01 00:42:25",
        "state": "open",
        "number": 21583
    },
    {
        "title": "Move lines actions are not multicursor aware",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: 1.9.1\r\n- OS Version: Windows 7\r\n\r\nThe issues title could be rename properly \r\n\r\nOk this on is a bit weird but it's a weird stuff I was doing\r\n\r\nIn fact, I was regrouping with the multiple line cursor\r\n\r\nFor the purpose I will give you a \"File\" (multiple line in the description)\r\n\r\nThe weird stuff happen with the lines with this KeyWord \"WeirdStuffHappenOnThoseLine\"\r\n\r\nSo I give you the example that work well at first and after I will write the instruction that doesn't work as expected\r\n\r\nSteps to Reproduce:\r\n\r\n1. Double click on \"WhatEverStuff\" to select the keyword\r\n2. Ctrl + F (Open the find tools bar)\r\n3. Alt + Enter (Select all \"WhatEverStuff\")\r\n4. After select all, \r\n     * Press Alt + Arrow Up Multiple time until every \"WhatEverStuff\" is at the beginning of the files\r\n\r\n**For now every \"WhatEverStuff\" is regroup and no problem have happen right now !!!**\r\n\r\n5. Double click on \"WeirdStuffHappenOnThoseLine\" to select the keyword\r\n6. Ctrl + F (Open the find tools bar)\r\n7. Alt + Enter (Select all \"WeirdStuffHappenOnThoseLine\")\r\n8. After select all, \r\n     * Press Alt + Arrow Up until everything is at the beginning of the folder\r\n\r\n## But you will see that only the first \"WeirdStuffHappenOnThoseLine\" of each 3 following Keyword has goes down\r\n\r\nSo you need to Restart step 7 and step 8 two times again to make it regroup and it's no more the same as I would expect to work (every 3 following keyword should goes down at the same time)\r\n\r\n\r\nFile Here : \r\n```\r\nWhatEverStuff\r\nWorkingStuff         \r\nWeirdStuffHappenOnThoseLine 1  \r\nWeirdStuffHappenOnThoseLine 2  \r\nWeirdStuffHappenOnThoseLine 3  \r\nOtherStuffUnneccessary        \r\nWhatEverStuff\r\nWorkingStuff         \r\nWeirdStuffHappenOnThoseLine 4  \r\nWeirdStuffHappenOnThoseLine 5  \r\nWeirdStuffHappenOnThoseLine 6  \r\nOtherStuffUnneccessary        \r\nWhatEverStuff\r\nWorkingStuff         \r\nWeirdStuffHappenOnThoseLine 7  \r\nWeirdStuffHappenOnThoseLine 8  \r\nWeirdStuffHappenOnThoseLine 9  \r\nOtherStuffUnneccessary        \r\nWhatEverStuff\r\nWorkingStuff         \r\nWeirdStuffHappenOnThoseLine 10  \r\nWeirdStuffHappenOnThoseLine 11  \r\nWeirdStuffHappenOnThoseLine 12  \r\nOtherStuffUnneccessary        \r\nWhatEverStuff\r\nWorkingStuff         \r\nWeirdStuffHappenOnThoseLine 13  \r\nWeirdStuffHappenOnThoseLine 14  \r\nWeirdStuffHappenOnThoseLine 15  \r\nOtherStuffUnneccessary        \r\nWhatEverStuff\r\nWorkingStuff         \r\nWeirdStuffHappenOnThoseLine 16  \r\nWeirdStuffHappenOnThoseLine 17  \r\nWeirdStuffHappenOnThoseLine 18  \r\nOtherStuffUnneccessary        \r\nWhatEverStuff\r\nWorkingStuff         \r\nWeirdStuffHappenOnThoseLine 19  \r\nWeirdStuffHappenOnThoseLine 20  \r\nWeirdStuffHappenOnThoseLine 21  \r\nOtherStuffUnneccessary        \r\nWhatEverStuff\r\nWorkingStuff         \r\nWeirdStuffHappenOnThoseLine 22  \r\nWeirdStuffHappenOnThoseLine 23  \r\nWeirdStuffHappenOnThoseLine 24  \r\nOtherStuffUnneccessary        \r\nWhatEverStuff\r\nWorkingStuff        \r\n```\r\n\r\nFile result after doing step 1 to step 8 one time : \r\n```\r\nWeirdStuffHappenOnThoseLine 22  \r\nWeirdStuffHappenOnThoseLine 19  \r\nWeirdStuffHappenOnThoseLine 16  \r\nWeirdStuffHappenOnThoseLine 13  \r\nWeirdStuffHappenOnThoseLine 10  \r\nWeirdStuffHappenOnThoseLine 7  \r\nWeirdStuffHappenOnThoseLine 4  \r\nWeirdStuffHappenOnThoseLine 1  \r\nWhatEverStuff\r\nWhatEverStuff\r\nWhatEverStuff\r\nWhatEverStuff\r\nWhatEverStuff\r\nWhatEverStuff\r\nWhatEverStuff\r\nWhatEverStuff\r\nWhatEverStuff\r\nWorkingStuff         \r\nWeirdStuffHappenOnThoseLine 2  \r\nWeirdStuffHappenOnThoseLine 3  \r\nOtherStuffUnneccessary        \r\nWorkingStuff         \r\nWeirdStuffHappenOnThoseLine 5  \r\nWeirdStuffHappenOnThoseLine 6  \r\nOtherStuffUnneccessary        \r\nWorkingStuff         \r\nWeirdStuffHappenOnThoseLine 8  \r\nWeirdStuffHappenOnThoseLine 9  \r\nOtherStuffUnneccessary        \r\nWorkingStuff         \r\nWeirdStuffHappenOnThoseLine 11  \r\nWeirdStuffHappenOnThoseLine 12  \r\nOtherStuffUnneccessary        \r\nWorkingStuff         \r\nWeirdStuffHappenOnThoseLine 14  \r\nWeirdStuffHappenOnThoseLine 15  \r\nOtherStuffUnneccessary        \r\nWorkingStuff         \r\nWeirdStuffHappenOnThoseLine 17  \r\nWeirdStuffHappenOnThoseLine 18  \r\nOtherStuffUnneccessary        \r\nWorkingStuff         \r\nWeirdStuffHappenOnThoseLine 20  \r\nWeirdStuffHappenOnThoseLine 21  \r\nOtherStuffUnneccessary        \r\nWorkingStuff         \r\nWeirdStuffHappenOnThoseLine 23  \r\nWeirdStuffHappenOnThoseLine 24  \r\nOtherStuffUnneccessary        \r\nWorkingStuff         \r\n```",
        "createdAt": "2017-02-24 23:00:15",
        "state": "open",
        "number": 21400
    },
    {
        "title": "expandLineSelection is not a command",
        "description": "While verifying #14485 I realized that expandLineSelection is not in the command window (F1).\r\nWould be good to have it as command to use programmatically.",
        "createdAt": "2017-02-24 15:27:30",
        "state": "open",
        "number": 21370
    },
    {
        "title": "Feature Request: Autosave on build",
        "description": "- VSCode Version: Code 1.9.1 (f9d0c687ff2ea7aabd85fb9a43129117c0ecf519, 2017-02-09T00:26:45.394Z)\r\n- OS Version: Windows_NT ia32 6.1.7601\r\n- Extensions:\r\n\r\n|Extension|Author|Version|\r\n|---|---|---|\r\n|language-x86-64-assembly|13xforever|2.2.9|\r\n|read-only-indicator|alefragnani|0.6.0|\r\n|alignment|annsk|0.3.0|\r\n|Doxygen|bbenoist|1.0.0|\r\n|vscode-astyle|chiehyu|0.6.2|\r\n|python|donjayamanne|0.5.8|\r\n|EditorConfig|EditorConfig|0.3.4|\r\n|matlab|Gimly81|0.4.0|\r\n|status-bar-tasks|GuardRex|0.2.0|\r\n|vscode-dimmer|hoovercj|2.1.0|\r\n|docthis|joelday|0.4.0|\r\n|cpptools|ms-vscode|0.10.1|\r\n|vscode-clearcase|OpenNingia|1.6.0|\r\n|vscode-icons|robertohuertasm|7.2.0|\r\n|theme-cyanicpastels|SamuelLampa|0.0.9|\r\n|indenticator|SirTori|0.2.1|\r\n|vscode-hexdump|slevesque|1.1.4|\r\n|code-spell-checker|streetsidesoftware|0.14.8|\r\n|comment-snippets|Tobiah|0.2.0|\r\n|dark-plus-material|vangware|0.2.4|\r\n|change-case|wmaurer|1.0.0|\r\n|highlight-trailing-white-spaces|ybaumes|0.0.2|\r\n\r\n---\r\n\r\nSteps to Reproduce:\r\n\r\n1. Edit a file.\r\n2. Run a build command.\r\n3. Expect dirty files to be auto saved before running the build command.\r\n\r\nDon't think it should be for all tasks, but probably those marked as auto-save in the tasks.json. Would be good if it could be restricted to files with in the workspace folder. I can have outside files open, e.g. notes. Perhaps something like:\r\n\"autoSave\": off (default)/all/workspace\r\n\r\n",
        "createdAt": "2017-02-24 10:28:14",
        "state": "open",
        "number": 21342
    },
    {
        "title": "Provide capability for Find to search only visible text",
        "description": "In a large document it can be useful to find a location by searching only the visible text when making use of document folding.",
        "createdAt": "2017-02-22 18:15:30",
        "state": "open",
        "number": 21181
    },
    {
        "title": "When using Run to Cursor, then there is no inline instruction pointer decoration",
        "description": "Testing #20793 \r\n\r\nI would have expected to see an inline instruction pointer decoration when I use the 'Run to Cursor' command.\r\n\r\n![run-to-cursor](https://cloud.githubusercontent.com/assets/172399/23210926/e1e8dbbe-f8ff-11e6-9fd4-f3f684424baf.gif)\r\n",
        "createdAt": "2017-02-22 12:08:19",
        "state": "open",
        "number": 21122
    },
    {
        "title": "Extensions viewlet: Ability to run individual extension management actions using a keyboard shortcut",
        "description": "Refs: #20440\r\n\r\n1. Focus the list of installed extensions\r\n2. Click on `delete` key - nothing happens. I would expect the extension to get uninstalled\r\n\r\nSame is true for enabling and disabling",
        "createdAt": "2017-02-22 10:50:49",
        "state": "open",
        "number": 21099
    },
    {
        "title": "[extensions] Add support for a RelatedFilesProvider",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: `1.10.0-insider` 25c55638340197fc9c8767aba9d32a0c29ccf68a\r\n- OS Version: macOS Sierra `10.12.3 (16D32)`\r\n\r\nI just put out a preview of a new extension [Find Related](https://marketplace.visualstudio.com/items?itemName=eamodio.find-related) to be able to quickly jump to files related to the current file. It currently has a tiny set of rules (hopefully will be quickly expanded), but it got me thinking that it could be nice if this was something that was baked into vscode.\r\n\r\nSo just like the other `*Provider` types an extension could register a new `RelatedFilesProvider` (or something similar) that would allow vscode to show a quick pick of the results (and other extensions could use for other reasons/UI)\r\n\r\nHopefully this make sense.",
        "createdAt": "2017-02-21 21:15:40",
        "state": "open",
        "number": 21018
    },
    {
        "title": "Allow to swap left and right hand side in diff editor",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: 1.8.1\r\n- OS Version: OS X EI Capitan 10.11.3\r\n\r\nSteps to Reproduce:\r\n\r\n1. Select the first file to compare\r\n2. Select the second file to compare\r\n3. The comparison window appears\r\n4. Find that cannot swap the files from side to side. It'd be very convenient to have this feature.\r\n",
        "createdAt": "2017-02-20 21:09:35",
        "state": "open",
        "number": 20958
    },
    {
        "title": "[Feature Request] Undo branches",
        "description": "Undo branches / undo tree allows you to undo some changes,\r\nthen make a new change, while keeping all changes available in the undo tree.\r\nThe undo tree can therefore prevent awkward scenarios such as:\r\n * Losing all redo futures by accidentally pressing a button during undo\r\n * Copying the file or save it with git when trying multiple alternatives\r\n\r\nThis screen-cap showcases how it works in Emacs with undo-tree.\r\n\r\n![wpid-undo-tree1](https://cloud.githubusercontent.com/assets/908496/23103901/811d0352-f6c3-11e6-8dfa-b8690faa034f.gif)\r\n\r\nhttps://github.com/Zalastax/vscode/commit/c5699711d21dece88c7c608f6d8ae277f72a0081 contains the changes to the model that are needed, but several questions remain to be answered. I'm interested in completing the feature but need further input before proceeding.\r\n* How should the UI look? Graphics / ASCII, clickable?\r\n* Should the tree be formatted like in Emacs undo-tree (as short tree as possible) or like Vim's Gundo http://screenr.com/M9l (one state per line sorted by time)?\r\n* What unit-tests should be added?\r\n\r\nYou can try out the current changes by compiling my fork and you'll find 'History Tree' in the Edit menu. Clicking the menu item will console.log a function that changes what redo future is selected (just like in the gif).",
        "createdAt": "2017-02-19 16:09:15",
        "state": "open",
        "number": 20889
    },
    {
        "title": "Pasted text copied from an interactive terminal should retain colors",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: VS Code Insiders from 2/17/17\r\n- OS Version: Windows 10\r\n\r\nSteps to Reproduce:\r\n\r\n1. Copy text from an integrated terminal window which has colored output\r\n2. Paste it into Outlook\r\n3. Observe that the text is pasted without colorization\r\n\r\nNow that copied text from an editor pane retains syntax highlighting when pasted into a rich editor, is it possible that we could get the same behavior for copying text from the integrated terminal?  I'll understand if this isn't easy to accomplish, but I know that former users of PowerShell ISE will expect it since that editor provides this capability.\r\n\r\n/cc @rebornix @Tyriar \r\n",
        "createdAt": "2017-02-17 15:12:59",
        "state": "open",
        "number": 20813
    },
    {
        "title": "Option for seeding find string from editor on ctrl + f",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: 1.10.0 - insider\r\n- OS Version: Windows 10\r\n\r\n-- Sorry for the English, I used Google Translator --\r\n\r\nIf I put the cursor on the word (start, middle or end of word) and press `ctrl + f`, that word is automatically placed in the search.\r\n\r\nIs not that wrong?\r\n\r\nThe correct would be if I selected the word and then pressing `ctrl + f` it should appear in the search field.",
        "createdAt": "2017-02-16 22:38:22",
        "state": "open",
        "number": 20768
    },
    {
        "title": "Allow to create multi-cursor with keyboard",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: 1.10.0 - insider\r\n- OS Version: Windows\r\n\r\n-- Sorry for the English, I used Google Translator --\r\n\r\nAllow me to place multiple cursors by navigating with the arrow keys.\r\n\r\nLike this extension [multi-cursor-plus](https://atom.io/packages/multi-cursor-plus) of Atom. Press `alt + x` to highlight a cursor, use the arrow keys to scroll to the next location you want (by pressing the `alt `key), and press again.\r\n\r\nIf I wanted to take some specific cursor, I'll enter the arrows to the location and press `alt + x` again.\r\n\r\n![68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6b616e6b61726973746f2f61746f6d2d6d756c74692d637572736f722d706c75732f6769662f73686f77636173652e676966](https://cloud.githubusercontent.com/assets/19866231/23032826/ff22e12c-f45c-11e6-8b41-0263fd185dbb.gif)\r\n\r\n",
        "createdAt": "2017-02-16 17:37:25",
        "state": "open",
        "number": 20742
    },
    {
        "title": "Feature Request: Expose LanguageConfigurationRegistry as extension API",
        "description": "- VSCode Version: `1.9.1`\r\n- OS Version: `Windows 10`\r\n\r\nHello\r\n\r\nFor my extension I would like to access the current document comment and bracket style. I took a look at how this is achieved in VSCode: `lineCommentCommand.ts -> _gatherPreflightCommentStrings` and learned that I require the `LanguageConfigurationRegistry` . However this is not accessible to extension developers.",
        "createdAt": "2017-02-16 15:05:17",
        "state": "open",
        "number": 20735
    },
    {
        "title": "[themes] different themes for different filetypes",
        "description": "Is it possible to have different themes for different filetypes?\r\n",
        "createdAt": "2017-02-15 13:30:27",
        "state": "open",
        "number": 20652
    },
    {
        "title": "Create Categories/Groups for extensions.",
        "description": "Disable extension for workspace is a really good feature but would be nice if I can categorized my installed extension (or create groups of extensions) in order to enable that category/group on specific workspace, this would be helpful when starting a new project. Right now it could be very complex finding the proper extensions for the project if the list of them is very large.",
        "createdAt": "2017-02-14 15:23:57",
        "state": "open",
        "number": 20599
    },
    {
        "title": "Search: target particular set of files",
        "description": "- VSCode Version: Code 1.9.1 (f9d0c687ff2ea7aabd85fb9a43129117c0ecf519, 2017-02-08T23:31:51.320Z)\r\n- OS Version: Darwin x64 15.6.0\r\n- Extensions:\r\n\r\n|Extension|Author|Version|\r\n|---|---|---|\r\n|cpptools|ms-vscode|0.10.1|\r\n\r\n---\r\n\r\nSteps to Reproduce:\r\n\r\n1.when i use global search, it's not easy to type whole file path and name in input box,\r\n  hope that there is a convenient way to  use highlight in search current file by typing \"<current file>\"\r\n\r\n---\r\n\r\nNote from @roblourens This includes searching in any particular subset of files such as\r\n\r\n- All open files\r\n- Files staged in git\r\n- Recently modified files\r\n\r\netc",
        "createdAt": "2017-02-13 07:34:06",
        "state": "open",
        "number": 20530
    },
    {
        "title": "Add a \"select all\" button to the find UI",
        "description": "Sublime Text has three buttons in its Find UI: Find, Find Prev, and Find All.\r\n\r\nVSCode has the Prev and Next buttons (as arrow icons) but no button to find/select all. There is a keyboard shortcut to select all (Command+Enter on OS X), but a button in the UI would make the feature much more discoverable.\r\n\r\nIn my case, since the button was missing I instead tried using the command palette to search for a command to select all results. I found Select All Occurrences of Find Match (Shift+Command+L on OS X) but that behaved badly\u2014it replaced the regular expression I was searching for with the currently-selected text, and so it didn't select the items I was searching for. I'd argue that that command should have preserved my original search term, but that's a separate issue.\r\n\r\n- VSCode Version: 1.9\r\n- OS Version: OS X El Capitan.\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open the Find UI and type a search term.\r\n2. Notice there is no button to select all instances.\r\n",
        "createdAt": "2017-02-10 20:39:57",
        "state": "open",
        "number": 20453
    },
    {
        "title": "Git: Support GitHub 2FA",
        "description": "- VSCode Version: 1.9.1\r\n- OS Version: Ubuntu 14.04, 16.04\r\n\r\nSteps to Reproduce:\r\n\r\n1. Make changes to a GitHub repo with two-factor authentication enabled\r\n2. Push/Sync changes.\r\n\r\n> Error: Authentication failed on the git remote.\r\n\r\nA dialog box appears to enter your git username/password, but there is no subsequent dialog for the two-factor authentication code, and so the process just fails. \r\n\r\nThe `https` protocol was used for the `git clone` on this repo.",
        "createdAt": "2017-02-09 16:50:17",
        "state": "open",
        "number": 20330
    },
    {
        "title": "Offline spell checker for VSCode",
        "description": "Hello (first time contributing here)\r\n\r\nThere are few offline spell checkers among VSCode extensions, but they are based on seriously faulty JavaScript implementations of [Hunspell](http://hunspell.github.io/) spell checker.\r\n\r\n[Hunspell](http://hunspell.github.io/) is nowadays probably the most widespread standard for spell check layer. It is used on MacOS, Linux and in some software (e.g. LibreOffice) on Windows. It is also used by both Atom and Sublime Text. There is an enormous collection of polished dictionaries for Hunspell.\r\n\r\nThere exists some JavaScript implementations that refer to Hunspell's name but in fact they do not implement critical functionality - lexical parser. I have verified these three:\r\n\r\n[hunspell-spellchecker](https://github.com/GitbookIO/hunspell-spellchecker)\r\n[Typo.js](https://github.com/cfinke/Typo.js)\r\n[nspell](https://github.com/wooorm/nspell)\r\n\r\nAll three work more or less following a simple idea of loading the dictionary into memory (into a associative table, a.k.a. dictionary, object to be precise). They use the Hunspell's affixes (.aff file) to create ALL variants of the words found in the dictionary (.dic file) and then store them in the memory. When checking spelling dictionary is simply asked whether the word exist or not. Simple, but it has these implications:\r\n\r\n1. Loading takes a lot of time;\r\n2. It takes a lot of memory too;\r\n3. Memory consumption causes them to crash under dictionaries with more expanded affix system (two out of three mentioned, third does not consume all of the affixes).\r\n\r\nFor example when running [hunspell-spellchecker](https://github.com/GitbookIO/hunspell-spellchecker) (there is a [SpellChecker](https://marketplace.visualstudio.com/items?itemName=swyphcosmo.spellchecker) extension based on it) with English dictionary (\"en_US\", 62K+ words in dictionary) memory consumption is in peaks 500 MB and constantly above 250 MB. It crashes under Polish language dictionary (\"pl_PL\", 300K+ words in dictionary) after reaching about 1.5 GB memory consumed (there are reports about other dictionaries doing the same) with \"JavaScript heap out of memory\" message hidden well under the hood. Hunspell has a lexical parser which allows it to use these two sets (dictionary and affixes) \"on the fly\" without the need to merge them thus exploding memory consumption and load time.\r\n\r\nThere is a good spell checker component for node.js, which is actually a bindings for native spell checkers for MacOS (NSSpellChecker), Linux (Hunspell) and Windows (Spell Check API in windows 8+, Hunspell in earlier versions):\r\n\r\nhttps://github.com/atom/node-spellchecker\r\n\r\nIt is alas a native module.\r\n\r\nI have built a spell checker using this module. I will rather not publish it because it is quite pointless:\r\n\r\n- The extension will (silently) stop working every time the electron or node get a version bump and I cannot guarantee I will always be around to rebuild binary dependencies quickly;\r\n- Rebuilding binary dependencies is quite a hassle;\r\n- I am unable to reasonably maintain binary dependencies for all three platforms (MacOS, Linux & Windows) - there already is an [extension](https://marketplace.visualstudio.com/items?itemName=adrienjoly.vscode-spellchecker-fr) which uses this module, but it provides binary dependencies for MacOS only;\r\n- Even If I would produce node-spellchecker module using [node-pre-gyp](https://github.com/mapbox/node-pre-gyp) with binaries for various platforms if I understand things correctly extension cannot (easily?) install dependent modules using npm (which could also imply having a proper C++ toolchain around in case node-pre-gyp packaged binaries are not sufficient). Binaries are packaged and simply get downloaded along with the extension.\r\n\r\nSo I would like you to consider doing something about it.\r\n\r\nThere are few paths I can imagine among them two are most obvious:\r\n\r\n1. Build the node-spellchecker module along with the VSCode and make it available among \"standard\" modules that extension developers can count upon (this could result in more than one spell checker extension e.g. for spelling text or latex documents, comments in code etc.);\r\n2. Provide a way to use native modules among extensions' dependencies.\r\n\r\nI am most probably no one to discuss pros or cons of these alternatives, there are maybe other alternatives that I cannot see, but I think that with the evidence provided it is clear that unless something changes the answer to the question in the title is MOST PROBABLY NOT!",
        "createdAt": "2017-02-09 09:25:35",
        "state": "open",
        "number": 20266
    },
    {
        "title": "search results in a tree view",
        "description": "Hi guys,\r\n\r\nI'd really like to have an option to see the search results in a tree view. When working on big JS codebases I find it difficult to see the relevant findings in this flattened list, although in many cases when the search result is small, this flattened list is easier for the eye. \r\nBTW this search panel could be a nice extension point as well, not sure what is an easier thing to do.\r\nI'll try to contribute sometime, but I hope someone would take this ticket soon :)\r\n\r\nThanks guys,\r\nThomas\r\n\r\nPS.: VSCode is awesome, you are awesome, thank you.",
        "createdAt": "2017-02-08 18:40:00",
        "state": "open",
        "number": 20224
    },
    {
        "title": "[json] Improve combining schemas not working with 'additionalProperties: false'",
        "description": "When combining schemas such as when multiple extensions have schemas for package.json we use 'allOf' to combine.\r\nThis works well as long as none of the schemas uses additionalProperties: false.\r\n\r\n\r\n```json\r\n{ \r\n    \"allOf\": [\r\n        {\r\n            \"type\": \"object\",\r\n            \"additionalProperties\": false,\r\n            \"properties\": {\r\n                \"bar\": {\r\n                    \"description\": \"bar\"\r\n                },\r\n                \"foo\": {\r\n                    \"description\": \"foo\"                }\r\n            }\r\n        },\r\n        {\r\n            \"type\": \"object\",\r\n            \"additionalProperties\": false,\r\n            \"properties\": {\r\n                \"xoo\": {\r\n                    \"description\": \"xoo\"\r\n                }\r\n            }\r\n        }\r\n\r\n    ]\r\n}",
        "createdAt": "2017-02-08 11:24:34",
        "state": "open",
        "number": 20193
    },
    {
        "title": "Code snippet control indentation",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\nHow can I  control unindentation in code snippets?\r\n\r\n```json\r\n{\r\n    \"Create migration helper execute statement\": {\r\n        \"prefix\": \"mhe\",\r\n        \"body\": [\r\n            \"\\\\$helper->execute(<<<SQL\",\r\n            \"\\t$0\",\r\n            \"\\rSQL\",\r\n            \");\"\r\n        ]\r\n    }\r\n}\r\n```\r\n\r\nWhen invoking it in indented context:\r\n\r\n```php\r\nclass Migration {\r\n\u2192   public function up(Helper $helper) {\r\n\u2192   \u2192   mhe<tab complete snippet>\r\n\u2192   }\r\n}\r\n```\r\n\r\nExpected behavior:\r\n\r\n```php\r\nclass Migration {\r\n\u2192   public function up(Helper $helper) {\r\n\u2192   \u2192   $helper->execute(<<<SQL\r\n\u2192   \u2192   \u2192   |<cursor>\r\nSQL\r\n\u2192   \u2192   );\r\n\u2192   }\r\n}\r\n```\r\n\r\nActual behavior:\r\n\r\n```php\r\nclass Migration {\r\n\u2192   public function up(Helper $helper) {\r\n\u2192   \u2192   $helper->execute(<<<SQL\r\n\u2192   \u2192   \u2192   |<cursor>\r\n\u2192   \u2192   \r\n\u2192   \u2192   SQL\r\n\u2192   \u2192   );\r\n\u2192   }\r\n}\r\n```\r\n\r\nThis is invalid behavior when using heredoc.\r\n\r\nI tried to insert `\\r` <carriage return> to try removing all indentation,\r\nbut it is just translated to a newline and indented according to snippet context.\r\n\r\n- VSCode Version: 1.9.0\r\n- OS Version: macOS Sierra",
        "createdAt": "2017-02-07 09:20:27",
        "state": "open",
        "number": 20112
    },
    {
        "title": "Retain terminal processes between window reloads",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\nHi\r\n\r\nPlease implement Hot Exit on Integrated Terminal.\r\n\r\nThanks\r\n\r\n- VSCode Version: 1.9.0\r\n- OS Version: Windows 10\r\n\r\n",
        "createdAt": "2017-02-06 07:56:40",
        "state": "open",
        "number": 20013
    },
    {
        "title": "Suggestion - Add a line-spacing or line-margin option",
        "description": "i create a new post because i didn't see anything that exactly correspond to my demand in already existing tickets.\r\n\r\nWhat i suggest is to add a line-spacing flag in the editor category, that should add a space, who is 0px by default BETWEEN lines.\r\n\r\nIt is different from lineHeight flag because line height also modify the size of the carret, line hightlight, etc...\r\n\r\nit seems to be very capricious suggestion, and i don't know if it is possible in the actual software architecture, but i let it here, in case of. I used to use this in sublime text before, and it greatly helped me to read the code easier.\r\n\r\nAn alternative could be to change carret and line-highlight to always scales to the font size instead of line-height size.\r\n\r\nDue to my frenshyness, please, excuse me for my approximative english.\r\nI hope this is understandable. Do not hesitate to question me otherwise.\r\n\r\nthanks\r\nGuema",
        "createdAt": "2017-02-06 06:12:18",
        "state": "open",
        "number": 20005
    },
    {
        "title": "Simplify snippet translation ",
        "description": "The only way to nls the following snippet string in package.json:\r\n```json\r\n\"address\": \"${2:TCP/IP address of process to be debugged}\"\r\n```\r\nis by using this in package.json:\r\n```json\r\n\"address\": \"%address.description%\"\r\n```\r\nand this in the package.nls.json:\r\n```json\r\n\"address.description\": \"${2:TCP/IP address of process to be debugged}\"\r\n```\r\nWith this the translators have to deal with the snippet syntax which is error prone.\r\n\r\nI suggest that we support something like this:\r\n```json\r\n\"address\": \"${2:%address.description%}\"\r\n```\r\nand this in the package.nls.json:\r\n```json\r\n\"address.description\": \"TCP/IP address of process to be debugged\"\r\n```\r\n\r\n \r\n",
        "createdAt": "2017-02-03 12:05:04",
        "state": "open",
        "number": 19835
    },
    {
        "title": "Restrict quick open file to project files",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: 1.9.0\r\n- OS Version: Windows 10\r\n\r\nSteps to Reproduce:\r\n\r\n1. ctrl+p\r\n2. type index.html\r\n\r\nI expect the first result to be the file in the current project folder (because 1. it is in local project, 2. it is the most recently opened, 3. most recently edited).\r\n\r\nBut it is a file that exist in completely different folder and not in the project. Because of this, I keep editing the wrong file.",
        "createdAt": "2017-02-02 23:32:21",
        "state": "open",
        "number": 19762
    },
    {
        "title": "Add action to show inline all diagnostics in file.",
        "description": "`F8` and `Shift + F8` navigation between diagnostic is really nice but sometimes it would be useful to have nice view of all diagnostics in current file. \r\n\r\nLooks like it would be fairly simple to implement, just one additional editor action in https://github.com/Microsoft/vscode/blob/2a40036dbb34aac4f5aefbe999c21f2eaf76c59b/src/vs/editor/contrib/gotoError/browser/gotoError.ts, I could try implementing it if this feature idea is accepted. ",
        "createdAt": "2017-02-02 21:16:42",
        "state": "open",
        "number": 19749
    },
    {
        "title": "Make extension resources uniformely available in the app",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: 1.8.1\r\n- OS Version: macOS 10.12.3\r\n\r\nIt would be very beneficial to have extension resources (issues, homepage, repository) available in an uniform way in the app. Most extensions I've tried don't mention these in the details, so you have to go the marketplace to find out.\r\n\r\nExamples:\r\n\r\n1. https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-ios-web\r\nHas Issues and repository under resources in the web page. In the app this info is nowhere to be found.\r\n\r\n2. https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek\r\nSame as with 1)\r\n\r\nInformation is mostly available, but not in the app.",
        "createdAt": "2017-02-02 15:35:28",
        "state": "open",
        "number": 19718
    },
    {
        "title": "Copy line does not work properly with multi-cursor",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: 1.8.1\r\n- OS Version: OSX El Capitan 10.11.6\r\n\r\nSteps to Reproduce:\r\n\r\n1 .Invoke the \"Insert cursor below\" or \"Inser cursor above\" command.\r\n2. Invoke the \"Copy line (empty selection)\" command.\r\n3. Paste from the clipboard at some arbitrary place in the document.\r\n\r\nResults:\r\n\r\nOne empty line is appended below the cursor.\r\n\r\nExpected behaviour:\r\n\r\nThe copied lines are appended below the cursor.\r\n",
        "createdAt": "2017-01-31 10:03:26",
        "state": "open",
        "number": 19621
    },
    {
        "title": "Feature request: Extension size information",
        "description": "- VSCode Version:\r\nVersion 1.8.1\r\nCommit ee428b0eead68bf0fb99ab5fdc4439be227b6281\r\nDate 2016-12-19T14:41:20.664Z\r\nShell 1.4.6\r\nRenderer 53.0.2785.143\r\nNode 6.5.0\r\n\r\n- OS Version:\r\nGnome Ubuntu 16.10\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open the extension panel\r\n2. Click on an extension to open the information panel\r\n3. There is no information related to the total size of the file that has to be download to install the extension\r\n\r\nIt would be good to have both, the size of the file and how much space will take once installed\r\n",
        "createdAt": "2017-01-30 22:09:39",
        "state": "open",
        "number": 19597
    },
    {
        "title": "Allow to provide colorizers for specific output channels",
        "description": "- VSCode Version: 1.8\r\n- OS Version: All\r\n\r\nOne user of my [Code Runner](https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner) extension reported this issue: https://github.com/formulahendry/vscode-code-runner/issues/59\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Install [Output Colorizer ](https://marketplace.visualstudio.com/items?itemName=IBM.output-colorizer)\r\n2. Install [Code Runner](https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner)\r\n\r\n**Result**: \r\n\r\nIBM's Output Colorizer extension is no longer working.\r\n\r\nBoth of us using `text/x-code-output` (https://github.com/formulahendry/vscode-code-runner/blob/master/package.json#L197 , https://github.com/IBM-Bluemix/vscode-log-output-colorizer/blob/master/package.json#L4)\r\nNot sure there is a way to avoid the color highlight of one extension overwriting another? Could the color highlight exsit for both extension?\r\n",
        "createdAt": "2017-01-29 09:08:35",
        "state": "open",
        "number": 19561
    },
    {
        "title": "Customizing the rendering of matching brackets",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: 1.8.1\r\n- OS Version: Windows 10\r\n\r\nHi there\r\n\r\nIs it possible to customize the cursor for the matching brackets/parentheses ? e.g. change to `underline` instead of `block`\r\n\r\n![](https://ibin.co/3AN3JBLUfybg.png)\r\n\r\n![](https://ibin.co/3AN3XEQyHJX6.png)\r\n\r\n> it looks unclear sometime\r\n\r\nThanks all",
        "createdAt": "2017-01-27 22:05:14",
        "state": "open",
        "number": 19534
    },
    {
        "title": "Composed unicode characters break cursor motion",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: 1.8.1\r\n- OS Version: Ubuntu 16.10\r\n\r\nI have the [Noto Color Emoji](https://www.google.com/get/noto/help/emoji/) font installed\r\n\r\nSteps to Reproduce:\r\n\r\n![animated](https://cloud.githubusercontent.com/assets/7000710/22303350/371f5730-e333-11e6-81c8-e29f5518b44e.gif)\r\n\r\n```\r\n...12345678...\r\n...\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68...\r\n```\r\n\r\nJust copy & paste that code in vscode.\r\nThat emoji is `U+1F468`, `U+200D`, `U+2764`, `U+FE0F`, `U+200D`, `U+1F48B`, `U+200D`, `U+1F468`\r\nAs you can see, I have to hit `\u2192` several times before I can go to the next character.\r\n\r\nElectron (or whatever VSCode uses) already handles these characters correctly: if I create a `<div contenteditable>` with VSCode's inspector and I paste that icon there, the arrow keys work correctly.\r\n\r\n**Possible solutions**\r\n1. Show that emojy as different characters (CodeMirror does something like this)\r\n2. Make the cursor jump at the end of the composed character with just one hit",
        "createdAt": "2017-01-25 18:48:53",
        "state": "open",
        "number": 19390
    },
    {
        "title": "Richer `files.exclude` config options like 'hide' or 'grayOut'",
        "description": "Currently, `files.exclude` items can be set to `true`, `false` or an object like `{ \"when\": \"$(basename).ts\" }`. When an item matches a pattern, it is hidden from the explorer.\r\n\r\nI'd appreciate more control over how these things are displayed in the explorer. For example, this would be my `files.exclude` section:\r\n\r\n```js\r\n\"files.exclude\": {\r\n    // not interested in this at all\r\n    \"**/.git\": \"hide\",\r\n    \"**/.DS_Store\": \"hide\",\r\n\r\n    // compiled JS files, I'd like to be able to browse them\r\n    \"dist\": \"grayOut\",\r\n\r\n    // new 'mode' field for the nested object\r\n    \"**/*.js\": { \"when\": \"$(basename).ts\", \"mode\": \"hide\" }\r\n}\r\n```\r\n\r\nFor backwards compatibility, `true` would mean `'hide'`.\r\n\r\nNote that it would _not_ change how items are e.g. excluded from search. It's purely about their appearance in the explorer.",
        "createdAt": "2017-01-25 09:24:17",
        "state": "open",
        "number": 19347
    },
    {
        "title": "Feature request: Search/replace preview should show differences",
        "description": "The diff preview doesn't seem to actually _diff_. For example:\r\n\r\n![screen shot 2017-01-24 at 19 24 44](https://cloud.githubusercontent.com/assets/50314/22272851/d9b26420-e26a-11e6-8bc7-4872efd153d8.png)\r\n\r\nAs you can see, `ImageProcessorBehavior` is being replaced with `ImageProcessor`. Rather than showing a delete + insert, it would be sufficient \u2014 and _much_ more readable \u2014 to show that the text \"Behavior\" is deleted, which is the effective operation. It doesn't need to show that it's inserting anything, because it isn't actually.",
        "createdAt": "2017-01-25 00:28:09",
        "state": "open",
        "number": 19310
    },
    {
        "title": "Skip Files not working after initial attempt at stepping into skipped code",
        "description": "Testing #19096\r\n\r\nBelow are the 2 typescript files in my workspace and my launch.json\r\n\r\n![image](https://cloud.githubusercontent.com/assets/16890566/22272737/ddd354ac-e250-11e6-87b0-2492e34784c6.png)\r\n\r\nAs you can see I have listed `hello.ts` as a skipped file.\r\n\r\nNow with the `greetings.ts` as the file in the active editor, I hit F5.\r\n- Breakpoint is hit\r\n- Step in\r\n- Callstack shows `sayHello` and is greyed out\r\n- Step Over\r\n\r\nI expect to go to the next line (line 5) in greetings.ts, but every step over actually goes thru each line in the `hello.ts` which was supposed to be skipped.\r\nCall stack shows `sayHello` greyed out but like line numbers incrementing with each step over\r\n",
        "createdAt": "2017-01-25 00:23:05",
        "state": "open",
        "number": 19308
    },
    {
        "title": "Options for automatic indentation",
        "description": "Automatic indentation currently coming out of the box with VSCode is really unhelpful in any white-space significant programming language.\r\n\r\nTwitter discussion (F#): https://twitter.com/isaac_abraham/status/824035064807731201\r\nProblem reported in Python plugin: https://github.com/DonJayamanne/pythonVSCode/issues/666\r\nExample behavior in F# (notice how new errors are shown after this automatic formatting):\r\n![ident](https://cloud.githubusercontent.com/assets/5427083/22271801/c3790110-e296-11e6-8b0f-cc46d874471a.gif)\r\n\r\nAs far as I understand this behavior can be controlled using `IndentationRules` in `LanguageConfiguration` but:\r\n1. They are RegEx based which won't allow us to create accurate behavior.\r\n2. Default behaviour is completely wrong on any white-space significant language.\r\n\r\nI think it would be good to add option to disable this behavior.",
        "createdAt": "2017-01-24 23:43:35",
        "state": "open",
        "number": 19303
    },
    {
        "title": "Git Diff Doesn't Show Changes in New Line Characters",
        "description": "The diffeditor doesn't show new line ending changes (eg CRLF vs LF) even with \"diffEditor.ignoreTrimWhitespace\" set to false.",
        "createdAt": "2017-01-24 18:44:11",
        "state": "open",
        "number": 19254
    },
    {
        "title": "The replace string should support additional escape char sequences",
        "description": "Today it supports:\r\n* `\\t` for a tab character\r\n* `\\n` for a line break (depending on the file's EOL settings)\r\n\r\nConsider supporting more from the following table:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/5047891/22177186/687deb1a-e019-11e6-96b4-4412e5ecca48.png)\r\n\r\n",
        "createdAt": "2017-01-23 08:38:45",
        "state": "open",
        "number": 19017
    },
    {
        "title": "[folding] Fold selection",
        "description": "In Visual Studio by doing Ctrl+M followed by Ctrl+H we were able to fold ANY regions in a code.\r\nCould we please have an equivalent feature in Code. Thanks may God bless the dev team!\r\n",
        "createdAt": "2017-01-19 18:37:26",
        "state": "open",
        "number": 18805
    },
    {
        "title": "Multiple decorations on end of line",
        "description": "I would like to be able to add multiple editor decorations on the end of line. \r\n\r\nMy use case is nicely decorating inline values to make a difference between a name and a value. A nice example on how chrome does this:\r\n\r\nAn alternative would be a mechanism that I could somehow specially annotate parts of the contentText, however since we use css::after this might be impossible.\r\n\r\n![screen shot 2017-01-17 at 16 00 22](https://cloud.githubusercontent.com/assets/1926584/22026473/2a859722-dcd1-11e6-98ee-a27cf40a4308.png)\r\n\r\n",
        "createdAt": "2017-01-17 15:23:50",
        "state": "open",
        "number": 18666
    },
    {
        "title": "Ctrl-Shift-B does not correctly detect when a process exits when sub-processes are started.",
        "description": "<!-- Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode -->\r\n\r\n- VSCode Version: 1.8.1\r\n- OS Version: Windows 10\r\n\r\nSteps to Reproduce:\r\n\r\n1. Launch build task A.exe (Ctrl-Shift-B)\r\n2. A.exe launches B.exe, then quits.\r\n3. Try to build again (Ctrl-Shift-B)\r\n4. Get \"there is an active task running right now\"\r\n5. Press \"terminate\".\r\n6. Get error \"the launched task doesn't exist anymore\"\r\n7. Be stuck in loop 3..6 until you quit and restart VSCode, or manually quit the unrelated B.exe.\r\n\r\nHere, B.exe is a deamon process needing to be active for all runs of A.exe, which gets started on first run of A.exe. Quitting B.exe on each run is unpractical.\r\n",
        "createdAt": "2017-01-12 20:32:42",
        "state": "open",
        "number": 18470
    },
    {
        "title": "Setting to skip keyboard shortcut contributions of extensions",
        "description": "As my list of installed extensions grows, I noticed a pattern of pain regarding keyboard shortcuts.\r\n\r\n## From a user perspective\r\n\r\nEvery now and then a useful extension comes around with opinionated / preset shortcuts.  Generally, this is a good thing, especially for newer users that don't want to configure too much or do not have too strong feelings about their shortcuts or as an easy way to recommend a shortcut that makes sense.\r\n\r\nAs an advanced user with **very** strong own opinions what my keyboard should do I have to reconfigure a lot of them. Usually that's not a problem, setting shortcuts is straight forward. But from time to time other default VSCode shortcuts are overwritten that I want to keep, so I have to unbind the extensions default first and set my own afterwards \u2013 sometimes for multiple commands per extension.\r\n\r\nThis process bloats the settings file and raises its complexity, I'm already at 300 lines after using VSCode for only a couple of months.\r\n\r\n## From an extension developer perspective\r\n\r\nWhen building my own extensions, I am aware of my own pain point above. On one hand, I want to provide my own opinionated shortcuts and set defaults, so that new users don't have to configure them or figure out what works. After all, great user experience matters and the simple one-click-install of extensions is exactly that.\r\n\r\nBut I also don't want to pollute the settings of other advanced users. And I'm fully aware that some of my opinions only make sense with my own setup, so it is quite hard too even come up with a sane and useful default that works for everyone. Should I rather set no default shortcut at all to please the advanced user group more? Hmmm\u2026\r\n\r\n## Proposed solution\r\n\r\nI thought a lot about it, and the only viable solution I could come up with is introducing a setting to ignore / skip preset shortcuts from extensions. The current default behaviour (extensions can set defaults) should be kept.\r\n\r\n## TL;DR\r\n\r\nA setting like `\"extensions.ignoreContributedKeybindings\": false` solves 2 problems at once.",
        "createdAt": "2017-01-12 10:24:00",
        "state": "open",
        "number": 18441
    },
    {
        "title": "Persisting \"disable by workspace\" settings in source control",
        "description": "- VSCode Version: 1.8.1\r\n\r\nCan this setting be saved in the workspace setting.json so I don't need to ask every developer to disable the extension (if installed)?\r\n\r\nIn my company, our main product is stored in perforce so I use the perforce extension.\r\nHowever, there are many small projects stored in git (bitbucket).\r\n\r\nOptimally, I would like to \"enable by workspace\" and \"disable by default\", but if that is not available, then storing the setting would be the second best option.\r\n\r\nOr maybe I should just suggest that feature instead? \ud83c\udf37 ",
        "createdAt": "2017-01-11 04:11:38",
        "state": "open",
        "number": 18386
    },
    {
        "title": "Multiselect via ctrl+d case insensitivity makes it useless",
        "description": "- VSCode Version: Code 1.8.1 (ee428b0eead68bf0fb99ab5fdc4439be227b6281, 2016-12-19T14:41:20.664Z)\r\n- OS Version: Linux x64 4.4.38-1-MANJARO\r\n- Extensions:\r\n\r\n|Extension|Author|Version|\r\n|---|---|---|\r\n|Go|lukehoban|0.6.51|\r\n\r\n---\r\n\r\nSteps to Reproduce:\r\n\r\nconsider this block of code:\r\n```\r\n\taccountQryConn   *grpc.ClientConn\r\n\taccountQryClient proto.AccountQueryClient\r\n```\r\n\r\nwhen I select 'account' and hit alt+d a few times it will select it like this.\r\n\r\n![2017-01-06-150041_626x115_scrot](https://cloud.githubusercontent.com/assets/1015732/21731141/eb1079a8-d420-11e6-89a9-280b0f8d463b.png)\r\n\r\nthis is fine, but when I do this, I am doing it to replace it with something else. So I'll start typing:\r\n\r\n![2017-01-06-150136_731x106_scrot](https://cloud.githubusercontent.com/assets/1015732/21731163/09140b68-d421-11e6-913e-a0bf92e9ed67.png)\r\n\r\nbut now my case is broken for my second string.\r\n\r\nThis is fine in a small example, but very annoying. \r\n\r\nCurrently the case matches whatever is highlighted in the search widget. Behold what happens if I turn off case sensitivity: \r\n\r\n![2017-01-06-150329_1605x153_scrot](https://cloud.githubusercontent.com/assets/1015732/21731213/4eb44f16-d421-11e6-8fba-8f90ed207420.png)\r\n\r\nThis is incredibly annoying. I can't think of a time when you would want to multiselect case-insensitively with ctrl+d. It simply selects the wrong stuff, because in code it's always case sensitive. So depending on whatever I did last with ctrl+f, my ctrl+d either works or is annoying.\r\n\r\nI think ctrl+d should always be case sensitive, or have a button that's not search-tied that does a case sensitive string selection match across the file\r\n\r\nMy two cents.",
        "createdAt": "2017-01-06 20:05:01",
        "state": "open",
        "number": 18239
    },
    {
        "title": "Allow to cycle through previous typed values in quick input picker",
        "description": "- VSCode Version: Code 1.8.1 (ee428b0eead68bf0fb99ab5fdc4439be227b6281, 2016-12-19T14:49:23.350Z)\r\n- OS Version: Windows_NT ia32 6.1.7601\r\n- Extensions:\r\n\r\n|Extension|Author|Version|\r\n|---|---|---|\r\n|read-only-indicator|alefragnani|0.4.0|\r\n|alignment|annsk|0.3.0|\r\n|bettertab|arenl|1.0.1|\r\n|Doxygen|bbenoist|1.0.0|\r\n|python|donjayamanne|0.5.5|\r\n|EditorConfig|EditorConfig|0.3.4|\r\n|vscode-great-icons|emmanuelbeziat|1.1.36|\r\n|matlab|Gimly81|0.4.0|\r\n|status-bar-tasks|GuardRex|0.1.2|\r\n|vscode-dimmer|hoovercj|2.1.0|\r\n|docthis|joelday|0.3.6|\r\n|cpptools|ms-vscode|0.9.3|\r\n|vscode-clearcase|OpenNingia|1.4.1|\r\n|vscode-icons|robertohuertasm|4.3.0|\r\n|theme-cyanicpastels|SamuelLampa|0.0.9|\r\n|indenticator|SirTori|0.2.1|\r\n|vscode-hexdump|slevesque|1.1.4|\r\n|code-spell-checker|streetsidesoftware|0.13.3|\r\n|comment-snippets|Tobiah|0.2.0|\r\n|dark-plus-material|vangware|0.1.4|\r\n|change-case|wmaurer|1.0.0|\r\n|highlight-trailing-white-spaces|ybaumes|0.0.2|\r\n\r\n---\r\n\r\nSteps to Reproduce:\r\n\r\n1. Press Ctrl-G.\r\n2. Press Alt-Up. Nothing happens. When doing this in search it shows the last value enterred.\r\n\r\nPlease implement history for goto command similarly to search & replace.",
        "createdAt": "2017-01-06 18:03:58",
        "state": "open",
        "number": 18232
    },
    {
        "title": "[html] Auto insert Quote when i type equal sign (=)",
        "description": "- VSCode Version: 1.8.1\r\n- OS Version: Win10\r\n\r\nI need option like Visual studio. (_Insert attribute value quote automatically_)\r\n\r\nWhen i type **=** (Equal sign) automatically add double quote like this. \r\n1: <div class\r\n2: <div class=\"|\"\r\n\r\nPlease add this option in Next version! \ud83d\ude4f\r\n",
        "createdAt": "2017-01-04 02:47:35",
        "state": "open",
        "number": 18071
    },
    {
        "title": "Allow extension commands to define the behaviour when Alt modifier is pressed",
        "description": "When you declare a `command` for an extension, it appears in `Command Palette` and you can select/use it with `Return Key`/`Mouse Click`. But there are some _core commands_ that has _special behavior_ when you combine with `Ctrl`, like `Open on the Side`.\r\n\r\nI would like to have the ability to declare a command and have the _normal_ and _alternative_ behaviors, just like that. \r\n\r\nThanks in advance\r\n",
        "createdAt": "2017-01-03 23:46:59",
        "state": "open",
        "number": 18064
    },
    {
        "title": "Evaluate selected expression on hover while debugging?",
        "description": "_This is a feature request._\r\n\r\nWould it be possible to add the feature of evaluating a highlighted JS expression on hover while debugging? This is something that was recently added to Chrome DevTools and is very useful. It would be nice to have this same feature added to VS Code as well.\r\n\r\n### Hovering over a single variable (works in VS Code):\r\n![image](https://cloud.githubusercontent.com/assets/3431954/21621155/62843030-d1bd-11e6-8174-2c6a005e3c93.png)\r\n\r\n### Hovering over a highlighted expression (doesn't work in VS Code):\r\n![image](https://cloud.githubusercontent.com/assets/3431954/21621178/79fa08e8-d1bd-11e6-8031-092c64ab4693.png)\r\n\r\nThanks!\r\n",
        "createdAt": "2017-01-03 20:04:58",
        "state": "open",
        "number": 18058
    },
    {
        "title": "Separate themes from other extensions",
        "description": "Themes are not really an extension, much like a font change isn't an extension and when one has more than a few themes, the extension panel becomes very confusing/cluttered.\r\n\r\nProposal: introduce different panel/page where I can search, activate, add and remove themes, without the confusion of having other extensions added to the page. Also this would improve UX after installing a theme, because the proper theme wouldn't be lost in the extensions list on editor reload - for example when I want to remove it right away.\r\n\r\n- VSCode Version: Code 1.8.1 (ee428b0eead68bf0fb99ab5fdc4439be227b6281, 2016-12-19T14:49:23.350Z)\r\n- OS Version: Windows_NT ia32 10.0.14393",
        "createdAt": "2017-01-03 13:17:53",
        "state": "open",
        "number": 18040
    },
    {
        "title": "More verbose updates",
        "description": "- VSCode Version: 1.1.1\r\n- OS Version: Windows 10 build 14931\r\n\r\nHi,\r\n\r\nCurrently, the self-update is not verbose. It is good to know the version and download size before downloading and download progress, rate and the ability to pause while downloading.\r\n\r\nThanks\r\n",
        "createdAt": "2017-01-01 21:39:02",
        "state": "open",
        "number": 17998
    },
    {
        "title": "Preserve undo/redo buffer when saving a file \"as\" or untitled file",
        "description": "- VSCode Version: 1.8.1\r\n- OS Version: Windows 10\r\n\r\nSteps to Reproduce:\r\n\r\n1. Undo last edits.\r\n2. Save As.\r\n3. Try Redo to re-instate last edits, but nothing happens.\r\n\r\nThis is a workflow I have done in many other editors where I realize I want to keep an old version of something I am working on, just in case I screw up. To my dismay in VSCode it made me lose all my edits.\r\n",
        "createdAt": "2017-01-01 02:02:49",
        "state": "open",
        "number": 17977
    },
    {
        "title": "Expose -webkit-text-stroke (Fonts are too thin on Ubuntu 16.10)",
        "description": "- VSCode Version: 1.8.1\r\n- OS Version: Ubuntu 16.10 amd64\r\n\r\nI use VS Code on Windows, Mac and since recently Linux, and for some reason text looks much thinner on Linux than on other systems, which makes it a little bit harder to read. Here is a screenshot:\r\n\r\n![vscode-fonts](https://cloud.githubusercontent.com/assets/4525736/21577973/542305f2-cfa1-11e6-8e73-821909abeb4b.png)\r\n\r\nFont settings:\r\n```\r\n    \"editor.fontSize\": 14,\r\n    \"editor.fontFamily\": \"Source Code Pro\",\r\n    \"window.zoomLevel\": 0\r\n```\r\n\r\nSystem font settings:\r\n- Antialiasing: RGBA\r\n- Hinting: Slight\r\n- Text scaling factor: 1.00\r\n\r\nI've tried various combinations of antialiasing and hinting settings but they all look as bad or worse.\r\n",
        "createdAt": "2016-12-31 14:40:30",
        "state": "open",
        "number": 17963
    },
    {
        "title": "Add extension point for custom \"prefix behaviors\" in command palette",
        "description": "`git`, `task`, `view` prefixes behavior in command palette is really cool, would be really nice if we could extend command palette with custom prefixes. \r\n\r\nhttps://twitter.com/ErichGamma/status/814149913156186112\r\nCC: @egamma ",
        "createdAt": "2016-12-29 13:18:15",
        "state": "open",
        "number": 17901
    },
    {
        "title": "Expose language display names to extension API",
        "description": "- VSCode Version: 1.8.1\r\n- OS Version: Irrelevant\r\n\r\nCurrently it seems it is not possible to get the name of the language of a document in an extension. The document object contains a property `languageId` which has an internal ID for the language. `vscode.languages.getLanguages()` can also be used to get all registered language IDs. There is no method to get the actual names of the languages.\r\n\r\nThe editor displays the name of the language in the status bar and in the language mode menu, but the names are not exposed to extensions. Personally I am working on an extension for my web service which requires the actual language names and not the IDs.",
        "createdAt": "2016-12-28 21:02:29",
        "state": "open",
        "number": 17885
    },
    {
        "title": "Have a setting for the extensions folder location",
        "description": "- VSCode Version: 1.8.1\r\n- OS Version: Win 10\r\n\r\nIs there any way to permanently change where Extensions are installed and run for vscode?",
        "createdAt": "2016-12-21 17:53:12",
        "state": "open",
        "number": 17691
    },
    {
        "title": "Prevent editing of read-only files",
        "description": "A small gripe, but one which gets me every time.\r\nI use vscode with some auto-generated source files which are marked on disk as read-only. Because the auto-generated files appear similar to the normal source files in my project, I start to edit them and only discover when I try to save that I'm in the wrong file.\r\n\r\nAs well as #17621, it would be really useful to have a configurable editor option that prevents any editing of read-only files. Any keystrokes, pasting, etc are simply ignored.",
        "createdAt": "2016-12-21 12:51:29",
        "state": "open",
        "number": 17670
    },
    {
        "title": "Add support for additional global config files (in addition to settings.json)",
        "description": "It would be very helpful for somebody attempting to sync config files between multiple machines if VSCode supported some system for having multiple config files included at a time.\r\n\r\n### Benefits:\r\n\r\nImagine a config folder structure like this on a developer's mac:\r\n```\r\n- settings.json -> ~/Drive/dotfiles/settings.json\r\n- settings.local.json -> ~/Drive/dotfiles/settings.my-mac.json\r\n```\r\n\r\nAnd then like this on a developer's linux desktop:\r\n```\r\n- settings.json -> ~/Drive/dotfiles/settings.json\r\n- settings.local.json -> ~/Drive/dotfiles/settings.my-arch.json\r\n```\r\n\r\nUsing symlinks, then, a developer would be able to have specialized configuration files for each computer, while keeping the vast majority of options synced between both.\r\n\r\n### Implementation:\r\n\r\nI can think of two simple ways to implement this with as little friction as possible.\r\n\r\n1) An `editor.includeConfig` option in the main `settings.json` \r\nThis might be a JSON array, with support for various different config files. It could also just be a single field. \r\nWhether or not the option should be recursive is up to the VSCode team.\r\n2) VSCode searches for all config files in the directory matching `settings[.foo].json` and includes those.\r\n\r\n### Conflicts:\r\nIf going with option (1) above, conflicting config entries should take precedence the later they appear in the `includeConfig` array.\r\n\r\nIf going with option (2), the main `settings.json` file should take precendence.",
        "createdAt": "2016-12-21 02:42:15",
        "state": "open",
        "number": 17634
    },
    {
        "title": "[json] Inconsistency between files.insertFinalNewline and Format Document",
        "description": "- VSCode Version: Code 1.8.0 (38746938a4ab94f2f57d9e1309c51fd6fb37553d, 2016-12-13T17:38:28.425Z)\r\n- OS Version: Darwin x64 15.6.0\r\n- Extensions:\r\n\r\n|Extension|Author|Version|\r\n|---|---|---|\r\n|RelativePath|jakob101|0.8.0|\r\n|copy-relative-path|alexdima|0.0.1|\r\n|Theme-Dracula|gerane|0.0.2|\r\n|Theme-TomorrowKit|ms-vscode|0.1.3|\r\n\r\n---\r\n\r\nSteps to Reproduce:\r\n\r\n1. Set `files.insertFinalNewline` to `true`\r\n2. Format Document on JSON file (likely several file types)--this removes the trailing newline\r\n3. Save file--this adds back trailing newline\r\n\r\nFormat Document should take into consideration the `insertFinalNewline` option",
        "createdAt": "2016-12-16 00:26:22",
        "state": "open",
        "number": 17359
    },
    {
        "title": "Add support for capture groups in onEnterRules",
        "description": "From @siegebell in https://github.com/Microsoft/vscode/issues/3088#issuecomment-267236002\r\n\r\n---\r\n\r\nBefore:\r\n```\r\n// comment\r\n//     indented|\r\n```\r\nAfter:\r\n```\r\n// comment\r\n//     indented\r\n//     |\r\n```\r\n\r\nFor this case, `onEnterRules` could be extended to support matching groups like find/replace currently does...\r\n```typescript\r\nlanguages.setLanguageConfiguration(modeID, {\r\n    onEnterRules: [\r\n        { // insert comment on new line while preserving the indent\r\n            beforeText: /^\\s*(\\/\\/\\s*)\\S.*$/,\r\n            action: { indentAction: IndentAction.None, appendText: '${1}' }\r\n        }\r\n    ]\r\n});\r\n```\r\n",
        "createdAt": "2016-12-15 09:30:41",
        "state": "open",
        "number": 17281
    },
    {
        "title": "Make CommandPalette position configurable",
        "description": "[UX] [Feature request]\r\n\r\nWould be very nice for the command palette position to be configurable.\r\nBy default, SublimeText places the palette on the tab column which is focused.\r\n\r\nVS Code does not, and I don't know of a way to do that. It's oftentimes confusing to see it centered when you access some commands related to the currently focused tab/editor.\r\n\r\n**SublimeText**\r\n![screenshot 2016-12-15 10 24 42](https://cloud.githubusercontent.com/assets/196656/21216913/14b1e682-c2b2-11e6-9ba4-d90802f88d7a.png)\r\n\r\n\r\n**VSCode**\r\n![screenshot 2016-12-15 10 24 53](https://cloud.githubusercontent.com/assets/196656/21216917/1a7266aa-c2b2-11e6-951d-610bf83d4e08.png)\r\n\r\nNotice how nicely Sublime positions the command palette on the focused tab - which is very nice.\r\n",
        "createdAt": "2016-12-15 08:28:24",
        "state": "open",
        "number": 17268
    },
    {
        "title": "Add SmartIndent capability",
        "description": "Visual Studio has an extensibility point called SmartIndent:\r\nhttps://msdn.microsoft.com/en-us/library/microsoft.visualstudio.text.editor.ismartindent.aspx\r\n\r\nThis allows a language service to provide the editor, given a line, what the indentation level should be. If you click on a blank line in Visual Studio, it will automatically place the caret at the correct indent level based on the code above. This also works when using the arrow keys to move the caret. Currently in VSCode, it will place the caret at column 0 for blank lines.\r\n\r\nThis may come hand-in-hand with implementing virtual space (see #13960) as Visual Studio will not insert spaces, but just place the caret at the correct column in virtual space.\r\n\r\nOne thing to note is that in Visual Studio, when clicking on a blank line, the X position that you click at must be greater than the expected indentation column in order for this to work, otherwise it will place the caret at column 0. With the arrow keys, unless you are at column 0, your caret will always move to the correct indentation level for that blank line.",
        "createdAt": "2016-12-09 20:11:40",
        "state": "open",
        "number": 16998
    },
    {
        "title": "Maximize current file/tab/editor",
        "description": "- VSCode Version: 1.7.2\r\n- OS Version: Linux Mint\r\n\r\nI've looked a bit but couldn't find a solution. Is there a way to toggle maximize (full screen) only the current tab/file? Even if there is split editor, it shouldn't display it, only the current file/tab.\r\n\r\nThanks",
        "createdAt": "2016-12-08 14:12:31",
        "state": "open",
        "number": 16927
    },
    {
        "title": "Activity bar: show position viewlet will move to while drag and drop",
        "description": "Instead of replacing the dragged viewlet with the one to drop on, it would be nice to animate this (similar to how editors are animated when moved) so that you see exactly where a viewlet will move to.\r\n",
        "createdAt": "2016-12-07 09:46:23",
        "state": "open",
        "number": 16799
    },
    {
        "title": "Compound keyboard shortcuts should be delimited by commas",
        "description": "Testing #16560\r\n\r\nWould help improve readability. This goes for watermark, docs, and command palette. For example:\r\n1. `Ctrl+K Ctrl+M` -> `Ctrl+K, Ctrl+M`\r\n2. `Ctrl+K M` -> `Ctrl+K, M`\r\n\r\nAlso note that this is scheme is consistent with almost every other editor out there. We also seem to do this for some commands, but not others. E.g. \r\n![image](https://cloud.githubusercontent.com/assets/762848/20948451/127db962-bbc9-11e6-9e75-185c5647f716.png)\r\n\r\n<hr>\r\n\r\n- VSCode Version: Code - Insiders 1.8.0-insider (7499a9f3c565f4fbe5205e30c8664e5a5a11ae94, 2016-12-06T16:16:15.865Z)\r\n- OS Version: Windows_NT ia32 10.0.14965",
        "createdAt": "2016-12-06 23:32:00",
        "state": "open",
        "number": 16770
    },
    {
        "title": "CLI option to update extensions and view outdated ones",
        "description": "The cli interface allow `--install-extension` and `--uninstall-extension` but missing `--outdated-extensions` and `--update-extensions`",
        "createdAt": "2016-12-04 14:31:26",
        "state": "open",
        "number": 16459
    },
    {
        "title": "Multi-cursor mode: Multi-Cursors gone after paste",
        "description": "- VSCode Version: 1.7.2\r\n- OS Version: Windows 10\r\n\r\nSteps to Reproduce:\r\n\r\n1. Select multiple words on different lines.\r\n2. CTRL+C them\r\n3. click somewhere else in the document\r\n4. CTRL+V them\r\n\r\nI would expect a cursor on every pasted line.\r\n",
        "createdAt": "2016-11-30 13:01:58",
        "state": "open",
        "number": 16270
    },
    {
        "title": "Parameter Hints shown inline all the time (like IntelliJ)",
        "description": "Would be useful for typescript: https://youtu.be/ZfYOddEmaRw\r\n\r\n",
        "createdAt": "2016-11-29 14:55:08",
        "state": "open",
        "number": 16221
    },
    {
        "title": "Themeing for editor squiggles background",
        "description": "I would like to have custom highlight for errors:\r\n![rxzsp](https://cloud.githubusercontent.com/assets/1526680/20702181/169fa9cc-b617-11e6-9ada-954bb2a9c49f.png)\r\n\r\nfor example such an aggressive  one:\r\n<img width=\"150\" alt=\"yahve\" src=\"https://cloud.githubusercontent.com/assets/1526680/20702202/28c9035a-b617-11e6-8003-abc735ae4f7b.png\">\r\n\r\n\r\n\r\nStarted discussion on [stackoverflow](http://stackoverflow.com/q/40697223/274500) and found that for now VSCode does not have such option.",
        "createdAt": "2016-11-29 08:35:34",
        "state": "open",
        "number": 16204
    },
    {
        "title": "[folding] retain folded state on copy/paste",
        "description": "- VSCode Version:1.7.2\r\n- OS Version:WIN 10 14931\r\n\r\nIt is recommended to support folding of the code snippet also retain its folded format",
        "createdAt": "2016-11-26 00:56:53",
        "state": "open",
        "number": 16082
    },
    {
        "title": "Customize Codelens Font",
        "description": "- VSCode Version:\r\n1.7.2\r\n- OS Version:\r\nWindows 10\r\n\r\nSteps to Reproduce:\r\n\r\nThe actual implementation of Codelens on VSCode is annoying. I did a research, and I can disable Codelens with \"editor.codeLens\": false. \r\n\r\nBut I think will be good if, instead of full disable, I can customize the font size. If the codelens have at least on half of the current size, maybe it can be usable... With the current size, it looks with an actual line of code. So, maybe you can do some options like:\r\n\"editor.codeLens.fontFamily\": \"Consolas, 'Courier New', monospace\",\r\n\"editor.codeLens.fontWeight\": \"normal\",\r\n\"editor.codeLens.fontSize\": 7,",
        "createdAt": "2016-11-24 18:19:09",
        "state": "open",
        "number": 16038
    },
    {
        "title": "Restore previously opened folders/workspaces when opening a specific folder/workspace",
        "description": "- VSCode Version: 1.7.2 , portable zip\r\n- OS Version: Windows 10\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open some workspace folders\r\n2. Close Code\r\n3. Open folder from command prompt by typing `code .`\r\n4. Last open folders and sessions are lost!\r\n\r\nAtom has exactly the same issue :)\r\n",
        "createdAt": "2016-11-23 10:48:29",
        "state": "open",
        "number": 15949
    },
    {
        "title": "Add ability to extend from other settings files",
        "description": "Inspired by TSLint's ability to [extend](https://palantir.github.io/tslint/2016/03/31/sharable-configurations-rules.html) configuration files, it would be nice if `.vscode/settings.json` could behave the same way.\r\n\r\nSo if I have some global settings set up:\r\n\r\n`~/example-repo/.vscode/my-company-settings.json`:\r\n```json\r\n{\r\n  \"editor.tabSize\": 2,\r\n  \"editor.insertSpaces\": true,\r\n  \"editor.formatOnSave\": false\r\n}\r\n```\r\n\r\nI can use them in another file, without having to duplicate the settings:\r\n\r\n`~/example-repo/my-project/.vscode/settings.json`:\r\n```json\r\n{\r\n  \"extends\": \"../../.vscode/my-company-settings.json\",\r\n  \"editor.formatOnSave\": true,\r\n  \"editor.fontLigatures\": true\r\n}\r\n```\r\n\r\nAnd the computed settings for `~/example-repo/my-project/.vscode/settings.json` would be:\r\n\r\n```json\r\n{\r\n  \"editor.tabSize\": 2,\r\n  \"editor.insertSpaces\": true,\r\n  \"editor.formatOnSave\": true,\r\n  \"editor.fontLigatures\": true\r\n}\r\n```\r\n\r\n\r\nScenario:\r\n\r\nMulti-root workspace doesn't solve this for our use case. We have a bunch of npm modules each in their own git repository. We have a package which contains our shared tsconfig.json and tslint.json settings that all the other packages include with extends. We don't use a multi-root workspace since the idea is that people can clone the specific package(s) they need to work on. Every repository contains the exact same .vscode directory which is essentially copy&pasted all over the place. Maintaining the .vscode settings for the projects is \"not pretty\" compared to the tsconfig.json and tslint.json which only require the settings package to be updated with for example yarn upgrade.",
        "createdAt": "2016-11-22 19:27:22",
        "state": "open",
        "number": 15909
    },
    {
        "title": "Highlight matching quotes, double quotes and backticks",
        "description": "- VSCode Version: 1.7.1\r\n- OS Version: Win10 x64\r\n\r\nSteps to Reproduce:\r\n\r\nMy suggestion is to not only highlight matching square brackets, round brackets/parentheses and curly brackets (`[], (), {}`) as well as matching tags e.g. `<div></div>`,\r\n**but also quotes, double quotes and backticks,** i.e. `''`, `\"\"` and ` `` `.\r\n_The highlighting would be via **underlining** these symbols,\r\nin order to visually distinguish them from any matching brackets (which are highlighted with outline (box))._\r\n\r\nThis is a feature of one of the most popular packages for Sublime Text, BracketHighlighter. \r\n\r\n<br>\r\n\r\n\r\nPS. [Template literals (which are quoted via **backticks**)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) are an ES6 feature.\r\n\r\n \r\n",
        "createdAt": "2016-11-22 16:42:55",
        "state": "open",
        "number": 15899
    },
    {
        "title": "Keyboard shortcut missing for some file operations",
        "description": "* File renaming and deletion do not seem to have any keyboard bindings.\r\n* When explorer has keyboard focus, there is apparently no keyboard shortcut to open the file in a new tab. `enter` renames, `cmd+enter` opens in a split pane, and that seems to be it.",
        "createdAt": "2016-11-21 21:54:12",
        "state": "open",
        "number": 15839
    },
    {
        "title": "Allow extensions to publish beta releases and users to opt-in to them",
        "description": "Apologies if this has come up before; I'm unable to find any related issues.\r\n\r\nIt would be cool to be able to publish extensions in a beta form (similar to Code Insiders) so that they can be run \"in production\" with real users that have opted-in. This would reduce the disk in publishing an extension because you can push it to a smaller number of users for testing (I probably don't need to sell this to you, I guess you have Insiders for very similar reasons).\r\n\r\nI know we can package and distribute extensions ourselves for now, but it's not as easy (eg. updating is not automatic).\r\n\r\nI originally thought the \"Preview\" flag might've provided this functionality but unless I've overlooked something, it does not seem to.",
        "createdAt": "2016-11-19 15:35:04",
        "state": "open",
        "number": 15756
    },
    {
        "title": " Tooltips gets in the way of general operations in the editor",
        "description": "- VSCode Version: 1.7.1\r\n- OS Version: Windows 10 64bit\r\n\r\nSteps to Reproduce:\r\n\r\n![hover-pains](https://cloud.githubusercontent.com/assets/1727302/20403028/15085e66-acf7-11e6-94cc-1ca1426ad375.gif)\r\n\r\nI'm finding that the hover over tooltip gets in the way of general operations in the editor. i.e. when trying to double click on words. The tooltip prevents selection (see the screenshot).\r\n\r\nCan we have a setting to change the delay timing for these tooltips? ",
        "createdAt": "2016-11-17 18:58:35",
        "state": "open",
        "number": 15667
    },
    {
        "title": "Simple way to temporarily turn off exclusions for QuickOpen files",
        "description": "Using a transpiled language I sometimes find the need to look at the transpiled code which typically is excluded from QuickOpen. Having a simple way to turn exclusions off would simplify this. Some options come to mind:\r\n- Have a 'Turn Off Exclusions' entry at the end of the results list.\r\n- Have an additional QuickOpen prefix that runs QuickOpen with exclusions turned off.\r\n- Have an option toggle next to the QuickOpen entry field to turn exclusions off.\r\n",
        "createdAt": "2016-11-17 00:56:37",
        "state": "open",
        "number": 15604
    },
    {
        "title": "Emit first key chord when timeout or wrong second key chord",
        "description": "- VSCode Version: 1.7.1\r\n- OS Version: Windows7\r\n\r\nSteps to Reproduce:\r\n\r\n1. add new keyboard shortcut \"; n\"\r\n2. press \";\"\r\n3. will wait for second key chord forever if I don't press any key\r\n4. press a wrong second key chord, nothing happen\r\n\r\nExpected:\r\n1. at step 3 should have a timeout, when timeout the firset key \";\" will input.\r\n2. at step 4, if a wrong second key press, like \"m\", then the \";m\" will input to the editor.\r\n\r\nJust like Atom did.\r\n",
        "createdAt": "2016-11-16 03:47:47",
        "state": "open",
        "number": 15550
    },
    {
        "title": "Create a \"TypeHierarchyProvider\" api for visualising type hierarchies",
        "description": "(Split from #15485)\r\n\r\nDart Code has had requests for viewing/navigating [type hierarchies](https://github.com/Dart-Code/Dart-Code/issues/133). We've [implemented](https://github.com/Dart-Code/Dart-Code/pull/190) this for now using the pick-list, but we had to make compromises to fit it into a flat list.\r\n\r\nSome other editors have this functionality and it's a concept that's not specific to Dart, so it might make sense as a provider that can be implemented by extensions.\r\n\r\nHere's an image of it in another editor and also how we've managed to implement it currently.\r\n\r\n![687474703a2f2f68656c702e65636c697073652e6f72672f6e656f6e2f746f7069632f6f72672e65636c697073652e6a64742e646f632e757365722f67657474](https://cloud.githubusercontent.com/assets/1078012/20324242/b2c545f0-ab77-11e6-9cbb-f107c940a09c.png)\r\n![c26454f6-8e17-11e6-9df1-046930178341](https://cloud.githubusercontent.com/assets/1078012/20324241/b2c55da6-ab77-11e6-8c1d-423c903e8b43.png)",
        "createdAt": "2016-11-15 21:10:31",
        "state": "open",
        "number": 15533
    },
    {
        "title": "API to determine whether a TextEditor is a diff view",
        "description": "Feature request: API support to determine if a document is open in a diff-editor. In particular, I want my extension to apply styles and provide certain language features when a document is loaded in a TextEditor, but not when its only editor is a diff-editor.\r\n\r\nLooking at vscode.window.visibleTextEditors and vscode.workspace.textDocuments, I can't see any way to tell the difference.",
        "createdAt": "2016-11-15 14:22:55",
        "state": "open",
        "number": 15513
    },
    {
        "title": "How to enable / disable extension from API or commands",
        "description": "is there any way to disable some specific extension through API ?\r\n\r\n`installExtension` and `uninstallExtension` commands were recently added in vscode.",
        "createdAt": "2016-11-14 15:36:41",
        "state": "open",
        "number": 15466
    },
    {
        "title": "Persist an extensions manifest file",
        "description": "See https://github.com/Microsoft/vscode/issues/7035 & https://github.com/Microsoft/vscode/issues/3884\r\n\r\nPersist an extension manifest file `extensions.json` that lists all extensions installed and other relevant data (whether they're disabled?), on launch the list could be checked and automatically install extensions. This would help enable:\r\n\r\n- Roaming on Windows #3884\r\n- More logically cache and config files on Linux, also #3884\r\n- Allow extensions or external programs to sync extensions more easily\r\n\r\nThis is a soft dependency for https://github.com/Microsoft/vscode/issues/3884",
        "createdAt": "2016-11-14 03:59:30",
        "state": "open",
        "number": 15442
    },
    {
        "title": "Configure Explorer to show and distinguish generated/derived/related files",
        "description": "VS Code lets you exclude files and folders from the Explorer with the `files.exclude` setting. This is useful for hiding generated or ignored files while you're working. Sometimes, however, it's useful to see if your workflow is generating the expected files and folders.\r\n\r\nI'd like a feature that lets me configure rules for a new setting, perhaps something like `files.generated` or `files.derived`. Files and folders that match a rule would appear \"faded\" or \"grayed out\" in the Explorer, indicating that they are distinct from the source code. VS Code should also warn me before directly editing a \"generated/derived\" file, since I should be editing the source file it came from. Another setting could toggle this feature, determining whether generated/derived files are treated the same way excluded files are.\r\n\r\nAlternatively, this feature could be tied into the existing `files.exclude` setting by adding the above-mentioned setting to toggle how excluded files are treated.",
        "createdAt": "2016-11-11 18:49:29",
        "state": "open",
        "number": 15370
    },
    {
        "title": "Feature Request: Vertical select at the end of line",
        "description": "- VSCode Version: Future\r\n- OS Version: Mac OS X\r\n\r\n**Sublime implementation:** \r\n![xzi4b](https://cloud.githubusercontent.com/assets/1712140/20185075/03fa2028-a76b-11e6-925e-a793d7851099.gif)\r\n\r\nHello vscode team, \r\n\r\nI really like the app however there are few things that really frustrate me. One of that is if you `Alt + Shift + left mouse`  and select the end of line, it will only select the end of line for longer line compare to the one you select.\r\n\r\nSome time it is very furstrated to select lot of lines like this.\r\n\r\nThank you",
        "createdAt": "2016-11-10 16:28:02",
        "state": "open",
        "number": 15308
    },
    {
        "title": "Ability to publish prerelease build streams of extensions and opt-in",
        "description": "- Feature Request\r\nI'd like to be able to publish a prerelease stream of my extension without publishing an entirely separate extension with a different ID. Would be ideal to have this be accessible to opt into in the extensions panel.\r\n\r\nThanks!",
        "createdAt": "2016-11-08 17:07:45",
        "state": "open",
        "number": 15188
    },
    {
        "title": "API Access to \"Open Editors\"",
        "description": "I have a use case where I would like to be able to get a list of all the open editors (basically exactly what is shown here).  \r\n\r\n<img width=\"222\" alt=\"loginstructions_ts_-_vs-apex-debug\" src=\"https://cloud.githubusercontent.com/assets/5217568/20104763/68b379fa-a58c-11e6-8f48-185e5ae47060.png\">\r\n\r\nI understand that Editors are disposed but I just need a list of filenames.\r\n\r\nSomething like: `workspace.openDocuments:Array<TextDocument>` or even just `workspace.openFiles:Array<string>`.\r\n\r\nLong term, it might be nice to have API access to operate on this list (EG: sort open editors pane by last opened, name, etc).\r\n\r\n\r\n",
        "createdAt": "2016-11-08 15:24:00",
        "state": "open",
        "number": 15178
    },
    {
        "title": "Remember undo history on hot-exit",
        "description": "This will make restarts/crashes more and more seamless.",
        "createdAt": "2016-11-07 22:33:24",
        "state": "open",
        "number": 15135
    },
    {
        "title": "Side-by-Side diff - collapse missing lines, maintain vertical alignment",
        "description": "When viewing changes with side-by-side diffs enabled, it would be nice if vertical white-space were collapsed. In addition, the editor should keep one pane fixed while the other scrolls to maintain vertical code alignment. For example:\r\n\r\nVS Code:\r\n![diff-vs](https://cloud.githubusercontent.com/assets/232225/20073190/d92a0718-a4f0-11e6-81dd-d1dc97e9765b.png)\r\n\r\np4merge:\r\n![diff-p4](https://cloud.githubusercontent.com/assets/232225/20073192/dbf8319a-a4f0-11e6-98a3-caad42d032e5.png)\r\n\r\n\r\n\r\n\r\n",
        "createdAt": "2016-11-07 19:50:03",
        "state": "open",
        "number": 15122
    },
    {
        "title": "SCM: Change the focus to the next file after staging a file",
        "description": "- VSCode Version:\r\n\r\nVersion 1.7.1\r\nCommit 02611b40b24c9df2726ad8b33f5ef5f67ac30b44\r\nDate 2016-11-03T13:46:46.244Z\r\nShell 1.3.8\r\nRenderer 52.0.2743.82\r\nNode 6.5.0\r\n\r\n- OS Version:\r\nUbuntu 16.04\r\n\r\nAfter staging a file in the git view, focus the next file to be staged.\r\n\r\nFor my workflow, I'd want the next file in the list of stages to be the thing focused. Since I have a keyboard shortcut setup for staging a file, I could arrow up/down and use my shortcut to stage all files, without using a mouse or losing context. If the list of files to be staged creates a scrollbar, the context is lost after staging as it highlights/focuses the item that was just staged.\r\n",
        "createdAt": "2016-11-07 16:51:21",
        "state": "open",
        "number": 15112
    },
    {
        "title": "Option to render proper scrollbar",
        "description": "The current VS Code scrollbars (both vertical and horizontal) are OK, but I would prefer:\r\n- The scrollbars not to disappear when the mouse stops moving\r\n- The scrollbars to be a bit thicker, thus easier to click\r\n- An up and a down arrow at the top and bottom (or left and right of the horizontal one) to scroll one line per click\r\n- The scrollbar to jump \"towards\" where you click on empty space either side of the scroll handle, instead of the handle immediately jumping to where the mouse cursor is\r\n\r\nIn short, they should be like the Visual Studio 2015 scrollbars.  Maybe a setting could be introduced to render this more \"traditional\" type of scrollbar.",
        "createdAt": "2016-11-07 15:26:00",
        "state": "open",
        "number": 15106
    },
    {
        "title": "feature request: support disjunction/or in when-clauses for keybindings",
        "description": "request: support disjunction and grouping in when-clauses.\r\n\r\nexample:\r\n```json\r\n{ ..., \"when\": \"(clause1 && clause2) || clause3\" }\r\n```\r\nshould be equivalent to:\r\n```json\r\n{ ..., \"when\": \"clause1 && clause2\" }\r\n{ ..., \"when\": \"clause3\" }\r\n```\r\n\r\nbenefits:\r\n* fewer redundant-looking rules for extension authors to write\r\n* easier for the user to override a keyboard shortcut if they don't have to hunt down the bindings for every when-clause combination.",
        "createdAt": "2016-11-04 04:25:16",
        "state": "open",
        "number": 14957
    },
    {
        "title": "Find in Selection Does Not Support Multiple Selections",
        "description": "- VSCode Version: 1.7.0-insider\r\n- OS Version: Windows 7 Professional x64\r\n\r\nSteps to Reproduce:\r\n1. Select several blocks containing the same substring.\r\n2. Search for that substring in the current selection.\r\n3. Observe that only the last instance is found.\r\n",
        "createdAt": "2016-11-02 19:09:13",
        "state": "open",
        "number": 14872
    },
    {
        "title": "Add \"find all occurences\" in the current file feature",
        "description": "\r\nUsing Search sidebar to find all items in current file requires too much clicks.\r\nVS has a find all option\r\n\r\n- VSCode Version: 1.6.1\r\n- OS Version: Windows Server 2008\r\n\r\nSteps to Reproduce:\r\n\r\n1. Ctrl + F\r\n2. Type search test\r\n\r\n## Expected\r\n\r\noption to see all occurrences\r\n\r\n## Actual\r\n\r\nNo such option\r\n\r\n## Visual Studio\r\n\r\n![snip_20161103091325](https://cloud.githubusercontent.com/assets/7656611/19957237/e3a25dec-a1a5-11e6-9db4-0dc46b832d11.png)\r\n\r\n## VS Code\r\n\r\n![snip_20161103091454](https://cloud.githubusercontent.com/assets/7656611/19957425/a9ebc03c-a1a7-11e6-83da-e1add97fb265.png)\r\n",
        "createdAt": "2016-11-02 06:18:19",
        "state": "open",
        "number": 14836
    },
    {
        "title": "Extension Usage Telemetry",
        "description": "This is a feature request for basic extension usage telemetry.\r\n\r\nMany platforms show app/extension developers basic statistics such as installs per day, uninstalls per day, daily active users, etc.\r\n\r\nIf it is done in the core product and made available to developers through the marketplace management dashboard, the data will benefit ALL extension developers while ensuring proper information and protections for users. If extension developers have to do this themselves, they may not all reach an appropriate level of security, anonymization, consent, or user notification.",
        "createdAt": "2016-11-01 09:44:36",
        "state": "open",
        "number": 14800
    },
    {
        "title": "Support KeyUp Bindings",
        "description": "This is a feature request to support KeyUp bindings in addition to the current bindings.\r\n\r\nMotivation:\r\nCommands that have a show/hide or enable/disable pairing would benefit greatly if they could be toggled  with both a keydown and keyup. For example, \"Show Hover\" would be a great candidate. Executing \"show hover\" when the key is down and executing \"close hover\" on a keyup instead of needing to press escape.\r\n\r\nOther good candidates would be Peek Definition, my [dimmer extension](https://marketplace.visualstudio.com/items?itemName=hoovercj.vscode-dimmer), unfold/fold section, etc. ",
        "createdAt": "2016-11-01 09:37:11",
        "state": "open",
        "number": 14799
    },
    {
        "title": "Command palette should rank results with closer search terms higher",
        "description": "_From @prashantv on October 18, 2016 19:56_\n\nSee image:\n![image](https://cloud.githubusercontent.com/assets/140159/19494026/13f00a92-9532-11e6-8a1d-124d94b814b6.png)\n\nI think a user is much more likely to want to run unit tests when they search for \"Go Test\" than \"Generate unit tests\". Is there any way to improve the search matching, or rename the option so running unit tests is preferred over generating unit tests?\n\n_Copied from original issue: Microsoft/vscode-go#543_\n",
        "createdAt": "2016-10-31 01:38:07",
        "state": "open",
        "number": 14727
    },
    {
        "title": "Add an option to confirm before quitting",
        "description": "- VSCode Version: 1.6\n- OS Version: OSX Sierra\n\nMany times on a Mac it is necessary to use `cmd+`` to navigate between projects. This can lead to a mishit on `cmd+q` very easily. It would be great to have a confirm quit feature. Something like this sublimetext extension https://github.com/xavi-/sublime-maybs-quit\n\nThanks!\n",
        "createdAt": "2016-10-30 03:47:52",
        "state": "open",
        "number": 14710
    },
    {
        "title": "Keep previously opened files when opening a single file instead of clearing all files",
        "description": "- VSCode Version: 1.6.1\n- OS Version: Windows 10 x64\n\nThe issue at hand is when you close VSCode and you've had open tabs in it, opening a new file through windows explorer by double clicking it will cause VSCode to not restore your previous session on launch. Alternatively, if you closed VSCode, and then launch it normally without opening a file, it WILL restore your previous session. (I can make a video if my steps to reproduce are unclear).\n\nSteps to Reproduce:\nUse the following User settings\n\n```\n// Place your settings in this file to overwrite the default settings\n{\n\n    \"workbench.editor.enablePreview\": false,\n    \"window.openFilesInNewWindow\": false,\n    \"window.reopenFolders\": \"all\"\n}\n```\n1. Open a few files in new tabs\n2.  Close the window\n3. Double click any file (.txt, .js, .html) from Windows explorer and open it with VSCode.\n4. You will notice that your past tabs are cleared and your only tab is the file you opened\n\nThis ONLY happens if you launch VSCode by opening a new file (IE double clicking file in explorer, or right click open with, etc), if you simple click on VSCode it will restore your previous session.\n",
        "createdAt": "2016-10-28 19:46:01",
        "state": "open",
        "number": 14675
    },
    {
        "title": "[file icons] Support for extending the file icon theme from an extension",
        "description": "It would be nice if extensions could specify custom file icons for the\nfile types it supports. For visual consistency this could be implemented\nto only be used as a fallback if the user's selected theme does not specify\nan icon.\n",
        "createdAt": "2016-10-28 13:26:33",
        "state": "open",
        "number": 14662
    },
    {
        "title": "Add support for contextmenu key",
        "description": "I opened https://github.com/Microsoft/vscode/issues/14323#issuecomment-256072917. There are some keybindings that other products support that we do not support. \n\nThis [doc](https://code.visualstudio.com/docs/customization/keybindings#_accepted-keys) outlines the keys that are accepted. \n\nKeys that are missing that I have found while making Atom and Sublime Text keymap extensions (I'd imagine there will be others) are: `context_menu`, `}`, `{`, and `+`. \n\nWe should consider adding support for these. \n",
        "createdAt": "2016-10-25 18:48:49",
        "state": "open",
        "number": 14478
    },
    {
        "title": "vscode.extensions Doesn't Update On Installing / Removing / Disabling Extensions without restarting",
        "description": "I need to configure my extension [code-settings-sync](https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync) with the feature that when a user installs the extension and doesn't restart the vs code and neither enable the extension, I need to make the sync backup for that extension when installed.\r\n\r\n---\r\n\r\n**Installation Process : when installed and not restarted.**\r\n\r\n\r\n**Expected Behaviour:**\r\n`vscode.extensions.all` should show the newly installed extension with enabled `false` flag\r\n\r\nSo I can get that extension and make a sync.\r\n\r\n**Current Behaviour**\r\nIt doesn't appear in `vscode.extensions.all` until I restart the code by clicking the enable button or other way.\r\n\r\n---\r\n\r\n**Uninstall Process: when uninstalled and not restarted.**\r\n\r\n**Expected Behaviour:**\r\n`vscode.extensions.all` should not show that extension or some flag like removed `true`\r\n\r\nSo I can get that extension remove from user's list and make a sync excluding that extension.\r\n\r\n**Current Behaviour**\r\nIt doesn't remove from `vscode.extensions.all` until i restart the code\r\n\r\n---\r\n\r\nThis is the scenario for installing/ uninstalling.\r\nSame goes for disabling and enabling the extension I need to know which extensions are disabled or enabled.\r\n\r\nFor the details @alexandrudima has explained very well on the comment below: https://github.com/Microsoft/vscode/issues/14444#issuecomment-256644225",
        "createdAt": "2016-10-25 15:00:36",
        "state": "open",
        "number": 14444
    },
    {
        "title": "Better visual indication that a task is currently running",
        "description": "If you execute a task, the only indication that anything is running is a small spinner in the bottom left of the screen that doesn't catch someone's attention easily. So sometimes you think a process is still running only to look down there and realize the process ended a while ago.\n\nA better visual indication would be useful. For example, change the color of the output window title bar (the bar that says 'OUTPUT'), to a color that can be configured in user settings.\n\nThen it's easy to tell that something isn't running because the title bar color has gone back to normal.\n",
        "createdAt": "2016-10-21 17:08:37",
        "state": "open",
        "number": 14178
    },
    {
        "title": "Feature request: configure tooltip max width",
        "description": "When you hover over a type in a TypeScript file, the tooltip that appears has a very low max width, making it difficult to read long type signatures.\n",
        "createdAt": "2016-10-21 14:43:33",
        "state": "open",
        "number": 14165
    },
    {
        "title": "Creating a keymap extension - why is `key` necessary? ",
        "description": "While building a keymap extension (that is an extension that adds contributions to `contributes.keybindings`) I ran into an issue where `\"key\"` was a required property. I opened https://github.com/Microsoft/vscode/issues/14111 to address the lack of JSON validation. \n\nAnother concern here is the necessity of `\"key\"`. Why is this necessary? \n\nConsider an approach as follow:\n\n``` json\n{\n  \"mac\": \"cmd+shift+l\",\n  \"command\": \"editor.action.insertCursorAtEndOfEachLineSelected\",\n  \"when\": \"editorTextFocus\"\n}\n```\n\nMy intent here is to override the default keybinding for Mac only. I want to use the default keybinding for Windows and Linux. I do not want to have to specify a `\"key\"` attribute because I want to use VS Code's keybinding for Windows and Linux. \n",
        "createdAt": "2016-10-20 16:55:48",
        "state": "open",
        "number": 14112
    },
    {
        "title": "Virtual Space is not implemented.",
        "description": "https://blogs.msdn.microsoft.com/zainnab/2010/02/28/understanding-virtual-space/\r\n\r\nThis is a much needed productivity option that has been available in Visual Studio and other editors for many years.\r\n\r\nSee also the column select issue that requires it:\r\nhttps://github.com/Microsoft/vscode/issues/5402\r\n",
        "createdAt": "2016-10-18 20:26:18",
        "state": "open",
        "number": 13960
    },
    {
        "title": "Feature Request: Show all errors and warnings in project for all files, not just opened ones",
        "description": "I am using VS Code on a project at work that has hundreds of files and many layers of nested sub-directories. I frequently make changes that break many files, such as changing the call signature of a commonly used method. Since the project is entirely typescript, it is useful to be able to open the \"Problems\" view and see the errors and warnings my change caused in the files I have open. However, because of the size of the project, I still need to go to my terminal and run our own make commands to see the list of problems. I then need to perform the fun dance between my terminal and VS Code, searching for the right line in the right file before I can fix the problem.\n\nWhat I need is a way to tell the \"Problems\"  view to show me all errors and warnings across all open and closed files in my project. This would allow me to see all problems in a single list and quickly click through and fix them.\n",
        "createdAt": "2016-10-18 18:19:04",
        "state": "open",
        "number": 13953
    },
    {
        "title": "Git: Support git with private key password",
        "description": "- VSCode Version: 1.6.0\n- Commit e52fb0bc87e6f5c8f144e172639891d8d8c9aa55\n- Date 2016-10-10T18:37:40.189Z\n- Shell 1.3.7\n- Renderer 52.0.2743.82\n- Node 6.5.0\n- OS Version: Windows 7 Pro\n\nSteps to Reproduce:\n1. Create a public-private key pair with password protection\n2. add them to your github account\n3. setup git to use the private key file\n4. try to push something with git\n\nResult:\n\n```\ngit pull\nPermission denied, please try again.\nPermission denied, please try again.\nPermission denied (publickey,password).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n",
        "createdAt": "2016-10-13 13:58:39",
        "state": "open",
        "number": 13680
    },
    {
        "title": "Horizontal scrollbar doesn\u2019t shrink after the long line getting shortened",
        "description": "- VSCode Version: 1.6.0\n- OS Version: Windows 10\n\nSteps to Reproduce:\n1. Create an empty file;\n2. Type a long line until the horizontal scrollbar appears;\n3. Delete that long line;\n4. Observe that the horizontal scrollbar still exists.\n\nIf I resize the window, the horizontal scrollbar disappears, but If I only delete the long line, the horizontal scrollbar still exists.\n",
        "createdAt": "2016-10-11 14:46:19",
        "state": "open",
        "number": 13516
    },
    {
        "title": "Multiple extensions registering the 'type' command",
        "description": "- VSCode Version: 1.5.3\n- OS Version: Windows 10\n\nSteps to Reproduce:\n1. Install and enable [VSCodeVim](https://marketplace.visualstudio.com/items?itemName=vscodevim.vim) and [vscode-jumpy](https://marketplace.visualstudio.com/items?itemName=wmaurer.vscode-jumpy)\n2. Open a file with text\n3. Run the command `Jumpy Word Mode`. Two letter decorations should appear at the start of each word\n4. Type in the two letter code for that word. Jumpy functionality should enact a 'Jump' to the cursor position of that decorator.\n5. It doesn't work :-( The keystrokes are being processed by VSCodeVim, not Jumpy.\n\nI am the author of `vscode-jumpy` [(repo)](https://github.com/wmaurer/vscode-jumpy). A user has reported that Jumpy does not work in combination with VSCodeVim: wmaurer/vscode-jumpy#1.\n\nIt seems that both extensions are doing a `registerCommand('type')`, but `VSCodeVim` seems to take priority over `vscode-jumpy`. Is there are way to manage which extension has priority, so that it can receive and process the keystrokes? \nIdeally I want to Jumpy to receive and process the next two keystrokes after enabling `Jumpy Word Mode`, but then let the rest of the keystrokes forward to `VSCodeVim`.\n",
        "createdAt": "2016-10-10 19:11:32",
        "state": "open",
        "number": 13441
    },
    {
        "title": "Using capslock in a keybinding still toggles capslock",
        "description": "- VSCode Version: 1.5.3 (also tried with today's 1.6.0-insider build)\n- OS Version: Win 10\n## Steps to Reproduce:\n1. Open the keybinding preferences\n2. Map the capslock key to a command (e.g. `{\"key\": \"capslock\", \"command\": \"workbench.action.showCommands\"}`\n3. While editing, using capslock to trigger the command, and observe that it fires.\n4. Continue typing in the editor and observe capslock is now on.\n## Expected\n\nCapslock should not be passed through and toggle caps-lock in the editor if it is mapped to a command. (Capslock is often mapped to exiting Insert mode in Vim setups, as it's far closer than the Escape key).\n\nSee also related https://github.com/VSCodeVim/Vim/issues/854 .\n",
        "createdAt": "2016-10-06 21:26:45",
        "state": "open",
        "number": 13312
    },
    {
        "title": "Render non-breaking space when renderWhitespace is active",
        "description": "I ran into an usability problem with a specific keyboard layout (b\u00e9po, a French dvorak variant) and VSCode. The shift+space combination produces non-breaking spaces (U+00A0), and it is very easy to hit involuntarily when typing a space before or after a capital letter. This is not a problem itself, but it becomes one when a codebase is littered with invisible non-ASCII characters.\n\nA simple fix in my case would be to show non-breaking spaces in an obvious way when editor.renderWhitespace is turned on. In 1.5.3 non-breaking space seems to be treated like a word character by renderWhitespace.\n\nEmacs displays it even out of whitespace-mode with a bold colored underscore, and that can be done in Vim with listchars. As this does not look like a very complicated problem, I could submit it as a first PR to the project.\n\nI checked, but if this has already been fixed or the discussion has already taken place, please feel free to close the issue.\n\nP.S.\u00a0: VSCode is an awesome piece of software and a pleasure to use, please keep up with the great work!\n- VSCode Version: 1.5.3\n- OS Version: Linux 4.7.6-1-ARCH  x86_64 GNU/Linux\n\nSteps to reproduce:\n1. Turn on renderWhitespace\n2. Insert a non-breaking space (U+00A0) in the middle of an indentation\n3. The non-breaking space character is invisible, and the indentation following it becomes invisible\n",
        "createdAt": "2016-10-05 09:34:48",
        "state": "open",
        "number": 13239
    },
    {
        "title": "Trim trailing whitespace only on changed lines",
        "description": "Feature Request:\n\nWhen working with existing old code base it's not ideal to have the whole file trimmed for trailing whitespace. However, it's still a nice feature to have active for changed lines. That way the codebase will be cleaned up as you work on it.\n",
        "createdAt": "2016-10-03 11:58:43",
        "state": "open",
        "number": 13157
    },
    {
        "title": "Allow workspace relative files.associations setting",
        "description": "- VSCode Version: 1.6 Insiders\n- OS Version: OS X 10.11.6\n\nCurrently, if I have a project `test`, with a file `test/src/app.js`. I need this workspace setting to get it recognized as TypeSscript:\n\n``` json\n{\n  \"files.associations\": {\n    \"/Users/octref/Code/fiddle/test/src/*.js\": \"typescript\"\n  }\n}\n```\n\nI wish I could do\n\n``` json\n{\n  \"files.associations\": {\n    \"src/*.js\": \"typescript\"\n  }\n}\n```\n",
        "createdAt": "2016-09-27 18:02:33",
        "state": "open",
        "number": 12805
    },
    {
        "title": "[html] closing </script> tag is not proposed",
        "description": "Testing #12100 \n\n```\n<!-- Copyright (C) Microsoft Corporation. All rights reserved. -->\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <script>\n\n    </head>\n</html>\n```\n\nAfter `<script>` tag type `</` \n\nExpected closing `</script>` tag is proposed. But not.\n",
        "createdAt": "2016-09-27 16:00:12",
        "state": "open",
        "number": 12787
    },
    {
        "title": "Extension proxy support",
        "description": "Proxy support for Visual Studio Code has been introduced recently through environment variables/settings (see https://code.visualstudio.com/docs/setup/setup-overview#_proxy-server-support). As an extension developer I would like to use these settings when requesting resources from the internet. My current implementation fails for users using a proxy.\n\nWhat is the recommended way for an extension to use a proxy?\n\nI could not find a `vscode` API that exposes methods to make requests using a proxy other than access to the proxy settings (`workspace.getConfiguration()`) and implementing everything on my own. Looking at the Visual Studio Code code base I identified the code that adds support for proxies, but copy&paste it into my extension would result in duplicated and potentially outdated code, which is something I want to avoid whenever possible. As I am probably not the only extension developer accessing the internet, I would like to hear your opinion on this issue. Any feedback would be greatly appreciated.\n",
        "createdAt": "2016-09-25 22:18:52",
        "state": "open",
        "number": 12588
    },
    {
        "title": "[icon-themes] Support for globs in file associations (Icon themes)",
        "description": "- VSCode Version: Stable 1.5.2\n- OS Version: Windows 10\n\nSee [vscode-icons #328](https://github.com/robertohuertasm/vscode-icons/issues/328#issuecomment-248671728) \n\nThis will allow to support a very common scenario which is a filename with small variations depending on environments:\n- web.config, web.prod.config, web.dev.config\n- webpack.config.json, webpack.dev.config.json\n- ...\n",
        "createdAt": "2016-09-22 23:26:13",
        "state": "open",
        "number": 12493
    },
    {
        "title": "Allow to specify the tsconfig.json filename explicitly ",
        "description": "currently VSCode uses the file with the exact name `tsconfig.json` in the folder as the project file for a typescript project, \n\ni have a few other project files named differently for corresponding sub-projects **inside the same folder**, I wish there was a way to tell VSCode to use one of them rather then the default `tsconfig.json`\n",
        "createdAt": "2016-09-22 16:57:01",
        "state": "open",
        "number": 12463
    },
    {
        "title": "Add sorting to Open Editors list",
        "description": "This could be simply optional alphabetic sorting. As it stands when you have lots of files open it can be hard to match up files that are associated (e.g. circus.component.js and circus.component.html) without the tedious task of manually dragging them into order.\n",
        "createdAt": "2016-09-22 14:15:40",
        "state": "open",
        "number": 12453
    },
    {
        "title": "Mac: Provide a setting to hide the title bar and inline the window controls",
        "description": "Hello there, a lot of the standard apps in recent versions of macOS have started to inline their titlebar into their tabs, menu buttons etc. I assume this is mainly to save vertical space on laptops. However, like all UI trends, apps that don't quite keep up end up feeling old-fashioned \ud83d\udc6f \n\nI started a fork of VS Code that uses the inline style:\n\n![screen shot 2016-09-21 at 12 59 09](https://cloud.githubusercontent.com/assets/49038/18710082/332cefb6-7ffb-11e6-8303-338bee1d6c35.png)\n\nThere needed to be a few changes:\n- I moved the sidebar width to 76, to fit the traffic lights\n- I increased the height of the elements that act as the titlebar by one pixel, mainly so that they align with the centre position of the titlebar items\n- Allow mouse dragging via the sidebar, and the title elements\n\nFork: https://github.com/orta/vscode/tree/inline-titlebar\nChanges: https://github.com/orta/vscode/compare/master...mac-titlebar-inline\n\nI realise that VS Code is a cross-platform project, and so these changes should _probably_ only be applied in the context of macOS, which I'm happy to look into with some advice (I don't have a windows/linux machine to hand for example).  \n\nI also know that no-one wants big unexpected UI changes on their OSS projects, so I've not made it as a PR, but I'd love to know if/what I can do to move this upstream?\n\n_Sidenote:_ If someone can tell me how, I'm happy to make a downloadable build for people to try too, I couldn't find a way to do it - I'm still quite fresh to npm projects.\n",
        "createdAt": "2016-09-21 12:10:23",
        "state": "open",
        "number": 12377
    },
    {
        "title": "Possibility to display line endings in text area",
        "description": "- VSCode Version: 1.5\n- OS Version: Win 7 x64\n\nAt the moment there is only the little statusbar menu which display/change the line ending if the actual file. But sometimes it would be great to see the line endings directly in every line (see atom f.e.) especially when there are mixed line endings (not good, but this happens from time to time).\n\nGreetings\nTonka\n",
        "createdAt": "2016-09-18 15:36:59",
        "state": "open",
        "number": 12223
    },
    {
        "title": "Provide live preview of HTML like Adobe Brackets",
        "description": "You should implement a live preview interface with all browsers\n",
        "createdAt": "2016-09-15 14:13:46",
        "state": "open",
        "number": 12080
    },
    {
        "title": "Consider surfacing mapped variable names",
        "description": "Sourcemaps can represent variable name mappings, like when they're changed in minified code, or TypeScript's `this => _this`. Chrome DevTools shows the original variable names in their variables sidebar: https://bugs.chromium.org/p/chromium/issues/detail?id=327092\n\nOne problem is that if you don't know the original names, you can't inspect them in the console or with watches. But I think it would still make debugging easier to have them just in the variables pane.\n\nWe could go one step further by showing both names, in the variable name space, just like `myArray (t)`. And another step by adding this to the protocol so that the context menu \"Add to Watch\" would work. I don't know if it's a useful concept outside of JS though.\n",
        "createdAt": "2016-09-15 09:10:48",
        "state": "open",
        "number": 12066
    },
    {
        "title": "Task framework should show status icon about watching tasks",
        "description": "- VSCode Version: 1.5.0\n\nWe do have a status icon however this is only visible if the task is actively running. We should show the task in watch mode as well and allow certain actions (like terminate) on the status bar icon. \n",
        "createdAt": "2016-09-15 08:49:44",
        "state": "open",
        "number": 12065
    },
    {
        "title": "Request: option for find/nextMatchFindAction to search forward only, previousMatchFindAction to search backward only",
        "description": "- VSCode Version: 1.6.0\n\nSteps to Reproduce:\n1. Position cursor near bottom of a file.\n2. Press <kbd>ctrl</kbd>+<kbd>f</kbd> and search for something that is before the cursor.\n3. Cursor jumps \"backwards\" and finds term before original cursor position - this is counterintuitive (so \"next\" means \"before\"?).\n\nThis request is to have an option to have `actions.find` and `editor.action.nextMatchFindAction` to search forward in the file only. If no more matches, do not reposition cursor and inform user no more matches (just like if search term is not found in the file at all).\n\nIncluded in this option would be to have `editor.action.previousMatchFindAction` to search backward in the file only. If no previous matches, do not reposition cursor and inform user no previous matches.\n\nThis should also apply to other actions such as `editor.action.addSelectionToNextFindMatch`, `editor.action.addSelectionToPreviousFindMatch`, etc.\n",
        "createdAt": "2016-09-13 20:56:51",
        "state": "open",
        "number": 11981
    },
    {
        "title": "Trigger language auto detection mechanism",
        "description": "Some times I'm fetching some content from the web and pasting it into the current active editor.\nSo far, I didn't find any way to set the current language for the window. Is there any particular API call for that?\n\nEven better, would it be possible to trigger the auto detection mechanism with the API?\n",
        "createdAt": "2016-09-11 02:55:09",
        "state": "open",
        "number": 11838
    },
    {
        "title": "[json] validation doesn't work offline",
        "description": "- VSCode Version: 1.5.1\n- OS Version: OS X El Capitan 10.11.3\n\nEvery time I launch VS Code when I'm offline, I get this error:\n\n![2016-09-10-1wv8p](https://cloud.githubusercontent.com/assets/1612675/18410407/da0e188a-776a-11e6-8313-c3fc75765132.png)\n\nJSON validation doesn't work as a result.\nI hope a schema reference can be initially cached inside the editor and downloaded once again when internet is on.\n\nSteps to Reproduce:\n1. Go offline (switch off the internet)\n2. Open VS Code.\n3. Open some `json` file\n4. Work without validation but with an error.\n",
        "createdAt": "2016-09-10 12:28:31",
        "state": "open",
        "number": 11828
    },
    {
        "title": "Move line up/down should support multiple cursors",
        "description": "- VSCode Version: Code - Insiders 1.6.0-insider (20c3935a130f5b86d629a8543c9c71348c54c3de, 2016-09-09T05:59:09.913Z)\n- OS Version: Linux x64 4.4.0-31-generic, Ubuntu 16.04\n\nSteps to Reproduce:\n1. Add multiple cursors across multiple lines\n2. Run the move line up command, only the line containing the \"primary\" cursor is moved and the other cursors are lost\n",
        "createdAt": "2016-09-10 00:28:21",
        "state": "open",
        "number": 11809
    },
    {
        "title": "Support for RTL languages",
        "description": "- VSCode Version: 1.5.0\n- OS Version: windows 10\n\nI can honestly dare to say that this is the best open source editor for web developers but, the missing of the small things like the Arabic language support is really frustrating!!\n\n@alexandrudima  yes I mean to work with source code files containing Arabic or Hebrew.\n",
        "createdAt": "2016-09-09 13:10:07",
        "state": "open",
        "number": 11770
    },
    {
        "title": "Allow to minimize VS Code to tray",
        "description": "Even though VSC is launching very fast (clean install, 3s on my machine) it is not instant like the classic sublime text or N++.\nIf we could keep the editor loaded all the time we would get faster file opening times by sacrificing ram.\n\nTherefore I suggest addition of editor tray and \"Minimize to tray\"/\"Close to tray\" options.\nThe editor would be then closed by right clicking the tray icon and selecting \"close\" option there.\n",
        "createdAt": "2016-09-08 23:13:17",
        "state": "open",
        "number": 11723
    },
    {
        "title": "Feature request: 'Ignore comments' checkbox in the 'Find' dialog",
        "description": "Wide popularity of the embedded documentation conventions like JSDoc and C#'s XML comments leads to a situation where comments often constitute the bigger part of a source file (e.g. look at the source of [angular.js](https://unpkg.com/angular/angular.js): the whole API documentation is there!). This abundance of comments makes it extremely difficult to find anything in the source code proper. For example, reading someone's code, we might want to know how and where a certain function is used. However, if we decide to conduct a search by its name, we might get lost in dozens of code samples in the comments and overlook some important case of its real usage. Shift-F12 often helps in such situations, but not always. This undermines the habitual workflow of those who are used to rely a lot on the search to read the code. Not sure if any other editor has this feature, but it would be great to have the 'Ignore comments' option in VS Code's search dialog.\n",
        "createdAt": "2016-09-08 13:16:16",
        "state": "open",
        "number": 11688
    },
    {
        "title": "Provide guidance to language and extension authors",
        "description": "- VSCode Version: `Version 1.5.0-insider (1.5.0-insider)` 538cd9ded5a471fbb20920f01eff9c8df4b83ee9\n- OS Version: `OS X El Capitan Version 10.11.6 (15G31)`\n\nGiven the power of the abstractions that vscode provides for symbols, definitions, references, etc, I think it would be great if there was some guidance (best practices) documentation on how a language _should_ provide the information. For example, when implementing a `DocumentSymbolProvider` what should the range be of the symbol? TypeScript/JavaScript/JSON seem to include the body of a symbol (that has one), where as C# (Omnisharp) only provides a range covering just the keyword alone. Which one is _right_ or more accurately which one is provides more to build upon and should be considered the better practice.\n\nAlso along the same lines -- there is a LOT of power in the `vscode.executeDocumentSymbolProvider`, `vscode.executeReferenceProvider`, and others, but from the documentation I don't think it is really clear. For example, utilizing both `vscode.executeDocumentSymbolProvider` and `vscode.executeReferenceProvider` together, once should be able to create a single extension to provide usage CodeLens support for any language that supports those providers -- without the need of every language adding that type of support.\n\nThoughts?\n",
        "createdAt": "2016-09-06 14:27:26",
        "state": "open",
        "number": 11587
    },
    {
        "title": "Debug console architecture",
        "description": "This item is intended as a discussion for the future of the debug console. Currently we use the tree to represent all elements in the debug console. This has worked well thus far but has certain limitations. The benefit of using the tree is that we can easily render complex elements - the ones that have children. The tree also allows us to lazily fetch the children of each element and is virtualised.\r\n### Motivation for the change\r\n\r\nhttps://github.com/Microsoft/vscode/issues/1957\r\nhttps://github.com/Microsoft/vscode/issues/4338\r\nhttps://github.com/Microsoft/vscode/issues/4326\r\nhttps://github.com/Microsoft/vscode/issues/2163\r\nhttps://github.com/Microsoft/vscode/issues/6845\r\nhttps://github.com/Microsoft/vscode/issues/228\r\nhttps://github.com/Microsoft/vscode/issues/10680\r\nhttps://github.com/Microsoft/vscode/issues/26641\r\n\r\n### Option 1: use the editor and simulate the tree using editor decorations\r\n\r\n**pro:** find, selection, word wrap, performance\r\n**con:** have to simulate the tree by using editor decorations / indentation, not enough flexibility (for possibly future requests of rendering custom things in the debug console). \r\n\r\nNote: editor could be enhanced to render custom images, but customly rendered output which the user can interact with is tricky.\r\n### Option 2: use the editor but render a tree per complex object in a custom editor widget\r\n\r\n**pro:** most similar to what we currently have with some benefits on top (able to find/copy outside of complex objects)\r\n**con:** find and selection will not work inside the tree, thus making it hard to copy / find contents inside complex objects\r\n### Option 3: render the debug console not using existing widgets\r\n\r\n**pro:** gives most flexibility\r\n**con:** no virtualisation, slow for a large number of elements, have to rewrite find widget, word wraping\r\n\r\nChrome debug console is a good example of this. They can render multiple complex elements side by side and expand / collapse them.\r\n\r\n@weinand @alexandrudima please edit / modify as you see fit. I might have missed some of the pro/cons that we discussed, I just simply wrote what we have talked about this afternoon.\r\n",
        "createdAt": "2016-09-02 15:20:36",
        "state": "open",
        "number": 11462
    },
    {
        "title": "Show an information dialog if settings can not be accessed",
        "description": "From verifying #10317:\n- remove permissions to read `~/.config/Code - Insiders/storage.json`\n- start VSCode\n- VSCode starts up without error message. No folder history, but all seems to work.\n\nStarting `code --verbose` shows the issue\n\nA warning dialog or message (also without verbose) would be good so the user can fix the permission issue.\n",
        "createdAt": "2016-09-02 09:59:52",
        "state": "open",
        "number": 11440
    },
    {
        "title": "Support word wrap in the diff editor",
        "description": "I cannot get word wrapping enabled in a diff editor when using that action but maybe there is no word wrapping for diff editors?\n",
        "createdAt": "2016-09-01 11:49:34",
        "state": "open",
        "number": 11387
    },
    {
        "title": "Editor selection colors should be simplified",
        "description": "- VSCode Version: Code - Insiders 1.5.0-insider (1de4d832ccb061c13cf70eaf0221fbaa86abfbdd, 2016-08-31T06:16:16.953Z)\n- OS Version: Linux x64 4.4.0-36-generic, Ubuntu 16.04\n\nFollow up from #1636\n\nI think we need to take a step back and take a good look at editor selection colors. Currently there are so many states, it's very confusing as to what find match, selection match is what and even what the actual selection is.\n\nHere are some of the states using my theme [Glacier](https://marketplace.visualstudio.com/items?itemName=Tyriar.theme-glacier):\n\n![image](https://cloud.githubusercontent.com/assets/2193314/18149502/4d7a8d04-6f95-11e6-8726-a4df8ee95627.png) Selection\n![image](https://cloud.githubusercontent.com/assets/2193314/18149492/32a2bbe6-6f95-11e6-985b-d2de3a32ed5a.png) Find match\n![image](https://cloud.githubusercontent.com/assets/2193314/18149524/765a9340-6f95-11e6-94a6-9d916a2af65a.png) Symbol match\n![image](https://cloud.githubusercontent.com/assets/2193314/18149531/8b5d273a-6f95-11e6-9096-b713c7f04233.png) Selection match (lighter than word match)\n![image](https://cloud.githubusercontent.com/assets/2193314/18149574/ca1a92d2-6f95-11e6-90d9-31c18dbab87d.png) Selection + selection match\n![image](https://cloud.githubusercontent.com/assets/2193314/18149882/e9ed2942-6f97-11e6-912c-0638a2225c4a.png) Selection + find match + symbol match\n![image](https://cloud.githubusercontent.com/assets/2193314/18149620/0fc5e642-6f96-11e6-940a-3990cf650c9d.png) Symbol highlight\n![image](https://cloud.githubusercontent.com/assets/2193314/18149599/e9b7ff26-6f95-11e6-8403-bfc48f88d79e.png) \"Strong\" symbol highlight for cursor word\n![image](https://cloud.githubusercontent.com/assets/2193314/18149654/55266e00-6f96-11e6-89ab-d4be281a65a7.png) \"Strong\" symbol highlight for words away from cursor\n![image](https://cloud.githubusercontent.com/assets/2193314/18149744/e5b605b6-6f96-11e6-9a1e-b9a27d5832f4.png) Selection + \"Strong\" symbol highlight for cursor word\n![image](https://cloud.githubusercontent.com/assets/2193314/18149762/02f6e762-6f97-11e6-82d2-8746528ed790.png) Selection + \"Strong\" symbol highlight for cursor word (when selecting via <kbd>ctrl</kbd>+<kbd>d</kbd>)\n![image](https://cloud.githubusercontent.com/assets/2193314/18149836/8b8ef84e-6f97-11e6-89d0-48dfb0fc87db.png) Selection + \"Strong\" symbol highlight for cursor word (when selecting via <kbd>ctrl</kbd>+<kbd>d</kbd>) + Find match\n\nThis is in no way an exhaustive list of states but I think it gets the point across. Here are some of my initial thoughts:\n- The _actual_ selection should _always_ be the selection color defined in the theme - this is the primary reason I sometimes lost my selection.\n- Find matches should _not_ use the selection color defined by the theme.\n- Some of these states have colors that differ by so little they lose information and make the UI look sloppy. We should reduce the number of possible colors by reducing the amount they can stack with each other.\n- Is it useful differentiating symbol highlight and selection highlight?\n- Is strong symbol highlight useful? We already have a color to indicate symbols and they can't both show at once.\n  - I'm quite perplexed by it, especially when things like this happen:\n    \n    ![image](https://cloud.githubusercontent.com/assets/2193314/18150034/ef49b940-6f98-11e6-8b92-760f40dd5c4d.png)\n    \n    Why are both `userEnv` variables highlighted with the strong symbol highlight below but not above?\n    \n    ![image](https://cloud.githubusercontent.com/assets/2193314/18150039/fd69d172-6f98-11e6-83f4-b495607ae9ca.png)\n  - The blue looks bad in my theme, is there a way we can get a more suitable color using existing colors?\n- The line highlight color doesn't work when a range is selected.\n- Can we use a border to indicate find matches or something? That would make the distinction very clear.\n- Since 95% of themes are just imported from Sublime `.tmTheme` files and not adjusted to work better with vscode, we should make an effort to have the defaults work and only add additional tmTheme properties if they are absolutely necessary.\n- `findHighlight` is defined in many themes, why don't we adopt that since Sublime uses it?\n\nPersonally I think something like below would be more usable despite being so simple (this is to illustrate my point, I'm not proposing this):\n- Selection is always the `selection` color from theme\n- All symbol and word highlights are `selection` color at 50% opacity\n- Find matches use white with 50% opacity\n",
        "createdAt": "2016-08-31 23:56:46",
        "state": "open",
        "number": 11354
    },
    {
        "title": "Remove whitespace and indent to the right spot when the line has more whitespace than necessary",
        "description": "Extracted from https://github.com/Microsoft/vscode/issues/2938#issuecomment-235987405\n\n---\n\nFrom @chrmarti \n\nWorks, except when there is already the full indentation (or more) on the line. It would make sense to make it work the same way in that case:\n\n![indent](https://cloud.githubusercontent.com/assets/9205389/17225083/5eadbb98-54b8-11e6-8b28-21bba9fde257.gif)\n",
        "createdAt": "2016-08-31 16:22:54",
        "state": "open",
        "number": 11322
    },
    {
        "title": "Replace with newline works only when regex mode is on",
        "description": "- VSCode Version: 1.4.0\n- OS Version: OS X 10.11.6\n\nSteps to Reproduce:\n1. Find text and replace with \\n\n2. Literal \\n is used instead of a newline\n\n**Input**\n\n<img width=\"500\" alt=\"input_vscode\" src=\"https://cloud.githubusercontent.com/assets/1173057/18100800/56b2ee1a-6eba-11e6-9837-497a1ff0b3fd.png\">\n\n**Actual**\n\n<img width=\"511\" alt=\"actual_vscode\" src=\"https://cloud.githubusercontent.com/assets/1173057/18100807/5bfc71b6-6eba-11e6-8b43-a8afb5a3abae.png\">\n\n**Expected**\n\n<img width=\"511\" alt=\"expected_vscode\" src=\"https://cloud.githubusercontent.com/assets/1173057/18100823/60d4aabe-6eba-11e6-8d45-be0dff974265.png\">\n\nRegex mode works as expected however I'd rather not have to define a regex.\n",
        "createdAt": "2016-08-30 17:59:41",
        "state": "open",
        "number": 11237
    },
    {
        "title": "Align more keybindings with Mac conventions",
        "description": "I know I can override my keybindings, but this bug is about sensible defaults.\n\nTake the simple <kbd>Cmd+{</kbd>. iTerm2 is sitting beside vscode, and I <kbd>Cmd+Tab</kbd> to it and use this keybinding. When I <kbd>Cmd+Tab</kbd> back to vscode, this key combination suddenly does folding. I'm supposed to use <kbd>Ctrl+$digit</kbd> to switch between tabs here. And <kbd>Cmd+$digit</kbd> means something else entirely! This is unacceptable.\n\nI come from the Emacs world, so I'm used to hitting <kbd>Ctrl+g</kbd> to cancel any operation (equivalent to vscode's <kbd>Esc</kbd>). In vscode, this key combination is goto-line! goto-lie is a fairly common operation, so this is fine; I can choose to either re-train my muscle memory or override.\n\nI come from the Atom world as well, and <kbd>Cmd+b</kbd> switches buffers. This in itself isn't so bad, but the alternative chosen for <kbd>Cmd+b</kbd> is terrible! Why is hiding the left-pane such a common operation that we need to provide a toplevel keybinding for it? In the absence of a better suggestion, we can alias it to <kbd>Cmd+p</kbd>.\n\n<kbd>Cmd++</kbd> being replaced with <kbd>Cmd+=</kbd> is an unnecessary source of confusion.\n",
        "createdAt": "2016-08-30 00:25:44",
        "state": "open",
        "number": 11148
    },
    {
        "title": "Suggestion: Start VSCode debugger from the command-line",
        "description": "It would be nice to be able to start the VSCode debugger from the command line, for example:\n\n```\n# within a workspace\ncode --start-debug \"Launch\" # start debugger using \"Launch\" configuration in .vscode/launch.json\n\n# outside of a workspace\ncode --launch \"node ./file.js arg\" # launch \"node\" debugger for file.js\ncode --attach \"node\" # attach \"node\" debugger using command.PickProcess\ncode --attach \"node:5858\" # attach \"node\" debugger to port 5858\n```\n\nIn addition, it would be nice to be able to launch another instance of vscode in debug mode as part of a debug configuration entry in .vscode/launch.json.\n\nThis would serve to make extension development easier (e.g. debug with the language client in one vscode instance, and start another instance to debug the language server).\n",
        "createdAt": "2016-08-25 22:45:21",
        "state": "open",
        "number": 10979
    },
    {
        "title": "Auto hide panel",
        "description": "Similar to behavior in Visual Studio, is there a way we could get the terminal to show/hide automatically? Leaving some sort of tab at the bottom of the screen?\n\nIt opens when:\n1. User mouses over the tab \n2. Something is written to the terminal\n\nIt hides when:\n1. User clicks outside of the open terminal window.\n2. The terminal has not been written to within a set period of ~10 seconds.\n\nEx: I'm working on an Angular 2 application using the angular-cli build tool. When I'm writing code or clicking through the UI I don't particularly care about what's displaying in the terminal. But as soon as I save my changes and the build process starts, I DO want to quickly see what the current state of the build is. So after saving a file, when the CLI tool starts writing to the terminal, it would pop-up from the bottom, and as long as my mouse isn't hovering over it, it will hide again after several seconds of inactivity.\n",
        "createdAt": "2016-08-25 12:41:29",
        "state": "open",
        "number": 10952
    },
    {
        "title": "Release in the Microsoft Store",
        "description": "While VS Code is easily obtainable as it is, it still feels like VS Code could benefit from the standardized update procedure that comes with the Windows Store. Perhaps even something like the [Desktop App Convertor](https://developer.microsoft.com/en-us/windows/bridges/desktop) could be used.\n",
        "createdAt": "2016-08-21 12:10:42",
        "state": "open",
        "number": 10759
    },
    {
        "title": "Improve editor.trimAutoWhitespace or cursor navigation",
        "description": "Loosing indent position all the time when navigating code.  You loose code indent position with both navigating with the mouse or arrow keys (sick of pressing tab to get alignment back or delete then enter to get a new line with the correct indentation, or just start typing from the wrong position and use code format shortcut after entering something at a different location.\n- VSCode Version:\n  1.4.0\n- OS Version:\n  Win10\n\nSteps to Reproduce:\nEdit anything with line gaps between code\n",
        "createdAt": "2016-08-20 20:38:07",
        "state": "open",
        "number": 10749
    },
    {
        "title": "Make task templates configurable",
        "description": "I started implementing a command to run tests, but the noticed there's a command in the command palette called \"Run Test Task\". It seems like it'd be a good idea to reuse this, since otherwise my \"Run Dart tests\" command appears even when there's not a Dart project open.\n\nHowever, I'm struggling to find how I can actually fire this up. If I execute that command it says `No task runner configured` and when I click the option to configure it gives me a list of existing task runners. I figure I need to add a new item to this list that the uesr can select, which would then pre-fill their tasks.json with the correct things for executing tests.\n\nHowever, I can't figure out how to contribute something to that list?\n",
        "createdAt": "2016-08-20 15:39:15",
        "state": "open",
        "number": 10742
    },
    {
        "title": "Glob matching should be case insensitive",
        "description": "- VSCode Version: 1.4.0\n- OS Version: Win10 1511\n\nSteps to Reproduce:\n1. using VSCode, open a directory stored in an NTFS volume, which has files named FooContainer.cs\n2. press CTRL+SHIFT+F to invoke Find in Files\n3. press \"...\" to show 'files to include'\n4. enter \"*_/_container.cs\"\n5. search for something that is known to exist in the file.\n6. results: nothing is found\n7. replace 'files to include' with \"*_/_Container.cs\" (only change is the upper case C instead of lower case)\n8. search again, this time results are found as expected.\n\nSince Windows NTFS is not a case-sensitive file system, the expected results is that I can search in files using any case in the 'files to include'/'files to exclude'.\n",
        "createdAt": "2016-08-17 21:27:32",
        "state": "open",
        "number": 10633
    },
    {
        "title": "Can't match multiline occurrences",
        "description": "- VSCode Version: 1.4.0\n\nSteps to Reproduce:\n\nIn the image below you can see that the highlighted text actually appears 3 times but it can't match it once the highlighted part spans multiple lines. \n\n![image](https://cloud.githubusercontent.com/assets/159209/17636641/51fa5f28-6093-11e6-96e3-61442bdee5c8.png)\n\nSublimeText works fine in this situation.\n\n<details>\n<summary>\n\nin case it helps, the file is here</summary>\n\n\n\n```\n        \"master\": {\n            \"publisher\": \"Microsoft.OSTCExtensions\",\n            \"type\": \"CustomScriptForLinux\",\n            \"typeHandlerVersion\": \"1.4\",\n        \"autoUpgradeMinorVersion\": true,\n            \"settings\": {\n              \"fileUris\": \"[variables('centosScripts')]\",\n              \"commandToExecute\": \"[concat('bash elasticsearch-centos-install.sh -xn ', variables('esSettings').clusterName, ' -v ', variables('esSettings').version, ' -d ', variables('esSettings').discoveryHosts, variables('marvelParamValue'), variables('jmeterParamValue'), variables('cloudAzureParamValue'), variables('marvelExportParamValue'), variables('afsParamValue'))]\"\n            }\n          },\n        \"client\": {\n            \"publisher\": \"Microsoft.OSTCExtensions\",\n            \"type\": \"CustomScriptForLinux\",\n            \"typeHandlerVersion\": \"1.4\",\n        \"autoUpgradeMinorVersion\": true,\n            \"settings\": {\n              \"fileUris\": \"[variables('centosScripts')]\",\n              \"commandToExecute\": \"[concat('bash elasticsearch-centos-install.sh -yn ', variables('esSettings').clusterName, ' -v ', variables('esSettings').version, ' -d ', variables('esSettings').discoveryHosts, variables('marvelParamValue'), variables('jmeterParamValue'),  variables('cloudAzureParamValue'),variables('marvelExportParamValue'), variables('afsParamValue'))]\"\n            }\n          },\n        \"data\": {\n          \"publisher\": \"Microsoft.OSTCExtensions\",\n          \"type\": \"CustomScriptForLinux\",\n          \"typeHandlerVersion\": \"1.4\",\n      \"autoUpgradeMinorVersion\": true,\n          \"settings\": {\n            \"fileUris\": \"[variables('centosScripts')]\",\n            \"commandToExecute\": \"[concat('bash elasticsearch-centos-install.sh -zn ', variables('esSettings').clusterName, ' -v ', variables('esSettings').version, ' -d ', variables('esSettings').discoveryHosts, variables('marvelParamValue'), variables('jmeterParamValue'),  variables('cloudAzureParamValue'),variables('marvelExportParamValue'), variables('afsParamValue'))]\"\n          }\n        },\n```\n\n</details>\n",
        "createdAt": "2016-08-16 16:24:47",
        "state": "open",
        "number": 10588
    },
    {
        "title": "[snippets] Cannot override/disable snippets defined in extensions",
        "description": "One of the Go Extension users talks about the ability to override/disable the snippets defined in the Go extension.\n[vscode-go/#385](https://github.com/Microsoft/vscode-go/issues/385)\n\nThis applies to all extensions that define snippets and so adding this issue as a feature request\n",
        "createdAt": "2016-08-16 01:34:54",
        "state": "open",
        "number": 10565
    },
    {
        "title": "Execute functions during snippet expansion",
        "description": "- VSCode Version: 1.4\n- OS Version: any\n\nThere are several snippets that exist in Visual Studio today that I would like to introduce to the C# extension for VS Code, but require generating dynamic text are executing code to perform other actions during snippet expansion. For example:\n- `ctor` -- generate a constructor declaration, automatically filling in the name of the constructor with the enclosing type name.\n- `testclass` -- generate a test class and adds references to necessary test assemblies.\n- `cw` -- generate `System.Console.WriteLine()` but simplify the type name with the current using directives. So, `System.` is removed if `using System;` is in scope.\n\nFrom what I can tell, snippets only support text with placeholders today. Is it possible to generate text dynamically or execute commands with arguments during snippet expansion?\n",
        "createdAt": "2016-08-15 19:57:02",
        "state": "open",
        "number": 10561
    },
    {
        "title": "Add support for \"fn+\" function key commands in custom keybindings",
        "description": "- VSCode Version: \n- OS Version:\n\nSteps to Reproduce:\n1. would be nice if \"key\": \"alt+d\"\n2. could be \"key\": \"fn+d\", for example.\n",
        "createdAt": "2016-08-15 17:34:54",
        "state": "open",
        "number": 10554
    },
    {
        "title": "Tabs for integrated terminal",
        "description": "Feature request.\n## Default terminal\n\n![image](https://cloud.githubusercontent.com/assets/7426664/17665784/9b2be170-6305-11e6-9329-fce36ec9aaa4.png)\n## But could be more usable...\n\n![terminals2](https://cloud.githubusercontent.com/assets/7426664/17665089/5c7aabf4-6301-11e6-8211-41cedb0ec494.png)\n![terminals1](https://cloud.githubusercontent.com/assets/7426664/17665090/5c8027b4-6301-11e6-9b60-827a7fee4f26.png)\n",
        "createdAt": "2016-08-15 13:01:26",
        "state": "open",
        "number": 10546
    },
    {
        "title": "Lift `setContext` from a command to proper API",
        "description": "This would be very useful to activate extension build feature per project type.\nwould help for [this issue](https://github.com/Microsoft/vscode/issues/9280)\n",
        "createdAt": "2016-08-12 12:08:01",
        "state": "open",
        "number": 10471
    },
    {
        "title": "Include more icons",
        "description": "Is it possible to include more icons to be shown in status bar? Currently vscode supports only octoicons, which might not have all required icons.\nIncluding https://github.com/vorillaz/devicons/ would be a good idea too.\n",
        "createdAt": "2016-08-12 01:48:28",
        "state": "open",
        "number": 10455
    },
    {
        "title": "Suggestion: Automatically show the Problems panel if problems exist (and hide similarly)",
        "description": "- VSCode Version: 1.4.0\n- OS Version: macOS 10.11.6\n\nI often work with the Problems panel open, as listing the problems that way is a very good visual indication of what needs some work. However, when I don't have any current problems, it'd be nice if the Problems panel could automatically hide (giving some more screen real estate). Then, when problems come up, it could automatically show again.\n\nA little bit of auto-sizing based on the current number of problems would also be nice, but is less important, in my opinion.\n",
        "createdAt": "2016-08-10 15:51:48",
        "state": "open",
        "number": 10400
    },
    {
        "title": "bug: tabSize affects indentation",
        "description": "- VSCode Version: Code 1.4.0 (6276dcb0ae497766056b4c09ea75be1d76a8b679, 2016-08-04T16:49:32.489Z)\n- OS Version: Linux x64 4.4.0-34-generic\n\n`tabSize` setting has two independent functions:\n1. Size of tabulation character.\n2. Size of indentation.\n\nThe latter is really useful. But its connectedness with the former makes it unusable. In one file tabulation character size may be 8 and indentation size may be 4. How can I control these two values with one setting?\n",
        "createdAt": "2016-08-09 09:54:39",
        "state": "open",
        "number": 10339
    },
    {
        "title": "Allow for floating windows",
        "description": "Hi,\nI suggest floating windows option for:\n- Terminal\n- Debug console\n- Problems\n- Output\n\nEventually:\n- tabs\n- Explorer / search / debug / git / extensions \n\nThis way we could take advantage of large screen space and / or multi monitors.\n\nHaving to constantly switch between the various windows is not optimum working flow.\n",
        "createdAt": "2016-08-04 10:40:20",
        "state": "open",
        "number": 10121
    },
    {
        "title": "Git: Support git-bash ssh agent for Windows",
        "description": "cc @saggafarsyad\n\nFrom #6202\n",
        "createdAt": "2016-08-03 08:08:39",
        "state": "open",
        "number": 10064
    },
    {
        "title": "Allow to bring up a dialog with multiple inputs",
        "description": "## Feature request\n\nIt would be nice if an extension could present a single dialog with multiple input fields. For example, the [New Project command in Ionide](https://github.com/ionide/ionide-vscode-fsharp/blob/a58b470dfd2a891eb46a545df0eb326fb0d93038/src/Components/Forge.fs#L142) asks for project directory and project name, and it would be nice to be able to input both at once in a single dialog. Another use case: I would like to implement the [Project Scaffold init script](https://github.com/fsprojects/ProjectScaffold/blob/master/init.fsx#L86) as another option in Ionide's New Project setup. It asks at least seven questions (more if you choose to let it run `git init` for you), and asking each question one at a time in separate dialogs makes for a less-than-ideal user experience. I'd like to be able to present all seven questions in a single dialog.\n## Suggested API\n\n`showInputDialog(options: Map<string, InputBoxOptions|QuickPickOptions>, quickPickItems?: Map<string, string[] | Thenable<string[]>>): Thenable<Map<string,string>>`\n\n`options` is an ES6 Map whose keys are the names of the fields we're asking the user to fill in. The user won't see these names, but they will be used as the keys of the resulting Map object. Their ordering matters, since the order of the keys in the Map will be used as the order in which to present the fields in the interaction dialog. (If using an ES6 Map is not yet possible in VS Code, then `options` would be a plain old Javascript object. In that case, an additional `fieldOrder` parameter, an array of strings, would be required -- see below for suggested API if ES6 Map is not yet possible).\n\nThe values of the `options` Map will be the InputBoxOptions or QuickPickOptions for that particular field in the interaction dialog. These will be treated exactly as they are in the `showInputBox` and `showQuickPick` functions. If any values of the `options` Map are `QuickPickOptions`, then the `quickPickItems` parameter is required. Its keys must match the keys of `options` that have a `QuickPickOptions` value, and its value is the list of items to pick from (exactly equivalent to the `items` parameter of the `showQuickPick` function). And, just like `showQuickPick`, there would need to be another overload that would match the `showQuickPick<T extends QuickPickItem>(items: T[] | Thenable<T[]>, ...)` overload. I.e.,\n\n`showInputDialog<T extends QuickPickItem>(options: Map<string, InputBoxOptions|QuickPickOptions>, quickPickItems?: Map<string, T[] | Thenable<T[]>>): Thenable<Map<string,string|T>>`\n\nThe difference between this and the non-generic `showInputDialog` would be exactly the same as the difference between `showQuickPick<T>` and non-generic `showQuickPick`, so I won't go into further detail on this overload.\n\nThe return value of `showInputDialog` would be a promise that resolves to an ES6 Map whose keys are the same as the keys of the `options` parameter, and whose values are the result of what the user typed. If the user canceled the dialog by pressing Escape, the values of the Map will be `undefined`; otherwise, they will be strings in the case of `InputBoxOptions` fields, and either strings or `T` instances in the case of `QuickPickOptions` fields (where `T`, of course, extends `QuickPickItem`, and is only returned in the generic version of `showInputDialog`).\n\nAs mentioned above, if it is not yet possible in VS Code's codebase to use an ES6 Map, then my suggested API would look like:\n\n`showInputDialog(fieldOrder: string[], options: object, quickPickItems?: object): Thenable<object>`\n\nor:\n\n`showInputDialog<T extends QuickPickItem>(fieldOrder: string[], options: object, quickPickItems?: object): Thenable<object>`\n\nfor the generic version (returning `T` instances, rather than strings, for any QuickPick fields). The keys and values of the input and output objects would be identical to the `Map` version; only the `fieldOrder` parameter is added to specify the order in which the fields should be listed in the dialog.\n## Usage example\n\nSince that specification is a bit hard to read, here is an example.\n\n``` javascript\nvar opts = new Map<string,InputBoxOptions|QuickPickOptions>();\nvar items = new Map<string,string[]>;\nopts.add(\"ProjectName\", {prompt: \"Project name?\"});\nopts.add(\"InitializeGit\", {prompt: \"Initialize Git? Y/N\"});\nopts.add(\"Template\", {placeholder: \"Project template\"});\nitems.add(\"Template\", [\"F#\", \"C#\", \"VB\"]);\nshowInputDialog(opts, items).then(function(result) {\n    if (result[\"Template\"] == \"VB\") {\n        showWarningMessage(\"Visual Basic support is deprecated.\");\n    }\n    showInformationMessage(\"Initializing project...\");\n    initializeProject(result[\"ProjectName\"]);\n    // etc.\n});\n```\n",
        "createdAt": "2016-07-29 07:00:39",
        "state": "open",
        "number": 9936
    },
    {
        "title": "Close tab {count}",
        "description": "This API is mainly used for Vim right now. \n\n```\n:tabc[lose][!] {count} Close tab page {count}.\n```\n\nClose No.{count} tab in current editor and keep editing in current active tab.\n",
        "createdAt": "2016-07-25 06:43:58",
        "state": "open",
        "number": 9677
    },
    {
        "title": "Cursor Up and Down should place the cursor at end of line if it's current state is end of line",
        "description": "- Move the cursor to End of line by using `End` or `Cmd + Right` \n- Now doing Up or Down commands should place the cursor at the End.\n\nBut currently VS Code is placing the cursor at `min(previousPos, lineLength)`\n",
        "createdAt": "2016-07-22 10:27:49",
        "state": "open",
        "number": 9619
    },
    {
        "title": "Indent Guides Have Breaks Where CodeLens UI is Rendered",
        "description": "- VS Code Version: 1.4.0-insiders (a4522)\n- OS Version: Windows 10 1607 (Build 14393)\n\nSteps to Reproduce:\n1. Enable indent guides in VS Code.\n2. Open code file that uses CodeLens (C#, etc.)\n3. Observe breaks in rendered indent guides where CodeLens UI is rendered.\n\n![image](https://cloud.githubusercontent.com/assets/208549/17044738/a29a2468-4f77-11e6-8e85-9e3ddaa41e0e.png)\n",
        "createdAt": "2016-07-22 02:18:45",
        "state": "open",
        "number": 9604
    },
    {
        "title": "API hooks for existing find/replace UI",
        "description": "Feature request: API hooks for existing find/replace UI.\n\nOr in other words, allow an extension to implement their own editor and global find/replace functionality.\n",
        "createdAt": "2016-07-21 17:01:55",
        "state": "open",
        "number": 9590
    },
    {
        "title": "feature request: inline incremental search",
        "description": "Feature request: [Visual Studio's incremental search](https://msdn.microsoft.com/en-us/library/f27e8wzh%28v=vs.90%29.aspx), with support for multiple cursors and regular expressions.\n\n(See #9444)\n",
        "createdAt": "2016-07-21 16:42:04",
        "state": "open",
        "number": 9588
    },
    {
        "title": "find action: support multiple cursors",
        "description": "Feature request: The current behavior of the find action (`ctrl+f` or `f3`) replaces all selections (and cursors) with the next match result. It should instead [optionally?] respect multiple cursors, such that \"find next\" advances each cursor to the next match from its current position.\n\n(See #9444)\n",
        "createdAt": "2016-07-21 16:05:34",
        "state": "open",
        "number": 9584
    },
    {
        "title": "Visual Studio Code should update itself silently",
        "description": "I think automatic update is great, but I think some people just want the thing updated automatically without being asked.   There can be notification that indicates that it's changed and what's new.   But I think we should follow the Chrome model and just update it.\n\nWhy?\n\nThink of it as software running on the web.   When I go to cnn.com, I'm not notified that there's a new version of the back-end software that I might be running.   So why / when should I care if the front-end software has updated?\n\nSometimes you care -- such as low-bandwidth situations.   But that doesn't mean everyone cares.   Some of us, dare I say, a large majority of people, just want the latest stuff all the time.\n\nThank you for listening.\n- VSCode Version:\n- OS Version:\n\nSteps to Reproduce:\n1. \n2. \n",
        "createdAt": "2016-07-20 15:26:05",
        "state": "open",
        "number": 9539
    },
    {
        "title": "Make history navigation aware of editor groups",
        "description": "- VSCode Version: Code 1.3.1 (e6b4afa53e9c0f54edef1673de9001e9f0f547ae, 2016-07-12T13:35:06.227Z)\n- OS Version: Windows_NT ia32 10.0.10586\n\nSteps to Reproduce:\n\n1.open a file in editor 1;\n2.open same file in other editor 2(ctrl +2 side editor)\n3. in editor 1 move cursor   to line 1 and then to line 2\n4 in editor 2 move cursor to line 3 and then to line 4\n5 click mouse backward button in editor 1 the cursor back to  line 4 but i want to line 1\n\nIt seems every file have one  cursor backward stack,and all side editor share it?\nRegards \n",
        "createdAt": "2016-07-20 08:44:18",
        "state": "open",
        "number": 9526
    },
    {
        "title": "Test Runner Viewlet with an Extension API to plug into [Enhancement Request]",
        "description": "[In response to Erich Gamma's tweet](https://twitter.com/ErichGamma/status/755437588291485697) @Krzysztof-Cieslak\n\nA test runner viewlet/sidebar with a pluggable API would be a great addition to vscode. \n\nThe viewlet should include visual indications of \n- the progress of completed tests out of the set of tests being run\n- visual indicators or icons showing basic tests states at the least \n  `not run |  success | failure | ignored/skipped`\n\n![](http://i.imgur.com/Rt4uw9S.png)\n\nThe test runner should be able to provide a set of sorting categories and repopulate the viewlet based on the users selection\n\n![](http://i.imgur.com/MhP5Elk.png)\n\nA query box with the ability to filter the tests based on the names shown in the runner's list at a minimum, with the ability for the underlying runner to populate a set of query filters.\n\n![](http://i.imgur.com/062i5zz.png)\n\nInstead of the VS style of collapsing categories\n\n![](http://i.imgur.com/GivhUBv.png)\n\nI think the vscode style used in the debugger viewlet is much nicer :smile: \n\n![](http://i.imgur.com/iOFmimd.png)\n\nA button could be used to select which test runner you want to use out of the test runner extensions that have been installed\n\n![](http://i.imgur.com/7P5ljMa.png)\n\nBut a dropdown menu would work too\n\n![](http://i.imgur.com/KA1fG2r.png)\n\nA side button to open a menu could enable the active test runner to populate it with any additional commands specific to its functionality \n\n![](http://i.imgur.com/QDh2Wu3.png)\n\nSome other functionality points -\n- When an individual test is selected the result could be rendered in the output panel\n- An icon/button to run all tests\n- The ability to highlight/select a set of tests and only run those tests \n- A basic set of run options, which individual runners might be able to extend  \n  ![](http://i.imgur.com/BkYPZfB.png)\n- Tests outputs can contain links to specific points in source code\n- Debugging specific tests (would be awesome, but understandable if this is too difficult for an initial implementation)\n- Associate test runner extensions with specific languages?\n- Test playlists (would be nice, but not especially important)\n- Ability to specify a task/trigger that will repopulate the viewlet's list of tests\n- Dropdown menu that the test runner can population with platform/environment/runtime configurations to use during test execution.\n",
        "createdAt": "2016-07-19 21:08:08",
        "state": "open",
        "number": 9505
    },
    {
        "title": "Allow to save a list of opened editors in a group and switch between them",
        "description": "- VSCode Version: 1.3.1\n- OS Version: all\n\nThere are many times I have a set of open editors in the middle of working on something but need to stop and look at a completely different part of the project.\n\nCurrently, I can:\n1. Just open the new set of files I need, which clutters up the open editors\n2. Close my open editors and open the new set of files, which makes it easier to work on the second part but very difficult to get back to the previous state when I need to\n\nIt would be nice to be able to save a state of which editors and files are open to retrieve later so I could save the state, close everything, and switch to the new set of files, then easily restore the initial state when I'm finished.\n\nThis is my main use case for wanting to be able to open multiple windows. See #7330 #2686\n",
        "createdAt": "2016-07-19 17:50:15",
        "state": "open",
        "number": 9498
    },
    {
        "title": "Git: Support line staging",
        "description": "From @kachkaev\n I can't find out how to select just two deleted lines out of 5 going sequentially and stage only the ones I want. Any time I select something and click that menu item, the whole block gets staged. The same happens when unstaging.\n",
        "createdAt": "2016-07-19 10:12:14",
        "state": "open",
        "number": 9475
    },
    {
        "title": "Allow to undo file operations done in the explorer",
        "description": "- VSCode Version: 1.3.1\n- OS Version: OS X 10.11.5\n\nSteps to Reproduce:\n1. delete a file from explorer panel\n2. there is no option to undo previous action\n\ncan be related to #4366\n",
        "createdAt": "2016-07-16 17:02:58",
        "state": "open",
        "number": 9390
    },
    {
        "title": "Add suggestions for key binding when clause contexts",
        "description": "When the user is creating custom keybindings, we now have suggestions (IntelliSense) for command ids.\r\n\r\nSuggestions for then when clause contexts (ex, editorFocus, inDebugMode, etc) would also be useful.\r\n",
        "createdAt": "2016-07-14 21:02:08",
        "state": "open",
        "number": 9303
    },
    {
        "title": "User configurable menus",
        "description": "We now allows extension writer to contribute menu items. The next logical step is to allow user to configure their menus - this is analog to the keybindings-story. One idea is to have a `menus.json` file which defines your menus:\n\n``` json\n{\n  \"editor/context\": [\n  {\n    \"command\": \"my command\",\n    \"when\": \"editorHasSelection\"\n  },\n  {\n   // more..\n  }\n  ],\n \"explorer/context\": [\n   // more ...\n  ]\n}\n```\n",
        "createdAt": "2016-07-14 13:31:09",
        "state": "open",
        "number": 9285
    },
    {
        "title": "Offer code mark styles and gutter marks",
        "description": "_From @darkred on July 10, 2016 23:30_\n\n_(Using VSCode 1.3.0 in win 10 x64 build 10586 with vscode-eslint extension 1.10.18)._\n\nCurrently the code marks(for errors and warnings) appear only as squiggly underline (i.e. as **spellchecker errors** in browsers, e.g. Firefox, Chrome):\n_(the error is in red, and the warning is in green)_\n![2016-07-11_020259](https://cloud.githubusercontent.com/assets/723651/16716650/b635a444-470b-11e6-82fc-90770e8bea05.png)\n\nMy suggestion is to offer more code mark styles (ideally  the **outline** style, as it highlights the errors/warnings the best way -see below- ) and **gutter marks** :\n_(with the errors to be in red, and the warnings to be in yellow, as ESLint itself uses these colors - not green)_\n![2016-07-11_020203](https://cloud.githubusercontent.com/assets/723651/16737733/59dedc70-479b-11e6-8da9-0789ade17143.png)\n([here is another screenshot](https://sublimelinter.readthedocs.io/en/latest/_images/marks-outline-dark.png))\n\nIt's more easy to distinguish the errors this way.\n\nThank you\n\n---\n\n_For reference SublimeLinter3 package offers [five different code mark styles](https://sublimelinter.readthedocs.io/en/latest/mark_styles.html) :_ \n- fill, \n- outline   _(the default style)_,\n- solid underline, \n- squiggly underline, and \n- stippled underline\n\n_and two types of gutter marks:_ \n- errors, and \n- warnings\n\n_Copied from original issue: Microsoft/vscode-eslint#99_\n",
        "createdAt": "2016-07-13 13:13:16",
        "state": "open",
        "number": 9209
    },
    {
        "title": "Double click after curly brace to select the content",
        "description": "This is a feature-request. \n\nA common use case for me in Eclipse, is to double click on the right after a brace or a curly brace, to select all the content inside it. It's a fast way to select, indent, remove the content. It's a lot more handy to see the ending curly brace (especially for JS and other functionnally langugage). \n\n![www gifcreator me_zovlan](https://cloud.githubusercontent.com/assets/3749428/16766721/07e53fda-483c-11e6-91dd-f108628db010.gif)\n",
        "createdAt": "2016-07-12 12:29:10",
        "state": "open",
        "number": 9123
    },
    {
        "title": "support font-size in DecorationRenderOptions",
        "description": "Feature request: support specifying the font size in `DecorationRenderOptions` and `ThemableDecorationAttachmentRenderOptions`.\n",
        "createdAt": "2016-07-11 15:29:13",
        "state": "open",
        "number": 9078
    },
    {
        "title": "Show quick open results as preview while navigating through them",
        "description": "- VSCode Version: 1.3.0\n- OS Version: Windows 10 64bit & Mac OS X 10.11.3\n\nSteps to Reproduce:\n1. Open the Quick Open box\n2. Type a file name that returns several results\n3. A new Preview editor pops up and receives focus with the first result loaded into it\n4. Scroll through the results in the Quick Open box and the Preview editor changes to the file that's highlighted\n5. Selecting a result will fully open the file. Canceling can close the Preview editor or leave it open. I'd prefer if it closed the preview.\n",
        "createdAt": "2016-07-08 13:07:36",
        "state": "open",
        "number": 8939
    },
    {
        "title": "request: ease-out transition for TextEditorDecorationType (extension API)",
        "description": "Would like to be able to apply a transition on a TextEditorDecorationType . Something like this:\n\n```\nvar flashDecorationType = vscode.window.createTextEditorDecorationType({\n  backgroundColor: 'rgba(100,200,100,0.5)',\n  transition: 'backgroundColor 1s ease-out'\n});\n```\n",
        "createdAt": "2016-07-06 15:35:53",
        "state": "open",
        "number": 8812
    },
    {
        "title": "Make it possible to use drag and drop in a webview",
        "description": "- VSCode Version: 1.3.0-insider\n- OS Version: windows7\n\nSteps to Reproduce:\n1.  Download My extension:  https://github.com/f111fei/test-files/raw/master/webview-test-0.0.1.vsix\n2.  Run command `Hello Webview` to open my webview.\n\nProblem:\n1.  Drag Button into TextArea. Dragfeedback overlay will prevent  my dragging action.\n2.  Typing some text in the textarea. Use `Ctrl+A` to select all, Nothing happen.\n\nReason\n1. see https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-browser/window.ts#L91, the default drag handler is prevented.\n2. see https://github.com/Microsoft/vscode/blob/master/src/vs/platform/keybinding/browser/keybindingServiceImpl.ts#L380, `selectAll` handler is prevented.\n\n![1](https://cloud.githubusercontent.com/assets/7069719/16614676/14cd3018-43a5-11e6-9d5b-0335069faf9e.png)\n",
        "createdAt": "2016-07-06 10:11:45",
        "state": "open",
        "number": 8794
    },
    {
        "title": "Investigate removing Max results limitation for Search and replace results",
        "description": "Investigate removing Max results limitation for Search and replace results\r\n\r\nCurrently we set max limit to 10000. We need to investigate on lifting this.\r\n",
        "createdAt": "2016-06-30 08:04:25",
        "state": "open",
        "number": 8563
    },
    {
        "title": "Tab dragging should show where the tab will be inserted, not which tab it will be \"replacing\"",
        "description": "#7854\n- VSCode Version: Code - Insiders 1.3.0-insider (798b41ab1cf3636a27042020a54ddfb4cfb8d23c, 2016-06-29T05:14:50.570Z)\n- OS Version: Linux x64 4.4.0-24-generic, Ubuntu 16.04\n\nCurrently:\n\n![image](https://cloud.githubusercontent.com/assets/2193314/16471538/4041271a-3e12-11e6-81cd-bfcded58b943.png)\n\nIt would be more intuitive for a \"to be inserted here\" vertical line to show up to the left of code.spec.template.\n\nDynamic rearranging like in Chrome would be an even nicer visual indicator.\n",
        "createdAt": "2016-06-29 22:59:13",
        "state": "open",
        "number": 8544
    },
    {
        "title": "Replace all as global editor action in replace diff view",
        "description": "Steps to Reproduce:\n1.  search / replace for some term\n2.  look at the changes one by one, notice how we have these nice global action show next / previos change\n3. it would be cool if the replace all in file action would also be present there\n\n![screen shot 2016-06-28 at 12 12 05](https://cloud.githubusercontent.com/assets/1926584/16411865/8e25b480-3d29-11e6-96dc-db97e0583b91.png)\n",
        "createdAt": "2016-06-28 10:12:23",
        "state": "open",
        "number": 8300
    },
    {
        "title": "Cannot select text from deleted lines diff view",
        "description": "- VSCode Version: 1.3.0-insider\n- OS Version: OS X 10.11\n\nSteps to Reproduce:\n1. Open a file with changes in inline diff mode\n2. Try to select the red (deleted) lines (You can't)\n\nYou can select them normally in the side-by-side. Being able to do so is useful to restore/revert small pieces of code manually by copying and pasting.\n",
        "createdAt": "2016-06-27 22:45:33",
        "state": "open",
        "number": 8226
    },
    {
        "title": "Allow to drag a file out of the window to open a new window",
        "description": "There are some issues with this approach:\n- we need to explore if we can even detect a DND operation out of the window given we run in a HTML context\n- we do not have a good story for having a single file open in a separate window because the entire project context is missing and the window has its own set of extension host and language services. as such this operation is not as lightweight as one might expect\n",
        "createdAt": "2016-06-27 06:39:33",
        "state": "open",
        "number": 8171
    },
    {
        "title": "additional options for `editor.selectionHighlight` ",
        "description": "- VSCode Version: 1.2.1\n- OS Version: OS X 10.11.4\n\nHaving the current word highlighted is convenient, but too distracting when moving around and accidentally leaving the cursor on a keyword (e.g. `let .. in` in OCaml).\nTurning it off, one has to fall back to search and lose the previous results.\n\nMaybe it would make sense to introduce options to:\n1. only highlight if a whole word is selected (i.e. e.g. with a double click)\n2. only highlight non-keyword words\n3. only highlight identifiers\n",
        "createdAt": "2016-06-23 13:03:35",
        "state": "open",
        "number": 8050
    },
    {
        "title": "problemMatcher vs zero-based column values",
        "description": "- VSCode Version: 1.2.1\n- OS Version: Windows 10\n\nI'm trying to parse error messages of OCaml compiler like this:\n\n```\nFile \"test.ml\", line 1, characters 0-1:\nError: Syntax error\n```\n\nwith a a following problemMatcher:\n\n```\n\"problemMatcher\": {\n    \"owner\": \"ocaml\",\n    \"fileLocation\": [\"relative\", \"${fileDirname}\"],\n    \"pattern\": [\n        {\n            \"regexp\": \"^File \\\"(.*)\\\", line (\\\\d+), characters (\\\\d+)-(\\\\d+):$\",\n            \"file\": 1,\n            \"line\": 2,\n            \"column\": 3,\n            \"endColumn\": 4\n        },\n        {\n            \"regexp\": \"^(Warning|Error):\\\\s+(.*)$\",\n            \"severity\": 1\n            \"message\": 2\n        }\n    ]\n}\n```\n\nColumn range of error (characters 0-1) is zero-based while VS Code expects that column numbers starts from one; so I have an error marker in VS Code shifted one position to left\n\nIs it possible to add additional problemMatcher property to correctly handle this case?\n",
        "createdAt": "2016-06-21 09:49:41",
        "state": "open",
        "number": 7918
    },
    {
        "title": "Long Text longer than 10000 letters wrapped with [...]",
        "description": "- VSCode Version: 1.3.0-insiders\n- OS Version: Win 10\n\nSteps to Reproduce:\n1. Open a file with a very long line - over the limit of 10000\n2. Position the cursor at the start of the line in question\n3. Press 'End' keyboard key\n\nResult - the 'End' key does nothing, while it rather has to go to the end of the trimmed/loaded part of the line.\n\nAll-in-all, I must say the approach to treating long lines is one of the worst shortcomming of VS Code (along with not being able to load big files at all). This approach makes the editor totally unusable for touching minified scripts and css for example, so I'd rather say you have to think of improving the performance and removing this serious limitation.\n",
        "createdAt": "2016-06-16 14:12:07",
        "state": "open",
        "number": 7772
    },
    {
        "title": "[css] Support <angle> units icon in CSS",
        "description": "In Firefox 49, there is an icon in the front of the angle unit, but the angle of the icon is constant. \n\nI hope:\n- **The VSCode can be a dynamic response to the actual point of view.**\n- **<kbd>Shift</kbd> + `click` to change the unit format.**\n\n![Firefox DevTools](https://img.alicdn.com/tps/TB1zhUgKpXXXXX0XFXXXXXXXXXX-400-171.gif)\n\n**Spec**: https://drafts.csswg.org/css-values/#angles\n",
        "createdAt": "2016-06-16 09:11:31",
        "state": "open",
        "number": 7757
    },
    {
        "title": "keybindgs.json \"key\" does not tolerate spaces",
        "description": "Open `keybindgs.json` and have the following keybinding\n`{ \"key\": \"cmd + d\", \"command\": \"editor.action.deleteLines\", \"when\": \"editorTextFocus\" },`\n\nNotice the space around the + in \"key\". Due to that this keybinding does not get registered.\nI would expect that the spaces around the + get ignored.\n",
        "createdAt": "2016-06-14 08:30:13",
        "state": "open",
        "number": 7645
    },
    {
        "title": "Mouse Wheel Scrolling Ignores Mouse Control Panel Settings",
        "description": "- VSCode Version: 1.2\n- OS Version: Windows 7\n\nSteps to Reproduce:\n1. Open any file in VSCode\n2. Scroll with mouse wheel\n\nThe number of lines scrolled does not match the Mouse Control Panel settings.\n",
        "createdAt": "2016-06-14 06:24:25",
        "state": "open",
        "number": 7640
    },
    {
        "title": "Add find all button",
        "description": "Fixed #14836\r\n![demo](http://ww2.sinaimg.cn/mw1024/534b48acgw1f4rjrts0k1g20dw0b40xb.gif)\r\n",
        "createdAt": "2016-06-11 12:12:10",
        "state": "open",
        "number": 7559
    },
    {
        "title": "Implement editor undo stack serialization",
        "description": "Related to #7169, #7535\n\nSimilarly to the view state, we need a way to serialize, and later deserialize, a model's undo stack.\n",
        "createdAt": "2016-06-10 13:57:54",
        "state": "open",
        "number": 7536
    },
    {
        "title": "Explicitly refresh active text editor from extension api.",
        "description": "There doesn't appear to be any way to explicitly refresh the active text editor. This would be useful for extensions that modify files via external commands and need to show the latest version once said command completes.\n",
        "createdAt": "2016-06-10 13:32:57",
        "state": "open",
        "number": 7532
    },
    {
        "title": "scrollBeyondLastLine : support integer value",
        "description": "I like the scrollBeyondLastLine feature but it scrolls too much to my state and i often find myself beeing scared to have cleared my file :s\n\nThat would be great if `editor.scrollBeyondLastLine` could be a boolean or an integer that would represent the maximium of lines it would overscroll.\n\nThanks\n",
        "createdAt": "2016-06-10 07:37:17",
        "state": "open",
        "number": 7517
    },
    {
        "title": "[quick fix] \u2318. twice to quickly apply the quick fix",
        "description": "Would be nice if instead of pressing `\u2318.` then `Enter` to apply the quick fix, you could just press `\u2318.` two times in a row. Then, pressing it again could move the cursor to the next (quick fixable) issue, so you could repeatedly fix everything by just pressing `\u2318.` several times in a row.\n",
        "createdAt": "2016-06-10 02:53:51",
        "state": "open",
        "number": 7512
    },
    {
        "title": "take advantage of tsserver model of code for faster TypeScript builds",
        "description": "- VSCode Version: 1.2\n- OS Version: Windows 7, x64\n\nCurrently a way to build a TypeScript project is to run a console command (tsc) that works separately from the tsserver. It looks like the the build could have been done faster if the model of code stored in the tsserver was used that is already parsed, bound and partially typechecked.\n",
        "createdAt": "2016-06-07 17:39:51",
        "state": "open",
        "number": 7342
    },
    {
        "title": "need some visual feedback when the task is done (add post action to tasks)",
        "description": "Currently there is no way to tell if a script is running other than a spinning bar in the bottom which is hard to see. If the task doesn't spit any output than there is no way to know if it's still running or finished other than by looking at that bar. Would be nice to get something more visible and explicit.\n",
        "createdAt": "2016-06-01 11:53:49",
        "state": "open",
        "number": 7090
    },
    {
        "title": "enable keychords of 3 steps",
        "description": "- VSCode Version: 1.1.1\n- OS Version: Windows7, x64\n\nSteps to Reproduce:\n1. Create a key-chord of 3 steps: \"ctrl+k ctrl+c d\" and bind it to a command\n2. Try the new key-chord\n3. Observe no action\n\nExpected: 3 steps key-chords should work.\n",
        "createdAt": "2016-05-27 11:18:47",
        "state": "open",
        "number": 6966
    },
    {
        "title": "allow for cascading peek",
        "description": "- open a peek editor for reference search or previewing definitions\n- inside that editor you cannot peek anymore\n- we should have a way to invoke reference search/peek def in nested editors but without nesting peek inside peek\n",
        "createdAt": "2016-05-25 06:59:00",
        "state": "open",
        "number": 6857
    },
    {
        "title": "Auto closing brackets should try to balance brackets",
        "description": "- VSCode Version: 1.1.0-alpha\n- OS Version: Windows 10\n\nSteps to Reproduce:\n1. Open launch.json or create one\n2. Delete the opening bracket { under configurations\n3. Re-type the opening bracket\n\nAuto-complete adds in a closing bracket when the closing bracket at the end of the config is showing an error. It would make sense that bracket auto-complete would know that there is an open bracket and to not add the closing bracket at the top.\n",
        "createdAt": "2016-05-24 22:35:09",
        "state": "open",
        "number": 6841
    },
    {
        "title": "[css] show all variable definitions for Go To definition",
        "description": "In this example, the variable has 3 definitions:\n\n![image](https://cloud.githubusercontent.com/assets/2193314/15515198/d4f68c8e-21a1-11e6-99b4-5a28395190af.png)\n",
        "createdAt": "2016-05-24 18:24:06",
        "state": "open",
        "number": 6829
    },
    {
        "title": "[css/less/scss] var should be a suggestion in intellisense",
        "description": "#6656\n\nCSS\n\n![image](https://cloud.githubusercontent.com/assets/2193314/15514746/71e0cde6-219f-11e6-87d6-93248b160ffb.png)\n\nSass\n\n![image](https://cloud.githubusercontent.com/assets/2193314/15514735/60b93152-219f-11e6-8160-2fa520763423.png)\n\nLess\n\n![image](https://cloud.githubusercontent.com/assets/2193314/15514763/83fb48bc-219f-11e6-876e-35c41f0bf489.png)\n",
        "createdAt": "2016-05-24 18:06:40",
        "state": "open",
        "number": 6822
    },
    {
        "title": "Add dropdownlist when too much statusbar buttons",
        "description": "Hello,\n\nFor now, when you add a lot of items to the statusbar via plugins, only first few items are displayed and the remaining items are hidden.\n\nIt would be great to have a dropdownlist which will show all those remaining items.\n\nI hope such a feature could enhance vscode.\n\nThanks in advance for your comments.\n",
        "createdAt": "2016-05-23 07:57:12",
        "state": "open",
        "number": 6651
    },
    {
        "title": "Allow to open different windows with different permissions",
        "description": "- VSCode Version: 1.1.1\n- OS Version: Windows 10 1511 (10586.318)\n\nSteps to Reproduce:\n1. Close all Code instances, then run Code as administrator (a new blank Code instance with administrator right)\n2. In File Explorer, right click a text file and Open with Code, nothing will happen.\n\nNote: there are multiple other ways to trigger this issue, the above repro is just an example.\nNote 2: If you already have a code instance running without administrator running, the above issue will not get triggered. That's why the very first step is to close all Code instances.\n",
        "createdAt": "2016-05-19 22:53:19",
        "state": "open",
        "number": 6560
    },
    {
        "title": "Extension Optional Dependency",
        "description": "I am writing an extension that includes snippets designed for developers using C, C++, and/or C#.\n\nHowever, if I add a snippets for the language \"csharp\" and the C# extension/support is not installed (which by default, it is not), the extension makes an error:\n\n> [c:/Users/TobiahZ/Documents/Projects/tool-jam/vscode-comment-snippets]: Unknown language in `contributes.snippets.language`. Provided value: csharp\n\nThis leaves me with two options, as I understand it:\n- Include vscode.csharp in extensionDependencies\n- Do not provide csharp snippets\n\nIdeally, I'd love to have a feature for optional dependency. If \"csharp\" is installed, use these snippets.\n\nI don't like the idea of having to force people to install C# if they aren't planning on using it, just because I'd like to include optional C# snippets.\n\n(Related follow up question: If I did include csharp as a dependency, would it automatically install csharp or does it give the user an error and/or prompt first?)\n- VSCode Version: 1.1.0\n- OS Version: Win10\n\nSteps to Reproduce:\n1. Include csharp language snippets, without installing the C# extension:\n\n``` json\n\"contributes\": {\n    \"snippets\": [\n      {\n        \"language\": \"csharp\",\n        \"path\": \"./snippets/csharp-snippets.json\"\n      },\n```\n",
        "createdAt": "2016-05-15 15:41:46",
        "state": "open",
        "number": 6384
    },
    {
        "title": "File Nesting",
        "description": "Is there any possible chance we might see File Nesting in Visual Studio Code the same way it works in Visual Studio 2015? It was really convenient and helpful. I would adore such a feature!\n",
        "createdAt": "2016-05-12 17:57:25",
        "state": "open",
        "number": 6328
    },
    {
        "title": "Middle mouse button scrolling",
        "description": "- VSCode Version: 1.10\n\nI searched the issues but did not find any such post, so apologies if there is an existing thread that I missed.\n\nI'd like to know if there is any middle mouse click scrolling, planned? That is, clicking the scroll wheel to toggle drag scrolling. It's a useful feature to have when navigating very long files.\n\nAnd if it isn't, is there any API that would allow this to be enabled via an extension?\n\nThanks\n",
        "createdAt": "2016-05-12 00:15:14",
        "state": "open",
        "number": 6302
    },
    {
        "title": "isWatching task as preLaunchTask in launch.json",
        "description": "It would be nice to have a watcher task as preLaunchTask in launch.json. At the moment this is not possible because the launch task will not start before the preLaunchTask ends.\nA long running preLaunchTask should have a regex similar to problemMatcher to wait for a specific text in the output window before executing the launch task.\nIn my scenario I'm running webpack dev server as a watcher task. I want this task to run if <kbd>F5</kbd> is hit and the preLaunchTask is not running. To delay the debugger launch it would be useful to test for a specific string in the output window `webpack: bundle is now VALID.`\n",
        "createdAt": "2016-05-09 12:24:28",
        "state": "open",
        "number": 6209
    },
    {
        "title": "Git: Symlink support",
        "description": "- VSCode Version: 1.0.0 (1.0.0)\n- OS Version: OSX 10.11.4 (15E65)\n\nSteps to Reproduce:\n1. Create a new project with git repository initialised.\n2. Create a folder /foo/bar\n3. Add a symlink from /foo/bar to /bar `ln -s /foo/bar .`\n4. Go to **Git** tab on vscode, and stage `/bar` folder.\n\nIf now you click on staged `/bar` folder, you'll get an error `Warn: Can't open this git resource.`\n",
        "createdAt": "2016-04-29 05:32:35",
        "state": "open",
        "number": 5970
    },
    {
        "title": "Support to print the editor contents",
        "description": "- VSCode Version: 1.0\n- OS Version: Windows 10.0.10586.218\n\nSteps to Reproduce:\n1. Open a File in VSCode or enter some code\n2. Try to print it to a printer\n\nSometimes paper is unbeatable.\n",
        "createdAt": "2016-04-28 15:24:46",
        "state": "open",
        "number": 5953
    },
    {
        "title": "Handle pasting code from column selection specially",
        "description": "https://github.com/Microsoft/vscode/issues/1515#issuecomment-210166838\n\nFrom @seva0stapenko\n\n---\n\nTried column selection in VSCode 1.0. Well, rectangular selection does work, cutting and pasting back also works, but that's about it.\nCutting and pasting into a different part of the code does not work as expected. Both Notepad++ and VS remember that copied text was a rectangular block and paste it as a rectangular block.\nVSCode treats copied block just like a regular text, so pasting it anywhere outside of the current multi-cursor context would create a mess.\nIt's good that the feature is being worked on, but it's not fully baked yet.\n",
        "createdAt": "2016-04-28 11:06:57",
        "state": "open",
        "number": 5940
    },
    {
        "title": "Decorations with gutter icons hide breakpoint icons",
        "description": "- VSCode Version: 1.0.0\n- OS Version: any\n\nSteps to Reproduce:\n1. Create a decoration type `window.createTextEditorDecorationType({ gutterIconPath: ... });` with an icon, decorate a line.\n2. Set a breakpoint for the line. While the breakpoint works, the decoration type gutter icon is completely hiding it.\n\nIdeally, there should be a way to see both (all) icons. I'm assuming the same issue happens if two different extensions set different icons for the same line. Atom and IntelliJ platform based IDEs solve this by allowing to create a plugin specific gutter/or just extending the gutter horizontally to fit all icons.\n\nIf the above mentioned solution is not desirable for some reason, then it should probably be allowed to set a gutter icon `zIndex` for a decoration type. Or maybe the breakpoint icon should just take precedence and always be displayed above any extensions icons.\n",
        "createdAt": "2016-04-28 00:22:01",
        "state": "open",
        "number": 5923
    },
    {
        "title": "setup on osx: automatically move to applications folder",
        "description": "github desktop prompts on startup to automatically move itself to the Applications folder. Can we do something similar for VS Code?\n\n![image](https://cloud.githubusercontent.com/assets/1487073/14864184/9f53c900-0c6d-11e6-8beb-8b42f96e3d26.png)\n",
        "createdAt": "2016-04-27 18:46:53",
        "state": "open",
        "number": 5914
    },
    {
        "title": "Git: Use VS Code as merge editor",
        "description": "1.0.0 introduced the ability to use VS Code as a git difftool. The relevant global `.gitconfig` lines are as follows:\n\n```\n[diff]\n    tool = default-difftool\n[difftool \"default-difftool\"]\n    cmd = code --wait --diff $LOCAL $REMOTE\n```\n\nHow can I use VS Code as a git [mergetool](https://www.git-scm.com/docs/git-mergetool)?\n\nThe relevant arguments it needs to accept, I believe, are `$LOCAL`, `$REMOTE`, `$BASE`, and `$MERGED`.\n",
        "createdAt": "2016-04-25 15:00:58",
        "state": "open",
        "number": 5770
    },
    {
        "title": "Allow to scope settings by platform",
        "description": "Hi\n\nI develop on 3 different platform. When synchronizing settings, snippets and so on, i often must change path, adjust font-size, etc...\n\nSo, it could be great if we had a per platform settings set (Windows, Mac, Unix)\n",
        "createdAt": "2016-04-21 09:13:09",
        "state": "open",
        "number": 5595
    },
    {
        "title": "OnClick event on Gutter",
        "description": "How could I handle `OnClick` events on _Gutter_, similar to how _breakpoints_ does?\n\nThe intention was to connect it with a _decorator_ (previously created with `vscode.window.createTextEditorDecorationType`) so the user should _Click_ on the Gutter and create/destroy the decorator assigned to the line where the user clicked.\n\nThanks in advance\n",
        "createdAt": "2016-04-18 15:50:55",
        "state": "open",
        "number": 5455
    },
    {
        "title": "VSCode do not support .sublime-syntax which is more powerful than .tmLanguage",
        "description": "- VSCode Version:1.0.0\n- OS Version:Windows 7\n  would it be possible to support it in the future?I think .sublime-syntax is more easy to write and readable.\n",
        "createdAt": "2016-04-17 06:56:12",
        "state": "open",
        "number": 5408
    },
    {
        "title": "Improved column selection (Alt+select)",
        "description": "The column selection implemented in #1515 is a start, but it's a bit awkward and unintuitive compared to other editors.\n\nWith the following editors or IDEs, you can create a column selection starting from where the mouse is clicked/dragged:\n- Atom (with Sublime Style Column Selection)\n- Eclipse\n- Notepad++\n- Programmer's Notepad\n- Sublime\n- Visual Studio 2015\n\nAt least Eclipse, Programmer's Notepad, and VS2015 support virtual whitespace as well, creating a complete square/rectangle.\n\nSome of them also don't show multiple cursors, which I think looks better.\n\nOther users were also expecting this behaviour (see [here](https://github.com/Microsoft/vscode/issues/1515#issuecomment-199464559) and [here](https://github.com/Microsoft/vscode/issues/1515#issuecomment-205910037)).\n",
        "createdAt": "2016-04-16 21:06:17",
        "state": "open",
        "number": 5402
    },
    {
        "title": "Add support for mixed tab/spaces indentation",
        "description": "Traditional Unix editors (emacs, vim etc) use a mix of tabs and spaces for indentation. The tab length is always assumed to be 8 and if the indentation size is different, indentation is created by  inserting as much tabs as possible and inserting spaces for the remainder. Right now, in order to view such files correctly one needs to set the tab size to 8, convert the file to use only spaces and then set the indentation size to the correct value. However, when working on legacy code it is desired to keep the indentation method the same to avoid unnecessary commits. Therefore VSCode should support this method of indentation, auto detect it and allow to easily convert from and to it.\n- VSCode Version: 1.0.0\n- OS Version: OS X 10.11.4\n\nSteps to Reproduce:\n1. Load a file with mixed indentation\n2. VSCode won't display the file correctly\n",
        "createdAt": "2016-04-16 14:17:39",
        "state": "open",
        "number": 5394
    },
    {
        "title": "Word completion should include words from other opened files",
        "description": "- VSCode Version:1.0.0\n- OS Version:win7\n\nFor example, in a document has been entered in the string: helloworld, then enter the letter h for selection when you choose b helloworld file.\n",
        "createdAt": "2016-04-15 07:53:38",
        "state": "open",
        "number": 5312
    },
    {
        "title": "How to detect shift shift key in VSCode?",
        "description": "- VSCode Version: 1.0.0\n- OS Version: OS X El Capitan 10.11.4\n\nSteps to Reproduce:\n\nI'm trying to bind `quick open` (ctrl+p) command to `shift shift` (shift x2) keys like IntelliJ IDEA in VS Code Extension (TypeScript).\n\nBut `vscode.commands.registerCommand('type', (args) => args.text)` can't detect shfit key.\n\nHow can I detect shift shift key?\n\n``` typescript\n// VSCode v0.10.12 or higher (not working <= v0.10.11)\n'use strict';\nimport * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n\n    let disposable = vscode.commands.registerCommand('type', (args) => {\n\n        vscode.window.showInformationMessage(args.text);\n\n        vscode.commands.executeCommand('default:type', {\n            text: args.text\n        });\n    });\n\n    context.subscriptions.push(disposable);\n}\n```\n",
        "createdAt": "2016-04-14 22:11:08",
        "state": "open",
        "number": 5280
    },
    {
        "title": "Allow to add file reference with drag and drop.",
        "description": "It is very common use case when user wants to add reference of module file (external file) by dragging and dropping it to editor. But right now VScode is not supporting this feature. When user try to drag a file from the explorer window it is opening that file in the editor.\n\nIn the below screen shout you can compare Visual studio and VS code action for drag and drop.\n\n![draganddrop](https://cloud.githubusercontent.com/assets/17735796/14516513/923053d4-01b8-11e6-9359-c5a29b54f980.gif)\n",
        "createdAt": "2016-04-14 03:48:33",
        "state": "open",
        "number": 5240
    },
    {
        "title": "[rtl] Add Right-to-Left editing",
        "description": "Please add a feature to change writing direction.\nFor example, I want to edit markdown documents, and my language is Persian/Farsi, a Right-to-Left language. Now, when I edit documents, always it is left aligned and direction is left-to-right, and it is not comfortable to edit documents that have both Persian text and English text. \n\nThanks.\n",
        "createdAt": "2016-04-06 04:48:30",
        "state": "open",
        "number": 4994
    },
    {
        "title": "Add read-only mode",
        "description": "- VSCode Version: 0.10.11\n- OS Version: Fedora 23, 64bit\n\nDetails:\n- Please add read-only mode and its keyboard shortcut.\n- It should be a switch. When turned on, opening new files will be in read-only mode.\n- It should be persistent across restarts.\n\nThis feature should be very useful for code reviewing. And I think it's not hard to implement.\n\nThank you,\n",
        "createdAt": "2016-04-01 23:25:14",
        "state": "open",
        "number": 4873
    },
    {
        "title": "Define compatible platform for extensions",
        "description": "It would be interesting to be able to define the platforms (Windows, Linux, Mac) that an extension is _compatible_, and then, be filtered in `Command Palette`, to present only the compatibles.\n\nSometimes the extension is developed explicit for specific platforms, and sometimes it is not ready (yet) for all platforms, or present temporary issues, and could be _turned off_ until it is fixed. \n\nThanks in advance\n",
        "createdAt": "2016-03-30 16:43:09",
        "state": "open",
        "number": 4801
    },
    {
        "title": "Add extension deprecation and redirection",
        "description": "Allow extensions to specify they are deprecated in their `package.json`, with an optional alternative extension(s) field. This setting can inform the user of the deprecation in-product, and if specified, potentially update to the new extension automatically without informing of the deprecation?\n\nRelated: https://github.com/Microsoft/vscode/issues/3670\n",
        "createdAt": "2016-03-29 20:42:24",
        "state": "open",
        "number": 4772
    },
    {
        "title": "Macro recording",
        "description": "It would be nice to be able to record a sequence of inputs and then reproduce it as in Notepad++ or Vim.\n",
        "createdAt": "2016-03-21 09:07:08",
        "state": "open",
        "number": 4490
    },
    {
        "title": "Debug Console should support find",
        "description": "- VSCode Version: 0.10.10\n- OS Version: Ubuntu 14.04\n\nThis goes along with a few other debug console feature requests that I see (ex: #3974), but it would also be nice if find worked in the debug console.\n\nSteps to reproduce:\n1. Start debugging something, have the console be full of text\n2. Hit Ctrl-F to find\n\nResult: Find works in the editor window instead of the debug console\n",
        "createdAt": "2016-03-16 21:40:56",
        "state": "open",
        "number": 4338
    },
    {
        "title": "Preview the changelog when looking for outdated extensions",
        "description": "When you check for outdated extensions (`F1 / Extensions: Show Outdated Extensions`), you are able to see the `Readme` and `License`, but not `what's new` :cry: . \n\nBesides not being a required file when publishing extensions (in `package.json`), the `Changelog`  should be shown, if existed. Even better if it could show the difference from the installed and the new version, but for that, I know it would need _to define how changelog file is structured_).\n\nThanks in advance\n",
        "createdAt": "2016-03-13 17:24:01",
        "state": "open",
        "number": 4090
    },
    {
        "title": "Add suggested completions for key chords",
        "description": "With more complex key chords, it would be incredibly helpful to have \"suggested\" completions, based on the first element of the chord. For example, consider the following complicated workflow:\n1. You type `CMD + K`\n2. Visual Studio Code waits for the next key of the chord (but doesn't tell you what valid options could be typed)\n3. User forgets or doesn't know the shortcut he wants, so he hits `ESCAPE` \n4. User hits `F1` to search for the desired command and keyboard shortcut\n5. User hits `ESCAPE`\n6. User executes keyboard shortcut\n\nInstead, what should happen is that VS Code should show the users all of the key chords (or perhaps most commonly used commands _by that specific user_, based on telemetry data), that could possibly be pressed.\n\nThis would have the following benefits:\n- Significantly improve the user experience\n- Ease the learning of new keyboard shortcuts\n- Tailor the Visual Studio Code environment to each user (optional)\n\nCheers,\nTrevor Sullivan\nMicrosoft MVP: PowerShell\nhttps://trevorsullivan.net\nhttps://twitter.com/pcgeek86\n",
        "createdAt": "2016-03-10 16:51:19",
        "state": "open",
        "number": 3969
    },
    {
        "title": "Support Elastic Tabstops",
        "description": "ref: http://nickgravgaard.com/elastic-tabstops/\n",
        "createdAt": "2016-03-09 20:15:35",
        "state": "open",
        "number": 3932
    },
    {
        "title": "Render errors & warnings in gutter",
        "description": "_From @koulmomo on February 24, 2016 23:37_\n\nIt would be good if the extension would mark the line at which errors occur along with **JUST** where it exactly occurs (this could just be a mark in the gutter at the line the error occurs).\n\nThis would make it easier to quickly scan through files.\n\nCurrent:\n![screen shot 2016-02-24 at 3 33 41 pm](https://cloud.githubusercontent.com/assets/983861/13304835/0b1d6436-db0c-11e5-9e9b-f259b464f353.png)\n\nSuggested (taken from sublime):\n<img width=\"842\" alt=\"screen shot 2016-02-24 at 3 33 32 pm\" src=\"https://cloud.githubusercontent.com/assets/983861/13304848/20c26958-db0c-11e5-94cc-c4a141720410.png\">\n\n_Copied from original issue: Microsoft/vscode-eslint#33_\n",
        "createdAt": "2016-03-09 15:02:55",
        "state": "open",
        "number": 3915
    },
    {
        "title": "Include Code version number in download zip file name",
        "description": "That way you can tell at a glance which version you have without opening the zip file.\n\nAlso suggest don't talk about the \"February release\", \"March release\", etc. That's too imprecise.\n",
        "createdAt": "2016-03-09 08:58:43",
        "state": "open",
        "number": 3900
    },
    {
        "title": "Allow setting a command event instead of an shortcut key in keybindings",
        "description": "Hi,\n\nWould it be possible to set in the extension keybindings configuration an \"command event\" instead of a shortcut key ?\n\nFor example if i want bind the paste action i do\n\n``` json\n\"keybindings\": [{\n  \"command\": \"command.name\",\n  \"key\": \"ctrl+v\",\n  \"when\": \"editorTextFocus\"\n}]\n```\n\nwith the \"command event\" setting, the user can change the default paste shortcut (for crazy reason :smile:) without affecting the extension behavior. This will\n\n``` json\n\"keybindings\": [{\n  \"command\": \"command.name\",\n  \"on\": \"editor.action.clipboardPasteAction\",\n  \"when\": \"editorTextFocus\"\n}]\n```\n\nI hope i was clear.\nThanks in advance.\n",
        "createdAt": "2016-03-05 19:25:36",
        "state": "open",
        "number": 3744
    },
    {
        "title": "Add setting to automatically hide the side bar",
        "description": "Would it be possible to add a option to automatically hide the files explorer after a configurable duration ?\n",
        "createdAt": "2016-03-05 16:27:43",
        "state": "open",
        "number": 3742
    },
    {
        "title": "Hover message/tooltip on ruler when defining decorators",
        "description": "Is there a way to define message/tooltip to be displayed in the `overviewRuler` that is defined when you create a decorator (`createTextEditorDecorationType`)?\n\nI found a way to display a `hoverMessage` when you add the decorator itself (`TextEditor.setDecorations`), but the message is displayed at the left side (between the gutter and the text), not in the ruler.\n\nThis could be an easy way to get information from other places of the document, without scrolling the file. Just move the mouse over the ruler and get the information. Maybe even becoming a _magnifying glass_ :smile: \n\nThanks in advance\n",
        "createdAt": "2016-03-04 00:45:00",
        "state": "open",
        "number": 3698
    },
    {
        "title": "Ctrl-K must cut up to the end of the line into the clipboard",
        "description": "Currently Ctrl-K deletes from cursor to the end of line. Ctrl-K must cut into the clipboard.\n",
        "createdAt": "2016-03-03 18:53:53",
        "state": "open",
        "number": 3684
    },
    {
        "title": "Extensions should be able to contribute file templates via a new UI feature - New File Template ... ",
        "description": "Our extension has several file types that we would like to provide users with a \"starting\" set of boilerplate code.  I would envision a new menu entry in the navigator under `New File` called perhaps `New File Template...` that would pop up a UI that lists extensions that contribute file templates.  The user selects the extension they're interested in, and then they see the file templates for that extension.  For PowerShell we would like to provide the following file templates:\n- Module manifest file (.psd1)\n- PowerShell Gallery Publish PSake script (.ps1)\n- Fileshare Publish PSake script (.ps1)\n- PowerShell Build, Test and Publish tasks (tasks.json)\n\nThe user selects one, presses OK/Close and that file gets placed into their workspace.\n",
        "createdAt": "2016-03-03 17:37:17",
        "state": "open",
        "number": 3680
    },
    {
        "title": "Add support for \"e.key\" keybindings in extension's `contributes.keybindings`",
        "description": "I'm encountering this problem when dealing with different keyboard layout in extension.\n\nSay I have these in my extension's `package.json`:\n\n``` json\n{\n  \"contributes\": {\n    \"keybindings\": [\n      {\n        \"key\": \"\\\\\",\n        \"command\": \"myExtension.backSlash\"\n      }\n    ]\n  }\n}\n```\n\nI'm trying to map `\\` here.\nHowever, what VSCode actually does is map `VK_OEM_5` to `myExtension.backSlash`.\nTherefore, I get `\\ => myExtension.backSlash` on US keyboard (which is correct) but `# => myExtension.backSlash` on British keyboard (which is wrong), which is not correct.\n\nI've done a workaround to deal with different keyboard layouts [here](https://github.com/aioutecism/amVim-for-VSCode/pull/45).\nBut users have to add a setting in configuration in order to tell the extension the layout they are using.\nThis is troublesome and extension shouldn't do all the handling of keyboard layout.\n",
        "createdAt": "2016-03-03 11:49:51",
        "state": "open",
        "number": 3671
    },
    {
        "title": "Function breakpoints - protocol allows condition but no UI to set condition",
        "description": "Maybe I'm missing something in the debug UI experience but I see no way to add a condition to a function breakpoint even though the debug protocol supports it.\n",
        "createdAt": "2016-03-02 19:19:58",
        "state": "open",
        "number": 3646
    },
    {
        "title": "Suggestion: collapse unchanged regions in diff",
        "description": "When viewing a diff (2 pane or inline) it would be useful to collapse the unchanged lines. This helps focus in on just the changes, especially when the changes are few an spread out.\n",
        "createdAt": "2016-02-29 19:40:51",
        "state": "open",
        "number": 3562
    },
    {
        "title": "Get selected file/folder in the explorer view",
        "description": "It would be nice if it was possible to retrieve the selected file/folder in the explorer view. The use case where I want to use it for is my `vscode-yo` extension to be able to run the generator in the selected directory. An API for this would be nice.\n",
        "createdAt": "2016-02-29 12:07:22",
        "state": "open",
        "number": 3553
    },
    {
        "title": "[themes] Themes don't support background styling",
        "description": ".tmTheme files allow specification of background colors which don't seem to be supported, for example:\n\n``` xml\n<dict>\n  <key>name</key>\n  <string>Separator</string>\n  <key>scope</key>\n  <string>meta.separator</string>\n  <key>settings</key>\n  <dict>\n    <key>background</key>\n    <string>#E0E0E0</string>\n    <key>foreground</key>\n    <string>#373B41</string>\n  </dict>\n</dict>\n```\n\nThis is especially problematic for themes that attempt to invert background and use a similar foreground to the text view's background color (https://github.com/Microsoft/vscode/issues/2158)\n",
        "createdAt": "2016-02-24 22:19:33",
        "state": "open",
        "number": 3429
    },
    {
        "title": "[folding] Collapse ending brace to the same line",
        "description": "Consider a large JavaScript file\n\n``` js\nfunction a() {\n  ...\n}\n\nfunction b() {\n  ...\n}\n\nfunction c() {\n  ...\n}\n\nand so on...\n```\n\nCollapsing all currently yields:\n\n``` js\nfunction a() { ...\n}\n\nfunction b() { ...\n}\n\nfunction c() { ...\n}\n\nand so on...\n```\n\nThis would be more readable if the closing brace was on the same line:\n\n``` js\nfunction a() { ... }\n\nfunction b() { ... }\n\nfunction c() { ... }\n\nand so on...\n```\n\n---\n\nHere is how other prominent editors handle the above:\n\n**Atom**\n\n![image](https://cloud.githubusercontent.com/assets/2193314/13259023/7d4c38d2-da0a-11e5-9407-f1c7de7c4a61.png)\n\n**Brackets**\n\n![image](https://cloud.githubusercontent.com/assets/2193314/13259033/8d71e2f2-da0a-11e5-9934-378ecb450179.png)\n\n**Sublime Text 3**\n\n![image](https://cloud.githubusercontent.com/assets/2193314/13259075/aeb3e97e-da0a-11e5-9b0a-7ff709146520.png)\n\n---\n\n**VS Code**\n\n![image](https://cloud.githubusercontent.com/assets/2193314/13259189/29190a8c-da0b-11e5-97bd-3513fb837097.png)\n",
        "createdAt": "2016-02-23 16:55:26",
        "state": "open",
        "number": 3352
    },
    {
        "title": "Keep IntelliSense open when moving cursor through already written identifier",
        "description": "Imagine I have the following code:\n\nfoo.Bar();\n\nwith the cursor after the dot and I invoke IntelliSense it shows all members of foo.\nWhen I press the right arrow key to move the cursor after the B it should stay open and filter the suggestions to those that start with B. Currently it closes and I have to hit Ctrl+Space again to open it.\n",
        "createdAt": "2016-02-23 10:47:42",
        "state": "open",
        "number": 3295
    },
    {
        "title": "Install/Update/Uninstall extension should reload all Code instances",
        "description": "When you install, update or uninstall an extension, a confirmation message is shown and you can _Restart Now_ **Code**. But, it only restarts the current instance (window), and if you want to the other instances, you have to restart one by one, manually. \n\nWhat do you think about adding another option to _Restart All_?\n",
        "createdAt": "2016-02-23 03:47:28",
        "state": "open",
        "number": 3268
    },
    {
        "title": "Custom peek widgets",
        "description": "LightTable and Swift allow for inline evaluation which also places the results in line with the particular line of source which was evaluated.\n\nA new widget would be necessary for this. This widget would be able to hold values or arrays or plots with arrays and plots requiring expansion to be shown fully as to not clutter the editor. The widget would not be dismissed upon losing focus and multiple widgets are possible in the editor.\n\nhttps://github.com/JunoLab/atom-ink and https://github.com/nteract/hydrogen are two examples of this done in atom.\n\nBelow are two example images from Juno which is based on LightTable.\n![image](https://cloud.githubusercontent.com/assets/3878949/13206676/8e2dcb02-d90b-11e5-829a-bab589bdbb8c.png)\n![image](https://cloud.githubusercontent.com/assets/3878949/13206677/948180c0-d90b-11e5-97d0-46cbb3345caa.png)\n",
        "createdAt": "2016-02-22 00:28:19",
        "state": "open",
        "number": 3220
    },
    {
        "title": "Allow customization of mouse shortcuts",
        "description": "Some users would like to be able to customize not just pure keyboard shortcuts but also mouse + modifier ones. These are currently hard coded, for example <kbd>alt</kbd>+click to add a selection.\n\nSee https://github.com/Microsoft/vscode/issues/3091 for some more context.\n",
        "createdAt": "2016-02-18 17:49:30",
        "state": "open",
        "number": 3130
    },
    {
        "title": "API: Allow to use the file watcher for aribitrary folders",
        "description": "vscode 0.10.8, windows 10.\n\n![animation](https://cloud.githubusercontent.com/assets/9464825/13053819/770be720-d441-11e5-92ea-7d9c3f2232da.gif)\n\nlike in the video, branch status updated only when clicking git panel.\nif auto tracking is not possible, how about update status when clicking the sync button in the status bar?\n",
        "createdAt": "2016-02-15 16:13:31",
        "state": "open",
        "number": 3025
    },
    {
        "title": "regex sub match math",
        "description": "```\nTest 300\nTest 301\nTest 302\n```\n\nI can use regex find to loop through these:\n\n```\nTest (3[0-9]*)\n```\n\nWhen I try replace with math it concatenates instead of evaluates?\n\n```\nTest $1-100\n```\n\nSo, it becomes:\n\n```\nTest 300-100\n```\n\nIs it possible to evaluate instead of concatenate, so it becomes:\n\n```\nTest 200\n```\n\nIt works in vim regex:\n\n```\n%s@Test (3[0-9]*)@\\='Test '.(submatch(1)-100)@\n```\n\nThanks.\n",
        "createdAt": "2016-02-10 19:06:52",
        "state": "open",
        "number": 2902
    },
    {
        "title": "Show other invisible characters with renderWhitespace option",
        "description": "just in case atom also render CR, EOL characters\n[0-31 and 127 ASCII code](https://en.wikipedia.org/wiki/ASCII#ASCII_control_code_chart) are non-printable characters\nalso #2085 is related\n",
        "createdAt": "2016-02-10 08:06:05",
        "state": "open",
        "number": 2878
    },
    {
        "title": "Allow extensions to get a LanguageConfiguration for a language",
        "description": "As far as I can tell, extensions can set a `LanguageConfiguration` object for a language with `languages.setLanguageConfiguration()`, but they can't get an existing one. This would be very useful for getting information about the language of the current document.\n",
        "createdAt": "2016-02-09 23:08:53",
        "state": "open",
        "number": 2871
    },
    {
        "title": "Add export, import settings",
        "description": "It would be great if we could export all settings, shortcuts, snippets, extensions in one step and import them in another machine. \n",
        "createdAt": "2016-02-09 04:18:14",
        "state": "open",
        "number": 2816
    },
    {
        "title": "Find Widget doesn't trap focus",
        "description": "The [latest updates](https://code.visualstudio.com/updates) mention the Find Widget's tab order is improved and I agree! Thanks!\n\nHowever, unlike full Visual Studio, tabbing within the widget doesn't confine the focus; eventually I end up back in my document and the only way to get back is `Ctrl+F` or `Ctrl+H`. I'm not sure if this is intentional (with all your other a11y changes) but I generally prefer the way Visual Studio does it.\n\nBug? Setting?\n",
        "createdAt": "2016-02-09 02:06:06",
        "state": "open",
        "number": 2812
    },
    {
        "title": "Support variables when resolving values in settings",
        "description": "Hi,\n\nI was just reading the [latest updates](https://code.visualstudio.com/updates) and it says one can install `typescript@next` globally and then set `typescript.tsdk` so VS Code can use the appropriate version/installation. In a team environment, I'd like to put that setting in our project, something like:\n\n`.vscode/settings.json`:\n\n``` json\n{\n    \"typescript.tsdk\": \"%APPDATA%/npm/node_modules/typescript/lib\"\n}\n```\n\nThe problem is restarting VS Code results in an error:\n\n```\nThe path c:\\Projects\\Derp\\%APPDATA%\\npm\\node_modules\\typescript\\lib doesn't point to a valid tsserver install. TypeScript language features will be disabled.\n```\n\nNow the setting needs to be per-person because I highly doubt my teammates have `tsc` installed in `C:\\Users\\Olson\\AppData\\Roaming\\npm\\node_modules\\typescript\\lib` :wink:\n\nCould we get environment variables evaluated on that and all other settings that involve paths?\n\nI haven't tested other paths, but I see these in the Default Settings:\n- `git.path`\n- `markdown.styles`\n- `json.schemas`\n- `typescript.tsdk`\n- `php.validate.executablePath`\n",
        "createdAt": "2016-02-09 01:18:32",
        "state": "open",
        "number": 2809
    },
    {
        "title": "Navigate Soft Tabs As If They Are Hard Tabs",
        "description": "If implemented properly, the user should not even realize they are working with spaces for indentation, which is one of the greatest pains of a person who prefers tabs for indentation working on a file that has spaces for indentation.\n## Spaces should be treated as if they were tabs under the following conditions\n1. The text editor's `insertSpaces` setting is `true` (or leading spaces precede tab characters on a line).\n2. The cursor is within the range of leading indentation.\n   1. We can't possibly guess where indentation ends and alignment begins, so this includes all leading whitespace (both spaces and tab characters, assuming each tab character is the width of `tabSize`).\n3. The user attempts to do any of the following:\n   1. Arrow-key navigation.\n   2. Backspace.\n   3. Delete.\n   4. Mouse selections (more difficult to implement, I'm sure).\n## Examples of how spaces are treated as tabs\n1. If the cursor is at the beginning of the line and the right arrow key is pressed, the cursor jumps `tabSize` spaces, instead of just one.\n2. If `tabSize` is `4` and the cursor is on position `6` (between tabs) and the left arrow key is pressed, the cursor jumps `2` spaces instead of `4`, landing gracefully on a tab stop.\n3. If `tabSize` is `4` and the cursor is on position `4`, but the first non-whitespace character is on position `6`, then the space on position `5` is assumed to be alignment; thus, a right arrow key press would land on position `5`.\n4. The backspace and delete keys should eliminate up to `tabSize` spaces in one batch, so that a single undo operation restores all of the spaces that were deleted.\n5. Ideally, mouse selections would also be restricted to tab stops, so you can't individually select the spaces between a single indent.\n## Exposing an editor setting\n- Perhaps an editor setting called `navigateSoftTabsAsHard` should be exposed for those who wish to opt in or out of this feature. The default value is debatable.\n",
        "createdAt": "2016-02-08 19:26:06",
        "state": "open",
        "number": 2798
    },
    {
        "title": "Automatically Activate Markdown Preview",
        "description": "I would like to eliminate the step of pressing `ctrl+k v` to preview the md file I open. For the preview should always be on.\n\nThank you\n",
        "createdAt": "2016-02-06 16:11:58",
        "state": "open",
        "number": 2766
    },
    {
        "title": "[ExtensionDev] Expose API to get at file system locations",
        "description": "Some extension relay on hard coded paths that are not exposed by vscode. See for example [code-sittings-sync](https://github.com/shanalikhan/code-settings-sync). Those extension are broken in the insiders version. I see t two possible ways:\n1. Just expose all paths used by vscode to extensions. Otherwise they will hard code them. No more security, just more messy code.\n2. Expose if the extension is used by the insider version. There might be a way, but I have not found it yet. I thought about getting the version and check if it ends with  `-insiders`, but I have not found a way to get this information either.\n",
        "createdAt": "2016-02-05 17:30:24",
        "state": "open",
        "number": 2741
    },
    {
        "title": "activationEvents.workspaceContains doesn't fire for directory",
        "description": "Is this expected?  Also, a general way to detect all workspace-open events, like 'workspaceContains:*' or an onDidChangeWorkspace event would be useful.\n",
        "createdAt": "2016-02-05 16:30:04",
        "state": "open",
        "number": 2739
    },
    {
        "title": "Git: Automatically insert line breaks in git commit messages",
        "description": "I'm trying to get into the habit of writing good commit messages. Not sure if this should be the default but it would be really useful if vscode automatically wrapped commit message lines at say 80 chars and inserted line breaks.\n\nI don't mean changing the appearance of the text in the commit message box, just before it's actually committed. The line length could be in an option too.\n",
        "createdAt": "2016-02-04 19:23:58",
        "state": "open",
        "number": 2718
    },
    {
        "title": "Support to open a project folder in multiple VS Code windows",
        "description": "Currently VS Code prevents opening a folder more than once which makes it impossible to work on a project in multiple windows (e.g. on multiple displays).\r\n\r\n@bpasero @dbaeumer @egamma @alexandrudima please raise any obstacles and issues you might foresee with this request.\r\n \r\nIssues found so far:\r\n- [ ] we use the workspace path as identifier to communicate back from debug target to debug host\r\n- [ ] we need to verify cross platform that there is no code causing issues when running over the same root folder (e.g. file watchers) \r\n\r\n---\r\n\r\n**Please note:** Initially I've created this feature request for a specific use case: enable debugging of multiple processes.\r\nIn the meantime, debugging of multiple processes has become possible without the need for opening a folder more than once (see https://github.com/Microsoft/vscode/issues/13426). But instead of closing this item (as no longer necessary), I've repurposed it by removing the specific debug use case.\r\nFor transparency you can find the original comment below:\r\n\r\n> Currently it is not possible to debug more than one process from a single VS Code project (= window)\r\n> because VS Code prevents opening a folder more than once.\r\n> \r\n> The workaround is to open VS code on a subfolder within the original folder, which means to restructure the project (which is not desirable).\r\n> \r\n> This feature request asks for lifting the constraint and allowing to open a project folder multiple times. \r\n> \r\n",
        "createdAt": "2016-02-03 22:38:23",
        "state": "open",
        "number": 2686
    },
    {
        "title": "postLaunchTask would be very useful",
        "description": "Currently we have the ability to specify a `preLaunchTask` in `launch.json` configurations.  This is extremely helpful in running a task that should kick off before launch.\n\nConversely, there could be **post** launch tasks that would be helpful to automate their execution.  An example of a post launch task would be to, after the launch of the application, open a browser window with a specific URL to the current application.\n\nIn summary, a `postLaunchTask` would be helpful as `preLaunchTask` is.\n",
        "createdAt": "2016-01-27 03:33:55",
        "state": "open",
        "number": 2405
    },
    {
        "title": "Multi page selection in debug console",
        "description": "I assume the console view is virtualized and so I can't copy a large amount of output at once. This is useful when debugging the Chrome adapter since it has a setting to write tons of logs into the console.\n",
        "createdAt": "2016-01-21 23:08:22",
        "state": "open",
        "number": 2163
    },
    {
        "title": "Proposal: Ability not to auto-close comments",
        "description": "As far as I can tell this is not currently available. \n\nOftentimes I need to comment out blocks of code and use `/**` and immediately a `*/` auto inserted resulting in one extra step.  Not a huge deal by any means, but it would be a nice added feature to be able to turn off auto-closures on comments. Or maybe even in the configs an array of chars not to close? If nobody else feels this way though, probably not worth the effort. I suppose I am looking for input on this feature.\n",
        "createdAt": "2016-01-12 22:48:01",
        "state": "open",
        "number": 1966
    },
    {
        "title": "Add fuzzy search to commands in palette",
        "description": "As @bpasero suggested, I'm opening an issue to suggest adding fuzzy search in the palette for commands as well. \n\nHe had an issue with this though, so it could be enabled with a user setting. But I am unsure about his concern.\n\n> The issue with fuzzy matching is that you also need to do fuzzy sorting: more relevant results to the top. However for the command palette we chose to sort entries by name to keep the result list stable and memorable. Enabling fuzzy for commands would change the sort order for each search you do making it harder to learn the list of available commands.\n\nI don't understand how the sort order is relevant when you are looking for a specific command or set of commands. Let's say I would like to look for all Markdown related commands (which start with `Markdown:`): in Sublime, I would only type `md:`, removing practically all unrelevant commands from the results list. The results however would still be sorted by names. Am I misunderstanding his issue?\n\nOnce you're used to search in a fuzzy pattern (often with shortened words like `msg` for message), it is very awkward to go back to typing complete words.\n",
        "createdAt": "2016-01-12 22:23:48",
        "state": "open",
        "number": 1964
    },
    {
        "title": "Add some API to support GUI customization",
        "description": "VS Code is a great coding IDE, but developers love to customize their tools to make them feel like home and VS Code lacks those customization abilities. \n\nI love the sublime material theme and I wanted to implement it in VS Code but as far as I can see it's not possible now because only the coding area is customizable. So in my opinion some improvement in ui customization would be welcomed by a lot of us. In the ideal word every pixel and element of VS Code should be customizable with extensions, but for start it would be enough to start with the following things:\n- customization of the side panel (#427 and #123)\n- adding support for custom tabs, the possibilities of the quick box is very limited (#710)\n- adding the ability to add and remove ui elements (e.g. a bottom panel for error listing like in Atom)\n\nI have read about the [approach](https://code.visualstudio.com/docs/extensions/our-approach) followed by VS Code. So instead of allowing extensions to create custom ui elements, VS Code itself should provide some API for this, what allows to the developers to set the content, but the styling of the content should be based on the theme of VS Code.\n\nSo in a nutshell: VS Code core provide the bones and template of the ui elements, extension developers can set the content but not the style and theme developers can style the content. \n",
        "createdAt": "2016-01-06 17:29:41",
        "state": "open",
        "number": 1833
    },
    {
        "title": "Proposal: Add mnemonics to context menu items",
        "description": "On Windows systems it looks like context menu items don't have accelleration characters assigned to them. Getting used to accessing context menu items by using the keyboard it would be an improvement to see the acceleration character displayed along with the context menu immediately.\n\nSo I suggest to display a context menu item's acceleration character along with the context menu.\n",
        "createdAt": "2016-01-05 11:00:43",
        "state": "open",
        "number": 1792
    },
    {
        "title": "Universal Language Injections",
        "description": "Language injections is a feature of IDEs like Webstorm and PHPStorm that auto-detects when a language is use inside another language and then shows syntax highlighting for that _injected_ language. VS Code currently supports this in a few places:\r\n- `<style>` tags in HTML get CSS highlighting and IntelliSense\r\n- `<script>` tags in HTML get JS highlighting and IntelliSense\r\n- HTML in a PHP file outside of `<?php ?>` gets highlighting but no IntelliSense\r\n\r\nBut there are many other contexts where this would be helpful, that are currently not supported and impossible to all hardcode:\r\n- `style` attribute in HTML contain CSS\r\n- String literals in languages like PHP often contain SQL, see #1361. PHPStorm supports this for PHP, but Webstorm for example does not support this for NodeJS. It should really be supported in any language.\r\n- String literals commonly contain HTML in Javascript or PHP (e.g. with jQuery, Angular or Vue templates)\r\n- String literals commonly contain GraphQL queries in JavaScript\r\n- HTML event attributes contain Javascript, like `onclick=\"event.preventDefault()\"`\r\n- Countless HTML attributes in the Angular framework have Javascript-like expressions in them, like `ng-if=\"ctrl.items.length > 0 && someOtherValue\"`, but also the mustache syntax `{{ ... }}`.\r\n- `<script type=\"text/ng-template\">` contain Angular templates which is nothing but HTML. This pattern of templates in script tags exists in many of the major client side MVC frameworks.\r\n- Javascript has RegExp literals. In other languages like PHP, RegExps are passed as strings. This is also the case in tasks.json problem matchers for VS Code (RegExp inside JSON string)\r\n\r\nAll of these examples currently don't get colored and receive no autocompletion. It would be awesome if VS Code was able to automatically detect languages in any context (like string literals, HTML attributes and tags) by some language patterns, like `< >` tags for HTML/XML, keywords like `SELECT`, `INSERT`, etc. for SQL or template string tags like `gql` for GraphQL. This could be contributed by extensions or language servers.\r\n\r\nThis would be one of the best features VS Code could offer.\r\n",
        "createdAt": "2016-01-03 11:49:06",
        "state": "open",
        "number": 1751
    },
    {
        "title": "shift+tab should only deindent when multiple lines are selected or the cursor in the line's starting whitespace",
        "description": "Ubuntu 12.04, vscode 0.10.5 with settings:\n\n```\n{\n  \"editor.insertSpaces\": true,\n  \"editor.tabSize\": \"auto\",\n}\n```\n\n**Steps to reproduce**\n1. Create a new file\n2. Press <kbd>tab</kbd> twice\n3. Press `}`\n4. Press <kbd>tab</kbd>, the following should be in the text editor:\n   \n   ```\n   \"        }    \"\n   ```\n5. Press <kbd>shift</kbd>+<kbd>tab</kbd> (while the cursor is at the end of the line)\n\n**Expected**\n\nThe tab/spaces at the end of the line should be removed, resulting in:\n\n```\n\"        }\"\n```\n\n**Actual**\n\nThe line is de-indented, resulting in:\n\n```\n\"    }   \"\n```\n\nThis should only happen if the cursor is before the `}`.\n",
        "createdAt": "2015-12-29 17:30:45",
        "state": "open",
        "number": 1692
    },
    {
        "title": "Task and/or Extension Command User Arguments On Entry",
        "description": "I am creating an extension and I want the end user to be able to enter an argument (say string) at the step they select \"Run Task\". The only current workaround I can think of is informing the user to edit the tasks.json file with the arguments, but what I am asking/requesting is that they could enter a one time use argument at the point they call the task from the command pallet, for instance Run Task, then My Task --My Argument. I am having the same issues with extension commands. To my knowledge there is no way to get a user argument into an extension command at the point of execution from the command pallet. \n\nSee my stack overflow on this topic here:\nhttp://stackoverflow.com/questions/34382899/visual-studio-code-user-defined-argument/34385950?noredirect=1#comment56564014_34385950\n",
        "createdAt": "2015-12-22 11:58:04",
        "state": "open",
        "number": 1574
    },
    {
        "title": "Allow editor commands to be registered in extension code without adding to package.json",
        "description": "I've got an idea to allow extra extensibility of VS Code using PowerShell via my extension.  Here's a proposal that I wrote up with some initial ideas:\n\nhttps://github.com/PowerShell/PowerShellEditorServices/issues/81\n\nThe core requirement for my extensibility model is to be able to add new commands to VS Code after my extension has already loaded, without also having to add them to my package.json.  This will allow my users to write new actions, analyzers, and code formatters which they could invoke using VS Code's great keybinding system.\n\nCurrently the API lets you register the ID of the command and the function to be called.  If we could also get parameters for the display name and category of the command it should be enough to accomplish full dynamic command registration.  As a bonus it would nice to have a parameter for registering a default key binding for the command, but it's OK if that comes later.\n\nI realize that there's probably a reason why you'd prefer to have commands be registered in package.json rather than completely in code.  My guess is that it allows the commands to be displayed before the extension is fully loaded.  The dynamic commands I'd like to have wouldn't need to be displayed until the extension is fully loaded anyway, so this doesn't matter as much to me.\n\nThanks for considering this!\n",
        "createdAt": "2015-12-17 15:12:48",
        "state": "open",
        "number": 1422
    },
    {
        "title": "problem matcher that clears only for changed files",
        "description": "I have a watch task that runs various per-file checks (lint, appropriate tests, etc). When it starts up, it runs those checks for all files in the project.  Thereafter, it only runs checks on files that change.\n\nFor the most part, it works great; but the one limitation I'm running into is that _all_ problems for a particular matcher are cleared on a run.\n\nFor example:\n1. I boot up the watch task, and there are problems on `foo.js` and `bar.js`.  The problem matcher picks up on all of these.\n2. I make a change to `foo.js`:\n   \n   a. The watch task re-runs checks for just `foo.js`.\n   b. The problem matcher notices that a re-run has occurred, and blows away all problems of that type\n   c. Only problems for `foo.js` are listed, even though `bar.js` still has issues.\n\nI'd like to avoid building a language server or plugin for this if I can (the watch task is very useful to non VS code users on the team; and problem matchers are wonderfully simple).\n\nOr maybe we could have an option for only clearing problems for files that have changed (or that match a particular expression?)\n",
        "createdAt": "2015-12-16 21:55:34",
        "state": "open",
        "number": 1397
    },
    {
        "title": "Don't suggest snippets in void places",
        "description": "See attached screen shot, I have many snippets defined and they are the only entries that show up when I auto complete inside an object literal, which is weird imho:\n\n<img width=\"512\" alt=\"screen shot 2015-12-14 at 19 29 35\" src=\"https://cloud.githubusercontent.com/assets/900690/11789872/1c19940e-a299-11e5-9ce8-d36a5289feb3.png\">\n",
        "createdAt": "2015-12-14 18:30:25",
        "state": "open",
        "number": 1304
    },
    {
        "title": "Support contributing different keybindings based on keyboard layout",
        "description": "VSCode should ship out of the box with multiple keymaps (based on/optimized for each keyboard layout).\r\ne.g. toggle line comment should be `ctrl+7` on swiss keyboards, etc.\r\n\r\nVSCode should detect at runtime the current system keyboard layout and employ different defaults, based on the keyboard layout.\r\n\r\n",
        "createdAt": "2015-12-14 10:12:45",
        "state": "open",
        "number": 1240
    },
    {
        "title": "vscode/releases page missing binaries",
        "description": "Just wondering... why doesn't the [releases](https://github.com/Microsoft/vscode/releases) page have vscode binaries? I only see the source code downloads. [Atom](https://github.com/atom/atom/releases) and [Brackets](https://github.com/adobe/brackets) both use GitHub to publish binaries...\n\nWould be handy in case someone wanted to download an older release or if Microsoft's servers were down.\n\nInspired by [#1084](https://github.com/Microsoft/vscode/issues/1084)\n",
        "createdAt": "2015-12-13 19:17:32",
        "state": "open",
        "number": 1230
    },
    {
        "title": "Mac OS X :: \"Open Folder With\" VS Code",
        "description": "Hello,\n\nSince Finder is obviously developed by Apple, I'm not sure if this would be possible or not. Is there any way to right-click a folder in Finder, and \"open with VS Code?\" You can do this with individual files, but it would be a nice, small workflow enhancement to be able to open a _folder_ with VS Code, directly from Finder, as well. If not, no big deal. This would be a fault with Finder, rather than VS Code.\n\nHere's a screenshot of right-clicking a folder ... there's no \"Open With\" option. Maybe the **Share** option could work somehow?\n\n<img width=\"367\" alt=\"screen shot 2015-12-12 at 3 20 03 pm\" src=\"https://cloud.githubusercontent.com/assets/466713/11764203/1e1419d4-a0e4-11e5-814e-c2a201c90ef6.png\">\n\nCheers,\nTrevor Sullivan\nMicrosoft MVP: PowerShell\n",
        "createdAt": "2015-12-12 22:22:01",
        "state": "open",
        "number": 1223
    },
    {
        "title": "Support regex in files.exclude => when",
        "description": "I would like to ignore JS files in my project when there's a matching TS _or_ matching TSX file.  Right now I have to choose one or the other.  Please support making the \"when\" directive in the \"files.exclude\" workspace setting use a regex, so I could do this:\n\n``` javascript\n{\n  \"files.exclude\": {\n        \"**/*.js\": { \"when\": \"$(basename).tsx?\"},\n  }\n}\n```\n",
        "createdAt": "2015-12-12 04:29:01",
        "state": "open",
        "number": 1214
    },
    {
        "title": "Selection Highlight stops after 1000 matches",
        "description": "I don't see any setting to control this, so the behavior seems unexpected/unintuitive.\n- Create text file with the line `oh hai` > 1000 times\n##### Scenario 1\n- Single-click `hai` on line 1\n\nExpected: All instances of `hai` are highlighted\nActual: Only the first 500 are highlighted (markers on scrollbar indicate similar)\n\n![image](https://cloud.githubusercontent.com/assets/5943573/11665991/05ccc59e-9d9f-11e5-98b5-a3fa849860a2.png)\n##### Scenario 2\n- Double-click `hai` on line 1\n\nExpected: All instances of `hai` are highlighted\nActual: First 500 instances are bright-highlighted, the next 500 are dim-highlighted, and the rest are un-highlighted.\n\n![image](https://cloud.githubusercontent.com/assets/5943573/11666004/169ccb4e-9d9f-11e5-88b9-9b5190ab5a28.png) ![image](https://cloud.githubusercontent.com/assets/5943573/11666020/29a17f78-9d9f-11e5-8d87-4ab18dd0599e.png)\n\n```\nVersion 0.10.3\nCommit 783ecf841a2b21edca6d86853670cae89b4c244f\nDate 2015-11-26T14:06:31.538Z\nShell 0.34.1\nRenderer 45.0.2454.85\nNode 4.1.1\n```\n",
        "createdAt": "2015-12-08 19:34:12",
        "state": "open",
        "number": 1110
    },
    {
        "title": "Insert key doesn't switch to overtype/overwrite mode",
        "description": "Insert key should switch between insert and overtype modes but it does not.\n\nVersion 0.10.3\nCommit 783ecf841a2b21edca6d86853670cae89b4c244f\nDate 2015-11-26T14:10:14.207Z\nShell 0.34.1\nRenderer 45.0.2454.85\nNode 4.1.1\nUbuntu 14.04\n",
        "createdAt": "2015-12-04 11:42:32",
        "state": "open",
        "number": 1012
    },
    {
        "title": "Explore: Integrated TypeScript building/transpilation",
        "description": "Make it simpler to setup TypeScript compilation.\nCan we make this incrementally?\n",
        "createdAt": "2015-12-03 15:35:12",
        "state": "open",
        "number": 973
    },
    {
        "title": "Don't activate dirty file indicator if the file state matches the previous written state",
        "description": "Vscode show me I have unsaved changes:\n![image](https://cloud.githubusercontent.com/assets/91045/11530276/235e4580-9915-11e5-8e63-f6f2e39159b4.png)\n\nOk, before I saved it, I check md5 for this file.\n![image](https://cloud.githubusercontent.com/assets/91045/11530264/09f00110-9915-11e5-87eb-2566c3bb26b4.png)\n\nAfter save nothing changes.\n![image](https://cloud.githubusercontent.com/assets/91045/11530290/3775d4a2-9915-11e5-8efc-283ae880cce0.png)\n\nIt happens time to time and it's very annoying.\n",
        "createdAt": "2015-12-02 11:56:09",
        "state": "open",
        "number": 919
    },
    {
        "title": "Macro like keybindings",
        "description": "When creating keyboard shortcuts, it would be nice if you could pass an array of commands (to execute like a macro) that would run the commands in that order.\n\nSo take this for example:\n\n```\n{\n    \"key\": \"ctrl+s\",\n    \"command\": [\n        \"editor.action.format\",\n        \"editor.action.trimTrailingWhitespace\",\n        \"workbench.action.files.save\"\n    ],\n    \"when\": \"editorTextFocus\"\n}\n```\n\nIt would format the file, remove trailing white space then save the file.\n",
        "createdAt": "2015-12-01 16:06:17",
        "state": "open",
        "number": 871
    },
    {
        "title": "Exclude all files except for...",
        "description": "The files exclude allows you to set `true/false` values, but it doesn't seem to take them completely into account.\n\nFor example, I would like to hide **everything** except for the scripts folder. You might then assume that this would do this:\n\n```\n{\n    \"files.exclude\":\n    {\n        \"**/*\": true,\n        \"**/Scripts\": false\n    }\n}\n```\n\nIt does not do that, it just hides everything. In order to achieve this, you must list every file and directory except for the **Scripts** directory, and who knows how many directories there are and if a new directory/file gets added you then must edit the list to exclude those.\n\nIn the end, their should be a way to hide everything except for xxx.\n",
        "createdAt": "2015-12-01 15:46:17",
        "state": "open",
        "number": 869
    },
    {
        "title": "Provide encoding-related APIs for editor extensions",
        "description": "Currently there are only two fields in the TextEditorOptions API, a few other TextEditor-related APIs, and none of them is able to deal with the text buffer's encoding.\nComparing to [Atom's TextEdit API](https://atom.io/docs/api/v1.2.4/TextEditor), that is far from enough.\n\nMost importantly, the API limitation makes it (seems) impossible for vscode-editorconfig to implement features like `charset` support, which is a crucial need for many people.\n",
        "createdAt": "2015-11-30 15:25:08",
        "state": "open",
        "number": 824
    },
    {
        "title": "Hide empty folders after apply file exclusions (user settings)",
        "description": "I'm a Unity 3D developer. Although I use file exclusions, it would be nice to hide folder that get empty after file exclusions are applied.\r\n",
        "createdAt": "2015-11-27 19:32:48",
        "state": "open",
        "number": 763
    },
    {
        "title": "Native node modules from extensions",
        "description": "I\u2019m looking to build an extension but one of the packages I need to depend on is a native module. When I do an `npm install` it installs the package just fine, I can launch a node shell and interact with it, etc. But when I go to use the package from within my plugin I get an error as it\u2019s trying to load the ia32 build of the native module not the x64 which was compiled by node-gyp.\n\nA quick bit of debugging indicates that the problem stems by `process.arch` returning `ia32` when running in VS Code when my machine is a x64 machine (Win10 x64).\n\nSo is there some way to either:\n- Have VS Code run an x64 process\n- Have VS Code\u2019s ia32 process do my npm restore (and subsequent compile with node-gyp)\n\nOtherwise I fear that my extension might be dead in the water :frowning: \n",
        "createdAt": "2015-11-25 20:08:44",
        "state": "open",
        "number": 658
    },
    {
        "title": "Link to a file position in Output Channel",
        "description": "_From @ArtemGovorov on October 19, 2015 2:0_\n\nAs mentioned in [this issue](https://github.com/Microsoft/vscode-extensionbuilders/issues/19#issuecomment-148695187), output channel supports link rendering. I'd like to append a link to a workspace file position (by providing a file name, line and column in some form). If it's already possible, could you please paste an example on how to do it?\n\n_Copied from original issue: Microsoft/vscode-extensionbuilders#41_\n",
        "createdAt": "2015-11-24 20:51:17",
        "state": "open",
        "number": 586
    },
    {
        "title": "Support autoClosingPairs for strings like `begin` and `end`",
        "description": "_From @Wosi on October 27, 2015 20:23_\n\nI'd like to define `autoClosingPairs` for Pascal like `begin <-> end`, `if <-> then` etc.\nDefinitions for closing pairs like these seem to be ignored by VSCode. It looks like auto closing is currently supported for character pairs only. \n\nPlease add support for longer auto closing pairs.\n\n_Copied from original issue: Microsoft/vscode-extensionbuilders#66_\n",
        "createdAt": "2015-11-24 20:50:18",
        "state": "open",
        "number": 583
    },
    {
        "title": "Can I get scope / scopeRange at a position?",
        "description": "_From @billti on November 1, 2015 6:10_\n\nThe API call `document.getWordRangeAtPosition(position)` appears to use its own definition of a word. For example, my tmLanguage defines `attrib-name` as a token/scope, yet `getWordRangeAtPosition` appears to break this into 2 words on the `-` character.\n\nHow can I get token ranges at a position based on my custom syntax? (And it would be really useful if I could get the scope name that goes along with it too).\n\n_Copied from original issue: Microsoft/vscode-extensionbuilders#76_\n",
        "createdAt": "2015-11-24 20:49:47",
        "state": "open",
        "number": 580
    },
    {
        "title": "Support more options for formatting text and inserting links to commands in Output Channel",
        "description": "_From @ArtemGovorov on November 18, 2015 5:37_\n\nMore specifically:\n- colors and other text formatting options.\n- inserting links that can execute commands with parameters. I only need to open files, but the existing pattern matching doesn't work for me for 2 reasons: \n  - no relative paths support and long paths don't look good and waste space.\n  - file links open files in the same pane where I had the Output pane opened. What I'd like to do is to open files in a text editor (if it's currently opened as well), so that the text editor and the Output pane could be used side by side.\n\nSo here is what I have in VS Code currently:\n\n![screen shot 2015-11-18 at 2 59 37 pm](https://cloud.githubusercontent.com/assets/979966/11233066/6fca8066-8e05-11e5-9d44-79b8b22dc2a3.png)\n\nHere is what I'd like to have:\n\n<img width=\"423\" alt=\"screen shot 2015-11-18 at 3 03 28 pm\" src=\"https://cloud.githubusercontent.com/assets/979966/11233075/9b670d02-8e05-11e5-9e72-58d8d50e23e9.png\">\n\n_Copied from original issue: Microsoft/vscode-extensionbuilders#124_\n",
        "createdAt": "2015-11-24 20:45:35",
        "state": "open",
        "number": 564
    },
    {
        "title": "Allow to change the font size and font of the workbench",
        "description": "At the moment, we can only change the font size / font of the editor. If we want to change the font size, we need to use a roundabout method of \"zooming in / out\". It would be nice if this could be adjusted through the preferences. \n",
        "createdAt": "2015-11-24 00:52:13",
        "state": "open",
        "number": 519
    },
    {
        "title": "Find widget only highlights the first 19999/20000 matches",
        "description": "Using the search with regular expression in the VS Code 0.10.1, it only highlights the matched items with couple hundreds of lines from the top and skips the rest of the document.\n\nThis can be done by creating an empty document and fill it up with thousands lines of text and perform a regex search.\n",
        "createdAt": "2015-11-23 12:53:51",
        "state": "open",
        "number": 496
    },
    {
        "title": "[html] intellisense should be more context aware",
        "description": "Currently HTML intellisense will present special attributes that are only related to tags but that's about as smart as it gets. Here are some improvements that could be made:\n- Don't suggest attributes that aren't valid on a particular tag (eg. aria widget attributes on a non-widget element)\n- Don't suggest tags that are not valid within the parent tag (eg. `<li>` is the only tag valid within `<ol>` and `<ul>`)\n",
        "createdAt": "2015-11-20 19:28:08",
        "state": "open",
        "number": 375
    },
    {
        "title": "Support workspace extensions",
        "description": "It would be interesting for people working on different projects to have a way to : \n1: Set up extensions for the all team to have an uniform configuration\n2: Have different extensions on different projects\n\nI think that having a list of extensions in the Workspace configuration could solve this. \nOtherwise i'll just have to write an extension for it :-)\n",
        "createdAt": "2015-11-20 13:44:40",
        "state": "open",
        "number": 347
    },
    {
        "title": "[grammars] provide alternative to TextMate grammars",
        "description": "TextMate isn't sufficient for many languages.\n\nWe have been integrating in to the lower level, in the src/vs/languages directory and using Modes.IState and supports.TokenisationSupport. There needs to be a way of writing an extension that can do this, which at least currently there doesn't seem to be,\n\nThanks.\n",
        "createdAt": "2015-11-19 13:33:28",
        "state": "open",
        "number": 216
    },
    {
        "title": "Better drag and drop / clipboard integration of files across applications",
        "description": "This includes being able to drag files and folders from VS Code into other applications as well as to being able to copy a file or folder to the native clipboard.\r\n\r\n**Specifically:**\r\n* copy files/folders from VS Code file explorer to clipboard and paste into native OS explorer\r\n* copy files/folders from native OS explorer and paste into VS Code file explorer\r\n* support the native file data transfer when doing drag and drop (https://github.com/atom/electron/issues/2853)\r\n* support 3rd party tools such as WinRAR to open files from an archive (https://github.com/microsoft/vscode/issues/90196)",
        "createdAt": "2015-11-19 08:31:57",
        "state": "open",
        "number": 164
    },
    {
        "title": "Provide option to opt out of line ending normalisation for files",
        "description": "Upon saving a file edited with VS Code, it appears to perform line ending normalisation automatically and without user notification of any sort. Because of this, I've found myself bitten by large diffs in Git (I'm aware you can circumvent this using the `-w` flag) where a trivial fix to a single line of source code appears to affect a significant proportion of the file, which makes pull requests and reviews for such changes on GitHub a pain to sift through. Then again, I guess one could argue why a source file with mixed line endings should stay in version control like that anyway!\n\nVisual Studio Community displays a prompt upon opening a file if it has mixed line endings and lets a user decide whether or not to have it fixed.\n\n![](http://i.imgur.com/bp9voln.png)\n\n**Version:** 0.10.1\n\n(By the way, great work on open sourcing VS Code too, thanks!)\n",
        "createdAt": "2015-11-19 00:08:06",
        "state": "open",
        "number": 127
    },
    {
        "title": "Git: Support git history in VSCode",
        "description": "It would be awesome to be able to squash commits right from the UI too\n",
        "createdAt": "2015-11-18 17:19:09",
        "state": "open",
        "number": 68
    }
]